var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiOptions.html",[0,1.071,1,2.41]],["body/interfaces/ApiOptions.html",[0,1.885,1,3.379,2,1.83,3,0.064,4,0.064,5,0.064,6,0.049,7,2.057,8,0.049,9,0.511,10,0.241,11,3.709,12,3.865,13,4.29,14,2.915,15,4.18,16,3.525,17,4.038,18,4.29,19,2.026,20,3.865,21,4.29,22,4.038,23,3.678,24,3.709,25,1.775,26,0.125,27,0.01,28,3.104,29,3.006,30,3.104,31,0.682,32,3.555,33,3.954,34,0.21,35,2.656,36,1.652,37,0.141,38,2.057,39,2.057,40,2.057,41,3.314,42,1.766,43,2.76,44,2.989,45,1.707,46,1.307,47,2.989,48,0.691,49,0.837,50,1.6,51,2.431,52,1.707,53,2.76,54,3.006,55,1.952,56,2.481,57,1.694,58,2.76,59,2.869,60,1.071,61,1.859,62,0.803,63,1.802,64,1.51,65,1.547,66,1.802,67,1.438,68,1.668,69,2.869,70,1.586,71,2.4,72,2.4,73,2.567,74,2.989,75,2.869,76,1.974,77,3.123,78,4.233,79,3.123,80,2.253,81,4.691,82,2.253,83,2.253,84,2.057,85,3.123,86,4.496,87,4.106,88,2.149,89,3.123,90,2.253,91,2.253,92,3.856,93,2.253,94,0.246,95,3.123,96,3.865,97,2.253,98,2.253,99,3.123,100,2.253,101,3.123,102,2.149,103,3.123,104,2.149,105,3.123,106,2.149,107,3.123,108,3.568,109,1.899,110,3.568,111,3.274,112,3.274,113,3.123,114,2.253,115,2.253,116,2.253,117,2.149,118,3.123,119,2.253,120,2.253,121,2.149,122,3.123,123,2.989,124,2.253,125,2.253,126,2.253,127,2.253,128,3.123,129,2.253,130,1.868,131,2.253,132,2.068,133,2.068,134,3.679,135,3.123,136,3.274,137,3.274,138,2.253,139,3.274,140,4.233,141,1.193,142,2.253,143,2.253,144,3.274,145,2.149,146,3.123,147,2.253,148,2.253,149,2.253,150,1.707,151,3.123,152,2.481,153,3.123,154,3.123,155,3.123,156,1.626,157,2.431,158,3.679,159,0.63,160,3.123,161,4.475,162,5.26,163,5.26,164,5.26,165,2.149,166,3.123,167,3.865,168,2.149,169,3.123,170,3.274,171,2.149,172,3.123,173,3.857,174,3.274,175,2.149,176,3.123,177,2.76,178,2.149,179,3.123,180,3.274,181,2.149,182,3.123,183,3.274,184,2.149,185,3.123,186,3.679,187,3.123,188,4.691,189,2.149,190,3.123,191,2.149,192,3.123,193,2.149,194,3.123,195,2.149,196,3.123,197,2.149,198,3.123,199,2.149,200,3.123,201,2.149,202,1.755,203,2.989,204,2.989,205,2.869,206,2.149,207,2.149,208,2.057,209,0.528,210,1.766,211,2.149,212,1.899,213,2.253,214,2.253,215,2.253,216,1.473,217,2.057,218,0.603,219,2.149,220,2.149,221,3.709,222,0.877,223,3.379,224,1.395,225,2.828,226,3.856,227,2.254,228,2.567,229,1.148,230,1.038,231,2.828,232,1.586,233,1.83,234,3.132,235,1.83,236,1.652,237,1.83,238,2.015,239,1.398,240,1.755,241,2.989,242,0.498,243,1.899,244,2.253,245,1.83,246,2.188,247,0.837,248,2.253,249,0.471,250,1.766,251,1.974,252,1.766,253,2.149,254,0.162,255,2.253,256,2.253,257,1.6,258,2.253,259,2.057,260,2.149,261,2.989,262,4.18,263,1.24,264,2.057,265,2.057,266,2.057,267,1.42,268,1.216,269,2.664,270,1.974,271,2.76,272,1.899,273,2.869,274,2.149,275,2.76,276,2.149,277,2.989,278,1.974,279,2.989,280,2.869,281,2.007,282,2.057,283,1.83,284,1.711,285,1.974,286,0.742,287,1.652,288,2.057,289,1.652,290,2.057,291,2.253,292,1.974,293,2.149,294,0.807,295,1.707,296,1.766,297,1.652,298,1.652,299,2.057,300,2.149,301,0.096,302,1.974,303,1.899,304,1.83,305,0.005,306,0.005]],["title/classes/ArithmeticFunctions.html",[307,0.343,308,1.954]],["body/classes/ArithmeticFunctions.html",[0,1.304,3,0.041,4,0.041,5,0.041,6,0.072,8,0.031,10,0.125,19,0.603,26,0.115,27,0.01,31,0.553,34,0.441,37,0.136,46,3.153,60,0.981,61,0.633,62,1.181,64,0.665,65,0.681,66,0.793,67,0.633,68,0.734,70,0.698,94,0.242,130,2.367,141,0.662,159,0.447,161,2.216,209,0.941,216,1.429,218,0.456,222,1.137,224,1.885,229,1.489,230,1.284,232,0.698,239,1.214,242,0.867,249,0.821,254,0.16,268,1.594,284,0.753,286,1.461,294,1.2,301,0.125,305,0.004,306,0.004,307,0.641,308,2.378,309,0.105,310,1.024,311,0.527,312,3.697,313,3.697,314,1.703,315,4.179,316,0.168,317,2.294,318,4.076,319,0.578,320,1.703,321,2.294,322,1.703,323,2.294,324,1.6,325,0.734,326,0.814,327,0.618,328,2.258,329,1.183,330,1.057,331,1.552,332,1.507,333,1.507,334,1.465,335,1.424,336,1.424,337,1.465,338,4.111,339,2.37,340,2.44,341,2.76,342,2.76,343,2.84,344,0.963,345,2.146,346,1.841,347,2.104,348,1.348,349,1.918,350,1.057,351,1.057,352,1.057,353,1.057,354,1.424,355,1.057,356,1.057,357,1.057,358,0.992,359,0.753,360,1.424,361,1.057,362,1.057,363,1.703,364,2.14,365,0.575,366,0.716,367,1.057,368,0.716,369,1.057,370,1.057,371,1.057,372,1.057,373,0.773,374,0.992,375,0.992,376,1.057,377,3.318,378,1.057,379,1.057,380,1.057,381,1.057,382,1.057,383,1.057,384,1.057,385,1.057,386,2.931,387,1.057,388,2.237,389,1.057,390,2.787,391,1.057,392,1.057,393,1.057,394,1.057,395,1.057,396,1.057,397,1.057,398,1.057,399,1.057,400,1.057,401,1.057,402,1.098,403,1.057,404,1.057,405,1.057,406,1.057,407,1.057,408,1.057,409,1.057,410,2.852,411,2.692,412,1.057,413,1.057,414,0.649,415,1.057,416,1.057,417,1.703,418,1.057,419,1.057,420,1.024,421,1.057,422,1.024,423,1.5,424,0.231,425,2.222,426,0.814,427,1.968,428,2.315,429,1.606,430,2.877,431,2.14,432,3.583,433,1.735,434,2.02,435,1.703,436,2.14,437,2.454,438,1.703,439,1.057,440,2.14,441,2.14,442,2.454,443,1.703,444,1.057,445,2.14,446,1.057,447,2.073,448,1.057,449,1.057,450,1.057,451,1.057,452,1.057,453,1.057,454,1.057,455,1.057,456,1.057,457,1.057,458,1.057,459,1.057,460,1.057,461,1.385,462,1.057,463,1.057,464,2.073,465,1.057,466,1.057,467,1.057,468,1.057,469,2.073,470,1.057,471,1.703,472,1.057,473,1.057,474,1.057,475,1.057,476,1.057,477,1.057,478,1.057,479,2.14,480,1.057,481,1.057,482,1.057,483,1.057,484,1.057,485,1.057,486,1.057,487,1.057,488,1.057,489,1.057,490,1.057,491,1.057,492,1.057,493,1.057,494,1.057,495,1.057,496,1.057,497,1.057,498,1.057,499,1.057,500,1.057,501,1.057,502,1.057,503,1.057,504,1.057,505,1.057,506,1.057,507,1.057,508,1.057,509,1.057,510,1.057,511,2.073,512,1.057,513,0.992,514,1.703,515,1.057,516,1.703,517,2.073,518,1.057,519,1.057,520,1.057,521,1.057,522,1.057,523,1.057,524,2.073,525,1.057,526,1.057,527,2.454,528,2.692,529,1.703,530,1.057,531,1.057,532,0.734,533,1.057,534,1.057,535,2.14,536,1.057,537,1.057,538,1.057,539,1.057,540,1.057,541,1.057,542,1.057,543,1.057,544,1.057,545,1.057,546,1.057,547,1.057,548,1.057,549,1.057,550,1.057,551,1.057,552,1.057,553,1.057,554,1.057,555,1.057,556,1.057,557,1.057,558,2.073,559,1.057,560,1.057,561,1.057,562,1.057,563,1.057,564,1.057,565,1.057,566,1.057,567,1.057,568,1.057,569,1.057,570,0.859,571,1.65,572,1.057,573,1.057,574,1.057,575,1.057,576,1.894,577,1.507,578,1.057,579,1.057,580,1.057,581,1.057,582,1.057,583,1.057,584,1.057,585,1.057,586,0.793,587,1.057,588,1.057,589,1.057,590,1.057,591,1.74,592,1.057,593,1.057,594,1.057,595,1.057,596,2.073,597,1.057,598,1.057,599,1.057,600,1.057,601,2.787,602,1.057,603,1.024,604,2.787,605,1.057,606,0.859,607,2.454,608,1.057,609,0.773]],["title/classes/ArithmeticOperators.html",[307,0.343,558,1.954]],["body/classes/ArithmeticOperators.html",[0,1.291,3,0.04,4,0.04,5,0.04,6,0.088,8,0.031,10,0.166,19,0.593,26,0.116,27,0.01,31,0.55,34,0.439,37,0.136,46,3.115,60,1.025,61,0.622,62,1.11,64,0.653,65,0.669,66,0.779,67,0.622,68,0.721,70,0.686,94,0.24,130,2.357,141,0.654,159,0.441,209,0.941,216,1.421,218,0.451,222,1.123,224,1.883,229,1.487,230,1.221,232,0.686,239,1.486,242,0.86,249,0.815,254,0.164,268,1.584,284,0.74,286,1.452,294,1.198,301,0.166,305,0.004,306,0.004,307,0.639,308,2.049,309,0.103,310,1.006,311,0.519,314,1.038,315,4.182,316,0.224,318,4.077,319,0.771,320,1.038,322,1.038,324,1.577,325,0.721,326,0.8,327,0.607,328,2.245,329,1.167,330,1.038,331,1.531,332,1.486,333,1.486,334,1.444,335,1.404,336,1.404,337,1.444,338,4.129,339,2.358,340,2.427,341,2.754,342,2.754,343,2.833,344,0.946,345,2.135,346,1.829,347,2.087,348,1.329,349,1.901,350,1.038,351,1.038,352,1.038,353,1.038,354,1.404,355,1.038,356,1.038,357,1.038,358,0.975,359,0.74,360,1.404,361,1.038,362,1.038,363,1.68,364,2.115,365,0.565,366,0.704,367,1.038,368,0.704,369,1.038,370,1.038,371,1.038,372,1.038,373,0.759,374,0.975,375,0.975,376,1.038,377,3.303,378,1.038,379,1.038,380,1.038,381,1.038,382,1.038,383,1.038,384,1.038,385,1.038,386,3.407,387,1.038,388,2.214,389,1.038,390,2.765,391,1.038,392,1.038,393,1.038,394,1.038,395,1.038,396,1.038,397,1.038,398,1.038,399,1.038,400,1.038,401,1.038,402,1.083,403,1.038,404,1.038,405,1.038,406,1.038,407,1.038,408,1.038,409,1.038,410,2.837,411,2.668,412,1.038,413,1.038,414,0.637,415,1.038,416,1.038,417,1.68,418,1.038,419,1.038,420,1.006,421,1.038,422,1.006,423,1.487,424,0.228,425,2.212,426,0.8,427,1.951,428,2.294,429,1.587,430,2.854,431,2.115,432,3.567,433,1.72,434,2.002,435,1.68,436,2.115,437,2.43,438,1.68,439,1.038,440,2.115,441,2.115,442,2.43,443,1.68,444,1.038,445,2.115,446,1.038,447,2.049,448,1.038,449,1.038,450,1.038,451,1.038,452,1.038,453,1.038,454,1.038,455,1.038,456,1.038,457,1.038,458,1.038,459,1.038,460,1.038,461,1.366,462,1.038,463,1.038,464,2.049,465,1.038,466,1.038,467,1.038,468,1.038,469,2.049,470,1.038,471,1.68,472,1.038,473,1.038,474,1.038,475,1.038,476,1.038,477,1.038,478,1.038,479,2.115,480,1.038,481,1.038,482,1.038,483,1.038,484,1.038,485,1.038,486,1.038,487,1.038,488,1.038,489,1.038,490,1.038,491,1.038,492,1.038,493,1.038,494,1.038,495,1.038,496,1.038,497,1.038,498,1.038,499,1.038,500,1.038,501,1.038,502,1.038,503,1.038,504,1.038,505,1.038,506,1.038,507,1.038,508,1.038,509,1.038,510,1.038,511,2.049,512,1.038,513,0.975,514,1.68,515,1.038,516,1.68,517,2.049,518,1.038,519,1.038,520,1.038,521,1.038,522,1.038,523,1.038,524,2.049,525,1.038,526,1.038,527,2.43,528,2.668,529,1.68,530,1.038,531,1.038,532,0.721,533,1.038,534,1.038,535,2.115,536,1.038,537,1.038,538,1.038,539,1.038,540,1.038,541,1.038,542,1.038,543,1.038,544,1.038,545,1.038,546,1.038,547,1.038,548,1.038,549,1.038,550,1.038,551,1.038,552,1.038,553,1.038,554,1.038,555,1.038,556,1.038,557,1.038,558,2.353,559,1.68,560,1.038,561,1.68,562,1.038,563,1.68,564,1.038,565,1.68,566,1.038,567,1.68,568,1.038,569,1.68,570,0.844,571,1.627,572,1.038,573,1.038,574,1.038,575,1.038,576,1.871,577,1.486,578,1.038,579,1.038,580,1.038,581,1.038,582,1.038,583,1.038,584,1.038,585,1.038,586,0.779,587,1.038,588,1.038,589,1.038,590,1.038,591,1.72,592,1.038,593,1.038,594,1.038,595,1.038,596,2.049,597,1.038,598,1.038,599,1.038,600,1.038,601,2.765,602,1.038,603,1.006,604,2.765,605,1.038,606,0.844,607,2.43,608,1.038,609,0.759,610,2.721,611,3.645,612,3.645,613,3.645,614,3.645,615,3.645,616,2.254,617,2.254,618,2.254,619,2.254,620,2.254,621,2.254]],["title/interfaces/Cache.html",[0,1.071,41,1.838]],["body/interfaces/Cache.html",[0,1.91,1,2.961,2,1.912,3,0.067,4,0.067,5,0.067,6,0.085,7,2.149,8,0.051,9,0.312,10,0.144,11,2.063,12,2.149,13,3.223,14,1.621,15,3.332,16,2.649,17,2.245,18,3.223,19,1.808,20,2.149,21,3.223,22,2.245,23,3.099,24,2.063,26,0.122,27,0.01,28,2.477,29,2.4,30,2.477,31,0.677,32,3.273,33,3.641,34,0.219,35,2.722,36,1.726,37,0.141,38,2.149,39,2.149,40,2.149,41,3.415,42,1.845,43,2.848,44,3.085,45,1.783,46,1.366,47,3.085,48,0.721,49,0.874,50,1.672,51,2.492,52,1.783,53,2.848,54,3.068,55,2.015,56,2.56,57,1.736,58,2.848,59,2.961,60,1.08,61,1.897,62,0.828,63,1.859,64,1.558,65,1.597,66,1.859,67,1.484,68,1.721,69,2.961,70,1.637,71,2.477,72,2.477,73,2.649,74,3.085,75,2.961,76,2.063,77,3.223,78,4.32,79,3.223,80,2.354,81,4.762,82,2.354,83,2.354,84,2.149,85,3.223,86,4.574,87,4.177,88,2.245,89,3.223,90,2.354,91,2.354,92,3.953,93,2.354,94,0.248,95,3.223,96,3.944,97,2.354,98,2.354,99,3.223,100,2.354,101,3.223,102,2.245,103,3.223,104,2.245,105,3.223,106,2.245,107,3.223,108,3.641,109,1.984,110,3.641,111,3.379,112,3.379,113,3.223,114,2.354,115,2.354,116,2.354,117,2.245,118,3.223,119,2.354,120,2.354,121,2.245,122,3.223,123,3.085,124,2.354,125,2.354,126,2.354,127,2.354,128,3.223,129,2.354,130,1.915,131,2.354,132,2.119,133,2.119,134,3.771,135,3.223,136,3.379,137,3.379,138,2.354,139,3.379,140,4.32,141,1.203,142,2.354,143,2.354,144,3.379,145,2.245,146,3.223,147,2.354,148,2.354,149,2.354,150,1.783,151,3.223,152,2.56,153,3.223,154,3.223,155,3.223,156,1.678,157,2.492,158,3.771,159,0.651,160,3.223,161,4.543,162,5.304,163,5.304,164,5.304,165,2.245,166,3.223,167,3.944,168,2.245,169,3.223,170,3.379,171,2.245,172,3.223,173,3.889,174,3.379,175,2.245,176,3.223,177,2.848,178,2.245,179,3.223,180,3.379,181,2.245,182,3.223,183,3.379,184,2.245,185,3.223,186,3.771,187,3.223,188,4.762,189,2.245,190,3.223,191,2.245,192,3.223,193,2.245,194,3.223,195,2.245,196,3.223,197,2.245,198,3.223,199,2.245,200,3.223,201,2.245,202,1.812,203,3.085,204,3.085,205,2.961,206,2.245,207,2.245,208,2.149,209,0.545,210,1.845,211,2.245,212,1.984,213,2.354,214,2.354,215,2.354,216,1.495,217,2.149,218,0.618,219,2.245,220,2.245,221,3.786,222,0.917,223,3.464,224,1.423,225,2.898,226,3.953,227,2.327,228,2.649,229,1.171,230,1.253,231,2.898,232,1.637,233,1.912,234,3.211,235,1.912,236,1.726,237,1.912,238,2.066,239,1.433,240,1.812,241,3.085,242,0.52,243,1.984,244,3.379,245,3.211,246,3.182,247,1.255,248,3.379,249,0.707,250,1.845,251,2.063,252,1.845,253,2.245,254,0.168,255,2.354,256,2.354,257,1.672,258,2.354,259,2.149,260,2.245,261,3.085,262,4.23,263,1.295,264,2.149,265,2.149,266,2.149,267,1.484,268,1.255,269,2.699,270,2.063,271,2.848,272,1.984,273,2.961,274,2.245,275,2.848,276,2.245,277,3.085,278,2.063,279,3.085,280,2.961,281,2.071,282,2.149,283,1.912,284,1.766,285,2.063,286,1.303,287,1.726,288,2.149,289,1.726,290,2.149,291,2.354,292,2.063,293,2.245,294,0.827,295,1.783,296,1.845,297,1.726,298,1.726,299,2.149,300,2.245,301,0.195,302,2.063,303,1.984,304,1.912,305,0.005,306,0.005,311,0.766,316,0.194,319,0.669,622,3.379,623,3.746,624,3.746]],["title/classes/CollectionFunctions.html",[307,0.343,464,1.954]],["body/classes/CollectionFunctions.html",[0,1.311,3,0.041,4,0.041,5,0.041,6,0.063,8,0.031,10,0.1,19,0.609,26,0.114,27,0.01,31,0.555,34,0.442,37,0.136,46,3.148,60,0.968,61,0.639,62,1.165,64,0.671,65,0.688,66,0.801,67,0.639,68,0.741,70,0.705,94,0.241,130,2.373,141,0.666,159,0.451,209,0.942,216,1.434,218,0.459,222,1.144,224,1.886,229,1.491,230,1.27,232,0.705,239,1.065,242,0.871,249,0.825,254,0.159,268,1.6,284,0.761,286,1.466,294,1.2,301,0.1,305,0.004,306,0.004,307,0.642,308,2.087,309,0.106,310,1.034,311,0.531,314,1.067,315,4.178,316,0.135,318,4.076,319,0.464,320,1.067,322,1.067,324,1.612,325,0.741,326,0.822,327,0.624,328,2.266,329,1.193,330,1.067,331,1.565,332,1.519,333,1.519,334,1.476,335,1.435,336,1.435,337,1.476,338,4.119,339,2.377,340,2.448,341,2.763,342,2.763,343,2.843,344,0.973,345,2.152,346,1.848,347,2.113,348,1.359,349,1.928,350,1.067,351,1.067,352,1.067,353,1.067,354,1.435,355,1.067,356,1.067,357,1.067,358,1.002,359,0.761,360,1.435,361,1.067,362,1.067,363,1.717,364,2.154,365,0.581,366,0.723,367,1.067,368,0.723,369,1.067,370,1.067,371,1.067,372,1.067,373,0.78,374,1.002,375,1.002,376,1.067,377,3.326,378,1.067,379,1.067,380,1.067,381,1.067,382,1.067,383,1.067,384,1.067,385,1.067,386,2.943,387,1.067,388,2.25,389,1.067,390,2.799,391,1.067,392,1.067,393,1.067,394,1.067,395,1.067,396,1.067,397,1.067,398,1.067,399,1.067,400,1.067,401,1.067,402,1.107,403,1.067,404,1.067,405,1.067,406,1.067,407,1.067,408,1.067,409,1.067,410,2.86,411,2.705,412,1.067,413,1.067,414,0.655,415,1.067,416,1.067,417,1.717,418,1.067,419,1.067,420,1.034,421,1.067,422,1.034,423,1.507,424,0.232,425,2.227,426,0.822,427,1.978,428,2.326,429,1.617,430,2.89,431,2.154,432,3.591,433,1.744,434,2.03,435,1.717,436,2.154,437,2.468,438,1.717,439,1.067,440,2.154,441,2.154,442,2.468,443,1.717,444,1.067,445,2.154,446,1.067,447,2.087,448,1.067,449,1.067,450,1.067,451,1.067,452,1.067,453,1.067,454,1.067,455,1.067,456,1.067,457,1.067,458,1.067,459,1.067,460,1.067,461,1.396,462,1.067,463,1.067,464,2.391,465,1.717,466,1.067,467,1.717,468,1.067,469,2.087,470,1.067,471,1.717,472,1.067,473,1.067,474,1.067,475,1.067,476,1.067,477,1.067,478,1.067,479,2.154,480,1.067,481,1.067,482,1.067,483,1.067,484,1.067,485,1.067,486,1.067,487,1.067,488,1.067,489,1.067,490,1.067,491,1.067,492,1.067,493,1.067,494,1.067,495,1.067,496,1.067,497,1.067,498,1.067,499,1.067,500,1.067,501,1.067,502,1.067,503,1.067,504,1.067,505,1.067,506,1.067,507,1.067,508,1.067,509,1.067,510,1.067,511,2.087,512,1.067,513,1.002,514,1.717,515,1.067,516,1.717,517,2.087,518,1.067,519,1.067,520,1.067,521,1.067,522,1.067,523,1.067,524,2.087,525,1.067,526,1.067,527,2.468,528,2.705,529,1.717,530,1.067,531,1.067,532,0.741,533,1.067,534,1.067,535,2.154,536,1.067,537,1.067,538,1.067,539,1.067,540,1.067,541,1.067,542,1.067,543,1.067,544,1.067,545,1.067,546,1.067,547,1.067,548,1.067,549,1.067,550,1.067,551,1.067,552,1.067,553,1.067,554,1.067,555,1.067,556,1.067,557,1.067,558,2.087,559,1.067,560,1.067,561,1.067,562,1.067,563,1.067,564,1.067,565,1.067,566,1.067,567,1.067,568,1.067,569,1.067,570,0.868,571,1.663,572,1.067,573,1.067,574,1.067,575,1.067,576,1.906,577,1.519,578,1.067,579,1.067,580,1.067,581,1.067,582,1.067,583,1.067,584,1.067,585,1.067,586,0.801,587,1.067,588,1.067,589,1.067,590,1.067,591,1.752,592,1.067,593,1.067,594,1.067,595,1.067,596,2.087,597,1.067,598,1.067,599,1.067,600,1.067,601,2.799,602,1.067,603,1.034,604,2.799,605,1.067,606,0.868,607,2.468,608,1.067,609,0.78,625,3.726,626,3.726,627,2.316,628,2.316]],["title/classes/ComputeExpression.html",[307,0.343,331,1.838]],["body/classes/ComputeExpression.html",[3,0.089,4,0.089,5,0.089,6,0.116,8,0.089,9,0.544,10,0.226,25,1.83,26,0.124,27,0.01,31,0.371,34,0.471,37,0.103,49,1.703,60,0.636,62,1.006,66,2.523,94,0.239,157,1.969,159,0.791,209,0.866,216,1.289,218,0.642,222,1.786,224,1.711,229,1.244,230,1.24,239,1.132,242,0.907,246,3.537,247,1.524,249,0.859,254,0.178,281,2.986,294,0.96,301,0.234,305,0.007,306,0.007,307,0.39,309,0.228,311,0.931,316,0.323,319,1.086,327,1.339,328,2.091,329,2.336,331,3.847,339,2.697,340,2.459,341,2.336,342,2.336,343,2.396,345,2.246,346,2.088,347,1.675,348,2.382,349,2.839,366,2.039,373,1.675,424,0.283,425,1.893,427,1.675,433,2.455,434,2.259,461,2.734,532,1.591,601,3.257,603,2.916,604,3.257,606,2.448,609,1.675,629,4.384,630,4.3,631,4.105,632,4.105,633,3.334,634,4.117,635,2.091,636,2.537,637,6.533,638,2.63,639,3.288,640,6.533,641,4.826,642,4.971,643,4.971,644,4.971,645,4.971,646,4.265,647,4.971,648,0.746,649,3.479,650,4.971,651,4.971,652,2.259,653,2.151,654,4.971,655,4.971,656,3.288,657,3.288,658,3.288,659,4.971,660,5.762,661,3.998,662,2.367,663,7.751,664,2.449,665,2.737,666,2.737,667,2.737,668,2.737,669,4.971,670,4.971,671,2.737,672,4.384,673,4.971,674,2.633,675,2.737,676,4.971,677,2.98,678,4.321,679,3.46,680,4.971]],["title/classes/ConditionalFunctions.html",[307,0.343,524,1.954]],["body/classes/ConditionalFunctions.html",[0,1.316,3,0.042,4,0.042,5,0.042,6,0.051,8,0.032,10,0.063,19,0.613,26,0.114,27,0.01,31,0.556,34,0.443,37,0.137,46,3.14,60,0.952,61,0.644,62,1.146,64,0.676,65,0.693,66,0.806,67,0.644,68,0.746,70,0.71,94,0.241,130,2.377,141,0.669,159,0.453,209,0.942,216,1.437,218,0.461,222,1.149,224,1.887,229,1.492,230,1.253,232,0.71,239,0.854,242,0.873,249,0.827,254,0.157,268,1.604,284,0.766,286,1.469,294,1.201,301,0.063,305,0.004,306,0.004,307,0.643,308,2.096,309,0.107,310,1.041,311,0.534,314,1.074,315,4.177,316,0.084,318,4.075,319,0.29,320,1.074,322,1.074,324,1.621,325,0.746,326,0.828,327,0.628,328,2.271,329,1.199,330,1.074,331,1.573,332,1.528,333,1.528,334,1.484,335,1.443,336,1.443,337,1.484,338,4.117,339,2.382,340,2.453,341,2.765,342,2.765,343,2.845,344,0.979,345,2.156,346,1.852,347,2.12,348,1.366,349,1.935,350,1.074,351,1.074,352,1.074,353,1.074,354,1.443,355,1.074,356,1.074,357,1.074,358,1.009,359,0.766,360,1.443,361,1.074,362,1.074,363,1.726,364,2.164,365,0.585,366,0.728,367,1.074,368,0.728,369,1.074,370,1.074,371,1.074,372,1.074,373,0.786,374,1.009,375,1.009,376,1.074,377,3.419,378,1.074,379,1.074,380,1.074,381,1.074,382,1.074,383,1.074,384,1.074,385,1.074,386,2.951,387,1.074,388,2.258,389,1.074,390,2.808,391,1.074,392,1.074,393,1.074,394,1.074,395,1.074,396,1.074,397,1.074,398,1.074,399,1.074,400,1.074,401,1.074,402,1.113,403,1.074,404,1.074,405,1.074,406,1.074,407,1.074,408,1.074,409,1.074,410,2.866,411,2.715,412,1.074,413,1.074,414,0.659,415,1.074,416,1.074,417,1.726,418,1.074,419,1.074,420,1.041,421,1.074,422,1.041,423,1.513,424,0.233,425,2.231,426,0.828,427,1.985,428,2.334,429,1.624,430,2.899,431,2.164,432,3.597,433,1.75,434,2.037,435,1.726,436,2.164,437,2.478,438,1.726,439,1.074,440,2.164,441,2.164,442,2.478,443,1.726,444,1.074,445,2.164,446,1.074,447,2.096,448,1.074,449,1.074,450,1.074,451,1.074,452,1.074,453,1.074,454,1.074,455,1.074,456,1.074,457,1.074,458,1.074,459,1.074,460,1.074,461,1.404,462,1.074,463,1.074,464,2.096,465,1.074,466,1.074,467,1.074,468,1.074,469,2.096,470,1.074,471,1.726,472,1.074,473,1.074,474,1.074,475,1.074,476,1.074,477,1.074,478,1.074,479,2.164,480,1.074,481,1.074,482,1.074,483,1.074,484,1.074,485,1.074,486,1.074,487,1.074,488,1.074,489,1.074,490,1.074,491,1.074,492,1.074,493,1.074,494,1.074,495,1.074,496,1.074,497,1.074,498,1.074,499,1.074,500,1.074,501,1.074,502,1.074,503,1.074,504,1.074,505,1.074,506,1.074,507,1.074,508,1.074,509,1.074,510,1.074,511,2.096,512,1.074,513,1.009,514,1.726,515,1.074,516,1.726,517,2.096,518,1.074,519,1.074,520,1.074,521,1.074,522,1.074,523,1.074,524,2.4,525,1.726,526,1.074,527,2.478,528,2.715,529,1.726,530,1.074,531,1.074,532,0.746,533,1.074,534,1.074,535,2.164,536,1.074,537,1.074,538,1.074,539,1.074,540,1.074,541,1.074,542,1.074,543,1.074,544,1.074,545,1.074,546,1.074,547,1.074,548,1.074,549,1.074,550,1.074,551,1.074,552,1.074,553,1.074,554,1.074,555,1.074,556,1.074,557,1.074,558,2.096,559,1.074,560,1.074,561,1.074,562,1.074,563,1.074,564,1.074,565,1.074,566,1.074,567,1.074,568,1.074,569,1.074,570,0.874,571,1.672,572,1.074,573,1.074,574,1.074,575,1.074,576,1.915,577,1.528,578,1.074,579,1.074,580,1.074,581,1.074,582,1.074,583,1.074,584,1.074,585,1.074,586,0.806,587,1.074,588,1.074,589,1.074,590,1.074,591,1.76,592,1.074,593,1.074,594,1.074,595,1.074,596,2.096,597,1.074,598,1.074,599,1.074,600,1.074,601,2.808,602,1.074,603,1.041,604,2.808,605,1.074,606,0.874,607,2.478,608,1.074,609,0.786,681,2.332]],["title/classes/CountExpression.html",[307,0.343,332,1.785]],["body/classes/CountExpression.html",[3,0.081,4,0.081,5,0.081,6,0.111,8,0.061,9,0.51,10,0.221,19,1.187,25,1.786,26,0.122,27,0.01,28,2.823,31,0.458,34,0.47,37,0.109,49,1.819,60,0.998,61,2.27,62,0.944,67,1.691,94,0.227,130,2.117,157,1.789,159,0.741,209,0.903,216,1.372,218,0.602,222,2.013,224,1.806,229,1.401,230,1.239,239,1.029,242,0.965,246,3.662,247,1.43,249,0.981,254,0.172,281,2.873,286,1.544,294,1.025,301,0.23,305,0.006,306,0.006,307,0.481,309,0.207,311,0.873,316,0.317,319,1.067,326,1.603,327,1.216,328,2.226,329,2.387,332,3.713,334,2.755,339,2.632,340,2.627,341,2.632,342,2.632,343,2.7,345,2.259,346,2.1,347,2.064,348,2.536,366,1.912,368,1.409,373,1.521,423,1.159,424,0.301,425,2.015,427,2.064,433,2.388,434,2.119,461,2.606,532,1.961,609,1.521,630,4.225,631,3.85,632,3.85,633,3.127,634,3.984,635,1.961,636,2.305,638,2.567,639,2.986,641,2.707,646,4.259,648,0.92,652,2.119,653,1.954,656,2.986,657,2.986,658,2.986,662,2.15,664,2.224,665,2.486,666,2.486,667,2.486,668,2.486,671,2.486,674,2.391,675,2.486,677,2.707,678,2.986,679,4.356,682,3.632,683,4.515,684,3.673,685,4.515,686,4.515,687,4.515,688,4.515,689,4.515,690,3.632,691,4.515,692,4.515,693,4.515,694,4.515,695,4.515,696,4.289,697,6.271,698,2.986,699,4.289,700,3.16,701,3.16,702,3.37,703,2.707,704,3.37,705,3.16,706,3.16,707,3.673,708,2.986,709,3.37,710,3.982,711,3.16,712,3.37,713,3.37,714,3.37,715,3.37,716,3.37,717,3.37,718,3.982,719,3.16,720,2.986,721,3.37,722,4.572,723,4.928,724,2.224,725,4.052,726,2.486,727,2.591,728,3.982,729,3.982]],["title/classes/CountField.html",[307,0.343,697,3.521]],["body/classes/CountField.html",[3,0.085,4,0.085,5,0.085,6,0.116,8,0.065,10,0.213,19,1.257,25,1.658,26,0.119,27,0.01,28,3.516,31,0.475,34,0.478,37,0.112,49,1.854,60,0.976,61,2.193,62,0.736,67,2.106,94,0.23,130,2.42,157,1.893,159,0.77,209,0.909,216,1.412,218,0.469,222,2,224,1.822,229,1.422,230,1.176,242,0.993,246,3.695,247,1.115,249,1.004,254,0.172,281,2.757,286,1.58,294,1.045,301,0.219,305,0.006,306,0.006,307,0.499,309,0.219,311,0.907,316,0.306,319,1.017,326,1.696,327,1.287,328,2.291,329,2.443,332,3.643,334,3.023,339,2.544,340,2.678,341,2.671,342,2.671,343,2.739,345,2.303,346,2.141,347,2.144,348,2.61,366,1.987,368,1.492,373,1.61,423,1.634,424,0.31,425,1.385,427,2.144,433,1.89,434,1.652,532,2.037,609,1.61,630,3.136,634,3.784,635,2.037,646,4.042,648,0.717,652,1.652,653,2.068,662,2.275,664,2.354,665,2.631,666,2.631,667,2.631,668,2.631,671,2.631,674,2.531,675,2.631,677,2.864,678,5.047,679,4.042,682,3.843,684,2.864,696,4.455,697,6.711,698,3.16,699,4.455,700,3.345,701,3.345,702,3.566,703,2.864,704,3.566,705,3.345,706,3.345,707,3.815,708,3.16,709,3.566,710,4.215,711,3.345,712,3.566,713,3.566,714,3.566,715,3.566,716,3.566,717,3.566,718,4.215,719,5.01,720,3.16,721,4.75,722,4.75,723,5.119,724,2.354,725,4.21,726,2.631,727,2.742,728,4.215,729,4.215,730,3.843,731,4.778,732,4.778,733,4.215,734,4.215,735,4.778,736,4.778,737,4.778,738,4.778,739,4.778,740,4.778]],["title/classes/CsdlAction.html",[307,0.343,741,2.511]],["body/classes/CsdlAction.html",[3,0.105,4,0.105,5,0.105,6,0.118,8,0.079,9,0.603,10,0.239,26,0.12,27,0.009,31,0.665,37,0.135,48,1.807,55,2.714,62,1.346,63,2.02,94,0.248,132,2.44,133,2.44,141,1.229,238,2.378,240,2.44,254,0.179,298,3.972,301,0.234,305,0.007,306,0.007,307,0.676,309,0.267,316,0.311,424,0.379,648,1.236,741,4.155,742,2.596,743,3.863,744,5.417,745,5.417,746,1.968,747,5.168,748,5.168,749,5.841,750,5.841,751,5.841,752,5.841,753,5.841,754,5.841,755,3.351,756,3.67,757,3.351,758,3.863,759,3.501,760,3.351,761,3.134]],["title/classes/CsdlActionImport.html",[307,0.343,760,2.511]],["body/classes/CsdlActionImport.html",[3,0.108,4,0.108,5,0.108,6,0.116,8,0.082,9,0.615,10,0.214,26,0.118,27,0.009,31,0.649,37,0.137,48,1.807,55,3.256,62,1.315,63,2.952,94,0.249,132,2.489,133,2.489,141,1.238,238,2.426,240,2.489,254,0.18,298,3.404,301,0.214,305,0.007,306,0.007,307,0.682,309,0.276,316,0.3,424,0.381,648,0.906,741,3.461,742,2.536,743,3.99,744,4.642,745,4.642,746,2.032,747,4.787,748,4.787,755,3.461,756,3.791,757,3.461,758,3.99,759,3.616,760,4.239,761,3.197,762,6.033,763,6.033,764,6.033,765,6.033]],["title/classes/CsdlAnnotable.html",[307,0.343,766,2.41]],["body/classes/CsdlAnnotable.html",[3,0.117,4,0.117,5,0.117,6,0.112,8,0.089,9,0.645,10,0.222,26,0.112,27,0.009,31,0.488,37,0.134,48,1.784,94,0.244,132,2.2,133,2.2,141,1.177,218,0.641,238,2.144,240,2.2,254,0.156,263,2.258,301,0.175,305,0.008,306,0.008,307,0.671,309,0.299,316,0.28,354,2.515,424,0.37,648,0.98,742,2.454,761,2.825,766,4.55,767,4.873,768,5.007,769,6.529,770,4.688,771,6.529,772,6.529,773,3.008,774,4.103,775,4.645,776,3.746,777,4.103,778,4.57,779,3.595,780,4.57]],["title/classes/CsdlAnnotation.html",[307,0.343,770,2.318]],["body/classes/CsdlAnnotation.html",[3,0.115,4,0.115,5,0.115,6,0.115,8,0.087,9,0.64,10,0.22,26,0.115,27,0.009,31,0.481,37,0.134,48,1.788,94,0.248,132,2.171,133,2.171,141,1.171,218,0.633,238,2.116,240,2.171,254,0.154,263,2.943,301,0.173,305,0.008,306,0.008,307,0.668,309,0.295,316,0.297,354,2.483,424,0.369,648,0.968,742,2.527,761,2.789,766,4.234,767,4.81,768,4.412,770,4.508,773,2.97,774,4.05,775,5.29,776,3.698,777,4.05,778,4.512,779,3.549,780,4.512,781,6.445,782,6.445,783,6.445,784,6.445]],["title/classes/CsdlAnnotations.html",[307,0.343,774,2.75]],["body/classes/CsdlAnnotations.html",[3,0.113,4,0.113,5,0.113,6,0.115,8,0.086,9,0.634,10,0.232,26,0.117,27,0.009,31,0.474,37,0.133,48,1.79,94,0.248,132,2.137,133,2.137,141,1.163,218,0.748,238,2.083,240,2.137,254,0.153,263,2.193,301,0.17,305,0.008,306,0.008,307,0.664,309,0.29,316,0.306,354,3.261,424,0.367,638,1.98,648,0.952,742,2.514,761,2.744,766,4.661,767,4.733,768,5.045,770,4.657,773,2.922,774,4.785,775,5.27,776,3.639,777,3.985,778,4.44,779,3.493,780,4.44,785,6.342,786,6.342,787,6.342,788,6.342,789,4.733]],["title/classes/CsdlComplexType.html",[307,0.343,790,2.624]],["body/classes/CsdlComplexType.html",[3,0.105,4,0.105,5,0.105,6,0.098,8,0.079,9,0.75,10,0.242,26,0.119,27,0.009,31,0.679,34,0.343,37,0.133,48,1.785,57,1.618,94,0.245,156,2.781,218,0.775,254,0.178,268,1.368,286,1.214,301,0.157,305,0.007,306,0.007,307,0.665,309,0.268,316,0.316,424,0.367,638,2.693,648,1.272,742,2.156,746,1.976,773,2.702,790,4.352,791,3.048,792,2.889,793,5.931,794,5.893,795,6.236,796,5.893,797,4.465,798,4.465,799,5.864,800,5.172,801,5.172,802,5.172,803,5.172,804,5.172,805,5.172,806,2.889,807,3.106,808,3.998,809,3.515,810,4.562,811,3.878,812,4.105,813,4.562]],["title/classes/CsdlEntityContainer.html",[307,0.343,814,3.267]],["body/classes/CsdlEntityContainer.html",[3,0.111,4,0.111,5,0.111,6,0.121,8,0.084,9,0.625,10,0.244,26,0.12,27,0.009,34,0.473,37,0.097,48,1.782,56,2.953,62,0.955,63,2.144,94,0.239,254,0.173,278,4.738,301,0.166,305,0.008,306,0.008,307,0.487,309,0.284,316,0.319,424,0.325,648,1.292,742,2.652,746,2.089,757,4.937,760,4.937,806,3.982,814,5.607,815,4.59,816,5.47,817,8.605,818,8.605,819,8.605,820,8.605,821,6.422,822,6.422,823,6.201,824,6.201,825,6.201,826,6.201,827,6.201,828,5.47,829,6.201,830,4.102]],["title/classes/CsdlEntitySet.html",[307,0.343,821,3.267]],["body/classes/CsdlEntitySet.html",[3,0.117,4,0.117,5,0.117,6,0.12,8,0.088,9,0.645,10,0.234,26,0.118,27,0.009,31,0.638,34,0.381,37,0.103,48,1.767,57,1.8,94,0.242,254,0.175,287,3.006,301,0.175,302,4.804,305,0.008,306,0.008,307,0.512,309,0.299,316,0.315,424,0.335,648,1.163,742,2.628,746,2.198,759,5.23,806,3.214,815,4.516,821,5.78,831,5.754,832,7.695,833,6.107,834,6.523,835,5.754,836,6.523,837,6.523,838,5.754,839,4.315]],["title/classes/CsdlEntityType.html",[307,0.343,809,2.624]],["body/classes/CsdlEntityType.html",[3,0.102,4,0.102,5,0.102,6,0.111,8,0.077,9,0.747,10,0.245,26,0.12,27,0.009,31,0.683,34,0.333,37,0.132,48,1.789,57,1.572,94,0.244,156,2.767,218,0.764,254,0.177,268,1.329,286,1.739,301,0.153,305,0.007,306,0.007,307,0.659,309,0.261,316,0.32,424,0.364,638,2.674,648,1.305,742,2.422,746,1.919,773,2.624,790,3.414,791,3.424,792,2.806,793,5.904,794,5.863,795,6.205,796,5.863,797,4.437,798,4.437,800,5.024,801,5.024,802,5.024,803,5.024,804,5.024,805,5.024,806,2.806,807,3.017,808,3.926,809,4.274,810,5.277,811,5.554,812,3.987,813,4.48,840,5.695,841,5.695,842,5.024]],["title/classes/CsdlEnumMember.html",[307,0.343,843,3.267]],["body/classes/CsdlEnumMember.html",[3,0.12,4,0.12,5,0.12,6,0.117,8,0.091,9,0.654,10,0.224,26,0.113,27,0.009,31,0.5,37,0.124,48,1.761,51,3.413,60,1.124,94,0.239,141,1.228,254,0.179,283,3.415,301,0.179,305,0.008,306,0.008,307,0.617,309,0.306,316,0.301,424,0.362,648,1.005,742,2.559,746,2.254,792,3.296,843,6.23,844,5.902,845,5.902,846,5.382,847,4.684,848,5.382,849,5.382]],["title/classes/CsdlEnumType.html",[307,0.343,847,3.064]],["body/classes/CsdlEnumType.html",[3,0.116,4,0.116,5,0.116,6,0.12,8,0.088,9,0.643,10,0.234,26,0.118,27,0.009,31,0.637,37,0.121,48,1.776,51,3.502,60,0.83,94,0.243,141,0.925,254,0.178,283,4.447,301,0.174,305,0.008,306,0.008,307,0.606,309,0.297,316,0.315,424,0.357,648,1.159,742,2.625,746,2.186,792,3.197,843,6.502,847,5.404,848,7.008,849,7.008,850,6.49,851,5.724,852,6.49,853,6.49,854,6.49]],["title/classes/CsdlFunction.html",[307,0.343,755,2.511]],["body/classes/CsdlFunction.html",[3,0.103,4,0.103,5,0.103,6,0.119,8,0.078,9,0.598,10,0.238,26,0.12,27,0.009,31,0.675,37,0.135,48,1.808,55,2.693,62,1.357,63,1.995,94,0.248,132,2.421,133,2.421,141,1.225,238,2.36,240,2.421,254,0.179,298,3.96,301,0.234,305,0.007,306,0.007,307,0.674,309,0.264,316,0.315,424,0.378,648,1.23,741,3.31,742,2.617,743,3.816,744,5.401,745,5.401,746,1.944,747,5.152,748,5.152,755,4.124,756,5.297,757,3.31,758,3.816,759,3.459,760,3.31,761,3.11,855,5.769,856,5.769,857,5.769,858,5.769,859,5.769,860,5.769,861,5.769]],["title/classes/CsdlFunctionImport.html",[307,0.343,757,2.511]],["body/classes/CsdlFunctionImport.html",[3,0.106,4,0.106,5,0.106,6,0.117,8,0.081,9,0.609,10,0.228,26,0.119,27,0.009,31,0.667,37,0.136,48,1.807,55,3.244,62,1.334,63,2.055,94,0.249,132,2.466,133,2.466,141,1.234,238,2.403,240,2.466,254,0.179,298,3.372,301,0.213,305,0.007,306,0.007,307,0.679,309,0.272,316,0.307,424,0.38,648,1.099,741,3.41,742,2.571,743,3.93,744,4.599,745,4.599,746,2.002,747,4.755,748,4.755,755,3.41,756,3.734,757,4.2,758,5.623,759,5.096,760,3.41,761,3.167,862,5.942,863,5.942,864,5.942,865,5.942,866,5.942]],["title/classes/CsdlInclude.html",[307,0.343,867,3.064]],["body/classes/CsdlInclude.html",[3,0.117,4,0.117,5,0.117,6,0.116,8,0.089,9,0.647,10,0.222,26,0.112,27,0.009,34,0.383,37,0.13,48,1.769,94,0.246,212,3.473,218,0.644,254,0.132,267,3.391,268,2.038,301,0.176,305,0.008,306,0.008,307,0.65,309,0.3,316,0.299,424,0.371,648,0.985,742,2.542,766,4.278,768,3.763,770,4.115,775,3.931,776,3.763,806,3.23,867,5.794,868,5.275,869,5.784,870,6.557,871,6.557,872,6.557,873,2.753,874,4.59,875,4.894,876,5.275,877,5.438,878,4.894,879,4.894]],["title/classes/CsdlIncludeAnnotations.html",[307,0.343,877,3.064]],["body/classes/CsdlIncludeAnnotations.html",[3,0.116,4,0.116,5,0.116,6,0.118,8,0.088,9,0.641,10,0.233,26,0.115,27,0.009,34,0.377,37,0.129,48,1.775,94,0.248,212,3.42,218,0.634,254,0.13,267,2.558,268,1.506,301,0.173,305,0.008,306,0.008,307,0.645,309,0.296,316,0.307,424,0.369,648,1.156,742,2.584,766,4.239,768,3.705,770,4.077,775,5.215,776,3.705,806,3.181,867,5.388,868,5.193,873,2.711,874,4.519,875,4.819,876,5.193,877,5.756,878,6.355,879,6.493,880,6.456,881,6.456,882,6.456,883,6.456,884,6.456]],["title/classes/CsdlKey.html",[307,0.343,810,2.75]],["body/classes/CsdlKey.html",[3,0.113,4,0.113,5,0.113,6,0.11,8,0.086,9,0.739,10,0.169,26,0.103,27,0.009,31,0.663,34,0.369,37,0.136,48,1.761,57,1.742,94,0.24,156,2.699,218,0.746,254,0.174,268,1.472,286,1.307,301,0.169,305,0.008,306,0.008,307,0.678,309,0.289,316,0.274,424,0.375,742,2.419,773,2.907,790,3.783,791,3.419,792,3.109,793,5.386,794,5.719,795,6.052,796,5.719,797,4.313,798,4.313,806,3.109,807,3.342,808,4.181,809,3.783,810,5.117,811,4.174,812,5.915,813,5.433,885,6.31,886,6.31,887,6.31]],["title/classes/CsdlNavigationProperty.html",[307,0.343,798,2.234]],["body/classes/CsdlNavigationProperty.html",[3,0.104,4,0.104,5,0.104,6,0.117,8,0.079,9,0.602,10,0.242,26,0.124,27,0.009,31,0.673,37,0.133,48,1.796,57,1.607,63,2.014,94,0.248,132,1.962,133,1.962,141,1.12,156,1.818,218,0.772,238,2.922,240,1.962,254,0.175,289,2.683,301,0.156,305,0.007,306,0.007,307,0.663,309,0.267,316,0.319,424,0.366,638,2.454,648,1.269,742,2.558,746,1.962,761,2.52,773,2.683,779,3.207,797,2.972,798,3.689,807,4.563,808,3.98,888,4.076,889,5.777,890,5.59,891,5.59,892,5.59,893,5.916,894,5.311,895,5.311,896,5.823,897,5.823,898,5.823,899,5.823,900,5.823,901,5.136,902,5.136,903,5.136,904,3.659]],["title/classes/CsdlNavigationPropertyBinding.html",[307,0.343,833,3.064]],["body/classes/CsdlNavigationPropertyBinding.html",[3,0.122,4,0.122,5,0.122,6,0.117,8,0.092,9,0.661,10,0.183,26,0.114,27,0.009,29,3.866,37,0.107,48,1.721,57,2.391,94,0.243,254,0.137,287,3.991,301,0.183,305,0.008,306,0.008,307,0.534,309,0.312,316,0.304,354,3.398,424,0.344,742,2.573,833,5.558,905,6.806,906,6.806,907,6.806,908,6.806,909,6.806]],["title/classes/CsdlOnDelete.html",[307,0.343,895,2.75]],["body/classes/CsdlOnDelete.html",[3,0.114,4,0.114,5,0.114,6,0.111,8,0.086,9,0.635,10,0.171,26,0.121,27,0.009,31,0.647,37,0.136,48,1.783,57,1.756,63,2.93,94,0.247,132,2.144,133,2.144,141,1.165,156,1.986,218,0.75,238,2.845,240,2.144,254,0.17,289,2.932,301,0.171,305,0.008,306,0.008,307,0.68,309,0.291,316,0.275,424,0.375,742,2.427,761,2.754,773,2.932,779,3.504,797,3.248,798,3.248,807,4.329,808,4.202,888,4.455,889,5.406,890,4.209,891,4.209,892,4.209,893,4.455,894,4.795,895,5.136,904,3.999,910,6.364,911,6.364,912,6.364]],["title/classes/CsdlParameter.html",[307,0.343,748,2.624]],["body/classes/CsdlParameter.html",[3,0.102,4,0.102,5,0.102,6,0.12,8,0.077,9,0.593,10,0.241,26,0.123,27,0.009,31,0.662,37,0.135,48,1.808,55,2.669,62,1.365,63,1.966,94,0.249,132,2.885,133,2.885,141,1.299,238,2.812,240,2.885,254,0.178,298,3.282,301,0.209,305,0.007,306,0.007,307,0.672,309,0.26,316,0.317,424,0.376,648,1.26,741,3.263,742,2.632,743,3.761,744,4.475,745,4.475,746,1.916,747,4.662,748,4.886,755,3.263,756,3.573,757,3.263,758,3.761,759,3.409,760,3.263,761,3.706,913,5.687,914,5.687,915,5.687,916,5.687,917,5.687,918,5.687,919,5.687,920,5.687]],["title/classes/CsdlProperty.html",[307,0.343,797,2.234]],["body/classes/CsdlProperty.html",[3,0.101,4,0.101,5,0.101,6,0.119,8,0.077,9,0.591,10,0.244,26,0.125,27,0.009,31,0.67,37,0.132,48,1.798,57,1.561,63,1.956,94,0.248,132,2.824,133,2.824,141,1.285,156,1.766,218,0.762,238,2.907,240,2.824,254,0.174,289,2.606,301,0.152,305,0.007,306,0.007,307,0.658,309,0.259,316,0.322,424,0.363,638,2.422,648,1.303,742,2.607,746,1.906,761,3.627,773,2.606,779,4.615,797,3.623,798,2.887,807,4.649,808,3.909,888,3.96,889,5.741,890,3.742,891,3.742,892,3.742,893,3.96,894,4.461,895,4.461,901,4.99,902,4.99,903,4.99,904,5.266,921,5.657,922,5.657,923,5.657,924,5.657,925,5.657,926,5.657,927,5.657]],["title/classes/CsdlPropertyRef.html",[307,0.343,813,2.75]],["body/classes/CsdlPropertyRef.html",[3,0.111,4,0.111,5,0.111,6,0.114,8,0.084,9,0.737,10,0.217,26,0.11,27,0.009,31,0.661,34,0.363,37,0.135,48,1.768,57,1.714,94,0.246,156,2.687,218,0.739,254,0.179,268,2.009,286,1.286,301,0.167,305,0.008,306,0.008,307,0.675,309,0.284,316,0.292,424,0.373,648,0.933,742,2.496,746,2.093,773,2.862,790,3.724,791,3.529,792,3.06,793,5.35,794,5.694,795,6.026,796,5.694,797,4.29,798,4.29,806,3.06,807,3.29,808,4.141,809,3.724,810,4.726,811,4.108,812,4.348,813,5.082,928,6.212,929,6.212,930,4.996]],["title/classes/CsdlReference.html",[307,0.343,874,3.064]],["body/classes/CsdlReference.html",[3,0.114,4,0.114,5,0.114,6,0.117,8,0.086,9,0.634,10,0.238,26,0.117,27,0.009,34,0.371,37,0.128,48,1.78,94,0.242,212,4.587,218,0.748,254,0.128,267,2.515,268,1.481,301,0.17,305,0.008,306,0.008,307,0.641,309,0.291,316,0.313,424,0.367,638,1.981,648,1.226,742,2.572,766,4.663,768,4.969,770,4.587,775,3.805,776,3.642,789,4.737,806,3.127,867,6.062,868,5.106,873,2.665,874,5.333,875,6.319,876,6.966,877,6.062,878,4.737,879,4.737,931,6.348,932,6.348,933,6.348,934,6.348,935,6.348]],["title/classes/CsdlReferentialConstraint.html",[307,0.343,894,2.75]],["body/classes/CsdlReferentialConstraint.html",[3,0.112,4,0.112,5,0.112,6,0.114,8,0.085,9,0.63,10,0.168,26,0.121,27,0.009,31,0.645,37,0.136,48,1.787,57,2.328,63,2.171,94,0.248,132,2.115,133,2.115,141,1.158,156,1.96,218,0.744,238,2.835,240,2.115,254,0.17,289,3.978,301,0.168,305,0.008,306,0.008,307,0.678,309,0.287,316,0.293,424,0.374,742,2.506,761,2.717,773,2.893,779,3.458,797,3.205,798,3.205,807,4.468,808,4.168,888,4.395,889,5.375,890,4.153,891,4.153,892,4.153,893,4.395,894,5.106,895,4.756,904,3.945,936,6.279,937,6.279,938,6.279,939,6.279]],["title/classes/CsdlReturnType.html",[307,0.343,747,2.624]],["body/classes/CsdlReturnType.html",[3,0.103,4,0.103,5,0.103,6,0.119,8,0.078,9,0.597,10,0.241,26,0.122,27,0.009,31,0.663,37,0.135,48,1.808,55,2.689,62,1.357,63,1.99,94,0.248,132,2.894,133,2.894,141,1.301,238,2.82,240,2.894,254,0.173,298,3.307,301,0.21,305,0.007,306,0.007,307,0.674,309,0.263,316,0.315,424,0.377,648,1.265,741,3.303,742,2.615,743,3.807,744,4.51,745,4.51,747,4.908,748,4.688,755,3.303,756,3.617,757,3.303,758,3.807,759,3.451,760,3.303,761,3.717,940,5.756,941,5.756,942,5.756,943,5.756,944,5.756,945,5.756,946,5.756,947,5.756]],["title/classes/CsdlSchema.html",[307,0.343,948,3.521]],["body/classes/CsdlSchema.html",[3,0.099,4,0.099,5,0.099,6,0.122,8,0.075,9,0.582,10,0.248,26,0.124,27,0.009,34,0.497,37,0.087,48,1.798,51,2.19,62,0.852,63,1.912,94,0.234,218,0.687,254,0.111,267,3.197,268,1.942,301,0.148,305,0.007,306,0.007,307,0.434,309,0.253,316,0.326,424,0.303,606,3.119,638,1.726,648,1.342,741,4.776,742,2.68,755,4.776,766,4.443,768,4.776,770,4.409,774,5.23,776,3.172,777,5.23,789,4.126,790,4.99,791,2.321,806,4.189,809,4.99,814,6.212,815,2.822,847,5.826,869,4.876,873,2.321,948,5.628,949,5.528,950,8.323,951,8.323,952,8.323,953,7.342,954,8.323,955,8.323,956,8.323,957,8.323,958,6.212,959,5.528,960,5.528,961,5.528,962,5.528,963,5.528,964,5.528,965,5.528,966,5.528,967,5.528,968,5.528,969,5.528,970,5.528,971,4.447,972,4.447]],["title/classes/CsdlSingleton.html",[307,0.343,822,3.267]],["body/classes/CsdlSingleton.html",[3,0.12,4,0.12,5,0.12,6,0.119,8,0.091,9,0.654,10,0.224,26,0.123,27,0.009,34,0.391,37,0.105,48,1.752,57,1.843,94,0.243,254,0.176,287,3.078,301,0.179,305,0.008,306,0.008,307,0.524,309,0.306,316,0.311,424,0.34,648,1.003,742,2.607,746,2.25,806,3.291,822,5.861,833,6.145,839,4.418,973,6.679,974,8.779,975,6.679,976,6.679,977,6.679,978,6.679]],["title/classes/CsdlStructuralProperty.html",[307,0.343,889,2.895]],["body/classes/CsdlStructuralProperty.html",[3,0.111,4,0.111,5,0.111,6,0.117,8,0.084,9,0.624,10,0.216,26,0.124,27,0.009,31,0.666,37,0.135,48,1.789,57,1.706,63,2.137,94,0.248,132,2.082,133,2.082,141,1.15,156,1.929,218,0.737,238,2.951,240,2.082,254,0.178,289,2.848,301,0.166,305,0.008,306,0.008,307,0.675,309,0.283,316,0.303,424,0.372,648,0.928,742,2.553,746,2.082,761,2.675,773,2.848,779,3.404,797,3.155,798,3.155,807,4.553,808,4.129,888,4.327,889,5.55,890,4.088,891,4.088,892,4.088,893,4.327,894,4.711,895,4.711,904,3.884,979,6.181,980,6.181,981,6.181,982,6.181]],["title/classes/CsdlStructuredType.html",[307,0.343,793,2.895]],["body/classes/CsdlStructuredType.html",[3,0.105,4,0.105,5,0.105,6,0.12,8,0.079,9,0.75,10,0.242,26,0.118,27,0.009,31,0.679,34,0.342,37,0.133,48,1.784,57,1.613,94,0.245,156,2.779,218,0.712,254,0.177,268,1.364,286,1.21,301,0.157,305,0.007,306,0.007,307,0.664,309,0.268,316,0.316,424,0.367,648,1.27,742,2.623,746,1.969,773,2.693,790,3.504,791,3.709,792,2.88,793,5.444,794,5.889,795,6.233,796,5.889,797,4.462,798,4.462,806,2.88,807,3.096,808,3.99,809,3.504,810,4.553,811,3.866,812,4.092,813,4.553,844,5.156,845,5.156,846,4.702,851,5.156,983,5.846,984,5.156,985,5.846]],["title/classes/CsdlTerm.html",[307,0.343,777,2.75]],["body/classes/CsdlTerm.html",[3,0.103,4,0.103,5,0.103,6,0.122,8,0.078,9,0.597,10,0.246,26,0.124,27,0.009,31,0.611,37,0.129,48,1.801,94,0.25,132,2.837,133,2.837,141,1.287,218,0.565,238,2.765,240,2.837,254,0.169,263,1.989,301,0.154,305,0.007,306,0.007,307,0.642,309,0.263,316,0.325,354,2.216,424,0.355,648,1.322,742,2.683,746,1.938,761,3.644,766,3.95,767,4.293,768,4.116,770,4.14,773,2.65,774,3.614,775,4.3,776,3.3,777,4.507,778,5.895,779,4.638,780,5.895,986,5.752,987,5.752,988,5.752,989,5.752,990,5.752,991,5.752,992,5.752,993,5.752,994,5.752,995,5.752,996,5.752]],["title/classes/CsdlTypeDefinition.html",[307,0.343,958,3.267]],["body/classes/CsdlTypeDefinition.html",[3,0.108,4,0.108,5,0.108,6,0.121,8,0.082,9,0.616,10,0.245,26,0.125,27,0.009,31,0.622,34,0.354,37,0.095,48,1.79,94,0.244,132,2.879,133,2.879,141,1.296,218,0.727,240,2.879,254,0.172,301,0.162,305,0.008,306,0.008,307,0.475,309,0.277,316,0.323,424,0.32,638,1.888,648,1.305,742,2.66,746,2.037,761,3.697,766,4.587,768,4.902,770,4.526,776,3.47,789,4.513,806,2.979,873,2.539,904,5.369,958,5.522,997,6.047,998,8.544,999,6.047,1000,6.047,1001,6.047,1002,6.047,1003,6.047,1004,6.047,1005,6.047,1006,6.047]],["title/classes/ExpandExpression.html",[307,0.343,333,1.785]],["body/classes/ExpandExpression.html",[3,0.075,4,0.075,5,0.075,6,0.109,8,0.057,9,0.485,10,0.216,19,1.102,25,1.707,26,0.121,27,0.01,28,2.682,31,0.435,34,0.488,37,0.105,49,1.772,60,0.972,61,1.157,62,0.897,64,1.687,65,2.394,67,1.607,68,1.863,70,1.772,94,0.227,130,2.036,141,0.953,157,1.66,159,0.704,209,0.917,216,1.32,218,0.572,222,1.973,224,1.808,229,1.374,230,1.113,239,0.955,242,0.928,246,3.688,247,1.561,249,0.95,254,0.17,281,2.784,286,1.496,294,0.999,301,0.227,305,0.006,306,0.006,307,0.457,309,0.192,311,0.83,316,0.313,319,1.052,326,1.488,327,1.129,328,2.141,329,2.631,333,3.696,334,2.65,335,2.576,336,2.242,337,2.863,339,2.58,340,2.558,341,2.58,342,2.58,343,2.647,345,2.201,346,2.046,347,1.961,348,2.123,360,1.614,365,1.051,366,2.088,368,1.308,373,1.412,423,1.076,424,0.29,425,1.938,427,1.961,433,2.334,434,2.013,461,2.506,513,2.894,532,1.863,609,1.412,630,4.164,631,3.658,632,3.658,633,2.971,634,3.914,635,1.863,636,2.139,638,2.516,639,2.772,641,3.49,646,4.421,648,0.874,652,2.013,653,1.814,656,2.772,657,2.772,658,2.772,662,1.996,664,2.065,665,2.308,666,2.308,667,2.308,668,2.308,671,2.308,674,2.22,675,2.308,677,2.512,678,3.85,679,3.828,684,3.49,690,3.371,696,4.075,698,2.772,699,4.075,700,4.075,701,2.934,702,3.128,703,2.512,704,3.128,705,2.934,706,2.934,707,3.49,708,2.772,709,3.128,711,2.934,712,3.128,713,5.667,714,3.128,715,3.128,716,3.128,717,3.128,719,2.934,720,2.772,721,3.128,722,4.345,724,2.065,726,2.308,727,2.405,1007,3.371,1008,4.191,1009,4.191,1010,4.191,1011,3.697,1012,3.697,1013,4.191,1014,6.108,1015,4.191,1016,4.191,1017,4.191,1018,4.191,1019,4.191,1020,3.371,1021,4.075,1022,4.075,1023,4.345,1024,3.697,1025,4.683,1026,4.683,1027,4.683,1028,3.371,1029,3.371,1030,3.371,1031,3.371,1032,3.697,1033,5.135,1034,3.697,1035,3.697,1036,3.697,1037,5.38,1038,3.697,1039,3.697,1040,3.697,1041,3.697,1042,3.697,1043,3.697,1044,3.697,1045,3.697,1046,3.697,1047,3.697,1048,3.697,1049,3.128,1050,3.697,1051,3.697,1052,3.697,1053,3.697,1054,3.697]],["title/classes/ExpandField.html",[307,0.343,1014,3.521]],["body/classes/ExpandField.html",[3,0.072,4,0.072,5,0.072,6,0.12,8,0.054,10,0.229,19,1.057,25,1.541,26,0.122,27,0.01,28,3.27,31,0.488,34,0.483,37,0.103,49,1.745,60,0.908,61,1.958,62,1.152,64,2.056,65,2.366,67,1.958,68,2.272,70,2.16,71,2.605,72,2.605,75,3.113,94,0.225,130,2.277,141,1.219,157,1.592,159,0.684,209,0.913,216,1.291,218,0.395,222,1.898,224,1.797,229,1.358,230,1.227,242,0.908,246,3.731,247,1.81,249,0.933,254,0.176,281,2.519,286,1.469,294,0.983,301,0.237,305,0.006,306,0.006,307,0.444,309,0.184,311,0.806,316,0.317,319,1.08,326,1.427,327,1.083,328,2.093,329,2.737,333,3.61,334,2.811,335,2.733,336,2.178,337,3.073,339,2.394,340,2.519,341,2.55,342,2.55,343,2.616,345,2.167,346,2.014,347,1.905,348,2.062,360,1.548,365,1.007,366,2.041,368,1.255,373,1.354,423,1.451,424,0.283,425,1.165,427,1.905,433,1.679,434,1.39,513,3.356,532,1.81,609,1.354,630,2.785,634,3.561,635,1.81,641,2.409,646,4.22,648,0.603,652,1.39,653,1.739,662,1.914,664,1.98,665,2.213,666,2.213,667,2.213,668,2.213,671,2.213,674,2.129,675,2.213,677,2.409,678,5.13,679,2.129,684,2.409,696,3.957,698,2.658,699,3.957,700,3.957,701,2.813,702,3,703,2.409,704,3,705,2.813,706,2.813,707,3.389,708,2.658,709,3,711,2.813,712,3,713,5.581,714,3,715,3,716,3,717,3,719,4.578,720,2.658,721,4.219,722,4.219,724,1.98,726,2.213,727,2.306,730,3.233,733,3.545,734,3.545,1007,3.233,1011,3.545,1012,3.545,1014,6.238,1020,3.233,1021,3.957,1022,4.578,1023,4.219,1024,3.545,1025,4.547,1026,4.547,1027,4.547,1028,3.233,1029,3.233,1030,3.233,1031,3.233,1032,3.545,1033,4.987,1034,3.545,1035,3.545,1036,3.545,1037,5.26,1038,3.545,1039,3.545,1040,3.545,1041,3.545,1042,3.545,1043,3.545,1044,4.987,1045,3.545,1046,4.987,1047,3.545,1048,4.987,1049,5.296,1050,3.545,1051,3.545,1052,3.545,1053,3.545,1054,3.545,1055,4.019,1056,4.019,1057,4.019,1058,4.019,1059,4.019,1060,4.019,1061,4.019,1062,3.545,1063,3.545,1064,4.019,1065,4.019,1066,4.019,1067,3.545,1068,4.019,1069,3.545,1070,3.545,1071,4.019,1072,4.019,1073,4.019,1074,4.019,1075,4.019]],["title/classes/Expression.html",[307,0.343,630,2.156]],["body/classes/Expression.html",[3,0.107,4,0.107,5,0.107,6,0.122,8,0.081,9,0.612,10,0.213,25,1.803,26,0.123,27,0.01,31,0.447,34,0.485,37,0.094,94,0.213,156,2.743,159,0.89,209,0.864,216,1.451,224,1.796,229,1.253,249,0.967,254,0.16,301,0.213,305,0.007,306,0.007,307,0.47,309,0.274,311,1.048,316,0.323,319,1.08,327,1.614,328,2.354,329,1.917,339,2.776,340,2.682,341,2.354,342,2.354,343,2.415,345,2.406,346,2.236,347,2.478,366,2.296,423,1.888,424,0.319,425,2.307,427,2.018,428,2.373,461,3.111,609,2.018,630,4.198,631,5.002,634,4.257,635,2.354,636,3.057,653,2.592,674,3.172,726,4.05,1076,5.99,1077,7.355,1078,5.99,1079,5.99,1080,5.99,1081,5.99,1082,5.99,1083,5.99,1084,5.99,1085,4.818,1086,5.99]],["title/classes/Field.html",[222,1.071,307,0.343]],["body/classes/Field.html",[3,0.073,4,0.073,5,0.073,6,0.097,8,0.09,9,0.477,10,0.11,23,3.845,26,0.109,27,0.01,29,1.83,33,3.501,34,0.506,37,0.064,48,1.6,49,2.182,51,2.271,54,2.95,55,2.148,56,2.73,57,1.976,58,2.172,59,2.258,60,0.525,62,1.018,63,2.286,94,0.215,132,1.381,133,1.381,156,1.28,218,0.403,222,1.618,224,0.849,234,2.093,238,1.346,240,1.381,242,1.112,254,0.157,257,2.559,260,2.458,263,1.982,267,1.624,268,0.957,269,1.418,285,2.258,286,0.849,287,1.889,289,1.889,294,1.182,298,1.889,301,0.11,302,3.157,305,0.006,306,0.006,307,0.45,309,0.188,316,0.239,325,1.835,326,1.456,354,1.579,359,1.882,402,1.703,420,1.83,422,1.83,424,0.248,425,1.661,433,2.778,634,1.952,724,4.611,741,2.353,744,2.576,745,2.576,746,1.381,747,2.458,748,2.458,755,2.353,756,2.576,757,2.353,759,2.458,760,2.353,761,1.774,770,2.172,774,2.576,775,2.458,777,2.576,778,2.87,779,2.258,780,2.87,790,2.458,791,1.722,794,2.712,796,2.712,797,2.093,798,2.093,807,2.172,809,2.458,810,2.576,811,2.712,813,2.576,814,3.06,815,2.926,821,3.06,822,3.06,830,2.712,832,3.616,833,2.87,839,2.712,843,3.06,847,2.87,848,3.298,849,3.298,867,2.87,873,2.407,874,4.013,875,3.06,877,2.87,878,3.06,879,3.06,890,2.712,891,2.712,892,2.712,894,2.576,895,2.576,904,2.576,948,4.611,953,3.616,958,3.06,971,3.298,972,3.298,1087,3.616,1088,7.421,1089,4.1,1090,4.1,1091,4.1,1092,8.581,1093,4.611,1094,2.02,1095,3.616,1096,5.057,1097,4.1,1098,2.576,1099,4.1,1100,4.1,1101,4.1,1102,4.1,1103,4.1,1104,4.1,1105,4.1,1106,4.1,1107,4.1,1108,4.1,1109,4.1,1110,4.1,1111,4.1,1112,4.1,1113,4.1,1114,2.87,1115,4.1,1116,4.1,1117,4.1,1118,4.1,1119,4.1,1120,4.1,1121,4.1,1122,4.1,1123,4.1,1124,4.1,1125,4.1,1126,4.1,1127,4.1,1128,4.1,1129,4.1,1130,4.1,1131,4.1,1132,4.1,1133,4.1,1134,4.1,1135,4.1,1136,4.1,1137,4.1,1138,4.1,1139,4.1,1140,4.1,1141,3.963,1142,4.1,1143,4.1,1144,4.1,1145,4.1,1146,4.1,1147,4.1,1148,4.1,1149,4.1,1150,4.1,1151,4.1,1152,4.1,1153,4.1,1154,4.1,1155,4.1,1156,4.1,1157,4.1,1158,4.1,1159,4.1,1160,4.1,1161,4.1,1162,4.1,1163,4.1,1164,4.1,1165,4.1,1166,4.1,1167,4.1,1168,4.1,1169,4.1,1170,4.1,1171,4.1,1172,4.1,1173,4.1,1174,4.1,1175,4.1,1176,4.1,1177,4.1,1178,4.1,1179,4.1,1180,4.1,1181,4.1,1182,4.1,1183,4.1,1184,4.1,1185,5.733,1186,6.611,1187,4.1,1188,4.1,1189,4.1,1190,3.298,1191,4.1,1192,4.1,1193,7.158,1194,5.733,1195,4.1,1196,4.1,1197,4.1,1198,4.1,1199,4.1,1200,4.1,1201,8.647,1202,4.1,1203,5.733,1204,4.1,1205,4.013,1206,4.1,1207,4.1,1208,4.1,1209,4.1,1210,4.1,1211,4.1,1212,4.1,1213,4.1,1214,4.1,1215,4.1,1216,4.1,1217,4.1,1218,4.1,1219,4.1,1220,4.1,1221,4.1,1222,4.107,1223,4.1,1224,3.298,1225,4.1,1226,2.576,1227,4.1,1228,6.611,1229,5.733,1230,6.611,1231,4.1,1232,4.1,1233,4.1,1234,4.1,1235,4.1,1236,4.1,1237,4.1,1238,4.1]],["title/interfaces/FieldParser.html",[0,1.071,237,2.234]],["body/interfaces/FieldParser.html",[0,1.911,1,2.962,2,1.913,3,0.067,4,0.067,5,0.067,6,0.051,7,2.15,8,0.051,9,0.524,10,0.221,11,2.064,12,2.15,13,3.225,14,1.622,15,3.333,16,2.65,17,2.246,18,3.225,19,1.808,20,2.15,21,3.225,22,2.246,23,3.1,24,2.064,26,0.122,27,0.01,28,2.478,29,2.401,30,2.478,31,0.679,32,3.274,33,3.642,34,0.219,35,2.723,36,1.727,37,0.141,38,2.15,39,2.15,40,2.15,41,3.354,42,1.846,43,2.849,44,3.086,45,1.784,46,1.366,47,3.086,48,0.722,49,0.874,50,1.672,51,2.493,52,1.784,53,2.849,54,3.069,55,2.015,56,2.561,57,1.737,58,2.849,59,2.962,60,1.08,61,1.898,62,0.829,63,1.86,64,1.559,65,1.598,66,1.86,67,1.485,68,1.722,69,2.962,70,1.638,71,2.478,72,2.478,73,2.65,74,3.086,75,2.962,76,2.064,77,3.225,78,4.321,79,3.225,80,2.355,81,4.763,82,2.355,83,2.355,84,2.15,85,3.225,86,4.575,87,4.178,88,2.246,89,3.225,90,2.355,91,2.355,92,3.954,93,2.355,94,0.247,95,3.225,96,3.945,97,2.355,98,2.355,99,3.225,100,2.355,101,3.225,102,2.246,103,3.225,104,2.246,105,3.225,106,2.246,107,3.225,108,3.642,109,1.985,110,3.642,111,3.38,112,3.38,113,3.225,114,2.355,115,2.355,116,2.355,117,2.246,118,3.225,119,2.355,120,2.355,121,2.246,122,3.225,123,3.086,124,2.355,125,2.355,126,2.355,127,2.355,128,3.225,129,2.355,130,1.916,131,2.355,132,2.553,133,2.553,134,3.772,135,3.225,136,3.38,137,3.38,138,2.355,139,3.38,140,4.321,141,1.251,142,2.355,143,2.355,144,3.38,145,2.246,146,3.225,147,2.355,148,2.355,149,2.355,150,1.784,151,3.225,152,2.561,153,3.225,154,3.225,155,3.225,156,1.679,157,2.493,158,3.772,159,0.651,160,3.225,161,4.543,162,5.305,163,5.305,164,5.305,165,2.246,166,3.225,167,3.945,168,2.246,169,3.225,170,3.38,171,2.246,172,3.225,173,3.89,174,3.38,175,2.246,176,3.225,177,2.849,178,2.246,179,3.225,180,3.38,181,2.246,182,3.225,183,3.38,184,2.246,185,3.225,186,3.772,187,3.225,188,4.763,189,2.246,190,3.225,191,2.246,192,3.225,193,2.246,194,3.225,195,2.246,196,3.225,197,2.246,198,3.225,199,2.246,200,3.225,201,2.246,202,1.812,203,3.086,204,3.086,205,2.962,206,2.246,207,2.246,208,2.15,209,0.545,210,1.846,211,2.246,212,1.985,213,2.355,214,2.355,215,2.355,216,1.496,217,2.15,218,0.675,219,2.246,220,2.246,221,3.786,222,0.917,223,3.465,224,1.508,225,2.899,226,3.954,227,2.328,228,2.65,229,1.172,230,1.059,231,2.899,232,1.638,233,1.913,234,3.212,235,1.913,236,1.727,237,2.746,238,2.489,239,1.727,240,2.453,241,3.945,242,0.52,243,1.985,244,2.355,245,1.913,246,2.259,247,0.874,248,2.355,249,0.493,250,1.846,251,2.064,252,1.846,253,2.246,254,0.163,255,2.355,256,2.355,257,1.672,258,2.355,259,2.15,260,2.246,261,3.086,262,4.231,263,1.296,264,2.15,265,2.15,266,2.15,267,1.485,268,1.255,269,2.7,270,2.064,271,2.849,272,1.985,273,2.962,274,2.246,275,2.849,276,2.246,277,3.086,278,2.064,279,3.086,280,2.962,281,2.072,282,2.15,283,1.913,284,1.766,285,2.064,286,0.776,287,1.727,288,2.15,289,1.727,290,2.15,291,2.355,292,2.064,293,2.246,294,0.828,295,1.784,296,1.846,297,1.727,298,1.727,299,2.15,300,2.246,301,0.1,302,2.064,303,1.985,304,1.913,305,0.005,306,0.005]],["title/classes/Function.html",[62,0.674,307,0.343]],["body/classes/Function.html",[0,1.297,3,0.041,4,0.041,5,0.041,6,0.092,8,0.031,10,0.142,19,0.598,25,1.151,26,0.117,27,0.01,31,0.571,34,0.44,37,0.136,46,3.119,60,0.924,61,0.627,62,1.178,64,0.659,65,0.675,66,0.786,67,0.627,68,0.728,70,0.692,94,0.241,130,2.442,141,0.658,159,0.444,209,0.941,216,1.425,218,0.453,222,1.13,224,1.886,229,1.488,230,1.236,232,0.692,239,0.518,242,0.863,249,0.896,254,0.164,268,1.589,284,0.746,286,1.456,294,1.199,301,0.156,305,0.004,306,0.004,307,0.64,308,2.06,309,0.104,310,1.014,311,0.523,314,1.047,315,4.175,316,0.236,318,4.067,319,0.724,320,1.047,322,1.047,324,1.588,325,0.728,326,0.807,327,0.612,328,2.251,329,1.175,330,1.047,331,1.541,332,1.496,333,1.496,334,1.454,335,1.414,336,1.414,337,1.454,338,4.11,339,2.409,340,2.535,341,2.757,342,2.773,343,2.836,344,0.954,345,2.248,346,1.989,347,2.205,348,1.338,349,1.909,350,1.047,351,1.047,352,1.047,353,1.047,354,1.414,355,1.047,356,1.047,357,1.047,358,0.984,359,0.746,360,1.414,361,1.047,362,1.047,363,1.691,364,2.127,365,0.57,366,1.441,367,1.047,368,0.709,369,1.047,370,1.047,371,1.047,372,1.047,373,0.766,374,0.984,375,0.984,376,1.047,377,3.31,378,1.047,379,1.047,380,1.047,381,1.047,382,1.047,383,1.047,384,1.047,385,1.047,386,2.921,387,1.047,388,2.225,389,1.047,390,2.776,391,1.047,392,1.047,393,1.047,394,1.047,395,1.047,396,1.047,397,1.047,398,1.047,399,1.047,400,1.047,401,1.047,402,1.09,403,1.047,404,1.047,405,1.047,406,1.047,407,1.047,408,1.047,409,1.047,410,2.845,411,2.679,412,1.047,413,1.047,414,0.643,415,1.047,416,1.047,417,1.691,418,1.047,419,1.047,420,1.014,421,1.047,422,1.014,423,1.597,424,0.252,425,2.217,426,0.807,427,1.959,428,2.304,429,1.596,430,2.865,431,2.127,432,3.575,433,1.943,434,2.15,435,1.691,436,2.127,437,2.441,438,1.691,439,1.047,440,2.127,441,2.127,442,2.441,443,1.691,444,1.047,445,2.127,446,1.047,447,2.06,448,1.047,449,1.047,450,1.047,451,1.047,452,1.047,453,1.047,454,1.047,455,1.047,456,1.047,457,1.047,458,1.047,459,1.047,460,1.047,461,1.375,462,1.047,463,1.047,464,2.06,465,1.047,466,1.047,467,1.047,468,1.047,469,2.06,470,1.047,471,1.691,472,1.047,473,1.047,474,1.047,475,1.047,476,1.047,477,1.047,478,1.047,479,2.127,480,1.047,481,1.047,482,1.047,483,1.047,484,1.047,485,1.047,486,1.047,487,1.047,488,1.047,489,1.047,490,1.047,491,1.047,492,1.047,493,1.047,494,1.047,495,1.047,496,1.047,497,1.047,498,1.047,499,1.047,500,1.047,501,1.047,502,1.047,503,1.047,504,1.047,505,1.047,506,1.047,507,1.047,508,1.047,509,1.047,510,1.047,511,2.06,512,1.047,513,0.984,514,1.691,515,1.047,516,1.691,517,2.06,518,1.047,519,1.047,520,1.047,521,1.047,522,1.047,523,1.047,524,2.06,525,1.047,526,1.047,527,2.441,528,2.679,529,1.691,530,1.047,531,1.047,532,0.728,533,1.047,534,1.047,535,2.127,536,1.047,537,1.047,538,1.047,539,1.047,540,1.047,541,1.047,542,1.047,543,1.047,544,1.047,545,1.047,546,1.047,547,1.047,548,1.047,549,1.047,550,1.047,551,1.047,552,1.047,553,1.047,554,1.047,555,1.047,556,1.047,557,1.047,558,2.06,559,1.047,560,1.047,561,1.047,562,1.047,563,1.047,564,1.047,565,1.047,566,1.047,567,1.047,568,1.047,569,1.047,570,0.852,571,1.638,572,1.047,573,1.047,574,1.047,575,1.047,576,1.882,577,1.496,578,1.047,579,1.047,580,1.047,581,1.047,582,1.047,583,1.047,584,1.047,585,1.047,586,0.786,587,1.047,588,1.047,589,1.047,590,1.047,591,1.73,592,1.047,593,1.047,594,1.047,595,1.047,596,2.06,597,1.047,598,1.047,599,1.047,600,1.047,601,2.776,602,1.047,603,1.014,604,2.776,605,1.047,606,0.852,607,2.441,608,1.047,609,0.766,633,1.873,635,1.175,652,0.786,653,0.984,746,0.766,1239,2.273,1240,2.273,1241,2.273,1242,2.273,1243,2.273,1244,2.273,1245,2.273]],["title/classes/GeoFunctions.html",[307,0.343,517,1.954]],["body/classes/GeoFunctions.html",[0,1.305,3,0.041,4,0.041,5,0.041,6,0.072,8,0.031,10,0.125,19,0.604,26,0.115,27,0.01,31,0.553,34,0.441,37,0.136,46,3.134,60,0.981,61,0.634,62,1.182,64,0.665,65,0.682,66,0.794,67,0.634,68,0.735,70,0.699,94,0.242,130,2.368,141,0.662,159,0.448,209,0.941,216,1.43,218,0.457,222,1.138,224,1.886,229,1.49,230,1.284,232,0.699,239,1.215,242,0.867,249,0.822,254,0.16,268,1.595,284,0.754,286,1.461,294,1.2,301,0.125,305,0.004,306,0.004,307,0.641,308,2.075,309,0.105,310,1.025,311,0.527,314,1.058,315,4.179,316,0.168,318,4.076,319,0.579,320,1.058,322,1.058,324,1.601,325,0.735,326,0.815,327,0.619,328,2.259,329,1.185,330,1.058,331,1.554,332,1.509,333,1.509,334,1.466,335,1.425,336,1.425,337,1.466,338,4.12,339,2.371,340,2.441,341,2.76,342,2.76,343,2.84,344,0.964,345,2.146,346,1.842,347,2.105,348,1.349,349,1.92,350,1.058,351,1.058,352,1.058,353,1.058,354,1.425,355,1.058,356,1.058,357,1.058,358,0.994,359,0.754,360,1.425,361,1.058,362,1.058,363,1.705,364,2.142,365,0.576,366,0.717,367,1.058,368,0.717,369,1.058,370,1.058,371,1.058,372,1.058,373,0.774,374,0.994,375,0.994,376,1.058,377,3.319,378,1.058,379,1.058,380,1.058,381,1.058,382,1.058,383,1.058,384,1.058,385,1.058,386,2.933,387,1.058,388,2.238,389,1.058,390,2.789,391,1.058,392,1.058,393,1.058,394,1.058,395,1.058,396,1.058,397,1.058,398,1.058,399,1.058,400,1.058,401,1.058,402,1.099,403,1.058,404,1.058,405,1.058,406,1.058,407,1.058,408,1.058,409,1.058,410,2.853,411,2.693,412,1.058,413,1.058,414,0.649,415,1.058,416,1.058,417,1.705,418,1.058,419,1.058,420,1.025,421,1.058,422,1.025,423,1.501,424,0.231,425,2.223,426,0.815,427,1.97,428,2.316,429,1.607,430,2.879,431,2.142,432,3.584,433,1.736,434,2.021,435,1.705,436,2.142,437,2.456,438,1.705,439,1.058,440,2.142,441,2.142,442,2.456,443,1.705,444,1.058,445,2.142,446,1.058,447,2.075,448,1.058,449,1.058,450,1.058,451,1.058,452,1.058,453,1.058,454,1.058,455,1.058,456,1.058,457,1.058,458,1.058,459,1.058,460,1.058,461,1.387,462,1.058,463,1.058,464,2.075,465,1.058,466,1.058,467,1.058,468,1.058,469,2.075,470,1.058,471,1.705,472,1.058,473,1.058,474,1.058,475,1.058,476,1.058,477,1.058,478,1.058,479,2.142,480,1.058,481,1.058,482,1.058,483,1.058,484,1.058,485,1.058,486,1.058,487,1.058,488,1.058,489,1.058,490,1.058,491,1.058,492,1.058,493,1.058,494,1.058,495,1.058,496,1.058,497,1.058,498,1.058,499,1.058,500,1.058,501,1.058,502,1.058,503,1.058,504,1.058,505,1.058,506,1.058,507,1.058,508,1.058,509,1.058,510,1.058,511,2.075,512,1.058,513,0.994,514,1.705,515,1.058,516,1.705,517,2.379,518,1.705,519,1.058,520,1.705,521,1.058,522,1.705,523,1.058,524,2.075,525,1.058,526,1.058,527,2.456,528,2.693,529,1.705,530,1.058,531,1.058,532,0.735,533,1.058,534,1.058,535,2.142,536,1.058,537,1.058,538,1.058,539,1.058,540,1.058,541,1.058,542,1.058,543,1.058,544,1.058,545,1.058,546,1.058,547,1.058,548,1.058,549,1.058,550,1.058,551,1.058,552,1.058,553,1.058,554,1.058,555,1.058,556,1.058,557,1.058,558,2.075,559,1.058,560,1.058,561,1.058,562,1.058,563,1.058,564,1.058,565,1.058,566,1.058,567,1.058,568,1.058,569,1.058,570,0.86,571,1.652,572,1.058,573,1.058,574,1.058,575,1.058,576,1.895,577,1.509,578,1.058,579,1.058,580,1.058,581,1.058,582,1.058,583,1.058,584,1.058,585,1.058,586,0.794,587,1.058,588,1.058,589,1.058,590,1.058,591,1.742,592,1.058,593,1.058,594,1.058,595,1.058,596,2.075,597,1.058,598,1.058,599,1.058,600,1.058,601,2.789,602,1.058,603,1.025,604,2.789,605,1.058,606,0.86,607,2.456,608,1.058,609,0.774,1246,3.701,1247,3.701,1248,3.701,1249,2.296,1250,2.296,1251,2.296]],["title/classes/Grouping.html",[307,0.343,388,1.838]],["body/classes/Grouping.html",[0,1.3,3,0.041,4,0.041,5,0.041,6,0.092,8,0.031,10,0.142,19,0.6,25,1.154,26,0.118,27,0.01,31,0.552,34,0.441,37,0.136,46,3.12,60,0.925,61,0.63,62,1.114,64,0.661,65,0.678,66,0.789,67,0.63,68,0.731,70,0.695,94,0.241,130,2.365,141,0.66,159,0.446,209,0.941,216,1.427,218,0.455,222,1.133,224,1.886,229,1.489,230,1.237,232,0.695,239,0.52,242,0.865,249,0.897,254,0.161,268,1.592,284,0.749,286,1.458,294,1.199,301,0.156,305,0.004,306,0.004,307,0.641,308,2.066,309,0.104,310,1.019,311,0.525,314,1.052,315,4.173,316,0.237,318,4.068,319,0.725,320,1.052,322,1.052,324,1.594,325,0.731,326,0.81,327,0.615,328,2.255,329,1.179,330,1.052,331,1.546,332,1.502,333,1.502,334,1.459,335,1.419,336,1.419,337,1.459,338,4.11,339,2.486,340,2.538,341,2.758,342,2.758,343,2.838,344,0.958,345,2.251,346,1.992,347,2.208,348,1.343,349,1.914,350,1.052,351,1.052,352,1.052,353,1.052,354,1.419,355,1.052,356,1.052,357,1.052,358,0.988,359,0.749,360,1.419,361,1.052,362,1.052,363,1.697,364,2.133,365,0.572,366,1.445,367,1.052,368,0.712,369,1.052,370,1.052,371,1.052,372,1.052,373,0.769,374,0.988,375,0.988,376,1.052,377,3.314,378,1.052,379,1.052,380,1.052,381,1.052,382,1.052,383,1.052,384,1.052,385,1.052,386,2.926,387,1.052,388,2.752,389,1.052,390,2.781,391,1.052,392,1.052,393,1.052,394,1.052,395,1.052,396,1.052,397,1.052,398,1.052,399,1.052,400,1.052,401,1.052,402,1.094,403,1.052,404,1.052,405,1.052,406,1.052,407,1.052,408,1.052,409,1.052,410,2.848,411,2.685,412,1.052,413,1.052,414,0.645,415,1.052,416,1.052,417,1.697,418,1.052,419,1.052,420,1.019,421,1.052,422,1.019,423,1.6,424,0.252,425,2.219,426,0.81,427,1.963,428,2.309,429,1.601,430,2.871,431,2.133,432,3.578,433,1.947,434,2.155,435,1.697,436,2.133,437,2.448,438,1.697,439,1.052,440,2.133,441,2.133,442,2.448,443,1.697,444,1.052,445,2.133,446,1.052,447,2.066,448,1.052,449,1.052,450,1.052,451,1.052,452,1.052,453,1.052,454,1.052,455,1.052,456,1.052,457,1.052,458,1.052,459,1.052,460,1.052,461,1.38,462,1.052,463,1.052,464,2.066,465,1.052,466,1.052,467,1.052,468,1.052,469,2.066,470,1.052,471,1.697,472,1.052,473,1.052,474,1.052,475,1.052,476,1.052,477,1.052,478,1.052,479,2.133,480,1.052,481,1.052,482,1.052,483,1.052,484,1.052,485,1.052,486,1.052,487,1.052,488,1.052,489,1.052,490,1.052,491,1.052,492,1.052,493,1.052,494,1.052,495,1.052,496,1.052,497,1.052,498,1.052,499,1.052,500,1.052,501,1.052,502,1.052,503,1.052,504,1.052,505,1.052,506,1.052,507,1.052,508,1.052,509,1.052,510,1.052,511,2.066,512,1.052,513,0.988,514,1.697,515,1.052,516,1.697,517,2.066,518,1.052,519,1.052,520,1.052,521,1.052,522,1.052,523,1.052,524,2.066,525,1.052,526,1.052,527,2.448,528,2.685,529,1.697,530,1.052,531,1.052,532,0.731,533,1.052,534,1.052,535,2.133,536,1.052,537,1.052,538,1.052,539,1.052,540,1.052,541,1.052,542,1.052,543,1.052,544,1.052,545,1.052,546,1.052,547,1.052,548,1.052,549,1.052,550,1.052,551,1.052,552,1.052,553,1.052,554,1.052,555,1.052,556,1.052,557,1.052,558,2.066,559,1.052,560,1.052,561,1.052,562,1.052,563,1.052,564,1.052,565,1.052,566,1.052,567,1.052,568,1.052,569,1.052,570,0.855,571,2.371,572,1.052,573,1.052,574,1.052,575,1.052,576,1.888,577,1.502,578,1.052,579,1.052,580,1.052,581,1.052,582,1.052,583,1.052,584,1.052,585,1.052,586,0.789,587,1.052,588,1.052,589,1.052,590,1.052,591,1.735,592,1.052,593,1.052,594,1.052,595,1.052,596,2.066,597,1.052,598,1.052,599,1.052,600,1.052,601,2.781,602,1.052,603,1.019,604,2.781,605,1.052,606,0.855,607,2.448,608,1.052,609,0.769,633,1.88,635,1.179,652,0.789,653,0.988,1252,2.282,1253,2.282,1254,2.282,1255,2.282,1256,2.282,1257,2.282,1258,2.282,1259,2.282]],["title/classes/Lambda.html",[307,0.343,390,1.954]],["body/classes/Lambda.html",[0,1.298,3,0.041,4,0.041,5,0.041,6,0.092,8,0.031,10,0.142,19,0.598,25,1.152,26,0.117,27,0.01,31,0.552,34,0.44,37,0.136,46,3.119,60,0.924,61,0.628,62,1.113,64,0.659,65,0.676,66,0.787,67,0.628,68,0.728,70,0.693,94,0.242,130,2.443,141,0.658,159,0.444,209,0.941,216,1.426,218,0.454,222,1.13,224,1.886,229,1.488,230,1.236,232,0.693,239,0.518,242,0.863,249,0.896,254,0.161,268,1.724,284,0.747,286,1.457,294,1.199,301,0.156,305,0.004,306,0.004,307,0.64,308,2.061,309,0.104,310,1.015,311,0.523,314,1.048,315,4.173,316,0.236,318,4.067,319,0.724,320,1.048,322,1.048,324,1.589,325,0.728,326,0.808,327,0.613,328,2.252,329,1.176,330,1.048,331,1.542,332,1.498,333,1.498,334,1.455,335,1.415,336,1.415,337,1.455,338,4.11,339,2.41,340,2.536,341,2.757,342,2.757,343,2.837,344,0.955,345,2.249,346,1.99,347,2.205,348,1.339,349,1.91,350,1.048,351,1.048,352,1.048,353,1.048,354,1.415,355,1.048,356,1.048,357,1.048,358,0.984,359,0.747,360,1.415,361,1.048,362,1.048,363,1.692,364,2.128,365,0.57,366,1.442,367,1.048,368,0.71,369,1.048,370,1.048,371,1.048,372,1.048,373,0.766,374,0.984,375,0.984,376,1.048,377,3.311,378,1.048,379,1.048,380,1.048,381,1.048,382,1.048,383,1.048,384,1.048,385,1.048,386,2.922,387,1.048,388,2.226,389,1.048,390,3.14,391,1.048,392,1.048,393,1.048,394,1.048,395,1.048,396,1.048,397,1.048,398,1.048,399,1.048,400,1.048,401,1.048,402,1.091,403,1.048,404,1.048,405,1.048,406,1.048,407,1.048,408,1.048,409,1.048,410,2.845,411,2.681,412,1.048,413,1.048,414,0.643,415,1.048,416,1.048,417,1.692,418,1.048,419,1.048,420,1.015,421,1.048,422,1.015,423,1.597,424,0.252,425,2.217,426,0.808,427,1.96,428,2.305,429,1.597,430,2.867,431,2.128,432,3.576,433,1.944,434,2.151,435,1.692,436,2.128,437,2.443,438,1.692,439,1.048,440,2.128,441,2.128,442,2.443,443,1.692,444,1.048,445,2.128,446,1.048,447,2.061,448,1.048,449,1.048,450,1.048,451,1.048,452,1.048,453,1.048,454,1.048,455,1.048,456,1.048,457,1.048,458,1.048,459,1.048,460,1.048,461,1.376,462,1.048,463,1.048,464,2.061,465,1.048,466,1.048,467,1.048,468,1.048,469,2.061,470,1.048,471,1.692,472,1.048,473,1.048,474,1.048,475,1.048,476,1.048,477,1.048,478,1.048,479,2.128,480,1.048,481,1.048,482,1.048,483,1.048,484,1.048,485,1.048,486,1.048,487,1.048,488,1.048,489,1.048,490,1.048,491,1.048,492,1.048,493,1.048,494,1.048,495,1.048,496,1.048,497,1.048,498,1.048,499,1.048,500,1.048,501,1.048,502,1.048,503,1.048,504,1.048,505,1.048,506,1.048,507,1.048,508,1.048,509,1.048,510,1.048,511,2.061,512,1.048,513,0.984,514,1.692,515,1.048,516,1.692,517,2.061,518,1.048,519,1.048,520,1.048,521,1.048,522,1.048,523,1.048,524,2.061,525,1.048,526,1.048,527,2.867,528,2.681,529,1.692,530,1.048,531,1.048,532,0.728,533,1.048,534,1.048,535,2.128,536,1.048,537,1.048,538,1.048,539,1.048,540,1.048,541,1.048,542,1.048,543,1.048,544,1.048,545,1.048,546,1.048,547,1.048,548,1.048,549,1.048,550,1.048,551,1.048,552,1.048,553,1.048,554,1.048,555,1.048,556,1.048,557,1.048,558,2.061,559,1.048,560,1.048,561,1.048,562,1.048,563,1.048,564,1.048,565,1.048,566,1.048,567,1.048,568,1.048,569,1.048,570,0.852,571,1.639,572,1.048,573,1.048,574,1.048,575,1.048,576,1.883,577,1.498,578,1.048,579,1.048,580,1.048,581,1.048,582,1.048,583,1.048,584,1.048,585,1.048,586,0.787,587,1.048,588,1.048,589,1.048,590,1.048,591,1.731,592,1.048,593,1.048,594,1.048,595,1.048,596,2.061,597,1.048,598,1.048,599,1.048,600,1.048,601,2.777,602,1.048,603,1.015,604,2.777,605,1.048,606,0.852,607,2.443,608,1.048,609,0.766,633,1.875,635,1.176,648,0.342,652,0.787,653,0.984,1260,2.007,1261,2.275,1262,2.275,1263,2.275,1264,2.275,1265,2.275,1266,2.275,1267,2.275]],["title/classes/LambdaOperators.html",[307,0.343,596,1.954]],["body/classes/LambdaOperators.html",[0,1.313,3,0.042,4,0.042,5,0.042,6,0.063,8,0.031,10,0.1,19,0.611,26,0.114,27,0.01,31,0.555,34,0.443,37,0.136,46,3.128,60,0.93,61,0.641,62,1.12,64,0.673,65,0.69,66,0.803,67,0.641,68,0.743,70,0.707,94,0.242,130,2.374,141,0.667,159,0.452,209,0.942,216,1.435,218,0.46,222,1.146,224,1.887,229,1.491,230,1.271,232,0.707,239,0.529,242,0.871,249,0.826,254,0.159,268,1.766,284,0.762,286,1.467,294,1.2,301,0.1,305,0.004,306,0.004,307,0.643,308,2.09,309,0.106,310,1.036,311,0.532,314,1.07,315,4.175,316,0.135,318,4.077,319,0.465,320,1.07,322,1.07,324,1.616,325,0.743,326,0.824,327,0.625,328,2.268,329,1.195,330,1.07,331,1.568,332,1.522,333,1.522,334,1.479,335,1.438,336,1.438,337,1.479,338,4.119,339,2.379,340,2.45,341,2.764,342,2.764,343,2.844,344,0.975,345,2.153,346,1.849,347,2.116,348,1.362,349,1.93,350,1.07,351,1.07,352,1.07,353,1.07,354,1.438,355,1.07,356,1.07,357,1.07,358,1.005,359,0.762,360,1.438,361,1.07,362,1.07,363,1.72,364,2.158,365,0.582,366,0.725,367,1.07,368,0.725,369,1.07,370,1.07,371,1.07,372,1.07,373,0.782,374,1.005,375,1.005,376,1.07,377,3.328,378,1.07,379,1.07,380,1.07,381,1.07,382,1.07,383,1.07,384,1.07,385,1.07,386,2.946,387,1.07,388,2.253,389,1.07,390,3.064,391,1.07,392,1.07,393,1.07,394,1.07,395,1.07,396,1.07,397,1.07,398,1.07,399,1.07,400,1.07,401,1.07,402,1.109,403,1.07,404,1.07,405,1.07,406,1.07,407,1.07,408,1.07,409,1.07,410,2.862,411,2.709,412,1.07,413,1.07,414,0.657,415,1.07,416,1.07,417,1.72,418,1.07,419,1.07,420,1.036,421,1.07,422,1.036,423,1.509,424,0.232,425,2.229,426,0.824,427,1.981,428,2.329,429,1.619,430,2.893,431,2.158,432,3.593,433,1.746,434,2.033,435,1.72,436,2.158,437,2.472,438,1.72,439,1.07,440,2.158,441,2.158,442,2.472,443,1.72,444,1.07,445,2.158,446,1.07,447,2.09,448,1.07,449,1.07,450,1.07,451,1.07,452,1.07,453,1.07,454,1.07,455,1.07,456,1.07,457,1.07,458,1.07,459,1.07,460,1.07,461,1.399,462,1.07,463,1.07,464,2.09,465,1.07,466,1.07,467,1.07,468,1.07,469,2.09,470,1.07,471,1.72,472,1.07,473,1.07,474,1.07,475,1.07,476,1.07,477,1.07,478,1.07,479,2.158,480,1.07,481,1.07,482,1.07,483,1.07,484,1.07,485,1.07,486,1.07,487,1.07,488,1.07,489,1.07,490,1.07,491,1.07,492,1.07,493,1.07,494,1.07,495,1.07,496,1.07,497,1.07,498,1.07,499,1.07,500,1.07,501,1.07,502,1.07,503,1.07,504,1.07,505,1.07,506,1.07,507,1.07,508,1.07,509,1.07,510,1.07,511,2.09,512,1.07,513,1.005,514,1.72,515,1.07,516,1.72,517,2.09,518,1.07,519,1.07,520,1.07,521,1.07,522,1.07,523,1.07,524,2.09,525,1.07,526,1.07,527,2.472,528,2.709,529,1.72,530,1.07,531,1.07,532,0.743,533,1.07,534,1.07,535,2.158,536,1.07,537,1.07,538,1.07,539,1.07,540,1.07,541,1.07,542,1.07,543,1.07,544,1.07,545,1.07,546,1.07,547,1.07,548,1.07,549,1.07,550,1.07,551,1.07,552,1.07,553,1.07,554,1.07,555,1.07,556,1.07,557,1.07,558,2.09,559,1.07,560,1.07,561,1.07,562,1.07,563,1.07,564,1.07,565,1.07,566,1.07,567,1.07,568,1.07,569,1.07,570,0.87,571,1.666,572,1.07,573,1.07,574,1.07,575,1.07,576,1.909,577,1.522,578,1.07,579,1.07,580,1.07,581,1.07,582,1.07,583,1.07,584,1.07,585,1.07,586,0.803,587,1.07,588,1.07,589,1.07,590,1.07,591,1.755,592,1.07,593,1.07,594,1.07,595,1.07,596,2.394,597,1.72,598,1.07,599,1.72,600,1.07,601,2.803,602,1.07,603,1.036,604,2.803,605,1.07,606,0.87,607,2.472,608,1.07,609,0.782,648,0.561,1268,2.322,1269,2.322]],["title/classes/ODataAnnotatable.html",[307,0.343,1270,2.156]],["body/classes/ODataAnnotatable.html",[3,0.105,4,0.105,5,0.105,6,0.115,8,0.08,9,0.657,10,0.212,25,1.578,26,0.119,27,0.01,31,0.542,34,0.343,37,0.114,60,1.055,62,1.215,94,0.237,141,0.836,159,0.71,202,2.447,209,0.859,230,1.215,242,1.008,247,1.369,249,1.037,254,0.158,262,4.178,263,3.025,264,3.367,265,3.367,266,3.367,269,2.85,294,0.955,301,0.221,305,0.007,306,0.007,307,0.57,309,0.269,311,1.035,316,0.298,319,1.074,365,1.821,424,0.254,586,2.029,873,3.803,1270,3.578,1271,5.176,1272,4.167,1273,4.167,1274,3.458,1275,7.263,1276,2.619,1277,4.487,1278,4,1279,4.207,1280,5.868,1281,4.252,1282,4.539,1283,4.539,1284,2.961,1285,4,1286,4.753,1287,5.868,1288,4.061,1289,3.242,1290,4,1291,5.176,1292,5.176,1293,5.176,1294,5.176,1295,3.687,1296,5.176,1297,1.977,1298,5.176,1299,5.176,1300,5.176,1301,5.176,1302,5.176,1303,5.176,1304,5.176,1305,5.176,1306,5.176,1307,5.176,1308,5.176]],["title/classes/ODataAnnotation.html",[307,0.343,1277,2.318]],["body/classes/ODataAnnotation.html",[3,0.107,4,0.107,5,0.107,6,0.12,8,0.081,9,0.709,10,0.242,26,0.119,27,0.01,31,0.594,34,0.35,37,0.116,60,0.941,62,0.922,94,0.243,141,1.048,159,0.724,202,2.477,209,0.841,230,0.922,242,1.02,249,0.967,254,0.12,262,4.512,263,3.038,264,4.566,265,4.566,266,4.566,269,2.542,294,0.967,301,0.16,305,0.007,306,0.007,307,0.577,309,0.274,316,0.317,319,0.99,365,1.5,424,0.259,586,2.069,873,3.641,1270,2.948,1271,5.279,1274,2.85,1277,4.396,1278,3.296,1279,3.752,1281,3.92,1282,4.048,1283,4.048,1285,3.296,1286,4.775,1288,3.622,1289,2.671,1290,3.296,1291,6.484,1292,5.279,1293,5.279,1294,5.279,1295,3.761,1296,5.279,1297,2.016,1298,5.279,1299,5.279,1300,5.279,1301,5.279,1302,5.279,1303,5.279,1304,5.279,1305,5.279,1306,5.279,1307,5.279,1308,5.279,1309,7.352,1310,5.985,1311,5.985,1312,5.985,1313,5.985,1314,5.985]],["title/classes/ODataAnnotations.html",[307,0.343,1315,3.064]],["body/classes/ODataAnnotations.html",[3,0.083,4,0.083,5,0.083,6,0.117,8,0.063,9,0.585,10,0.211,14,1.996,25,1.796,26,0.123,27,0.01,30,2.125,32,3.582,34,0.363,37,0.118,48,1.354,49,1.64,54,3.358,55,2.634,57,1.273,61,1.273,71,2.125,72,2.125,73,2.272,94,0.233,150,2.959,152,3.852,156,2.688,159,0.558,173,3.239,209,0.936,218,0.691,230,1.083,242,0.64,247,1.076,249,1.064,254,0.179,269,2.431,294,1.175,297,3.239,301,0.211,305,0.006,306,0.006,307,0.59,309,0.211,311,0.886,316,0.308,319,0.977,346,2.227,402,2.088,424,0.269,425,1.801,606,2.329,635,1.989,648,0.692,1141,4.214,1289,3.69,1295,3.905,1297,2.726,1315,6.125,1316,3.442,1317,4.506,1318,4.638,1319,3.422,1320,4.612,1321,5.861,1322,3.723,1323,4.976,1324,4.612,1325,4.612,1326,3.442,1327,4.612,1328,4.417,1329,4.612,1330,5.861,1331,4.612,1332,5.861,1333,4.612,1334,4.638,1335,4.612,1336,4.612,1337,4.612,1338,4.612,1339,4.612,1340,3.442,1341,3.442,1342,3.442,1343,3.442,1344,3.442,1345,2.443,1346,5.351,1347,6.038,1348,5.246,1349,5.246,1350,4.65,1351,5.351,1352,5.246,1353,5.246,1354,3.442,1355,5.561,1356,3.442,1357,3.442,1358,3.442,1359,3.442,1360,3.442,1361,3.442,1362,3.442,1363,4.638,1364,4.638,1365,3.442,1366,3.442,1367,3.442,1368,3.442,1369,3.442,1370,3.442,1371,3.442,1372,3.442,1373,3.442,1374,5.246,1375,3.442,1376,4.638,1377,5.561,1378,5.246,1379,3.442,1380,3.442,1381,3.442,1382,4.638,1383,6.038,1384,4.638,1385,4.638,1386,4.638,1387,3.442,1388,3.442,1389,3.442,1390,3.442,1391,3.442,1392,3.442,1393,5.246,1394,3.442,1395,4.638,1396,3.442,1397,3.442,1398,3.442]],["title/classes/ODataApiOptions.html",[307,0.343,1399,3.861]],["body/classes/ODataApiOptions.html",[1,4.458,3,0.083,4,0.083,5,0.083,6,0.122,8,0.063,9,0.586,10,0.222,11,4.328,12,4.039,13,4.514,14,3.046,15,4.288,16,3.872,17,4.219,18,4.514,19,2.067,20,4.039,21,4.514,22,4.219,23,3.988,24,3.876,25,1.707,26,0.123,27,0.01,28,3.243,29,3.508,30,3.47,31,0.664,32,3.586,33,3.728,34,0.412,37,0.073,41,2.614,44,2.653,51,2.466,53,3.297,54,3.141,59,3.428,60,0.797,74,4.039,94,0.229,141,0.659,159,0.559,202,2.097,203,2.653,204,2.653,205,2.546,206,4.219,207,4.219,208,2.653,209,0.713,210,2.278,211,2.771,212,2.449,216,1.551,227,3.727,228,3.067,229,1.283,235,3.178,239,1.604,254,0.093,301,0.189,305,0.006,306,0.006,307,0.363,309,0.212,316,0.324,365,1.56,402,1.373,423,1.598,424,0.2,426,2.79,606,2.333,635,1.993,652,2.604,1094,2.278,1190,5.007,1274,2.964,1276,2.063,1317,4.321,1399,5.491,1400,4.623,1401,4.623,1402,4.623,1403,6.225,1404,5.007,1405,4.012,1406,4.623,1407,7.53,1408,4.623,1409,4.646,1410,4.623,1411,4.623,1412,4.358,1413,5.007,1414,4.623,1415,7.53,1416,7.53,1417,4.623,1418,5.62,1419,4.623,1420,5.491,1421,6.225,1422,4.623,1423,4.623,1424,4.623,1425,4.623,1426,6.225,1427,3.572,1428,4.623,1429,4.623,1430,4.646,1431,6.225,1432,4.623,1433,4.623,1434,4.078,1435,4.623,1436,6.225,1437,6.225,1438,4.646,1439,3.45,1440,8.412,1441,8.274,1442,4.623,1443,4.623,1444,4.623,1445,8.096,1446,8.096,1447,8.096,1448,8.096,1449,8.096,1450,8.096,1451,8.096,1452,4.623,1453,4.623,1454,4.623,1455,4.623,1456,4.623,1457,4.623,1458,4.623,1459,4.078,1460,4.623,1461,4.623,1462,4.623,1463,4.623,1464,4.078,1465,6.225,1466,4.623,1467,4.623,1468,4.623,1469,4.078,1470,4.623,1471,4.078,1472,4.623,1473,4.623,1474,4.623,1475,4.078,1476,4.623,1477,4.078,1478,4.623,1479,6.225,1480,4.623,1481,4.623,1482,4.623,1483,4.623,1484,4.623,1485,6.225,1486,4.623,1487,6.225,1488,4.623,1489,4.623,1490,4.623,1491,4.078]],["title/classes/ODataBatchRequest.html",[307,0.343,1492,3.861]],["body/classes/ODataBatchRequest.html",[3,0.061,4,0.061,5,0.061,6,0.11,8,0.1,9,0.419,10,0.16,11,2.775,16,4.223,19,1.325,24,2.775,26,0.1,27,0.01,29,1.529,30,3.037,34,0.49,35,3.286,36,1.578,37,0.079,48,0.971,49,1.714,50,1.529,52,1.631,53,4.394,94,0.234,96,2.891,141,0.852,159,0.415,177,1.814,202,2.014,209,0.893,218,0.587,227,3.71,228,4.04,229,1.355,233,3.877,242,1.151,247,1.176,249,0.924,250,1.688,254,0.141,257,3.478,286,1.043,292,3.868,294,1.025,295,2.399,299,2.891,301,0.16,304,1.748,305,0.005,306,0.005,307,0.395,309,0.157,311,0.718,316,0.287,319,0.945,343,2.307,344,2.768,345,1.91,346,0.923,359,1.963,375,1.482,377,2.181,402,2.618,414,1.69,424,0.148,433,2.086,532,1.613,571,2.668,586,1.743,610,2.557,622,2.152,646,2.669,652,1.743,662,1.631,664,2.483,711,3.527,720,3.954,773,1.578,1093,4.808,1094,1.688,1222,2.891,1297,1.154,1322,3.721,1345,3.166,1405,1.748,1409,3.761,1427,4.808,1430,2.557,1492,6.699,1493,3.426,1494,5.273,1495,5.039,1496,5.039,1497,6.592,1498,3.426,1499,4.358,1500,5.039,1501,3.426,1502,3.426,1503,5.039,1504,7.595,1505,3.426,1506,5.039,1507,7.595,1508,3.426,1509,3.426,1510,3.426,1511,3.426,1512,5.909,1513,3.021,1514,2.398,1515,3.761,1516,3.021,1517,5.039,1518,4.445,1519,5.978,1520,3.426,1521,5.039,1522,3.426,1523,3.426,1524,4.808,1525,5.039,1526,5.039,1527,5.039,1528,3.426,1529,3.426,1530,5.978,1531,3.426,1532,3.426,1533,3.426,1534,3.021,1535,3.426,1536,3.527,1537,3.761,1538,2.399,1539,4.211,1540,6.592,1541,5.243,1542,5.039,1543,7.025,1544,3.782,1545,5.039,1546,3.021,1547,3.426,1548,3.527,1549,5.039,1550,5.039,1551,4.404,1552,7.953,1553,5.039,1554,3.021,1555,2.398,1556,5.039,1557,6.592,1558,5.039,1559,5.978,1560,3.426,1561,5.039,1562,3.426,1563,3.426,1564,3.426,1565,3.426,1566,3.426,1567,3.426,1568,3.426,1569,3.426,1570,3.426,1571,3.426,1572,3.426,1573,3.426,1574,3.426,1575,3.426,1576,5.039,1577,3.426,1578,3.021,1579,3.426,1580,4.808,1581,3.426,1582,3.426,1583,5.909,1584,3.426,1585,3.426,1586,3.426,1587,7.953,1588,2.557,1589,3.021,1590,3.333,1591,3.426,1592,3.426,1593,3.426,1594,3.426,1595,5.978,1596,3.426,1597,5.978,1598,5.978,1599,3.166,1600,3.021,1601,4.461,1602,3.426,1603,3.426,1604,3.426,1605,4.445,1606,3.426,1607,3.426,1608,5.273,1609,3.426,1610,3.426,1611,3.426,1612,3.426,1613,5.978,1614,5.483,1615,6.592,1616,3.426,1617,5.039,1618,2.669,1619,3.426,1620,3.426,1621,2.557,1622,3.426,1623,3.426,1624,3.426,1625,3.426,1626,3.426,1627,3.426,1628,5.039,1629,4.445,1630,3.426,1631,5.039,1632,3.761,1633,4.445,1634,4.445,1635,4.445,1636,5.039,1637,3.426,1638,5.039,1639,5.039,1640,5.039,1641,5.039,1642,3.426,1643,3.426,1644,3.426,1645,4.445,1646,3.426,1647,3.021,1648,3.426,1649,3.426,1650,3.426,1651,3.426,1652,5.039,1653,7.953,1654,5.039,1655,6.592,1656,7.025,1657,3.426,1658,5.978,1659,6.592,1660,5.039,1661,3.426,1662,3.426,1663,3.426,1664,3.426,1665,3.426,1666,3.426,1667,3.426,1668,3.426,1669,3.426,1670,4.053,1671,3.426,1672,3.426,1673,3.426,1674,3.426,1675,3.021,1676,3.426,1677,3.426,1678,3.426,1679,3.426,1680,3.426,1681,5.978,1682,3.426,1683,3.426,1684,3.426,1685,3.426,1686,3.426,1687,5.039,1688,8.2,1689,5.978,1690,3.426,1691,3.426,1692,3.426,1693,5.978,1694,4.92,1695,3.761,1696,6.592,1697,5.039,1698,3.426,1699,3.426,1700,3.426,1701,3.426,1702,3.426,1703,3.426]],["title/classes/ODataCache.html",[307,0.343,1704,2.895]],["body/classes/ODataCache.html",[0,0.843,3,0.062,4,0.062,5,0.062,6,0.118,8,0.047,9,0.421,10,0.227,25,1.759,26,0.122,27,0.01,31,0.448,34,0.412,35,3.735,36,1.587,37,0.08,41,3.763,42,1.697,43,3.501,49,1.718,50,3.555,52,1.64,60,0.767,94,0.242,110,2.68,141,1.084,156,2.375,159,0.417,202,2.937,209,0.864,227,3.552,229,1.254,230,1.279,239,1.366,242,1.153,245,4.53,247,1.643,249,1.08,254,0.18,286,1.677,294,0.789,301,0.231,305,0.005,306,0.007,307,0.27,309,0.158,311,0.721,316,0.312,319,1.09,349,2.17,359,1.661,365,0.863,368,2.063,414,0.974,423,1.299,424,0.219,622,4.424,636,1.758,1094,1.697,1098,5.619,1226,3.179,1284,3.182,1297,2.227,1322,3.176,1405,2.582,1412,2.411,1413,6.278,1427,4.646,1499,4.978,1538,3.147,1539,4.854,1544,1.976,1551,5.287,1580,4.07,1583,4.824,1590,2.278,1599,5.088,1618,1.824,1704,3.346,1705,3.038,1706,5.325,1707,6.152,1708,4.476,1709,4.07,1710,4.626,1711,4.933,1712,4.07,1713,4.476,1714,4.476,1715,4.07,1716,4.07,1717,4.07,1718,6.128,1719,5.06,1720,3.444,1721,2.77,1722,3.444,1723,6.198,1724,6.787,1725,4.869,1726,3.776,1727,3.444,1728,3.444,1729,4.153,1730,2.77,1731,3.444,1732,2.68,1733,3.542,1734,3.444,1735,3.776,1736,5.678,1737,3.542,1738,3.444,1739,2.77,1740,3.444,1741,2.77,1742,3.444,1743,2.77,1744,3.444,1745,4.928,1746,2.571,1747,2.77,1748,3.776,1749,3.444,1750,2.903,1751,2.77,1752,3.444,1753,3.542,1754,3.444,1755,3.776,1756,3.444,1757,4.904,1758,5.944,1759,3.776,1760,3.444,1761,4.463,1762,3.038,1763,3.038,1764,2.411,1765,3.038,1766,4.463,1767,2.065,1768,3.038,1769,4.07,1770,4.463,1771,5.29,1772,4.463,1773,3.776,1774,3.038,1775,3.038,1776,3.038,1777,2.411,1778,2.77,1779,2.77,1780,2.77,1781,3.038,1782,4.463,1783,3.038,1784,3.038,1785,3.038,1786,3.038,1787,3.038,1788,3.038,1789,3.038,1790,3.038,1791,4.463,1792,3.038,1793,4.463,1794,3.038,1795,4.463,1796,3.038,1797,3.038,1798,3.038,1799,3.038,1800,3.038,1801,2.77,1802,3.038,1803,3.038,1804,3.038,1805,3.038,1806,3.038,1807,3.038,1808,3.038,1809,3.038,1810,3.038,1811,3.038,1812,3.038,1813,5.83,1814,3.038,1815,4.463,1816,3.038,1817,3.038,1818,3.038,1819,3.038,1820,3.038,1821,3.038,1822,3.038,1823,2.77,1824,3.038,1825,3.038,1826,3.038]],["title/interfaces/ODataCacheEntry.html",[0,1.071,1725,2.895]],["body/interfaces/ODataCacheEntry.html",[0,1.03,2,2.149,3,0.075,4,0.075,5,0.075,6,0.057,8,0.057,9,0.486,26,0.098,27,0.01,31,0.314,34,0.445,35,3.493,36,1.94,37,0.092,41,3.751,42,2.074,43,3.835,49,1.363,50,3.395,52,2.005,94,0.241,110,3.551,141,1.205,156,2.093,159,0.509,202,3.01,209,0.886,227,3.291,229,1.234,230,1.213,242,1.196,245,4.56,247,0.982,249,1.061,254,0.17,286,1.704,294,0.882,305,0.006,306,0.007,307,0.33,319,0.98,349,1.917,359,1.917,365,1.055,368,2.26,414,1.19,423,1.081,424,0.182,622,3.669,1094,2.074,1098,5.699,1226,2.645,1284,1.717,1297,2.259,1322,3.093,1405,2.149,1413,6.619,1427,4.155,1499,4.516,1538,2.78,1539,4.56,1544,2.416,1551,5.206,1580,4.697,1583,5.393,1590,2.784,1599,4.55,1618,2.23,1704,2.784,1705,3.713,1706,4.693,1707,6.322,1708,3.142,1710,2.947,1711,4.358,1713,3.142,1714,3.142,1718,6.151,1723,5.874,1724,6.793,1725,4.789,1726,3.142,1729,3.669,1732,2.23,1733,2.947,1735,3.142,1736,5.404,1737,2.947,1745,4.088,1748,3.142,1750,2.416,1753,2.947,1755,3.142,1757,4.55,1758,5.677,1759,3.142,1761,5.151,1762,3.713,1763,3.713,1764,2.947,1765,3.713,1766,5.151,1767,2.524,1768,5.151,1769,5.393,1770,5.914,1771,6.942,1772,5.151,1773,4.358,1774,3.713,1775,3.713,1776,3.713,1777,2.947,1778,3.386,1779,3.386,1780,3.386,1781,3.713,1782,5.151,1783,3.713,1784,3.713,1785,3.713,1786,3.713,1787,3.713,1788,3.713,1789,3.713,1790,3.713,1791,5.151,1792,3.713,1793,5.151,1794,3.713,1795,5.151,1796,3.713,1797,3.713,1798,3.713,1799,3.713,1800,3.713,1801,3.386,1802,3.713,1803,3.713,1804,3.713,1805,3.713,1806,3.713,1807,3.713,1808,3.713,1809,3.713,1810,3.713,1811,3.713,1812,3.713,1813,6.387,1814,3.713,1815,5.151,1816,3.713,1817,3.713,1818,3.713,1819,3.713,1820,3.713,1821,3.713,1822,3.713,1823,3.386,1824,3.713,1825,3.713,1826,3.713]],["title/classes/ODataCallable.html",[307,0.343,1827,3.521]],["body/classes/ODataCallable.html",[3,0.079,4,0.079,5,0.079,6,0.118,8,0.06,9,0.5,10,0.24,25,1.601,26,0.126,27,0.01,29,3.763,31,0.637,34,0.431,37,0.069,45,2.091,60,1.169,62,0.926,94,0.24,159,0.531,202,2.686,209,0.808,210,2.962,216,1.699,218,0.591,224,1.599,225,3.397,229,1.548,230,0.926,231,3.674,232,2.427,234,3.763,236,2.77,239,1.001,247,1.403,249,0.578,254,0.177,259,2.52,263,2.549,269,2.079,275,3.905,294,0.578,298,3.158,299,3.933,300,4.109,301,0.234,305,0.006,306,0.006,307,0.345,309,0.201,311,0.857,316,0.326,319,1.131,325,2.699,365,1.848,424,0.19,429,2.079,638,2.663,648,1.107,791,3.095,839,5.498,873,3.428,1205,3.074,1270,3.377,1272,3.45,1273,3.45,1274,2.863,1276,2.683,1277,3.184,1278,2.418,1279,3.763,1281,3.632,1282,3.311,1283,3.311,1284,3.329,1285,2.418,1286,2.418,1288,2.962,1289,1.96,1290,2.418,1732,4.598,1750,3.933,1827,4.836,1828,4.391,1829,5.816,1830,3.933,1831,4.208,1832,4.208,1833,3.778,1834,4.109,1835,4.852,1836,6.012,1837,4.391,1838,4.391,1839,4.391,1840,5.502,1841,3.277,1842,3.277,1843,2.632,1844,4.391,1845,5.782,1846,2.905,1847,4.391,1848,3.45,1849,4.391,1850,5.303,1851,5.303,1852,5.303,1853,4.391,1854,5.303,1855,5.303,1856,4.391,1857,3.45,1858,4.391,1859,5.303,1860,4.487,1861,3.074,1862,3.277,1863,3.074,1864,3.074,1865,3.277,1866,3.074,1867,2.326,1868,3.277,1869,2.52,1870,3.277,1871,2.241,1872,2.759,1873,2.759,1874,2.418,1875,2.759,1876,2.632,1877,2.759,1878,2.759,1879,2.759,1880,3.074,1881,3.277,1882,2.905,1883,3.074,1884,2.632,1885,2.632,1886,2.418,1887,6.855,1888,4.391,1889,6.012,1890,4.391,1891,4.391,1892,4.391,1893,2.905,1894,3.873,1895,3.873,1896,3.873,1897,4.391,1898,4.391,1899,3.933,1900,3.933,1901,3.873,1902,2.905,1903,2.905,1904,2.905,1905,4.391]],["title/classes/ODataCallableParser.html",[307,0.343,1840,3.267]],["body/classes/ODataCallableParser.html",[3,0.081,4,0.081,5,0.081,6,0.12,8,0.062,9,0.512,10,0.234,19,1.966,25,1.515,26,0.124,27,0.01,31,0.558,34,0.437,37,0.097,49,1.059,51,2.436,60,0.581,94,0.245,159,0.549,173,2.833,209,0.904,216,1.82,222,1.111,224,1.807,225,3.213,229,1.55,230,0.947,231,3.213,232,2.276,234,3.815,236,2.092,238,1.491,242,1.143,243,3.959,247,1.059,249,0.809,254,0.177,257,2.026,267,3.263,268,1.921,275,3.959,294,0.983,296,3.682,297,2.092,301,0.232,305,0.006,306,0.006,307,0.483,309,0.208,311,0.876,316,0.319,319,1.002,349,1.491,368,2.333,414,1.284,423,1.579,424,0.197,429,2.411,576,1.851,586,2.126,591,2.304,648,1.122,649,3.178,746,1.529,791,2.582,839,4.944,1094,2.236,1114,3.178,1222,4.001,1274,2.928,1276,2.026,1297,1.529,1544,3.528,1618,2.404,1830,4.289,1833,3.864,1840,4.589,1846,3.002,1848,3.528,1857,2.605,1867,3.257,1893,5.616,1899,4.482,1900,4.482,1902,3.002,1903,3.002,1904,3.002,1906,4.004,1907,6.149,1908,4.539,1909,4.539,1910,4.539,1911,5.609,1912,4.539,1913,4.539,1914,4.539,1915,4.539,1916,4.539,1917,4.539,1918,5.424,1919,4.539,1920,4.539,1921,5.424,1922,4.539,1923,6.593,1924,4.18,1925,5.204,1926,4.004,1927,3.388,1928,4.004,1929,3.388,1930,4.004,1931,5.447,1932,3.864,1933,4.304,1934,4.004,1935,4.004,1936,3.388,1937,3.388,1938,3.388,1939,3.388,1940,3.388,1941,4.589,1942,3.388,1943,4.589,1944,3.388,1945,3.388,1946,3.178,1947,3.388,1948,2.852,1949,2.852,1950,5.424,1951,4.004,1952,6.151,1953,4.004,1954,4.004,1955,3.002,1956,3.002,1957,2.852,1958,6.593,1959,7.264,1960,5.424,1961,5.424,1962,4.004,1963,4.004,1964,4.004,1965,4.004,1966,4.004,1967,4.004]],["title/classes/ODataConfigAsyncLoader.html",[307,0.343,1968,3.267]],["body/classes/ODataConfigAsyncLoader.html",[3,0.115,4,0.115,5,0.115,6,0.111,8,0.087,10,0.172,26,0.087,27,0.01,34,0.479,35,3.993,36,2.952,37,0.129,49,1.495,60,0.98,156,2.392,159,0.775,209,0.893,242,0.889,251,4.219,252,4.277,254,0.129,301,0.172,305,0.008,306,0.008,307,0.643,309,0.293,311,1.092,316,0.277,319,0.797,423,2.104,424,0.332,724,3.775,1297,2.159,1764,4.485,1932,4.026,1968,5.718,1969,5.153,1970,5.618,1971,7.088,1972,6.407,1973,6.407,1974,6.407,1975,4.782,1976,4.238,1977,4.238,1978,5.153,1979,5.153,1980,5.153,1981,5.153,1982,5.153,1983,5.153,1984,5.153,1985,5.153,1986,5.153,1987,5.153,1988,5.153]],["title/classes/ODataConfigLoader.html",[307,0.343,1970,2.895]],["body/classes/ODataConfigLoader.html",[3,0.117,4,0.117,5,0.117,6,0.105,8,0.088,27,0.01,34,0.483,35,3.922,36,3.006,37,0.13,49,1.522,60,0.991,156,2.667,159,0.789,209,0.897,242,0.905,251,3.592,252,4.298,305,0.008,306,0.008,307,0.648,309,0.299,311,1.104,316,0.236,319,0.812,423,1.988,424,0.283,724,3.815,1297,2.198,1764,4.566,1932,4.099,1968,4.869,1969,5.247,1970,5.651,1971,7.117,1975,4.869,1976,4.315,1977,4.315,1978,5.247,1979,5.247,1980,5.247,1981,5.247,1982,5.247,1983,5.247,1984,5.247,1985,5.247,1986,5.247,1987,5.247,1988,5.247,1989,6.523]],["title/classes/ODataConfigSyncLoader.html",[307,0.343,1976,2.895]],["body/classes/ODataConfigSyncLoader.html",[3,0.115,4,0.115,5,0.115,6,0.111,8,0.087,10,0.172,26,0.087,27,0.01,34,0.48,35,3.913,36,2.962,37,0.129,49,1.5,60,0.982,156,2.396,159,0.778,209,0.894,242,0.892,251,3.54,252,4.455,254,0.129,301,0.172,305,0.008,306,0.008,307,0.644,309,0.294,311,1.094,316,0.277,319,0.8,423,2.107,424,0.333,724,3.782,1297,2.166,1764,4.5,1932,4.04,1968,4.798,1969,5.171,1970,5.624,1971,7.094,1975,4.798,1976,5.078,1977,4.252,1978,6.175,1979,5.171,1980,5.171,1981,5.171,1982,5.171,1983,5.171,1984,5.171,1985,5.171,1986,5.171,1987,5.171,1988,5.171,1990,6.429,1991,6.429,1992,6.429]],["title/classes/ODataEntitiesAnnotations.html",[307,0.343,1377,2.895]],["body/classes/ODataEntitiesAnnotations.html",[3,0.08,4,0.08,5,0.08,6,0.117,8,0.061,9,0.577,10,0.22,14,1.944,25,1.784,26,0.122,27,0.01,30,2.07,32,3.544,34,0.357,37,0.117,48,1.336,49,1.816,54,3.322,55,1.684,57,1.24,61,1.915,62,0.941,71,3.196,72,3.196,73,3.417,94,0.235,150,2.908,152,3.823,156,2.323,159,0.544,173,3.196,209,0.935,218,0.731,230,1.069,242,0.624,247,1.048,249,1.056,254,0.179,269,1.554,294,1.171,297,3.196,301,0.209,305,0.006,306,0.006,307,0.584,309,0.206,311,0.87,316,0.321,319,0.999,346,2.213,402,2.06,424,0.195,425,1.77,606,2.789,635,1.955,638,2.506,1141,4.159,1289,3.666,1295,3.837,1297,2.508,1315,6.175,1316,3.354,1317,4.271,1318,4.558,1319,3.363,1321,5.177,1322,2.38,1323,4.039,1326,3.354,1328,4.359,1330,5.809,1332,5.809,1334,4.558,1340,3.354,1341,3.354,1342,3.354,1343,3.354,1344,3.354,1345,2.38,1346,5.31,1347,5.992,1348,5.177,1349,5.177,1350,4.588,1351,5.31,1352,5.177,1353,5.177,1354,3.354,1355,5.528,1356,3.354,1357,3.354,1358,3.354,1359,3.354,1360,3.354,1361,3.354,1362,3.354,1363,5.555,1364,4.558,1365,3.354,1366,3.354,1367,3.354,1368,3.354,1369,3.354,1370,3.354,1371,3.354,1372,3.354,1373,3.354,1374,5.177,1375,3.354,1376,4.558,1377,5.802,1378,5.177,1379,3.354,1380,3.354,1381,3.354,1382,5.555,1383,5.992,1384,4.558,1385,5.177,1386,4.558,1387,3.354,1388,3.354,1389,5.177,1390,3.354,1391,5.177,1392,3.354,1393,5.177,1394,3.354,1395,4.558,1396,3.354,1397,3.354,1398,3.354,1993,4.493,1994,3.614,1995,4.493,1996,4.493,1997,4.493,1998,4.493,1999,3.614,2000,3.614,2001,3.963,2002,4.493,2003,4.493,2004,4.493,2005,4.493,2006,4.493,2007,4.493,2008,4.493,2009,4.493,2010,4.493,2011,4.493,2012,4.493,2013,4.493,2014,4.493,2015,3.963,2016,4.493]],["title/classes/ODataEntityAnnotations.html",[307,0.343,1355,2.895]],["body/classes/ODataEntityAnnotations.html",[3,0.076,4,0.076,5,0.076,6,0.121,8,0.058,9,0.635,10,0.231,14,2.913,25,1.757,26,0.124,27,0.01,30,3.102,32,3.459,34,0.343,37,0.114,48,1.297,49,1.887,54,3.243,55,1.59,57,2.232,61,1.171,62,0.905,71,1.955,72,1.955,73,2.09,94,0.233,150,3.459,152,3.757,156,2.268,159,0.513,173,3.514,209,0.931,218,0.714,230,1.037,242,0.589,247,0.99,249,1.038,254,0.181,269,1.467,294,1.162,297,3.102,301,0.23,305,0.006,306,0.006,307,0.57,309,0.194,311,0.837,316,0.326,319,1.042,346,2.179,402,2,424,0.184,425,1.701,606,2.722,635,1.879,638,2.463,679,3.566,1141,4.036,1289,3.61,1295,3.689,1297,2.57,1315,6.124,1316,3.167,1317,4.169,1318,4.382,1319,3.233,1321,5.025,1322,2.247,1323,3.883,1326,3.167,1328,4.231,1330,5.693,1332,5.693,1334,4.382,1340,3.167,1341,3.167,1342,3.167,1343,3.167,1344,3.167,1345,2.247,1346,5.218,1347,5.888,1348,5.025,1349,5.025,1350,4.453,1351,5.218,1352,5.025,1353,5.025,1354,3.167,1355,5.819,1356,3.167,1357,3.167,1358,3.167,1359,5.025,1360,3.167,1361,5.025,1362,3.167,1363,5.422,1364,4.382,1365,5.025,1366,3.167,1367,5.025,1368,3.167,1369,5.025,1370,3.167,1371,5.025,1372,3.167,1373,5.025,1374,5.025,1375,3.167,1376,5.693,1377,5.604,1378,5.025,1379,3.167,1380,3.167,1381,3.167,1382,5.422,1383,5.888,1384,4.382,1385,5.025,1386,4.382,1387,3.167,1388,3.167,1389,3.167,1390,3.167,1391,3.167,1392,3.167,1393,5.025,1394,3.167,1395,4.382,1396,3.167,1397,3.167,1398,3.167,1994,3.413,1999,3.413,2000,3.413,2001,3.743,2015,3.743,2017,4.243,2018,4.243,2019,4.243,2020,4.243,2021,4.243,2022,4.243,2023,4.243,2024,4.243,2025,4.243,2026,4.243,2027,4.243,2028,4.243,2029,4.243,2030,4.243,2031,4.243,2032,4.243,2033,4.243,2034,4.243,2035,4.243,2036,4.243,2037,4.243,2038,4.243,2039,4.243,2040,4.243,2041,4.243,2042,4.243,2043,4.243,2044,4.243,2045,4.243]],["title/classes/ODataEntityContainer.html",[307,0.343,2046,3.521]],["body/classes/ODataEntityContainer.html",[3,0.097,4,0.097,5,0.097,6,0.103,8,0.073,9,0.575,10,0.233,25,1.5,26,0.126,27,0.01,31,0.632,34,0.468,37,0.085,45,2.579,60,0.973,62,1.064,94,0.24,159,0.656,209,0.549,210,3.403,218,0.678,230,1.064,239,1.234,247,1.264,249,0.712,254,0.178,263,2.769,269,2.388,277,4.595,278,4.187,294,0.712,301,0.236,305,0.007,306,0.007,307,0.425,309,0.248,311,0.984,316,0.324,319,1.115,325,2.835,365,2.007,424,0.235,638,2.764,648,0.813,791,3.363,815,2.765,816,4.778,828,6.092,830,3.583,873,3.609,1205,3.792,1270,3.746,1272,3.963,1273,3.963,1274,3.289,1276,3.083,1277,3.658,1278,2.983,1279,4.088,1281,3.945,1282,3.804,1283,3.804,1284,3.265,1285,2.983,1286,2.983,1288,3.403,1289,2.418,1290,2.983,1297,1.825,1732,4.48,1750,4.363,1829,5.978,1831,4.835,1832,4.835,1833,4.34,1834,4.558,1835,5.198,1841,4.043,1842,4.043,1843,3.247,1845,5.03,1861,3.792,1862,4.043,1863,3.792,1864,3.792,1865,4.043,1866,3.792,1867,2.869,1868,4.043,1869,3.108,1870,4.043,1871,2.765,1872,3.404,1873,3.404,1874,2.983,1875,3.404,1876,3.247,1877,3.404,1878,3.404,1879,3.404,1880,3.792,1881,4.043,1882,3.583,1883,3.792,1884,3.247,1885,3.247,1886,2.983,2046,5.556,2047,6.707,2048,5.675,2049,5.417,2050,5.417,2051,5.417]],["title/classes/ODataEntityService.html",[307,0.343,2052,3.521]],["body/classes/ODataEntityService.html",[3,0.106,4,0.106,5,0.106,6,0.112,8,0.081,10,0.228,19,1.927,26,0.122,27,0.01,34,0.464,35,3.435,37,0.094,48,1.668,60,0.762,156,2.739,157,2.358,209,0.603,218,0.72,229,1.476,247,1.71,249,0.964,254,0.171,286,1.232,296,4.266,301,0.24,305,0.007,306,0.007,307,0.467,309,0.272,311,1.044,316,0.313,319,1.059,325,2.345,402,2.46,425,2.51,635,2.345,638,2.478,648,1.244,791,3.076,815,3.74,1537,5.924,1538,4.05,1544,4.204,1632,6.463,1767,3.568,1777,4.166,2052,5.893,2053,5.952,2054,7.639,2055,5.893,2056,6.462,2057,6.462,2058,6.462,2059,7.938,2060,5.952,2061,7.306,2062,5.952,2063,7.327,2064,5.798,2065,5.952,2066,5.25,2067,6.462,2068,5.893,2069,5.25,2070,5.25,2071,6.462,2072,5.893,2073,5.25,2074,5.25,2075,6.462,2076,5.893,2077,5.25,2078,5.952,2079,5.952,2080,5.25,2081,5.25,2082,5.952,2083,5.25,2084,5.952]],["title/classes/ODataEntitySet.html",[307,0.343,2048,3.267]],["body/classes/ODataEntitySet.html",[3,0.097,4,0.097,5,0.097,6,0.108,8,0.073,9,0.574,10,0.233,19,1.42,25,1.65,26,0.126,27,0.01,31,0.631,34,0.444,37,0.085,45,2.572,60,0.972,62,1.062,94,0.242,159,0.654,209,0.547,210,3.396,218,0.677,230,1.062,239,1.231,247,1.26,249,0.71,254,0.178,263,2.766,269,2.384,279,4.59,294,0.71,301,0.236,302,4.182,303,4.022,305,0.007,306,0.007,307,0.424,309,0.247,311,0.983,316,0.325,319,1.115,325,2.811,365,2.005,424,0.234,638,2.763,648,0.811,791,3.359,831,4.764,835,4.764,838,6.081,873,3.607,1205,3.781,1270,3.741,1272,3.956,1273,3.956,1274,3.283,1276,2.411,1277,3.652,1278,2.974,1279,4.083,1281,3.941,1282,3.797,1283,3.797,1284,3.262,1285,2.974,1286,2.974,1288,3.396,1289,2.411,1290,2.974,1732,4.477,1750,4.357,1829,5.976,1831,4.826,1832,4.826,1833,4.332,1834,4.552,1835,5.193,1841,4.031,1842,4.031,1843,3.238,1845,5.023,1861,3.781,1862,4.031,1863,3.781,1864,3.781,1865,4.031,1866,3.781,1867,2.861,1868,4.031,1869,3.099,1870,4.031,1871,2.757,1872,3.394,1873,3.394,1874,2.974,1875,3.394,1876,3.238,1877,3.394,1878,3.394,1879,3.394,1880,3.781,1881,4.031,1882,3.573,1883,3.781,1884,3.238,1885,3.238,1886,2.974,2047,7.056,2048,5.145,2085,5.402,2086,5.402,2087,5.402,2088,5.402]],["title/classes/ODataEntityTypeKey.html",[307,0.343,2089,3.521]],["body/classes/ODataEntityTypeKey.html",[3,0.044,4,0.044,5,0.044,6,0.075,8,0.033,9,0.462,10,0.131,14,1.065,25,0.85,26,0.117,27,0.01,30,1.134,31,0.632,34,0.395,37,0.095,49,1.503,51,1.549,57,1.531,60,1.093,64,0.713,65,1.162,67,1.531,76,3.548,87,1.412,94,0.24,108,2.072,109,1.303,110,2.072,132,0.829,133,0.829,141,0.862,150,2.318,157,0.975,159,0.589,173,1.134,177,1.303,202,2.433,209,0.909,216,1.73,218,0.384,221,3.054,222,2.091,223,3.054,224,1.656,225,1.802,229,1.486,230,1.218,231,1.802,232,1.191,236,1.802,237,1.996,238,0.808,239,0.561,240,0.829,241,1.412,242,1.181,243,2.578,249,1.163,250,2.732,254,0.173,257,1.746,263,1.683,267,1.928,268,1.685,273,2.154,284,2.676,286,1.253,287,3.542,288,1.412,289,2.555,290,1.412,292,1.355,294,0.922,295,2.641,296,3.174,297,3.328,301,0.066,304,2.831,305,0.004,306,0.004,307,0.435,309,0.113,316,0.176,319,0.841,324,3.269,325,2.586,326,0.874,327,0.663,345,0.713,349,1.284,359,2.218,360,2.136,365,2.088,366,1.519,368,2.011,374,1.692,402,1.914,410,2.7,414,1.91,423,1.004,424,0.262,426,2.489,429,2.228,576,2.755,586,2.336,591,1.824,634,1.172,636,1.256,649,2.738,652,1.683,661,3.146,679,3.713,703,2.345,707,2.345,791,3.033,792,1.212,873,1.642,1094,1.212,1114,1.722,1141,1.475,1222,3.472,1224,1.979,1270,2.398,1276,2.701,1279,1.256,1281,1.927,1284,1.595,1288,1.927,1289,2.475,1297,1.64,1317,1.412,1319,2.154,1328,2.458,1345,3.92,1350,1.627,1438,1.836,1439,1.836,1548,1.722,1555,1.722,1614,2.919,1618,2.578,1670,3.915,1732,1.303,1757,2.458,1830,2.244,1834,1.475,1848,2.793,1857,2.793,1867,1.303,1869,1.412,1871,3.289,1872,1.546,1873,1.546,1874,2.68,1875,1.546,1876,1.475,1877,1.546,1878,1.546,1879,1.546,1886,1.355,1893,5.229,1899,3.472,1900,3.472,1902,1.627,1903,1.627,1904,1.627,1924,3.324,1925,6.218,1927,3.633,1929,3.633,1931,4.777,1932,3.059,1933,2.738,1936,1.836,1937,2.919,1938,1.836,1939,1.836,1940,2.919,1941,2.919,1942,1.836,1943,3.633,1944,1.836,1945,1.836,1946,1.722,1947,4.139,1948,1.546,1949,1.546,1955,2.587,1956,1.627,1957,1.546,2089,4.461,2090,4.461,2091,3.911,2092,2.461,2093,4.891,2094,2.17,2095,1.546,2096,1.836,2097,3.146,2098,3.146,2099,3.146,2100,4.461,2101,3.146,2102,2.17,2103,3.146,2104,2.17,2105,2.17,2106,1.836,2107,3.45,2108,2.17,2109,2.17,2110,2.17,2111,2.17,2112,5.338,2113,2.17,2114,5.338,2115,2.17,2116,2.17,2117,2.17,2118,3.45,2119,2.17,2120,2.17,2121,2.17,2122,2.17,2123,2.17,2124,2.919,2125,3.407,2126,6.184,2127,2.17,2128,2.17,2129,2.17,2130,2.17,2131,2.17,2132,2.17,2133,2.17,2134,3.45,2135,3.45,2136,3.45,2137,3.45,2138,3.146,2139,2.17,2140,3.45,2141,2.17,2142,2.17,2143,3.45,2144,2.17,2145,2.17,2146,2.17,2147,3.45,2148,2.17,2149,3.45,2150,3.45,2151,3.45,2152,3.45,2153,3.45,2154,3.45,2155,3.45,2156,5.683,2157,4.293,2158,2.17,2159,4.867,2160,4.867,2161,1.979,2162,3.915,2163,2.17,2164,2.17,2165,2.17,2166,2.17,2167,2.17,2168,2.17,2169,2.17,2170,2.17,2171,2.17,2172,2.17,2173,2.17,2174,2.17,2175,2.17,2176,2.17,2177,2.17,2178,2.17,2179,2.17,2180,7.471,2181,2.17,2182,2.17,2183,2.17,2184,2.17,2185,5.683,2186,2.17,2187,1.836,2188,3.45,2189,2.17,2190,3.45,2191,2.17,2192,2.17,2193,4.293,2194,2.17,2195,2.17,2196,2.17,2197,2.17,2198,2.17,2199,2.17,2200,2.17,2201,2.17,2202,2.17,2203,1.722,2204,1.979,2205,2.17,2206,3.45,2207,5.338,2208,2.17,2209,2.17,2210,2.17,2211,2.17,2212,2.17,2213,2.17,2214,2.17,2215,2.17,2216,2.17,2217,2.17,2218,3.146,2219,2.17,2220,2.17,2221,5.959,2222,7.125,2223,5.824,2224,3.45,2225,3.45,2226,2.17,2227,4.891,2228,2.17,2229,2.17,2230,2.17,2231,2.17,2232,2.17,2233,2.17,2234,5.683,2235,2.17,2236,1.836,2237,2.17,2238,2.17,2239,2.17,2240,2.17,2241,2.17,2242,2.17,2243,2.17,2244,3.45,2245,1.722,2246,1.836,2247,1.836,2248,1.836,2249,2.17,2250,3.915,2251,4.891,2252,2.17,2253,2.17,2254,2.17,2255,2.17,2256,2.17,2257,2.17,2258,2.17,2259,2.17,2260,3.45,2261,2.17,2262,2.17,2263,2.17,2264,2.17,2265,2.17,2266,2.17,2267,2.17,2268,2.17,2269,2.17,2270,2.17,2271,2.17,2272,2.17,2273,2.17,2274,2.17,2275,4.293,2276,3.45,2277,3.45,2278,2.17,2279,2.17,2280,1.979,2281,2.17,2282,2.17,2283,2.17,2284,2.17,2285,2.17,2286,3.45,2287,5.338,2288,2.17,2289,2.17,2290,3.45,2291,3.45,2292,2.17,2293,3.45,2294,2.17,2295,3.45,2296,3.45,2297,2.17,2298,2.17,2299,2.17,2300,4.293,2301,2.17,2302,2.17]],["title/classes/ODataEnumType.html",[307,0.343,2303,3.521]],["body/classes/ODataEnumType.html",[3,0.072,4,0.072,5,0.072,6,0.117,8,0.055,9,0.471,10,0.236,25,1.685,26,0.126,27,0.01,31,0.579,34,0.415,37,0.063,45,1.916,51,3.388,60,1.18,62,1.152,94,0.238,141,1.012,159,0.487,202,2.741,209,0.838,210,2.787,216,1.672,218,0.556,222,2.051,224,1.549,225,3.271,229,1.536,230,1.094,231,3.575,232,2.362,236,2.607,239,0.917,247,1.527,249,0.529,254,0.182,259,2.309,263,2.455,269,1.956,271,3.76,281,3.411,283,3.34,284,2.752,294,0.861,301,0.238,305,0.006,306,0.006,307,0.316,309,0.184,311,0.806,316,0.324,319,1.132,325,2.647,365,1.78,424,0.174,638,2.616,648,1.123,791,2.981,792,1.982,873,3.347,984,4.99,1205,2.816,1270,3.224,1272,3.246,1273,3.246,1274,2.694,1276,2.525,1277,2.997,1278,2.216,1279,3.624,1281,3.822,1282,3.116,1283,3.116,1284,3.372,1285,2.216,1286,2.216,1288,2.787,1289,1.796,1290,2.216,1297,1.906,1732,4.597,1750,3.755,1829,5.741,1830,3.755,1831,3.96,1832,3.96,1833,3.555,1834,3.923,1835,4.701,1841,3.003,1842,3.003,1843,2.412,1845,4.328,1846,2.661,1848,3.246,1850,4.99,1851,4.99,1852,4.99,1854,4.99,1855,4.99,1857,3.246,1859,4.99,1860,4.222,1861,2.816,1862,3.003,1863,2.816,1864,2.816,1865,3.003,1866,2.816,1867,2.131,1868,3.003,1869,2.309,1870,3.003,1871,2.054,1872,2.528,1873,2.528,1874,2.216,1875,2.528,1876,2.412,1877,2.528,1878,2.528,1879,2.528,1880,2.816,1881,3.003,1882,2.661,1883,2.816,1884,2.412,1885,2.412,1886,2.216,1893,2.661,1894,3.549,1895,3.549,1899,3.755,1900,3.755,1901,3.549,1902,2.661,1903,2.661,1904,2.661,1924,4.256,2303,4.551,2304,8.62,2305,4.99,2306,4.99,2307,4.99,2308,4.023,2309,4.023,2310,3.549,2311,4.023,2312,5.658,2313,4.023,2314,5.658,2315,4.551,2316,3.549,2317,5.583,2318,4.551,2319,4.023,2320,5.71,2321,4.551,2322,4.551,2323,4.551,2324,4.023,2325,4.023,2326,4.551,2327,4.023,2328,3.236,2329,3.236,2330,4.023,2331,4.023,2332,4.023,2333,4.023,2334,4.023]],["title/classes/ODataEnumTypeFieldParser.html",[307,0.343,2317,3.267]],["body/classes/ODataEnumTypeFieldParser.html",[3,0.081,4,0.081,5,0.081,6,0.106,8,0.061,9,0.509,10,0.2,26,0.118,27,0.01,31,0.457,34,0.436,37,0.096,49,1.051,51,2.423,57,1.688,60,1.14,62,1.07,94,0.247,141,1.171,159,0.545,202,1.518,209,0.906,216,1.707,218,0.682,222,2.046,224,1.267,225,2.075,229,1.445,230,0.942,231,2.075,232,1.371,236,2.075,237,3.122,242,1.034,247,1.051,249,1.127,254,0.179,257,2.01,263,2.576,267,2.752,268,1.621,269,2.115,270,2.48,271,3.24,280,4.103,281,3.302,282,2.584,283,3.122,284,2.008,285,4.103,287,2.818,294,0.913,301,0.209,305,0.006,306,0.006,307,0.48,309,0.206,311,0.872,316,0.297,319,0.97,325,1.442,327,1.213,349,2.281,358,1.949,359,2.281,365,1.129,368,2.326,410,2.87,414,1.274,423,1.156,424,0.195,426,1.599,429,2.576,577,1.837,591,2.292,638,2.168,648,0.676,652,1.558,679,3.946,746,2.061,792,2.219,846,3.623,873,3.451,1222,3.51,1270,4.049,1272,3.51,1273,3.51,1274,2.145,1277,3.24,1278,2.48,1279,3.976,1281,3.422,1282,3.368,1283,3.368,1284,2.494,1285,2.48,1286,2.48,1288,3.013,1289,2.01,1290,2.48,1297,1.518,1319,2.48,1345,3.24,1544,2.584,1618,2.386,1830,2.584,1834,3.667,1843,2.7,1848,2.584,1857,2.584,1860,4.565,1867,2.386,1869,3.51,1871,2.299,1874,2.48,1884,2.7,1885,2.7,1886,2.48,1899,3.51,1900,3.51,1924,2.7,1931,4.928,1948,2.83,1949,2.83,1955,2.979,1956,2.979,1957,2.83,2095,2.83,2096,3.362,2106,3.362,2124,3.362,2125,3.153,2187,3.362,2203,3.153,2223,4.565,2236,3.362,2245,3.153,2246,3.362,2247,3.362,2248,3.362,2315,3.623,2317,5.814,2318,3.623,2320,4.92,2321,3.623,2322,3.623,2323,3.623,2326,3.623,2328,5.587,2329,3.623,2335,6.871,2336,6.117,2337,4.504,2338,3.973,2339,6.572,2340,3.973,2341,3.973,2342,3.973,2343,3.973,2344,3.973,2345,3.973,2346,3.973,2347,5.395,2348,3.973,2349,3.973,2350,6.572,2351,5.395,2352,3.973,2353,3.973,2354,6.126,2355,3.973,2356,3.973,2357,3.973,2358,3.973,2359,3.973,2360,3.973,2361,3.973,2362,3.973,2363,3.973,2364,3.973,2365,3.973,2366,5.395]],["title/classes/ODataEnumTypeParser.html",[307,0.343,1924,2.624]],["body/classes/ODataEnumTypeParser.html",[3,0.068,4,0.068,5,0.068,6,0.121,8,0.052,9,0.454,10,0.238,25,1.656,26,0.124,27,0.01,31,0.518,34,0.405,37,0.086,49,1.483,51,2.518,57,1.504,60,1.145,62,1.13,94,0.247,141,1.207,159,0.462,202,1.286,209,0.887,216,1.749,218,0.624,222,1.999,224,1.128,225,2.928,229,1.476,230,0.839,231,2.928,232,1.935,236,2.511,237,3.244,239,0.869,242,0.962,247,1.483,249,1.124,254,0.181,257,1.703,263,2.198,267,3.11,268,1.831,269,1.884,270,2.101,271,3.672,280,3.001,281,3.426,282,3.647,283,3.539,284,2.504,285,4.038,287,2.511,294,0.912,301,0.234,305,0.006,306,0.006,307,0.428,309,0.175,311,0.777,316,0.323,319,1.084,325,1.221,327,1.028,349,2.087,358,1.651,359,2.087,365,0.956,368,2.164,410,2.671,414,1.079,423,1.399,424,0.165,426,1.355,429,2.397,577,1.556,591,2.042,638,1.984,648,1.101,652,1.319,679,3.672,746,1.286,792,1.88,842,3.366,873,3.296,930,3.069,1222,3.127,1270,3.867,1272,3.127,1273,3.127,1274,2.595,1276,1.703,1277,2.886,1278,2.101,1279,3.244,1281,3.131,1282,3.001,1283,3.001,1284,2.592,1285,2.101,1286,2.101,1288,2.684,1289,1.703,1290,2.101,1297,1.836,1319,2.101,1345,2.886,1544,3.127,1618,2.021,1830,3.647,1833,3.424,1843,2.287,1846,2.524,1848,3.127,1857,3.127,1860,4.067,1867,2.886,1869,2.189,1871,1.948,1874,2.101,1884,2.287,1885,2.287,1886,2.101,1899,3.127,1900,3.127,1924,3.267,1931,4.586,1948,2.398,1949,2.398,1955,2.524,1956,2.524,1957,2.398,2095,2.398,2096,2.848,2106,2.848,2124,4.744,2125,2.671,2187,4.744,2203,2.671,2223,4.067,2236,2.848,2245,2.671,2246,2.848,2247,2.848,2248,2.848,2305,4.806,2306,4.806,2307,4.806,2310,3.366,2315,4.383,2316,3.366,2317,5.858,2318,4.383,2320,5.577,2321,4.383,2322,4.383,2323,4.383,2326,4.383,2328,5.112,2329,3.069,2335,7.845,2338,3.366,2339,6.115,2340,3.366,2341,3.366,2342,3.366,2343,3.366,2344,3.366,2345,4.806,2346,3.366,2347,5.606,2348,3.366,2349,3.366,2350,6.115,2351,4.806,2352,3.366,2353,3.366,2354,5.606,2355,3.366,2356,3.366,2357,3.366,2358,3.366,2359,3.366,2360,3.366,2361,3.366,2362,6.115,2363,3.366,2364,3.366,2365,3.366,2366,4.806,2367,5.449,2368,3.816,2369,3.816,2370,3.816,2371,3.816,2372,3.816,2373,3.816,2374,3.816,2375,3.816,2376,3.816,2377,3.816,2378,3.816,2379,3.816,2380,3.816,2381,3.816,2382,3.816]],["title/classes/ODataInMemoryCache.html",[307,0.343,2383,3.861]],["body/classes/ODataInMemoryCache.html",[3,0.083,4,0.083,5,0.083,6,0.085,8,0.063,9,0.521,10,0.238,25,1.874,26,0.125,27,0.01,31,0.468,34,0.366,35,3.734,37,0.073,41,3.782,49,1.764,50,3.851,60,0.905,94,0.237,141,0.893,202,2.382,209,0.635,218,0.615,227,3.734,229,1.067,230,1.299,239,1.611,245,4.358,247,1.764,249,1.037,254,0.181,286,1.297,301,0.241,305,0.006,306,0.007,307,0.366,309,0.214,311,0.893,316,0.324,319,1.109,349,2.057,424,0.271,622,4.444,636,2.382,638,2.792,662,2.222,1098,5.211,1226,2.932,1284,3.518,1297,1.572,1322,2.471,1405,2.382,1412,3.266,1427,5.168,1499,5.112,1538,3.865,1539,5.053,1551,5.255,1599,5.297,1621,4.675,1704,5.974,1706,5.291,1707,5.682,1708,4.675,1709,5.039,1710,4.95,1711,4.675,1712,5.039,1713,4.675,1714,4.675,1715,5.039,1716,5.039,1717,5.039,1718,5.977,1721,3.753,1723,6.059,1724,6.543,1725,4.677,1726,3.482,1729,3.936,1730,3.753,1732,2.471,1733,3.266,1735,3.482,1736,5.278,1737,4.385,1739,3.753,1741,3.753,1743,3.753,1745,4.95,1746,3.482,1747,3.753,1748,3.482,1750,2.677,1751,3.753,1753,4.385,1755,3.482,1757,4.75,1758,5.641,1759,3.482,1767,2.797,2383,5.525,2384,4.666,2385,4.666,2386,4.116,2387,4.116,2388,4.666,2389,4.666,2390,4.116,2391,4.116,2392,4.666,2393,4.116,2394,4.116,2395,4.116,2396,4.116,2397,4.116,2398,4.116,2399,4.116,2400,4.116,2401,4.116,2402,5.039,2403,3.753,2404,3.753,2405,3.753,2406,3.753]],["title/classes/ODataInStorageCache.html",[307,0.343,2407,3.521]],["body/classes/ODataInStorageCache.html",[0,1.05,3,0.077,4,0.077,5,0.077,6,0.107,8,0.058,9,0.492,10,0.235,16,2.113,25,1.844,26,0.124,27,0.01,31,0.442,34,0.346,35,3.674,37,0.067,41,3.799,49,1.703,50,3.951,60,0.866,94,0.241,141,0.965,152,3.224,202,2.281,209,0.599,218,0.581,227,3.674,228,2.113,229,1.008,230,1.273,233,2.189,239,1.543,242,1.013,245,4.282,247,1.847,249,1.067,254,0.183,286,1.225,294,0.564,301,0.238,305,0.006,306,0.007,307,0.337,309,0.196,311,0.843,316,0.325,319,1.106,349,1.942,402,1.757,424,0.256,429,2.045,622,4.255,636,2.189,638,2.763,662,2.042,664,2.113,1098,5.097,1226,2.695,1284,3.462,1297,1.993,1322,2.272,1405,2.189,1412,3.002,1427,5.119,1499,5.055,1538,3.769,1539,4.955,1551,5.141,1599,5.194,1621,6.169,1694,3.201,1695,3.201,1704,5.921,1706,4.74,1707,5.541,1708,4.415,1709,4.758,1710,5.541,1711,4.415,1712,4.758,1713,4.415,1714,4.415,1715,4.758,1716,4.758,1717,4.758,1718,5.872,1721,3.45,1723,5.908,1724,6.454,1725,4.828,1726,3.201,1729,2.695,1730,3.45,1732,2.272,1733,3.002,1735,3.201,1736,5.053,1737,4.141,1739,3.45,1741,3.45,1743,3.45,1745,4.74,1746,3.201,1747,3.45,1748,3.201,1750,2.461,1751,3.45,1753,4.141,1755,3.201,1757,4.586,1758,5.447,1759,3.201,1767,2.571,1773,3.201,2386,3.783,2387,3.783,2390,3.783,2391,3.783,2393,3.783,2394,3.783,2395,3.783,2396,3.783,2397,3.783,2398,3.783,2399,3.783,2400,3.783,2401,3.783,2402,4.758,2403,3.45,2404,3.45,2405,3.45,2406,3.45,2407,4.758,2408,3.783,2409,7.771,2410,5.915,2411,4.289,2412,4.289,2413,5.217,2414,4.289,2415,4.289,2416,4.289,2417,4.289,2418,3.45,2419,3.783,2420,3.783,2421,3.783,2422,3.783,2423,5.217,2424,3.783,2425,3.783,2426,3.783,2427,3.783,2428,3.783,2429,3.783]],["title/modules/ODataModule.html",[2430,3.521,2431,3.064]],["body/modules/ODataModule.html",[0,1.539,3,0.113,4,0.113,5,0.113,6,0.103,10,0.169,26,0.103,27,0.01,34,0.519,37,0.133,62,1.167,159,0.761,167,3.609,209,0.824,242,0.873,252,4.006,254,0.126,294,0.996,301,0.169,305,0.008,306,0.008,307,0.494,311,0.896,316,0.227,319,0.783,433,2.25,1276,2.807,1514,4.402,1871,3.21,1970,5.012,1976,4.16,2431,5.692,2432,5.059,2433,5.548,2434,7.173,2435,6.3,2436,5.909,2437,6.683,2438,6.289,2439,6.948,2440,6.289,2441,7.173,2442,7.173,2443,6.683,2444,5.059,2445,6.683,2446,5.548,2447,6.541,2448,6.683,2449,4.402,2450,4.694,2451,5.548,2452,5.548,2453,6.683,2454,7.445,2455,5.548,2456,5.548,2457,5.548,2458,5.548,2459,5.059,2460,5.548,2461,5.548,2462,5.548,2463,5.059,2464,5.548,2465,5.548,2466,5.548,2467,5.548,2468,6.683,2469,5.548,2470,6.683,2471,4.694,2472,5.548,2473,5.059,2474,5.548,2475,5.548,2476,5.548,2477,5.548]],["title/classes/ODataParameterParser.html",[307,0.343,1911,3.521]],["body/classes/ODataParameterParser.html",[3,0.081,4,0.081,5,0.081,6,0.121,8,0.061,9,0.51,10,0.232,19,1.612,25,1.331,26,0.123,27,0.01,31,0.614,34,0.436,37,0.096,49,1.623,51,3.089,60,0.784,94,0.244,159,0.547,173,3.437,209,0.895,216,1.815,222,1.702,224,1.792,225,2.082,229,1.542,230,1.149,231,3.205,232,2.271,234,4.271,236,2.824,238,2.284,242,1.141,243,3.951,247,1.054,249,0.806,254,0.177,257,2.016,267,2.756,268,1.623,275,3.246,294,0.981,296,3.675,297,2.082,301,0.227,305,0.006,306,0.006,307,0.481,309,0.207,311,0.873,316,0.322,319,1.056,349,1.483,368,2.328,414,1.278,423,1.16,424,0.196,429,2.405,576,1.842,586,2.119,591,2.297,648,0.92,649,4.29,679,2.393,746,2.065,791,3.274,839,2.988,1094,2.226,1114,3.162,1222,3.991,1274,2.151,1297,1.522,1544,2.592,1618,2.393,1830,4.28,1840,3.372,1846,2.988,1848,2.592,1857,3.517,1867,2.393,1893,5.61,1899,4.474,1900,4.474,1902,2.988,1903,2.988,1904,2.988,1906,3.985,1911,5.595,1918,3.985,1921,3.985,1923,6.58,1924,4.472,1925,5.567,1926,3.985,1927,3.372,1928,3.985,1929,3.372,1930,3.985,1931,5.44,1932,3.851,1933,4.29,1934,3.985,1935,3.985,1936,3.372,1937,5.567,1938,3.372,1939,5.567,1940,3.372,1941,4.574,1942,5.567,1943,4.574,1944,3.372,1945,3.372,1946,3.162,1947,3.372,1948,2.839,1949,2.839,1950,5.406,1951,3.985,1952,6.136,1953,3.985,1954,3.985,1955,2.988,1956,2.988,1957,2.839,1958,6.58,1959,7.255,1960,5.406,1961,5.406,1962,3.985,1963,3.985,1964,3.985,1965,3.985,1966,3.985,1967,3.985,2478,6.129,2479,4.518,2480,4.518,2481,4.518,2482,4.518,2483,4.518,2484,4.518,2485,4.518,2486,4.518,2487,4.518,2488,4.518,2489,4.518,2490,4.518,2491,4.518,2492,4.518]],["title/classes/ODataPathSegments.html",[307,0.343,1536,3.064]],["body/classes/ODataPathSegments.html",[3,0.074,4,0.074,5,0.074,6,0.119,8,0.078,9,0.478,10,0.228,19,2.151,25,1.865,26,0.123,27,0.01,29,3.909,31,0.611,34,0.457,37,0.09,42,3.26,49,1.544,52,2.734,60,1.063,62,0.885,67,1.134,84,2.358,94,0.243,130,1.748,159,0.867,209,0.892,216,1.306,224,1.694,229,1.221,230,0.633,235,2.097,239,1.78,242,1.153,247,0.959,249,1.138,254,0.181,286,1.866,294,0.942,295,2.734,301,0.23,305,0.006,306,0.006,307,0.322,309,0.188,311,0.818,316,0.314,319,1.059,326,1.459,327,1.107,342,2.695,344,2.779,345,2.076,346,1.93,359,2.632,360,1.583,365,1.03,368,1.792,414,1.624,424,0.178,426,2.677,532,1.315,610,4.285,648,0.862,652,1.985,1094,2.024,1222,2.358,1226,2.582,1281,3.26,1288,2.024,1420,3.624,1536,4.633,1538,1.956,1548,2.876,1590,5.627,1614,3.067,1729,2.582,1733,4.019,1769,5.323,1777,2.876,1778,4.618,1779,3.305,1780,3.305,2064,5.277,2095,2.582,2159,6.064,2160,6.064,2161,3.305,2162,5.323,2245,2.876,2493,3.624,2494,6.618,2495,5.838,2496,5.064,2497,6.282,2498,5.742,2499,5.742,2500,4.109,2501,4.109,2502,5.742,2503,6.684,2504,4.109,2505,4.109,2506,4.109,2507,4.109,2508,4.618,2509,4.109,2510,4.109,2511,4.109,2512,3.624,2513,4.109,2514,4.109,2515,4.109,2516,4.109,2517,3.624,2518,4.109,2519,4.109,2520,4.109,2521,4.109,2522,6.32,2523,3.067,2524,3.624,2525,5.742,2526,4.109,2527,4.109,2528,5.742,2529,5.742,2530,6.618,2531,4.109,2532,4.109,2533,5.742,2534,4.109,2535,4.109,2536,4.109,2537,4.109,2538,3.305,2539,4.109,2540,4.109,2541,4.109,2542,5.742,2543,4.109,2544,4.109,2545,4.109,2546,4.109,2547,4.109,2548,4.109,2549,4.109,2550,7.165,2551,4.109,2552,6.618,2553,4.109,2554,4.109,2555,4.109,2556,4.109,2557,4.109,2558,5.742,2559,6.618,2560,3.624,2561,3.624,2562,3.624,2563,3.624,2564,4.109,2565,4.109,2566,4.109,2567,5.742,2568,4.109,2569,4.109,2570,4.109,2571,4.109,2572,4.109,2573,4.109,2574,4.109,2575,4.109,2576,4.109,2577,4.109,2578,5.742,2579,4.109,2580,4.109,2581,4.109,2582,5.742,2583,4.109,2584,4.109]],["title/classes/ODataPathSegmentsHandler.html",[307,0.343,2585,3.521]],["body/classes/ODataPathSegmentsHandler.html",[3,0.105,4,0.105,5,0.105,6,0.121,8,0.08,10,0.195,26,0.107,27,0.01,34,0.483,37,0.114,52,2.805,55,3.093,56,3.93,57,2.278,58,4.372,60,1.132,62,1.272,63,2.854,94,0.195,130,1.794,159,0.881,209,0.925,230,1.122,249,1.151,254,0.159,295,3.467,301,0.195,305,0.007,306,0.007,307,0.571,309,0.27,311,1.038,316,0.319,319,1.09,327,1.587,424,0.255,570,2.207,648,0.885,1409,5.434,1536,5.778,1538,2.805,1590,5.226,1977,3.897,2064,6.047,2496,5.196,2497,5.434,2503,4.739,2508,5.856,2523,4.397,2585,5.856,2586,5.196,2587,5.891,2588,5.891,2589,5.891,2590,5.891,2591,5.891,2592,5.891,2593,5.891,2594,5.891,2595,5.196,2596,5.196,2597,6.422,2598,5.196,2599,6.422,2600,5.196,2601,6.97,2602,5.196,2603,5.196,2604,5.196,2605,5.196,2606,6.97,2607,5.196,2608,5.196,2609,5.196,2610,5.196,2611,5.196,2612,5.196,2613,5.196,2614,5.196,2615,5.196,2616,5.196]],["title/classes/ODataPropertyAnnotations.html",[307,0.343,1346,2.895]],["body/classes/ODataPropertyAnnotations.html",[3,0.084,4,0.084,5,0.084,6,0.064,8,0.064,9,0.592,10,0.204,14,2.041,25,1.769,26,0.121,27,0.01,30,2.173,32,3.614,34,0.369,37,0.119,48,1.369,49,1.659,54,3.388,55,1.767,57,1.301,61,1.301,71,2.173,72,2.173,73,2.323,94,0.234,150,3.004,152,3.877,156,2.369,159,0.571,173,3.276,209,0.937,218,0.746,230,1.095,242,0.654,247,1.1,249,1.071,254,0.178,269,1.631,294,1.178,297,3.276,301,0.204,305,0.006,306,0.006,307,0.596,309,0.216,311,0.899,316,0.294,319,0.985,346,2.24,402,2.111,424,0.204,425,1.828,606,2.364,638,2.542,1141,4.262,1289,3.711,1295,3.964,1297,2.557,1315,6.216,1316,3.519,1317,4.356,1318,4.708,1319,3.474,1321,5.306,1322,2.498,1323,4.173,1326,3.519,1328,4.467,1330,5.905,1332,5.905,1334,4.708,1340,3.519,1341,3.519,1342,3.519,1343,3.519,1344,3.519,1345,2.498,1346,5.767,1347,6.077,1348,5.306,1349,5.306,1350,4.702,1351,5.386,1352,5.306,1353,5.306,1354,3.519,1355,5.589,1356,3.519,1357,3.519,1358,3.519,1359,3.519,1360,3.519,1361,3.519,1362,3.519,1363,4.708,1364,4.708,1365,3.519,1366,3.519,1367,3.519,1368,3.519,1369,3.519,1370,3.519,1371,3.519,1372,3.519,1373,3.519,1374,5.306,1375,3.519,1376,4.708,1377,5.589,1378,5.306,1379,3.519,1380,3.519,1381,3.519,1382,4.708,1383,6.077,1384,4.708,1385,4.708,1386,4.708,1387,3.519,1388,3.519,1389,3.519,1390,3.519,1391,3.519,1392,3.519,1393,5.306,1394,3.519,1395,4.708,1396,3.519,1397,3.519,1398,3.519,1994,3.793,1999,3.793,2000,3.793,2617,4.716,2618,4.716,2619,4.716]],["title/classes/ODataQueryOptions.html",[307,0.343,2620,3.861]],["body/classes/ODataQueryOptions.html",[3,0.078,4,0.078,5,0.078,6,0.119,8,0.059,9,0.497,10,0.222,19,1.571,25,1.727,26,0.121,27,0.01,28,4.103,29,2.666,31,0.509,34,0.485,37,0.094,60,1.124,61,1.201,64,1.977,65,2.026,66,1.504,67,2.027,68,1.393,69,3.757,70,2.077,71,2.005,72,2.005,73,2.143,75,2.396,94,0.226,130,2.479,141,0.972,159,0.723,209,0.863,216,1.179,224,1.763,229,1.312,235,2.221,239,1.361,242,0.829,246,3.232,247,1.592,249,0.786,254,0.171,286,1.742,294,0.897,295,2.844,301,0.228,305,0.006,306,0.006,307,0.341,309,0.199,311,0.851,316,0.315,319,1.06,326,1.545,327,1.172,328,1.912,329,1.393,331,2.508,332,1.774,333,2.436,334,2.367,335,2.301,336,2.301,337,2.367,339,1.393,341,2.351,342,2.655,344,2.864,345,2.23,346,1.978,373,1.466,402,2.701,410,1.676,414,1.689,424,0.188,532,1.393,586,1.504,630,4.012,648,1.024,678,5.09,699,4.182,700,4.182,701,3.046,703,2.608,705,3.046,706,3.046,707,3.581,719,4.775,720,2.878,830,2.878,1025,4.805,1026,4.805,1027,4.805,1028,4.805,1029,4.805,1030,4.805,1031,4.805,1049,3.247,1297,2.744,1706,3.046,1729,3.754,1933,3.046,2095,3.754,2280,3.5,2495,6.017,2512,3.838,2517,3.838,2522,5.269,2524,3.838,2560,3.838,2561,3.838,2562,5.269,2563,3.838,2620,6.017,2621,3.838,2622,7.696,2623,5.974,2624,7.343,2625,5.974,2626,5.974,2627,4.351,2628,4.351,2629,5.974,2630,6.19,2631,4.351,2632,5.974,2633,4.351,2634,4.351,2635,4.351,2636,5.974,2637,4.351,2638,4.351,2639,4.351,2640,4.351,2641,4.351,2642,4.351,2643,6.477,2644,4.351,2645,3.838,2646,4.351,2647,4.351,2648,4.351,2649,4.351,2650,5.974,2651,5.974,2652,5.974,2653,5.974,2654,4.351,2655,4.351,2656,4.351,2657,4.351,2658,5.269,2659,4.351,2660,6.822,2661,5.974,2662,4.351,2663,5.974,2664,4.351,2665,4.351,2666,4.351,2667,4.351,2668,4.351,2669,4.351,2670,4.351,2671,4.351,2672,4.351,2673,4.351,2674,4.351,2675,4.351,2676,4.351,2677,4.351,2678,4.351,2679,4.351,2680,5.974,2681,4.351,2682,4.351,2683,4.351,2684,4.351,2685,5.974,2686,5.974,2687,5.974,2688,5.974,2689,5.974,2690,4.351,2691,4.351]],["title/classes/ODataReferential.html",[307,0.343,2103,3.521]],["body/classes/ODataReferential.html",[3,0.044,4,0.044,5,0.044,6,0.075,8,0.033,9,0.462,10,0.066,14,1.065,25,0.85,26,0.117,27,0.01,30,1.134,31,0.633,34,0.395,37,0.095,49,1.504,51,1.55,57,1.779,60,1.094,64,0.713,65,1.162,67,1.531,76,3.549,87,1.413,94,0.24,108,2.073,109,1.304,110,2.073,132,0.83,133,0.83,141,0.863,150,2.319,157,0.975,159,0.589,173,1.134,177,1.304,202,2.434,209,0.909,216,1.73,218,0.384,221,3.055,222,2.092,223,3.055,224,1.656,225,1.803,229,1.486,230,1.218,231,1.803,232,1.191,236,1.803,237,1.997,238,0.808,239,0.561,240,0.83,241,1.413,242,1.181,243,2.579,249,1.163,250,2.733,254,0.172,257,1.746,263,1.684,267,1.929,268,1.577,273,2.155,284,2.677,286,1.253,287,3.543,288,1.413,289,2.97,290,1.413,292,1.356,294,0.922,295,2.641,296,3.175,297,3.328,301,0.066,304,2.832,305,0.004,306,0.004,307,0.435,309,0.113,316,0.176,319,0.841,324,3.27,325,2.586,326,0.874,327,0.663,345,0.713,349,1.285,359,2.219,360,2.137,365,2.089,366,1.52,368,2.012,374,1.693,402,1.914,410,2.701,414,1.911,423,1.005,424,0.262,426,2.49,429,2.229,576,2.755,586,2.337,591,1.825,634,1.172,636,1.257,649,2.739,652,1.684,661,3.147,679,3.714,703,2.346,707,2.346,791,3.033,792,1.213,873,1.643,930,3.147,1094,1.213,1114,1.723,1141,1.476,1222,3.473,1224,1.98,1270,2.399,1276,2.702,1279,1.257,1281,1.928,1284,1.595,1288,1.928,1289,2.476,1297,1.641,1317,1.413,1319,2.155,1328,2.459,1345,3.921,1350,1.628,1438,1.838,1439,1.838,1548,1.723,1555,1.723,1614,2.92,1618,2.579,1670,3.917,1732,1.304,1757,2.459,1830,2.245,1834,1.476,1848,2.794,1857,2.794,1867,1.304,1869,1.413,1871,3.29,1872,1.547,1873,1.547,1874,2.682,1875,1.547,1876,1.476,1877,1.547,1878,1.547,1879,1.547,1886,1.356,1893,5.23,1899,3.473,1900,3.473,1902,1.628,1903,1.628,1904,1.628,1924,3.326,1925,6.218,1927,3.634,1929,3.634,1931,4.778,1932,3.06,1933,2.739,1936,1.838,1937,2.92,1938,1.838,1939,1.838,1940,2.92,1941,2.92,1942,1.838,1943,3.634,1944,1.838,1945,1.838,1946,1.723,1947,4.14,1948,1.547,1949,1.547,1955,2.588,1956,1.628,1957,1.547,2089,3.917,2090,4.462,2093,4.893,2094,2.172,2095,1.547,2096,1.838,2097,3.147,2098,3.147,2099,3.147,2100,4.462,2101,3.147,2102,2.172,2103,3.917,2104,2.172,2105,2.172,2106,1.838,2107,3.452,2108,2.172,2109,2.172,2110,2.172,2111,2.172,2112,5.339,2113,2.172,2114,5.339,2115,2.172,2116,2.172,2117,2.172,2118,3.452,2119,2.172,2120,2.172,2121,2.172,2122,2.172,2123,2.172,2124,2.92,2125,3.409,2126,6.185,2127,2.172,2128,2.172,2129,2.172,2130,2.172,2131,2.172,2132,2.172,2133,2.172,2134,3.452,2135,3.452,2136,3.452,2137,3.452,2138,3.147,2139,2.172,2140,3.452,2141,2.172,2142,2.172,2143,3.452,2144,2.172,2145,2.172,2146,2.172,2147,3.452,2148,2.172,2149,3.452,2150,3.452,2151,3.452,2152,3.452,2153,3.452,2154,3.452,2155,3.452,2156,5.685,2157,4.295,2158,2.172,2159,4.869,2160,4.869,2161,1.98,2162,3.917,2163,2.172,2164,2.172,2165,2.172,2166,2.172,2167,2.172,2168,2.172,2169,2.172,2170,2.172,2171,2.172,2172,2.172,2173,2.172,2174,2.172,2175,2.172,2176,2.172,2177,2.172,2178,2.172,2179,2.172,2180,7.472,2181,2.172,2182,2.172,2183,2.172,2184,2.172,2185,5.685,2186,2.172,2187,1.838,2188,3.452,2189,2.172,2190,3.452,2191,2.172,2192,2.172,2193,4.295,2194,2.172,2195,2.172,2196,2.172,2197,2.172,2198,2.172,2199,2.172,2200,2.172,2201,2.172,2202,2.172,2203,1.723,2204,1.98,2205,2.172,2206,3.452,2207,5.339,2208,2.172,2209,2.172,2210,2.172,2211,2.172,2212,2.172,2213,2.172,2214,2.172,2215,2.172,2216,2.172,2217,2.172,2218,3.147,2219,2.172,2220,2.172,2221,5.96,2222,7.126,2223,5.825,2224,3.452,2225,3.452,2226,2.172,2227,4.893,2228,2.172,2229,2.172,2230,2.172,2231,2.172,2232,2.172,2233,2.172,2234,5.685,2235,2.172,2236,1.838,2237,2.172,2238,2.172,2239,2.172,2240,2.172,2241,2.172,2242,2.172,2243,2.172,2244,3.452,2245,1.723,2246,1.838,2247,1.838,2248,1.838,2249,2.172,2250,3.917,2251,4.893,2252,2.172,2253,2.172,2254,2.172,2255,2.172,2256,2.172,2257,2.172,2258,2.172,2259,2.172,2260,3.452,2261,2.172,2262,2.172,2263,2.172,2264,2.172,2265,2.172,2266,2.172,2267,2.172,2268,2.172,2269,2.172,2270,2.172,2271,2.172,2272,2.172,2273,2.172,2274,2.172,2275,4.295,2276,3.452,2277,3.452,2278,2.172,2279,2.172,2280,1.98,2281,2.172,2282,2.172,2283,2.172,2284,2.172,2285,2.172,2286,3.452,2287,5.339,2288,2.172,2289,2.172,2290,3.452,2291,3.452,2292,2.172,2293,3.452,2294,2.172,2295,3.452,2296,3.452,2297,2.172,2298,2.172,2299,2.172,2300,4.295,2301,2.172,2302,2.172,2692,2.462]],["title/classes/ODataRequest.html",[307,0.343,1499,2.511]],["body/classes/ODataRequest.html",[1,1.922,3,0.062,4,0.062,5,0.062,6,0.122,8,0.047,9,0.425,10,0.218,11,2.814,12,4.244,14,3.2,15,4.047,16,3.643,19,2.165,20,3.468,24,3.898,25,1.11,26,0.118,27,0.01,28,3.262,29,2.969,31,0.607,34,0.447,37,0.055,41,3.289,42,2.517,43,3.523,49,2.028,53,1.849,54,1.558,57,1.954,60,0.906,61,0.963,64,1.011,65,1.037,67,0.963,70,1.063,71,1.608,72,1.608,94,0.237,130,1.063,141,0.497,159,0.731,202,1.176,203,2.003,205,1.922,208,2.003,209,0.871,216,1.313,228,3.764,229,1.03,233,3.085,235,1.782,242,1.06,249,1.068,250,2.517,254,0.149,257,2.28,269,1.207,272,3.523,294,0.459,301,0.137,304,2.608,305,0.005,306,0.005,307,0.274,309,0.16,311,0.728,316,0.325,319,0.881,327,0.94,359,2.428,360,1.345,365,1.281,402,2.102,414,2.378,424,0.151,433,1.795,622,4.18,635,1.636,652,2.557,724,4.508,815,3.775,1094,1.72,1322,3.749,1345,4.149,1351,2.309,1404,2.808,1427,4.062,1430,2.605,1459,3.079,1471,3.079,1475,3.079,1477,3.079,1499,3.817,1512,5.35,1514,2.443,1515,5.702,1516,4.696,1524,2.808,1537,5.702,1538,3.868,1541,3.813,1554,5.867,1555,3.576,1588,4.51,1589,3.079,1601,2.605,1605,5.867,1608,6.523,1629,3.079,1632,5.52,1633,3.079,1634,3.079,1645,6.523,2693,3.491,2694,6.043,2695,6.043,2696,6.043,2697,6.043,2698,6.043,2699,6.043,2700,7.079,2701,6.652,2702,6.652,2703,6.652,2704,6.652,2705,6.043,2706,6.043,2707,6.043,2708,4.507,2709,5.109,2710,3.079,2711,3.491,2712,3.491,2713,3.491,2714,6.652,2715,3.491,2716,7.079,2717,7.079,2718,3.491,2719,3.491,2720,3.491,2721,6.652,2722,3.491,2723,3.491,2724,3.491,2725,3.491,2726,3.491,2727,3.491,2728,3.491,2729,3.491,2730,3.491,2731,3.491,2732,3.491,2733,3.491,2734,3.491,2735,3.491,2736,3.491,2737,3.491,2738,3.491,2739,3.491,2740,3.491,2741,3.491,2742,3.491,2743,3.491,2744,3.491,2745,3.491,2746,3.491,2747,3.491,2748,3.491,2749,3.491,2750,3.491,2751,3.491,2752,3.491,2753,3.491,2754,3.491,2755,5.109,2756,3.491,2757,6.043,2758,3.491,2759,3.079,2760,3.079,2761,3.079,2762,3.491,2763,3.491,2764,3.491,2765,3.491,2766,3.491,2767,7.079,2768,3.491,2769,6.652,2770,5.109,2771,3.491,2772,5.109,2773,5.109,2774,3.491,2775,3.491,2776,3.491,2777,3.491,2778,3.491,2779,5.109,2780,6.652,2781,3.491,2782,6.043,2783,5.109,2784,6.043,2785,3.491,2786,5.109,2787,3.491,2788,3.491,2789,7.396,2790,3.491,2791,3.491,2792,3.491,2793,3.491,2794,3.491,2795,5.109,2796,3.491,2797,3.491,2798,3.491,2799,3.491,2800,3.491,2801,3.491,2802,3.491,2803,3.491,2804,3.491,2805,3.491,2806,5.109,2807,3.491,2808,3.491,2809,3.491,2810,3.491,2811,3.491,2812,3.491,2813,3.491,2814,3.491,2815,3.491,2816,3.491,2817,3.491,2818,3.491,2819,5.109,2820,3.491,2821,3.491,2822,3.491,2823,5.109,2824,3.491,2825,3.491,2826,3.491,2827,5.109,2828,3.491,2829,3.491,2830,3.491,2831,3.491,2832,3.491,2833,3.491,2834,3.491,2835,3.491,2836,6.652,2837,3.491,2838,3.079,2839,3.491,2840,3.491,2841,3.491,2842,3.491,2843,3.491,2844,3.491,2845,3.491,2846,3.491,2847,3.491,2848,3.491,2849,3.491,2850,3.491,2851,3.491,2852,3.491,2853,3.491,2854,3.491,2855,7.079,2856,3.491,2857,5.109,2858,5.109,2859,3.491,2860,3.491,2861,3.491,2862,3.491,2863,3.491,2864,3.491,2865,3.491,2866,3.491,2867,3.491,2868,3.491,2869,3.491,2870,3.491,2871,3.491]],["title/classes/ODataResponse.html",[307,0.343,1539,2.624]],["body/classes/ODataResponse.html",[3,0.07,4,0.07,5,0.07,6,0.12,8,0.053,9,0.461,10,0.226,14,2.784,16,3.784,23,1.922,25,1.521,26,0.118,27,0.01,34,0.492,37,0.061,38,3.176,39,2.238,40,2.238,49,1.985,57,2.298,60,1.065,94,0.22,141,0.789,152,3.761,159,0.67,209,0.854,218,0.544,227,1.688,228,4.255,229,1.461,230,1.331,233,3.92,242,1.244,245,4.341,249,1.01,254,0.154,269,2.421,272,4.41,286,1.45,294,1.039,295,1.857,301,0.198,305,0.006,306,0.006,307,0.306,309,0.179,311,0.789,316,0.318,319,1.048,345,2.029,402,2.62,414,1.103,424,0.169,433,2.281,633,3.284,635,1.772,652,2.225,672,3.44,703,2.338,707,2.338,724,3.784,815,4.25,1094,1.922,1284,1.59,1295,4.043,1297,2.168,1317,2.238,1322,3.408,1323,3.661,1346,3.661,1351,4.255,1355,3.661,1377,3.661,1404,4.452,1405,2.825,1427,4.778,1430,2.911,1469,4.882,1499,4.533,1512,4.452,1513,6.775,1514,2.73,1515,5.226,1516,4.736,1518,3.44,1524,3.137,1534,3.44,1537,5.226,1538,3.761,1539,4.604,1546,3.44,1551,3.857,1599,4.043,1600,4.882,1601,2.911,1675,5.675,1694,5.732,1695,5.732,1746,6.024,1823,4.452,2708,4.882,2710,3.44,2759,3.44,2760,3.44,2761,3.44,2872,3.901,2873,6.434,2874,6.434,2875,6.434,2876,6.434,2877,5.535,2878,5.535,2879,3.901,2880,3.901,2881,5.632,2882,3.901,2883,3.901,2884,3.901,2885,3.901,2886,5.675,2887,3.901,2888,5.175,2889,5.535,2890,3.901,2891,3.901,2892,3.901,2893,3.901,2894,5.675,2895,3.901,2896,3.901,2897,3.901,2898,3.901,2899,3.901,2900,3.901,2901,3.901,2902,3.901,2903,3.901,2904,3.901,2905,3.901,2906,5.535,2907,3.901,2908,3.901,2909,5.535,2910,5.535,2911,3.901,2912,3.901,2913,3.901,2914,3.901,2915,3.901,2916,3.901,2917,3.901,2918,3.901,2919,3.901,2920,3.901,2921,3.901,2922,3.901,2923,6.434,2924,3.901,2925,3.901,2926,3.901,2927,3.901,2928,6.434,2929,3.901,2930,3.901,2931,3.901,2932,3.44,2933,3.901,2934,3.901,2935,3.901,2936,3.901,2937,5.535,2938,3.901,2939,3.901,2940,3.901,2941,3.901,2942,5.535,2943,3.901,2944,3.901,2945,4.452,2946,3.901,2947,3.901,2948,4.882,2949,3.901,2950,3.901,2951,6.434,2952,3.901,2953,3.901,2954,6.434,2955,3.901,2956,3.901,2957,7.394,2958,6.434,2959,7.394,2960,3.901,2961,5.535,2962,5.535,2963,3.901,2964,6.434,2965,3.901,2966,6.775,2967,6.434,2968,6.434,2969,5.535,2970,3.901,2971,6.434,2972,3.901,2973,3.901,2974,3.901,2975,3.901,2976,3.901,2977,3.901,2978,3.901]],["title/classes/ODataResponseOptions.html",[307,0.343,2881,3.521]],["body/classes/ODataResponseOptions.html",[3,0.095,4,0.095,5,0.095,6,0.123,8,0.072,9,0.566,10,0.245,23,3.91,26,0.122,27,0.01,31,0.593,32,3.779,33,4.204,34,0.44,37,0.083,41,3.333,47,3.902,48,1.448,49,1.754,50,3.035,54,3.355,60,0.87,94,0.244,141,0.969,159,0.64,204,4.554,205,4.14,209,0.689,216,1.566,217,4.314,219,4.507,220,4.922,242,0.734,247,1.916,254,0.169,294,0.695,301,0.225,305,0.007,306,0.007,307,0.415,309,0.242,311,0.969,316,0.327,319,1.046,346,2.138,365,1.705,366,2.123,375,2.288,377,3.253,410,3.057,414,1.923,423,1.746,424,0.229,635,2.177,1093,4.253,1094,2.605,1190,5.47,1274,3.238,1276,2.36,1317,4.554,1405,2.699,1434,4.664,1438,5.076,1439,3.946,1464,4.664,1491,4.664,1548,4.761,1801,4.253,2218,6.047,2881,6.047,2932,4.664,2945,6.876,2948,4.664,2979,5.288,2980,6.801,2981,6.801,2982,6.801,2983,6.801,2984,6.801,2985,6.801,2986,5.288,2987,5.288,2988,5.288,2989,5.288,2990,5.288,2991,5.288,2992,5.288,2993,6.801,2994,5.288,2995,6.801,2996,5.288,2997,6.801,2998,5.288,2999,6.801,3000,5.288,3001,6.801,3002,6.801,3003,5.288,3004,5.288,3005,5.288,3006,6.801,3007,6.801,3008,5.288,3009,5.288,3010,5.288,3011,5.288,3012,5.288,3013,5.288,3014,5.288,3015,5.288,3016,5.288,3017,5.288,3018,4.664,3019,5.288,3020,5.288,3021,5.288,3022,5.288,3023,5.288,3024,5.288,3025,5.288,3026,5.288,3027,5.288,3028,5.288,3029,5.288]],["title/classes/ODataSchema.html",[307,0.343,1835,2.75]],["body/classes/ODataSchema.html",[3,0.083,4,0.083,5,0.083,6,0.121,8,0.063,9,0.517,10,0.233,25,1.35,26,0.125,27,0.01,34,0.498,37,0.072,48,1.686,51,1.827,60,0.795,62,0.957,94,0.245,159,0.558,209,0.852,216,1.226,218,0.61,224,1.287,229,1.338,230,1.21,242,1.044,247,1.45,249,1.106,250,2.272,254,0.171,261,4.316,263,2.149,267,2.785,268,1.64,269,2.149,270,4.143,272,3.985,274,4.51,276,4.214,278,3.871,294,0.989,301,0.236,304,2.354,305,0.006,306,0.006,307,0.362,309,0.211,311,0.886,316,0.325,319,1.06,365,1.156,368,1.94,424,0.2,591,2.329,635,1.989,638,2.194,648,0.692,791,1.936,815,3.172,830,3.05,873,3.472,972,4.999,1270,3.986,1272,3.566,1273,3.566,1274,2.959,1276,3.505,1277,3.292,1278,2.54,1279,3.172,1281,3.706,1282,3.422,1283,3.422,1284,2.534,1285,2.54,1286,2.54,1288,3.062,1289,2.058,1290,2.54,1297,2.534,1405,2.354,1515,6.038,1516,5.04,1601,3.442,1827,6.051,1830,4.642,1835,3.905,1843,2.765,1845,3.05,1846,3.05,1884,2.765,1885,2.765,1886,2.54,1899,4.506,1900,4.506,1949,2.898,2046,5.654,2048,4.638,2138,3.709,2303,6.051,3030,4.612,3031,6.215,3032,6.215,3033,6.215,3034,6.215,3035,6.215,3036,6.215,3037,4.612,3038,4.612,3039,4.612,3040,7.523,3041,4.612,3042,4.612,3043,4.612,3044,4.612,3045,6.215,3046,7.523,3047,4.612,3048,6.215,3049,4.612,3050,6.215,3051,4.612,3052,6.215,3053,4.612,3054,6.215,3055,4.612,3056,4.612,3057,4.612,3058,4.612,3059,4.612,3060,4.612,3061,4.612,3062,4.612,3063,4.612,3064,4.612,3065,4.612,3066,4.612,3067,4.612,3068,4.612,3069,4.612,3070,4.612,3071,4.612,3072,4.612,3073,4.612,3074,4.612,3075,4.612,3076,4.612,3077,4.612,3078,7.03,3079,4.612,3080,6.215,3081,4.612,3082,4.612,3083,6.215,3084,6.215,3085,4.612,3086,6.215,3087,4.612,3088,4.612,3089,4.612,3090,4.612,3091,4.612,3092,4.612,3093,4.612,3094,4.612,3095,4.612]],["title/classes/ODataSchemaElement.html",[307,0.343,1829,2.895]],["body/classes/ODataSchemaElement.html",[3,0.086,4,0.086,5,0.086,6,0.118,8,0.065,9,0.53,10,0.227,25,1.659,26,0.127,27,0.01,31,0.661,34,0.447,37,0.075,45,3.034,60,0.917,62,0.982,94,0.245,159,0.579,177,2.536,202,2.679,209,0.87,210,4.029,218,0.626,230,0.982,239,1.091,247,1.117,249,0.63,254,0.177,262,3.375,263,2.886,267,2.525,268,1.856,269,2.477,301,0.23,305,0.006,306,0.006,307,0.376,309,0.219,311,0.908,316,0.318,319,1.132,325,2.775,327,1.29,349,1.572,365,2.151,414,1.354,424,0.276,426,2.543,429,1.655,635,2.04,638,2.236,648,0.719,791,3.56,873,3.604,1270,4.029,1272,3.657,1273,3.657,1274,2.28,1276,2.844,1277,3.375,1278,2.636,1279,4.059,1281,3.918,1282,3.509,1283,3.509,1284,3.114,1285,2.636,1286,2.636,1288,3.139,1289,2.137,1290,2.636,1418,3.573,1516,4.294,1618,2.536,1732,4.662,1750,4.692,1829,5.608,1831,4.461,1832,4.461,1833,4.004,1834,4.578,1835,5.139,1843,2.87,1845,5.409,1861,4.461,1863,4.461,1864,4.461,1866,4.461,1867,3.375,1869,3.657,1871,3.253,1872,4.004,1873,4.004,1874,3.509,1875,4.004,1876,3.82,1877,4.004,1878,4.004,1879,4.004,1880,3.351,1882,4.215,1883,4.461,1884,2.87,1885,2.87,1886,2.636,1896,5.621,1948,3.008,1957,3.008,2203,3.351,2204,3.851,3096,4.787,3097,6.373,3098,4.787,3099,4.787,3100,4.787,3101,4.787,3102,4.787,3103,4.787,3104,4.787,3105,4.787,3106,4.787,3107,4.787,3108,4.787,3109,6.373,3110,4.787,3111,6.373]],["title/injectables/ODataServiceFactory.html",[2436,3.064,3112,3.861]],["body/injectables/ODataServiceFactory.html",[3,0.108,4,0.108,5,0.108,6,0.113,8,0.082,10,0.214,26,0.121,27,0.01,34,0.487,37,0.095,55,2.996,56,4.233,94,0.244,202,2.807,209,0.75,218,0.727,230,1.14,254,0.182,294,0.973,301,0.229,303,4.413,305,0.008,306,0.008,307,0.627,311,1.055,316,0.289,319,0.921,424,0.262,570,2.268,648,1.111,815,4.571,830,5.652,1284,3.018,1345,4.413,1516,4.994,1588,6.218,1871,4.253,2435,6.218,2436,5.181,2449,4.236,2450,5.968,3112,6.529,3113,5.338,3114,6.052,3115,6.052,3116,6.052,3117,6.052,3118,9.01,3119,6.052,3120,8.331,3121,8.331,3122,6.052,3123,6.052,3124,8.331,3125,6.701,3126,7.402]],["title/classes/ODataSingletonService.html",[307,0.343,3125,3.521]],["body/classes/ODataSingletonService.html",[3,0.093,4,0.093,5,0.093,6,0.107,8,0.07,10,0.224,14,3.617,19,1.765,26,0.121,27,0.01,34,0.461,35,3.732,36,2.388,37,0.081,48,1.715,56,4.106,94,0.18,202,2.905,209,0.798,218,0.659,227,3.408,229,1.558,242,0.932,247,1.209,254,0.168,286,1.39,293,5.011,296,4.118,301,0.236,303,4.428,305,0.007,306,0.007,307,0.407,309,0.237,311,0.957,316,0.311,319,1.059,325,2.149,402,2.339,425,2.422,635,2.149,638,2.547,648,1.225,815,4.647,1141,4.722,1284,3.212,1319,4.493,1328,5.253,1405,3.427,1538,4.051,1541,5.557,1544,3.852,1551,4.024,1555,5.711,1578,5.921,1632,6.239,1767,3.107,1777,3.628,2052,6.563,2054,6.568,2055,6.724,2056,5.921,2057,5.921,2058,5.921,2061,6.948,2066,4.571,2067,5.921,2068,5.4,2069,4.571,2070,4.571,2071,5.921,2072,5.4,2073,4.571,2074,4.571,2075,5.921,2076,5.4,2077,4.571,2080,4.571,2081,4.571,2083,4.571,2250,6.724,2888,4.168,3125,5.4,3127,5.182,3128,6.713,3129,6.713,3130,7.446,3131,5.182,3132,5.182,3133,6.713,3134,5.182,3135,7.446,3136,5.182,3137,5.182,3138,5.182,3139,5.182,3140,5.182,3141,5.182,3142,5.182,3143,5.182,3144,5.182,3145,5.182,3146,6.713,3147,5.182,3148,5.182]],["title/classes/Operator.html",[307,0.343,386,1.954]],["body/classes/Operator.html",[0,1.298,3,0.041,4,0.041,5,0.041,6,0.092,8,0.031,10,0.142,19,0.598,25,1.152,26,0.117,27,0.01,31,0.552,34,0.44,37,0.136,46,3.119,60,0.924,61,0.628,62,1.113,64,0.659,65,0.676,66,0.787,67,0.628,68,0.728,70,0.693,94,0.242,130,2.443,141,0.658,159,0.445,209,0.941,216,1.426,218,0.454,222,1.131,224,1.886,229,1.488,230,1.236,232,0.693,239,0.518,242,0.864,249,0.896,254,0.161,268,1.59,284,0.747,286,1.457,294,1.199,301,0.156,305,0.004,306,0.004,307,0.64,308,2.062,309,0.104,310,1.016,311,0.524,314,1.048,315,4.175,316,0.236,318,4.067,319,0.724,320,1.048,322,1.048,324,1.59,325,0.728,326,0.808,327,0.613,328,2.252,329,1.176,330,1.048,331,1.543,332,1.498,333,1.498,334,1.455,335,1.415,336,1.415,337,1.455,338,4.11,339,2.41,340,2.536,341,2.757,342,2.757,343,2.837,344,0.955,345,2.249,346,1.99,347,2.206,348,1.34,349,1.911,350,1.048,351,1.048,352,1.048,353,1.048,354,1.415,355,1.048,356,1.048,357,1.048,358,0.985,359,0.747,360,1.415,361,1.048,362,1.048,363,1.693,364,2.129,365,0.57,366,1.442,367,1.048,368,0.71,369,1.048,370,1.048,371,1.048,372,1.048,373,0.767,374,0.985,375,0.985,376,1.048,377,3.311,378,1.048,379,1.048,380,1.048,381,1.048,382,1.048,383,1.048,384,1.048,385,1.048,386,3.225,387,1.048,388,2.227,389,1.048,390,2.777,391,1.048,392,1.048,393,1.048,394,1.048,395,1.048,396,1.048,397,1.048,398,1.048,399,1.048,400,1.048,401,1.048,402,1.091,403,1.048,404,1.048,405,1.048,406,1.048,407,1.048,408,1.048,409,1.048,410,2.846,411,2.681,412,1.048,413,1.048,414,0.643,415,1.048,416,1.048,417,1.693,418,1.048,419,1.048,420,1.016,421,1.048,422,1.016,423,1.598,424,0.252,425,2.217,426,0.808,427,1.96,428,2.305,429,1.598,430,2.867,431,2.129,432,3.576,433,1.944,434,2.152,435,1.693,436,2.129,437,2.443,438,1.693,439,1.048,440,2.129,441,2.129,442,2.443,443,1.693,444,1.048,445,2.129,446,1.048,447,2.062,448,1.048,449,1.048,450,1.048,451,1.048,452,1.048,453,1.048,454,1.048,455,1.048,456,1.048,457,1.048,458,1.048,459,1.048,460,1.048,461,1.377,462,1.048,463,1.048,464,2.062,465,1.048,466,1.048,467,1.048,468,1.048,469,2.062,470,1.048,471,1.693,472,1.048,473,1.048,474,1.048,475,1.048,476,1.048,477,1.048,478,1.048,479,2.129,480,1.048,481,1.048,482,1.048,483,1.048,484,1.048,485,1.048,486,1.048,487,1.048,488,1.048,489,1.048,490,1.048,491,1.048,492,1.048,493,1.048,494,1.048,495,1.048,496,1.048,497,1.048,498,1.048,499,1.048,500,1.048,501,1.048,502,1.048,503,1.048,504,1.048,505,1.048,506,1.048,507,1.048,508,1.048,509,1.048,510,1.048,511,2.062,512,1.048,513,0.985,514,1.693,515,1.048,516,1.693,517,2.062,518,1.048,519,1.048,520,1.048,521,1.048,522,1.048,523,1.048,524,2.062,525,1.048,526,1.048,527,2.867,528,2.681,529,1.693,530,1.048,531,1.048,532,0.728,533,1.048,534,1.048,535,2.129,536,1.048,537,1.048,538,1.048,539,1.048,540,1.048,541,1.048,542,1.048,543,1.048,544,1.048,545,1.048,546,1.048,547,1.048,548,1.048,549,1.048,550,1.048,551,1.048,552,1.048,553,1.048,554,1.048,555,1.048,556,1.048,557,1.048,558,2.062,559,1.048,560,1.048,561,1.048,562,1.048,563,1.048,564,1.048,565,1.048,566,1.048,567,1.048,568,1.048,569,1.048,570,0.853,571,1.64,572,1.048,573,1.048,574,1.048,575,1.048,576,1.884,577,1.498,578,1.048,579,1.048,580,1.048,581,1.048,582,1.048,583,1.048,584,1.048,585,1.048,586,0.787,587,1.048,588,1.048,589,1.048,590,1.048,591,1.731,592,1.048,593,1.048,594,1.048,595,1.048,596,2.062,597,1.048,598,1.048,599,1.048,600,1.048,601,2.777,602,1.048,603,1.016,604,2.777,605,1.048,606,0.853,607,2.443,608,1.048,609,0.767,633,1.875,635,1.176,652,0.787,653,0.985,1260,2.007,3149,2.276,3150,2.276,3151,2.276,3152,2.276,3153,2.276,3154,2.276,3155,2.276]],["title/classes/OrderByExpression.html",[307,0.343,335,1.686]],["body/classes/OrderByExpression.html",[3,0.088,4,0.088,5,0.088,6,0.116,8,0.066,9,0.539,10,0.229,25,1.788,26,0.123,27,0.01,31,0.483,34,0.469,37,0.114,49,1.691,60,0.627,62,0.755,70,2.207,94,0.221,157,1.942,159,0.783,209,0.905,216,1.43,218,0.636,222,1.887,224,1.817,229,1.403,230,1.188,239,1.117,242,0.68,246,3.044,247,1.144,249,0.851,254,0.173,281,2.494,294,1.014,301,0.233,305,0.007,306,0.007,307,0.508,309,0.224,311,0.923,316,0.322,319,1.092,327,1.321,328,2.32,329,2.32,335,3.525,339,2.728,340,2.7,341,2.635,342,2.635,343,2.703,345,2.323,346,2.159,347,2.181,348,2.361,366,2.021,373,1.652,423,1.259,424,0.28,425,2.1,427,2.181,428,1.942,433,2.445,434,2.239,461,2.716,532,1.569,570,1.837,609,1.652,630,4.289,631,4.068,632,4.068,633,3.304,634,4.058,635,2.072,636,2.502,638,2.621,639,3.243,641,2.939,646,4.245,648,0.736,652,2.239,653,2.121,656,3.243,657,3.243,658,3.243,662,2.334,664,2.415,665,2.7,666,2.7,667,2.7,668,2.7,671,2.7,674,2.597,675,2.7,677,2.939,684,3.881,698,3.243,708,3.243,724,2.415,725,4.282,726,2.7,727,2.813,1021,4.532,1062,4.324,1063,4.324,3156,3.943,3157,6.474,3158,6.474,3159,4.903,3160,4.903,3161,5.71,3162,4.903,3163,4.903,3164,5.71,3165,4.903,3166,4.903,3167,4.903,3168,4.903,3169,4.903,3170,4.903,3171,5.207,3172,5.71,3173,5.71,3174,5.71,3175,6.393,3176,4.324,3177,4.832,3178,5.71]],["title/classes/OrderByField.html",[307,0.343,3171,3.521]],["body/classes/OrderByField.html",[3,0.096,4,0.096,5,0.096,6,0.116,8,0.073,10,0.203,25,1.489,26,0.119,27,0.01,31,0.512,34,0.482,37,0.119,49,1.25,70,1.63,94,0.226,157,2.122,159,0.83,209,0.915,216,1.493,218,0.526,222,1.952,224,1.842,229,1.437,230,1.056,242,0.743,246,2.879,249,0.902,254,0.16,281,2.641,294,1.049,301,0.203,305,0.007,306,0.007,307,0.538,309,0.245,311,0.977,316,0.304,319,0.992,327,1.443,328,2.421,329,2.195,335,3.462,339,2.779,340,2.777,341,2.699,342,2.699,343,2.769,345,2.389,346,2.221,347,2.31,348,2.5,366,2.14,373,1.804,423,1.76,424,0.297,425,1.552,427,2.31,428,2.122,433,2.036,434,1.852,532,1.714,570,2.007,609,1.804,630,3.378,634,3.925,635,2.195,646,4.006,652,1.852,653,2.317,662,2.55,664,2.638,665,2.949,666,2.949,667,2.949,668,2.949,671,2.949,674,2.837,675,2.949,677,3.21,684,3.21,698,3.542,708,3.542,724,2.638,725,4.535,726,2.949,727,3.073,730,4.308,1021,4.8,3156,4.308,3161,4.724,3164,4.724,3171,6.414,3172,7.271,3173,7.271,3174,7.271,3175,6.671,3176,4.724,3177,5.117,3178,6.048,3179,5.355,3180,5.355,3181,5.355,3182,5.355,3183,5.355,3184,5.355]],["title/interfaces/Parser.html",[0,1.071,224,0.906]],["body/interfaces/Parser.html",[0,1.905,1,2.94,2,1.893,3,0.066,4,0.066,5,0.066,6,0.093,7,2.128,8,0.05,9,0.309,10,0.168,11,2.042,12,2.128,13,3.201,14,1.605,15,3.313,16,2.63,17,2.223,18,3.201,19,1.8,20,2.128,21,3.201,22,2.223,23,3.082,24,2.042,26,0.122,27,0.01,28,2.46,29,2.383,30,2.46,31,0.676,32,3.258,33,3.625,34,0.217,35,2.707,36,1.709,37,0.141,38,2.128,39,2.128,40,2.128,41,3.345,42,1.827,43,2.828,44,3.063,45,1.766,46,1.352,47,3.063,48,0.714,49,0.865,50,1.655,51,2.478,52,1.766,53,2.828,54,3.054,55,2,56,2.542,57,1.727,58,2.828,59,2.94,60,1.104,61,1.889,62,0.823,63,1.846,64,1.547,65,1.586,66,1.846,67,1.474,68,1.709,69,2.94,70,1.625,71,2.46,72,2.46,73,2.63,74,3.063,75,2.94,76,2.042,77,3.201,78,4.3,79,3.201,80,2.33,81,4.746,82,2.33,83,2.33,84,2.128,85,3.201,86,4.557,87,4.161,88,2.223,89,3.201,90,2.33,91,2.33,92,3.931,93,2.33,94,0.247,95,3.201,96,3.927,97,2.33,98,2.33,99,3.201,100,2.33,101,3.201,102,2.223,103,3.201,104,2.223,105,3.201,106,2.223,107,3.201,108,3.625,109,1.964,110,3.625,111,3.355,112,3.355,113,3.201,114,2.33,115,2.33,116,2.33,117,2.223,118,3.201,119,2.33,120,2.33,121,2.223,122,3.201,123,3.063,124,2.33,125,2.33,126,2.33,127,2.33,128,3.201,129,2.33,130,1.905,131,2.33,132,2.108,133,2.108,134,3.75,135,3.201,136,3.355,137,3.355,138,2.33,139,3.355,140,4.3,141,1.201,142,2.33,143,2.33,144,3.355,145,2.223,146,3.201,147,2.33,148,2.33,149,2.33,150,1.766,151,3.201,152,2.542,153,3.201,154,3.201,155,3.201,156,1.667,157,2.478,158,3.75,159,0.646,160,3.201,161,4.528,162,5.295,163,5.295,164,5.295,165,2.223,166,3.201,167,3.927,168,2.223,169,3.201,170,3.355,171,2.223,172,3.201,173,3.882,174,3.355,175,2.223,176,3.201,177,2.828,178,2.223,179,3.201,180,3.355,181,2.223,182,3.201,183,3.355,184,2.223,185,3.201,186,3.75,187,3.201,188,4.746,189,2.223,190,3.201,191,2.223,192,3.201,193,2.223,194,3.201,195,2.223,196,3.201,197,2.223,198,3.201,199,2.223,200,3.201,201,2.223,202,1.799,203,3.063,204,3.063,205,2.94,206,2.223,207,2.223,208,2.128,209,0.541,210,1.827,211,2.223,212,1.964,213,2.33,214,2.33,215,2.33,216,1.663,217,2.128,218,0.614,219,2.223,220,2.223,221,4.535,222,0.908,223,3.445,224,1.502,225,3.341,226,3.931,227,2.31,228,2.63,229,1.403,230,1.117,231,3.341,232,2.083,233,1.893,234,3.193,235,1.893,236,2.46,237,1.893,238,2.054,239,1.425,240,1.799,241,3.063,242,0.515,243,1.964,244,2.33,245,1.893,246,2.242,247,0.865,248,2.33,249,0.488,250,1.827,251,2.042,252,1.827,253,2.223,254,0.169,255,2.33,256,2.33,257,1.655,258,2.33,259,2.128,260,2.223,261,3.063,262,4.219,263,1.282,264,2.128,265,2.128,266,2.128,267,1.469,268,1.246,269,2.691,270,2.042,271,2.828,272,1.964,273,2.94,274,2.223,275,2.828,276,2.223,277,3.063,278,2.042,279,3.063,280,2.94,281,2.057,282,2.128,283,1.893,284,1.753,285,2.042,286,0.768,287,1.709,288,2.128,289,1.709,290,2.128,291,2.33,292,2.042,293,2.223,294,0.823,295,1.766,296,1.827,297,1.709,298,1.709,299,2.128,300,2.223,301,0.184,302,2.042,303,1.964,304,1.893,305,0.005,306,0.005,311,0.761,316,0.226,319,0.779,648,0.939,1848,2.128,1857,2.128,3185,3.709,3186,3.709,3187,3.709]],["title/interfaces/ParserOptions.html",[0,1.071,216,0.864]],["body/interfaces/ParserOptions.html",[0,1.903,1,2.934,2,1.887,3,0.066,4,0.066,5,0.066,6,0.05,7,2.122,8,0.05,9,0.52,10,0.233,11,2.036,12,2.122,13,4.342,14,1.6,15,3.308,16,2.625,17,2.217,18,4.342,19,1.797,20,2.122,21,4.342,22,2.217,23,3.717,24,2.036,26,0.123,27,0.01,28,2.455,29,3.05,30,3.149,31,0.685,32,3.593,33,3.996,34,0.216,35,2.703,36,1.704,37,0.141,38,2.122,39,2.122,40,2.122,41,3.342,42,1.822,43,2.822,44,3.057,45,1.761,46,1.348,47,3.057,48,0.712,49,0.863,50,1.65,51,2.474,52,1.761,53,2.822,54,3.471,55,1.996,56,2.537,57,1.724,58,2.822,59,2.934,60,1.078,61,1.886,62,0.821,63,1.842,64,1.544,65,1.582,66,1.842,67,1.47,68,1.705,69,2.934,70,1.622,71,2.455,72,2.455,73,2.625,74,3.057,75,2.934,76,2.036,77,3.194,78,4.294,79,3.194,80,2.324,81,4.741,82,2.324,83,2.324,84,2.122,85,3.194,86,4.552,87,4.156,88,2.217,89,3.194,90,2.324,91,2.324,92,3.924,93,2.324,94,0.247,95,3.194,96,3.921,97,2.324,98,2.324,99,3.194,100,2.324,101,3.194,102,2.217,103,3.194,104,2.217,105,3.194,106,2.217,107,3.194,108,3.62,109,1.959,110,3.62,111,3.348,112,3.348,113,3.194,114,2.324,115,2.324,116,2.324,117,2.217,118,3.194,119,2.324,120,2.324,121,2.217,122,3.194,123,3.057,124,2.324,125,2.324,126,2.324,127,2.324,128,3.194,129,2.324,130,1.901,131,2.324,132,2.104,133,2.104,134,3.744,135,3.194,136,3.348,137,3.348,138,2.324,139,3.348,140,4.294,141,1.2,142,2.324,143,2.324,144,3.348,145,2.217,146,3.194,147,2.324,148,2.324,149,2.324,150,1.761,151,3.194,152,2.537,153,3.194,154,3.194,155,3.194,156,1.663,157,2.474,158,3.744,159,0.645,160,3.194,161,4.523,162,5.292,163,5.292,164,5.292,165,2.217,166,3.194,167,3.921,168,2.217,169,3.194,170,3.348,171,2.217,172,3.194,173,3.88,174,3.348,175,2.217,176,3.194,177,2.822,178,2.217,179,3.194,180,3.348,181,2.217,182,3.194,183,3.348,184,2.217,185,3.194,186,3.744,187,3.194,188,4.741,189,2.217,190,3.194,191,2.217,192,3.194,193,2.217,194,3.194,195,2.217,196,3.194,197,2.217,198,3.194,199,2.217,200,3.194,201,2.217,202,1.795,203,4.156,204,4.156,205,3.989,206,2.217,207,2.217,208,2.122,209,0.54,210,1.822,211,2.217,212,1.959,213,2.324,214,2.324,215,2.324,216,1.535,217,2.122,218,0.613,219,2.217,220,2.217,221,3.763,222,0.905,223,3.439,224,1.415,225,2.878,226,3.924,227,2.305,228,2.625,229,1.165,230,1.053,231,2.878,232,1.622,233,1.887,234,3.188,235,1.887,236,1.704,237,1.887,238,2.051,239,1.423,240,1.795,241,3.057,242,0.513,243,1.959,244,2.324,245,1.887,246,2.237,247,0.863,248,2.324,249,0.486,250,1.822,251,2.036,252,1.822,253,2.217,254,0.163,255,2.324,256,2.324,257,1.65,258,2.324,259,2.122,260,2.217,261,3.057,262,4.216,263,1.279,264,2.122,265,2.122,266,2.122,267,1.465,268,1.243,269,2.689,270,2.036,271,2.822,272,1.959,273,2.934,274,2.217,275,2.822,276,2.217,277,3.057,278,2.036,279,3.057,280,2.934,281,2.052,282,2.122,283,1.887,284,1.749,285,2.036,286,0.766,287,1.704,288,2.122,289,1.704,290,2.122,291,2.324,292,2.036,293,2.217,294,0.821,295,1.761,296,1.822,297,1.704,298,1.704,299,2.122,300,2.217,301,0.099,302,2.036,303,1.959,304,1.887,305,0.005,306,0.005]],["title/interfaces/PassedInitialConfig.html",[0,1.071,2439,3.521]],["body/interfaces/PassedInitialConfig.html",[0,1.534,2,3.2,3,0.112,4,0.112,5,0.112,6,0.085,8,0.085,9,0.629,10,0.226,26,0.11,27,0.01,34,0.519,37,0.132,62,1.165,159,0.759,167,3.597,209,0.823,242,0.87,252,4.369,294,0.994,305,0.008,306,0.008,307,0.492,433,1.862,1276,3.763,1514,4.388,1871,3.2,1970,5.001,1976,4.146,2431,5.293,2433,5.529,2434,6.67,2435,6.06,2436,5.684,2437,5.529,2439,6.782,2441,6.67,2442,6.67,2443,6.67,2444,5.042,2445,6.67,2446,5.529,2447,6.532,2448,7.437,2449,4.388,2450,4.678,2451,5.529,2452,5.529,2453,7.612,2454,7.437,2455,5.529,2456,5.529,2457,5.529,2458,5.529,2459,5.042,2460,5.529,2461,5.529,2462,5.529,2463,5.042,2464,5.529,2465,5.529,2466,5.529,2467,5.529,2468,6.67,2469,5.529,2470,6.67,2471,4.678,2472,5.529,2473,5.042,2474,5.529,2475,5.529,2476,5.529,2477,5.529]],["title/interfaces/Renderable.html",[0,1.071,339,1.401]],["body/interfaces/Renderable.html",[0,1.31,2,1.18,3,0.041,4,0.041,5,0.041,6,0.085,8,0.031,10,0.1,19,0.608,25,0.808,26,0.115,27,0.01,31,0.554,34,0.442,37,0.136,46,3.126,60,0.929,61,0.638,62,1.119,64,0.67,65,0.687,66,0.8,67,0.638,68,0.74,70,0.704,94,0.241,130,2.372,141,0.666,159,0.45,209,0.942,216,1.433,218,0.459,222,1.143,224,1.887,229,1.491,230,1.228,232,0.704,239,0.527,242,0.87,249,0.824,254,0.158,268,1.599,284,0.759,286,1.465,294,1.2,301,0.1,305,0.004,306,0.004,307,0.642,308,2.084,310,1.032,311,0.53,314,1.066,315,4.174,316,0.212,318,4.071,319,0.73,320,1.066,322,1.066,324,1.61,325,0.74,326,0.821,327,0.623,328,2.265,329,1.191,330,1.066,331,1.563,332,1.517,333,1.517,334,1.475,335,1.434,336,1.434,337,1.475,338,4.113,339,2.421,340,2.548,341,2.763,342,2.763,343,2.842,344,2.248,345,2.258,346,2,347,2.22,348,1.357,349,1.926,350,1.066,351,1.066,352,1.066,353,1.066,354,1.434,355,1.066,356,1.066,357,1.066,358,1.001,359,0.759,360,1.434,361,1.066,362,1.066,363,1.715,364,2.152,365,0.58,366,1.458,367,1.066,368,0.722,369,1.066,370,1.066,371,1.066,372,1.066,373,0.779,374,1.001,375,1.001,376,1.066,377,3.325,378,1.066,379,1.066,380,1.066,381,1.066,382,1.066,383,1.066,384,1.066,385,1.066,386,2.941,387,1.066,388,2.248,389,1.066,390,2.798,391,1.066,392,1.066,393,1.066,394,1.066,395,1.066,396,1.066,397,1.066,398,1.066,399,1.066,400,1.066,401,1.066,402,1.105,403,1.066,404,1.066,405,1.066,406,1.066,407,1.066,408,1.066,409,1.066,410,2.859,411,2.703,412,1.066,413,1.066,414,0.654,415,1.066,416,1.066,417,1.715,418,1.066,419,1.066,420,1.032,421,1.066,422,1.032,423,1.506,424,0.232,425,2.227,426,0.821,427,1.977,428,2.324,429,1.615,430,2.888,431,2.152,432,3.59,433,1.742,434,2.029,435,1.715,436,2.152,437,2.466,438,1.715,439,1.066,440,2.152,441,2.152,442,2.466,443,1.715,444,1.066,445,2.152,446,1.066,447,2.084,448,1.066,449,1.066,450,1.066,451,1.066,452,1.066,453,1.066,454,1.066,455,1.066,456,1.066,457,1.066,458,1.066,459,1.066,460,1.066,461,1.395,462,1.066,463,1.066,464,2.084,465,1.066,466,1.066,467,1.066,468,1.066,469,2.084,470,1.066,471,1.715,472,1.066,473,1.066,474,1.066,475,1.066,476,1.066,477,1.066,478,1.066,479,2.152,480,1.066,481,1.066,482,1.066,483,1.066,484,1.066,485,1.066,486,1.066,487,1.066,488,1.066,489,1.066,490,1.066,491,1.066,492,1.066,493,1.066,494,1.066,495,1.066,496,1.066,497,1.066,498,1.066,499,1.066,500,1.066,501,1.066,502,1.066,503,1.066,504,1.066,505,1.066,506,1.066,507,1.066,508,1.066,509,1.066,510,1.066,511,2.084,512,1.066,513,1.001,514,1.715,515,1.066,516,1.715,517,2.084,518,1.066,519,1.066,520,1.066,521,1.066,522,1.066,523,1.066,524,2.084,525,1.066,526,1.066,527,2.466,528,2.703,529,1.715,530,1.066,531,1.066,532,0.74,533,1.066,534,1.066,535,2.152,536,1.066,537,1.066,538,1.066,539,1.066,540,1.066,541,1.066,542,1.066,543,1.066,544,1.066,545,1.066,546,1.066,547,1.066,548,1.066,549,1.066,550,1.066,551,1.066,552,1.066,553,1.066,554,1.066,555,1.066,556,1.066,557,1.066,558,2.084,559,1.066,560,1.066,561,1.066,562,1.066,563,1.066,564,1.066,565,1.066,566,1.066,567,1.066,568,1.066,569,1.066,570,0.867,571,1.661,572,1.066,573,1.066,574,1.066,575,1.066,576,1.904,577,1.517,578,1.066,579,1.066,580,1.066,581,1.066,582,1.066,583,1.066,584,1.066,585,1.066,586,0.8,587,1.066,588,1.066,589,1.066,590,1.066,591,1.75,592,1.066,593,1.066,594,1.066,595,1.066,596,2.084,597,1.066,598,1.066,599,1.066,600,1.066,601,2.798,602,1.066,603,1.032,604,2.798,605,1.066,606,0.867,607,2.466,608,1.066,609,0.779,653,1.001,3188,2.313,3189,2.313,3190,2.313,3191,2.313,3192,2.313]],["title/interfaces/ResponseJson.html",[0,1.071,2418,3.521]],["body/interfaces/ResponseJson.html",[0,1.428,2,2.979,3,0.104,4,0.104,5,0.104,6,0.079,8,0.079,9,0.602,16,4.053,25,1.572,26,0.118,27,0.01,34,0.423,37,0.092,41,3.707,50,3.775,94,0.242,141,1.172,152,3.747,202,2.651,209,0.592,218,0.573,227,3.132,228,4.053,233,4.199,242,1.142,249,1.035,254,0.17,294,0.768,305,0.007,306,0.007,307,0.458,319,0.726,402,2.56,424,0.253,429,2.503,662,2.779,664,2.875,1098,4.549,1297,1.966,1427,4.946,1499,4.515,1538,3.447,1539,4.717,1551,4.339,1599,4.549,1621,5.873,1694,6.14,1695,6.14,1704,4.788,1707,5.759,1710,5.067,1718,5.759,1725,3.86,1737,4.085,1753,4.085,1767,3.499,1773,4.356,2402,5.822,2403,4.695,2404,4.695,2405,4.695,2406,4.695,2407,4.695,2408,5.148,2409,7.852,2413,5.148,2418,5.822,2419,5.148,2420,5.148,2421,5.148,2422,5.148,2423,6.385,2424,5.148,2425,5.148,2426,5.148,2427,5.148,2428,5.148,2429,5.148]],["title/interfaces/ResponseOptions.html",[0,1.071,217,2.511]],["body/interfaces/ResponseOptions.html",[0,1.919,1,2.993,2,1.941,3,0.068,4,0.068,5,0.068,6,0.052,7,2.182,8,0.052,9,0.528,10,0.186,11,2.094,12,2.182,13,3.258,14,1.645,15,3.36,16,2.678,17,2.279,18,3.258,19,1.82,20,2.182,21,3.258,22,2.279,23,3.125,24,2.094,26,0.122,27,0.01,28,2.504,29,2.426,30,2.504,31,0.677,32,3.296,33,3.666,34,0.222,35,2.745,36,1.752,37,0.142,38,2.182,39,2.182,40,2.182,41,3.367,42,1.873,43,2.879,44,3.119,45,1.81,46,1.386,47,3.972,48,0.732,49,0.887,50,1.697,51,2.513,52,1.81,53,2.879,54,3.089,55,2.037,56,2.588,57,1.751,58,2.879,59,2.993,60,1.083,61,1.91,62,0.837,63,1.879,64,1.575,65,1.614,66,1.879,67,1.5,68,1.74,69,2.993,70,1.655,71,2.504,72,2.504,73,2.678,74,3.119,75,2.993,76,2.094,77,3.258,78,4.349,79,3.258,80,2.389,81,4.786,82,2.389,83,2.389,84,2.182,85,3.258,86,4.601,87,4.201,88,2.279,89,3.258,90,2.389,91,2.389,92,3.986,93,2.389,94,0.247,95,3.258,96,3.972,97,2.389,98,2.389,99,3.258,100,2.389,101,3.258,102,2.279,103,3.258,104,2.279,105,3.258,106,2.279,107,3.258,108,3.666,109,2.014,110,3.666,111,3.415,112,3.415,113,3.258,114,2.389,115,2.389,116,2.389,117,2.279,118,3.258,119,2.389,120,2.389,121,2.279,122,3.258,123,3.119,124,2.389,125,2.389,126,2.389,127,2.389,128,3.258,129,2.389,130,1.931,131,2.389,132,2.137,133,2.137,134,3.803,135,3.258,136,3.415,137,3.415,138,2.389,139,3.415,140,4.349,141,1.226,142,2.389,143,2.389,144,3.415,145,2.279,146,3.258,147,2.389,148,2.389,149,2.389,150,1.81,151,3.258,152,2.588,153,3.258,154,3.258,155,3.258,156,1.697,157,2.513,158,3.803,159,0.658,160,3.258,161,4.566,162,5.319,163,5.319,164,5.319,165,2.279,166,3.258,167,3.972,168,2.279,169,3.258,170,3.415,171,2.279,172,3.258,173,3.9,174,3.415,175,2.279,176,3.258,177,2.879,178,2.279,179,3.258,180,3.415,181,2.279,182,3.258,183,3.415,184,2.279,185,3.258,186,3.803,187,3.258,188,4.786,189,2.279,190,3.258,191,2.279,192,3.258,193,2.279,194,3.258,195,2.279,196,3.258,197,2.279,198,3.258,199,2.279,200,3.258,201,2.279,202,1.831,203,3.119,204,3.119,205,2.993,206,2.279,207,2.279,208,2.182,209,0.551,210,1.873,211,2.279,212,2.014,213,2.389,214,2.389,215,2.389,216,1.547,217,3.119,218,0.68,219,4.149,220,4.149,221,3.812,222,0.931,223,3.493,224,1.433,225,2.923,226,3.986,227,2.352,228,2.678,229,1.18,230,1.066,231,2.923,232,1.655,233,1.941,234,3.238,235,1.941,236,1.752,237,1.941,238,2.083,239,1.445,240,1.831,241,3.119,242,0.528,243,2.014,244,2.389,245,1.941,246,2.282,247,0.887,248,2.389,249,0.5,250,1.873,251,2.094,252,1.873,253,2.279,254,0.164,255,2.389,256,2.389,257,1.697,258,2.389,259,2.182,260,2.279,261,3.119,262,4.247,263,1.315,264,2.182,265,2.182,266,2.182,267,1.506,268,1.268,269,2.711,270,2.094,271,2.879,272,2.014,273,2.993,274,2.279,275,2.879,276,2.279,277,3.119,278,2.094,279,3.119,280,2.993,281,2.094,282,2.182,283,1.941,284,1.785,285,2.094,286,0.787,287,1.752,288,2.182,289,1.752,290,2.182,291,2.389,292,2.094,293,2.279,294,0.834,295,1.81,296,1.873,297,1.752,298,1.752,299,2.182,300,2.279,301,0.102,302,2.094,303,2.014,304,1.941,305,0.006,306,0.006]],["title/classes/SearchExpression.html",[307,0.343,336,1.686]],["body/classes/SearchExpression.html",[3,0.075,4,0.075,5,0.075,6,0.118,8,0.057,9,0.485,10,0.227,25,1.708,26,0.123,27,0.01,31,0.587,34,0.444,37,0.114,49,1.948,60,0.925,62,0.647,68,2.143,94,0.216,157,1.663,159,0.705,209,0.902,216,1.321,218,0.572,224,1.769,229,1.34,230,0.898,239,0.956,242,0.809,246,2.811,247,0.98,249,0.88,254,0.172,263,2.015,281,2.245,294,1.061,301,0.231,305,0.006,306,0.006,307,0.457,309,0.192,311,0.831,316,0.323,319,1.093,327,1.131,328,2.143,329,2.143,336,3.562,339,2.632,340,2.56,341,2.517,342,2.517,343,2.582,345,2.202,346,2.047,347,1.964,359,1.378,365,1.052,366,1.819,373,1.414,388,1.763,414,2.045,423,1.078,424,0.252,425,1.689,426,1.49,427,1.964,428,1.663,433,2.336,434,2.015,461,2.508,532,1.344,570,1.573,577,1.712,586,2.315,609,1.414,630,4.165,631,3.662,632,4.207,633,2.975,634,4.183,635,1.866,636,2.143,638,2.517,639,2.777,641,4.714,646,4.025,648,0.875,652,2.015,653,1.817,656,2.777,657,2.777,658,2.777,662,1.999,664,2.068,665,2.312,666,2.312,667,2.312,668,2.312,671,2.312,674,2.224,675,2.312,684,2.517,725,3.855,726,4.33,727,2.409,1022,4.08,1067,3.703,1085,4.688,2630,5.817,3177,3.133,3193,3.377,3194,5.905,3195,5.905,3196,7.964,3197,7.6,3198,5.828,3199,6.8,3200,4.198,3201,4.198,3202,5.141,3203,4.198,3204,4.198,3205,4.198,3206,4.198,3207,4.198,3208,5.141,3209,4.198,3210,5.141,3211,4.198,3212,4.198,3213,4.198,3214,4.198,3215,5.141,3216,4.198,3217,4.198,3218,4.198,3219,4.688,3220,3.703,3221,3.703,3222,7.365,3223,6.702,3224,3.703,3225,5.141,3226,3.703,3227,3.703,3228,5.141,3229,5.141,3230,5.141,3231,5.141,3232,5.141,3233,3.703,3234,3.703,3235,3.703,3236,5.141,3237,3.703,3238,3.703,3239,3.703,3240,3.703,3241,3.703]],["title/classes/SearchTerm.html",[307,0.343,3219,3.521]],["body/classes/SearchTerm.html",[3,0.085,4,0.085,5,0.085,6,0.113,8,0.065,10,0.192,25,1.38,26,0.117,27,0.01,31,0.569,34,0.464,37,0.12,49,1.668,60,0.976,68,1.526,94,0.232,157,1.888,159,0.769,209,0.915,216,1.411,218,0.468,224,1.809,229,1.392,242,0.882,246,2.668,249,0.94,254,0.153,281,2.447,294,1.096,301,0.192,305,0.006,306,0.006,307,0.499,309,0.218,311,0.905,316,0.295,319,0.949,327,1.284,328,2.288,329,2.034,336,3.523,339,2.615,340,2.675,341,2.615,342,2.615,343,2.682,345,2.301,346,2.139,347,2.141,359,1.565,365,1.195,366,1.983,373,1.606,388,2.001,414,2.156,423,1.631,424,0.275,426,1.692,427,2.141,428,1.888,433,1.887,434,1.648,532,1.526,570,1.786,577,1.943,586,2.472,609,1.606,630,3.13,632,2.995,634,4.188,635,2.034,641,4.76,646,3.786,652,1.648,653,2.062,662,2.269,664,2.348,665,2.625,666,2.625,667,2.625,668,2.625,671,2.625,674,2.525,675,2.625,725,4.203,726,4.498,727,2.735,1022,4.448,1085,5.111,2630,3.834,3177,3.557,3193,3.834,3194,4.204,3195,4.204,3196,7.962,3197,7.564,3199,6.57,3202,4.204,3208,4.204,3210,4.204,3215,4.204,3219,6.132,3220,4.204,3221,4.204,3222,7.564,3223,7.004,3224,4.204,3225,5.604,3226,4.204,3227,4.204,3228,5.604,3229,5.604,3230,5.604,3231,5.604,3232,5.604,3233,4.204,3234,4.204,3235,4.204,3236,5.604,3237,4.204,3238,4.204,3239,4.204,3240,4.204,3241,4.204,3242,4.766,3243,4.766,3244,4.766,3245,4.766,3246,4.766,3247,4.766,3248,4.766]],["title/classes/SegmentHandler.html",[307,0.343,2523,3.267]],["body/classes/SegmentHandler.html",[3,0.101,4,0.101,5,0.101,6,0.122,8,0.077,10,0.225,26,0.121,27,0.01,29,3.168,31,0.53,34,0.476,37,0.112,52,2.693,55,2.12,56,2.693,57,1.561,58,2.996,60,1.153,62,0.871,63,1.956,94,0.229,159,0.859,209,0.921,230,1.337,247,1.656,249,1.102,254,0.176,286,1.47,301,0.237,305,0.007,306,0.007,307,0.557,309,0.259,311,1.012,316,0.322,319,1.092,327,1.524,424,0.245,570,2.12,635,2.272,648,1.222,1409,5.298,1536,4.969,1538,2.693,1590,4.695,1977,3.742,2064,6.075,2497,6.072,2503,5.71,2508,4.55,2523,5.298,2585,4.55,2586,4.99,2595,4.99,2596,6.262,2597,6.262,2598,6.262,2599,6.262,2600,6.262,2601,6.843,2602,7.176,2603,4.99,2604,7.176,2605,6.262,2606,6.843,2607,7.176,2608,4.99,2609,7.176,2610,4.99,2611,4.99,2612,4.99,2613,4.99,2614,4.99,2615,4.99,2616,4.99,3249,5.657,3250,5.657,3251,5.657,3252,5.657,3253,5.657,3254,5.657,3255,5.657,3256,5.657,3257,5.657,3258,5.657,3259,5.657,3260,5.657]],["title/classes/SelectExpression.html",[307,0.343,337,1.734]],["body/classes/SelectExpression.html",[3,0.094,4,0.094,5,0.094,6,0.116,8,0.072,9,0.565,10,0.229,25,1.825,26,0.124,27,0.01,31,0.394,34,0.464,37,0.107,49,1.753,60,0.675,62,0.813,64,2.176,94,0.213,157,2.091,159,0.639,209,0.877,216,1.34,218,0.667,222,1.838,224,1.739,229,1.28,230,1.222,239,1.202,242,0.732,246,3.154,247,1.231,249,0.893,254,0.174,281,2.616,294,0.988,301,0.235,305,0.007,306,0.007,307,0.414,309,0.242,311,0.968,316,0.324,319,1.097,328,2.174,329,2.404,337,3.647,339,2.689,340,2.53,341,2.404,342,2.404,343,2.466,345,2.298,346,2.136,347,1.778,348,2.477,366,2.12,373,1.778,424,0.294,425,1.968,427,1.778,433,2.495,434,2.349,461,2.814,532,1.689,609,1.778,630,4.344,631,4.268,632,4.268,633,3.467,634,4.121,635,2.174,636,2.693,638,2.667,639,3.49,641,3.163,646,4.346,648,0.792,652,2.349,653,2.283,656,3.49,657,3.49,658,3.49,662,2.512,664,2.6,665,2.906,666,2.906,667,2.906,668,2.906,671,2.906,674,2.795,675,2.906,677,3.163,684,4.072,690,5.463,724,2.6,726,2.906,727,3.028,1023,5.069,1069,4.654,1070,4.654,3261,4.654,3262,5.277,3263,5.277,3264,5.277,3265,5.277,3266,5.277,3267,5.277,3268,5.277,3269,5.277,3270,5.277,3271,5.277]],["title/classes/StringAndCollectionFunctions.html",[307,0.343,447,1.954]],["body/classes/StringAndCollectionFunctions.html",[0,1.284,3,0.04,4,0.04,5,0.04,6,0.092,8,0.03,10,0.174,19,0.587,26,0.116,27,0.01,31,0.549,34,0.438,37,0.136,46,3.123,60,1.023,61,0.616,62,1.231,64,0.647,65,0.663,66,0.772,67,0.616,68,0.715,70,0.68,94,0.24,130,2.352,141,0.926,159,0.438,209,0.94,216,1.417,218,0.448,222,1.116,224,1.882,229,1.485,230,1.219,232,0.68,239,1.541,242,0.856,249,0.811,254,0.165,268,1.579,284,0.733,286,1.447,294,1.198,301,0.174,305,0.004,306,0.004,307,0.638,308,2.036,309,0.102,310,0.997,311,0.516,314,1.029,315,4.182,316,0.235,318,4.079,319,0.809,320,1.029,322,1.029,324,1.566,325,0.715,326,0.793,327,0.602,328,2.238,329,1.158,330,1.029,331,1.519,332,1.475,333,1.475,334,1.433,335,1.394,336,1.394,337,1.433,338,4.13,339,2.352,340,2.42,341,2.75,342,2.75,343,2.83,344,0.938,345,2.129,346,1.823,347,2.078,348,1.319,349,1.892,350,1.029,351,1.029,352,1.029,353,1.029,354,1.394,355,1.029,356,1.029,357,1.029,358,0.966,359,0.733,360,1.394,361,1.029,362,1.029,363,1.667,364,2.102,365,0.56,366,0.697,367,1.029,368,0.697,369,1.029,370,1.029,371,1.029,372,1.029,373,0.752,374,0.966,375,0.966,376,1.029,377,3.295,378,1.029,379,1.029,380,1.029,381,1.029,382,1.029,383,1.029,384,1.029,385,1.029,386,2.899,387,1.029,388,2.202,389,1.029,390,2.753,391,1.029,392,1.029,393,1.029,394,1.029,395,1.029,396,1.029,397,1.029,398,1.029,399,1.029,400,1.029,401,1.029,402,1.075,403,1.029,404,1.029,405,1.029,406,1.029,407,1.029,408,1.029,409,1.029,410,2.83,411,2.655,412,1.029,413,1.029,414,0.631,415,1.029,416,1.029,417,1.667,418,1.029,419,1.029,420,0.997,421,1.029,422,0.997,423,1.48,424,0.227,425,2.206,426,0.793,427,1.942,428,2.283,429,1.577,430,2.842,431,2.102,432,3.559,433,1.712,434,1.993,435,1.667,436,2.102,437,2.416,438,1.667,439,1.029,440,2.102,441,2.102,442,2.416,443,1.667,444,1.029,445,2.102,446,1.029,447,2.341,448,1.667,449,1.029,450,1.667,451,1.029,452,1.667,453,1.029,454,1.667,455,1.029,456,1.667,457,1.029,458,1.667,459,1.029,460,2.102,461,2.311,462,1.029,463,1.029,464,2.036,465,1.029,466,1.029,467,1.029,468,1.029,469,2.036,470,1.029,471,1.667,472,1.029,473,1.029,474,1.029,475,1.029,476,1.029,477,1.029,478,1.029,479,2.102,480,1.029,481,1.029,482,1.029,483,1.029,484,1.029,485,1.029,486,1.029,487,1.029,488,1.029,489,1.029,490,1.029,491,1.029,492,1.029,493,1.029,494,1.029,495,1.029,496,1.029,497,1.029,498,1.029,499,1.029,500,1.029,501,1.029,502,1.029,503,1.029,504,1.029,505,1.029,506,1.029,507,1.029,508,1.029,509,1.029,510,1.029,511,2.036,512,1.029,513,0.966,514,1.667,515,1.029,516,1.667,517,2.036,518,1.029,519,1.029,520,1.029,521,1.029,522,1.029,523,1.029,524,2.036,525,1.029,526,1.029,527,2.416,528,2.655,529,1.667,530,1.029,531,1.029,532,0.715,533,1.029,534,1.029,535,2.102,536,1.029,537,1.029,538,1.029,539,1.029,540,1.029,541,1.029,542,1.029,543,1.029,544,1.029,545,1.029,546,1.029,547,1.029,548,1.029,549,1.029,550,1.029,551,1.029,552,1.029,553,1.029,554,1.029,555,1.029,556,1.029,557,1.029,558,2.036,559,1.029,560,1.029,561,1.029,562,1.029,563,1.029,564,1.029,565,1.029,566,1.029,567,1.029,568,1.029,569,1.029,570,0.837,571,1.615,572,1.029,573,1.029,574,1.029,575,1.029,576,1.86,577,1.475,578,1.029,579,1.029,580,1.029,581,1.029,582,1.029,583,1.029,584,1.029,585,1.029,586,0.772,587,1.029,588,1.029,589,1.029,590,1.029,591,1.709,592,1.029,593,1.029,594,1.029,595,1.029,596,2.036,597,1.029,598,1.029,599,1.029,600,1.029,601,2.753,602,1.029,603,0.997,604,2.753,605,1.029,606,0.837,607,2.416,608,1.029,609,0.752,648,0.335,3272,3.618,3273,3.618,3274,3.618,3275,3.618,3276,3.618,3277,2.233,3278,2.233,3279,2.233,3280,2.233,3281,2.233,3282,2.233,3283,2.233,3284,2.233]],["title/classes/StringFunctions.html",[307,0.343,469,1.954]],["body/classes/StringFunctions.html",[0,1.301,3,0.041,4,0.041,5,0.041,6,0.079,8,0.031,10,0.143,19,0.601,26,0.115,27,0.01,31,0.552,34,0.441,37,0.136,46,3.161,60,0.994,61,0.631,62,1.197,64,0.662,65,0.679,66,0.79,67,0.631,68,0.732,70,0.696,94,0.242,130,2.365,141,0.66,159,0.446,209,0.941,216,1.428,218,0.455,222,1.134,224,1.885,229,1.489,230,1.225,232,0.696,239,1.329,242,0.865,249,0.82,254,0.161,268,1.592,284,0.75,286,1.459,294,1.199,301,0.143,305,0.004,306,0.004,307,0.641,308,2.068,309,0.105,310,1.02,311,0.525,314,1.053,315,4.18,316,0.192,318,4.078,319,0.662,320,1.053,322,1.053,324,1.595,325,0.732,326,0.811,327,0.616,328,2.256,329,1.18,330,1.053,331,1.548,332,1.503,333,1.503,334,1.46,335,1.42,336,1.42,337,1.46,338,4.111,339,2.368,340,2.437,341,2.758,342,2.758,343,2.838,344,0.96,345,2.143,346,1.838,347,2.1,348,1.344,349,1.915,350,1.053,351,1.053,352,1.053,353,1.053,354,1.42,355,1.053,356,1.053,357,1.053,358,0.989,359,0.75,360,1.42,361,1.053,362,1.053,363,1.698,364,2.135,365,0.573,366,0.713,367,1.053,368,0.713,369,1.053,370,1.053,371,1.053,372,1.053,373,0.77,374,0.989,375,0.989,376,1.053,377,3.315,378,1.053,379,1.053,380,1.053,381,1.053,382,1.053,383,1.053,384,1.053,385,1.053,386,2.927,387,1.053,388,2.232,389,1.053,390,2.783,391,1.053,392,1.053,393,1.053,394,1.053,395,1.053,396,1.053,397,1.053,398,1.053,399,1.053,400,1.053,401,1.053,402,1.095,403,1.053,404,1.053,405,1.053,406,1.053,407,1.053,408,1.053,409,1.053,410,2.849,411,2.687,412,1.053,413,1.053,414,0.646,415,1.053,416,1.053,417,1.698,418,1.053,419,1.053,420,1.02,421,1.053,422,1.02,423,1.497,424,0.23,425,2.22,426,0.811,427,1.965,428,2.31,429,1.602,430,2.873,431,2.135,432,3.579,433,1.732,434,2.016,435,1.698,436,2.135,437,2.449,438,1.698,439,1.053,440,2.135,441,2.135,442,2.449,443,1.698,444,1.053,445,2.135,446,1.053,447,2.068,448,1.053,449,1.053,450,1.053,451,1.053,452,1.053,453,1.053,454,1.053,455,1.053,456,1.053,457,1.053,458,1.053,459,1.053,460,1.053,461,1.381,462,1.053,463,1.053,464,2.068,465,1.053,466,1.053,467,1.053,468,1.053,469,2.373,470,2.135,471,2.449,472,1.053,473,1.698,474,1.053,475,1.698,476,1.053,477,1.698,478,1.053,479,2.135,480,1.053,481,1.053,482,1.053,483,1.053,484,1.053,485,1.053,486,1.053,487,1.053,488,1.053,489,1.053,490,1.053,491,1.053,492,1.053,493,1.053,494,1.053,495,1.053,496,1.053,497,1.053,498,1.053,499,1.053,500,1.053,501,1.053,502,1.053,503,1.053,504,1.053,505,1.053,506,1.053,507,1.053,508,1.053,509,1.053,510,1.053,511,2.068,512,1.053,513,0.989,514,1.698,515,1.053,516,1.698,517,2.068,518,1.053,519,1.053,520,1.053,521,1.053,522,1.053,523,1.053,524,2.068,525,1.053,526,1.053,527,2.449,528,2.687,529,1.698,530,1.053,531,1.053,532,0.732,533,1.053,534,1.053,535,2.135,536,1.053,537,1.053,538,1.053,539,1.053,540,1.053,541,1.053,542,1.053,543,1.053,544,1.053,545,1.053,546,1.053,547,1.053,548,1.053,549,1.053,550,1.053,551,1.053,552,1.053,553,1.053,554,1.053,555,1.053,556,1.053,557,1.053,558,2.068,559,1.053,560,1.053,561,1.053,562,1.053,563,1.053,564,1.053,565,1.053,566,1.053,567,1.053,568,1.053,569,1.053,570,0.856,571,1.645,572,1.053,573,1.053,574,1.053,575,1.053,576,1.889,577,1.503,578,1.053,579,1.053,580,1.053,581,1.053,582,1.053,583,1.053,584,1.053,585,1.053,586,0.79,587,1.053,588,1.053,589,1.053,590,1.053,591,1.736,592,1.053,593,1.053,594,1.053,595,1.053,596,2.068,597,1.053,598,1.053,599,1.053,600,1.053,601,2.783,602,1.053,603,1.02,604,2.783,605,1.053,606,0.856,607,2.449,608,1.053,609,0.77,3018,3.251,3285,3.686,3286,3.686,3287,2.285,3288,2.285,3289,2.285,3290,2.285,3291,2.285]],["title/interfaces/StructuredTypeFieldOptions.html",[0,1.071,221,2.41]],["body/interfaces/StructuredTypeFieldOptions.html",[0,1.922,1,3.005,2,1.952,3,0.068,4,0.068,5,0.068,6,0.052,7,2.194,8,0.052,9,0.53,11,2.105,12,2.194,13,3.271,14,1.654,15,3.37,16,2.688,17,2.292,18,3.271,19,1.825,20,2.194,21,3.271,22,2.292,23,3.135,24,2.105,26,0.122,27,0.01,28,2.514,29,2.435,30,2.514,31,0.678,32,3.304,33,3.676,34,0.224,35,2.753,36,1.762,37,0.142,38,2.194,39,2.194,40,2.194,41,3.372,42,1.884,43,2.89,44,3.131,45,1.82,46,1.394,47,3.131,48,0.736,49,0.892,50,1.706,51,2.521,52,1.82,53,2.89,54,3.097,55,2.045,56,2.598,57,1.756,58,2.89,59,3.005,60,1.084,61,1.915,62,0.841,63,1.887,64,1.581,65,1.621,66,1.887,67,1.506,68,1.747,69,3.005,70,1.661,71,2.514,72,2.514,73,2.688,74,3.131,75,3.005,76,2.105,77,3.271,78,4.36,79,3.271,80,2.403,81,4.795,82,2.403,83,2.403,84,2.194,85,3.271,86,4.611,87,4.21,88,2.292,89,3.271,90,2.403,91,2.403,92,3.998,93,2.403,94,0.247,95,3.271,96,3.982,97,2.403,98,2.403,99,3.271,100,2.403,101,3.271,102,2.292,103,3.271,104,2.292,105,3.271,106,2.292,107,3.271,108,3.676,109,2.025,110,3.676,111,3.429,112,3.429,113,3.271,114,2.403,115,2.403,116,2.403,117,2.292,118,3.271,119,2.403,120,2.403,121,2.292,122,3.271,123,3.131,124,2.403,125,2.403,126,2.403,127,2.403,128,3.271,129,2.403,130,1.937,131,2.403,132,2.144,133,2.144,134,3.815,135,3.271,136,3.429,137,3.429,138,2.403,139,3.429,140,4.36,141,1.208,142,2.403,143,2.403,144,3.429,145,2.292,146,3.271,147,2.403,148,2.403,149,2.403,150,1.82,151,3.271,152,2.598,153,3.271,154,3.271,155,3.271,156,1.703,157,2.521,158,3.815,159,0.66,160,3.271,161,4.574,162,5.325,163,5.325,164,5.325,165,2.292,166,3.271,167,3.982,168,2.292,169,3.271,170,3.429,171,2.292,172,3.271,173,3.904,174,3.429,175,2.292,176,3.271,177,2.89,178,2.292,179,3.271,180,3.429,181,2.292,182,3.271,183,3.429,184,2.292,185,3.271,186,3.815,187,3.271,188,4.795,189,2.292,190,3.271,191,2.292,192,3.271,193,2.292,194,3.271,195,2.292,196,3.271,197,2.292,198,3.271,199,2.292,200,3.271,201,2.292,202,1.838,203,3.131,204,3.131,205,3.005,206,2.292,207,2.292,208,2.194,209,0.553,210,1.884,211,2.292,212,2.025,213,2.403,214,2.403,215,2.403,216,1.55,217,2.194,218,0.682,219,2.292,220,2.292,221,4.041,222,1.698,223,4.041,224,1.437,225,2.932,226,3.998,227,2.361,228,2.688,229,1.183,230,1.069,231,2.932,232,1.661,233,1.952,234,3.248,235,1.952,236,1.762,237,1.952,238,2.089,239,1.45,240,1.838,241,3.131,242,0.531,243,2.025,244,2.403,245,1.952,246,2.291,247,0.892,248,2.403,249,0.503,250,1.884,251,2.105,252,1.884,253,2.292,254,0.164,255,2.403,256,2.403,257,1.706,258,2.403,259,2.194,260,2.292,261,3.131,262,4.253,263,1.322,264,2.194,265,2.194,266,2.194,267,1.515,268,1.273,269,2.716,270,2.105,271,2.89,272,2.025,273,3.005,274,2.292,275,2.89,276,2.292,277,3.131,278,2.105,279,3.131,280,3.005,281,2.102,282,2.194,283,1.952,284,1.792,285,2.105,286,0.792,287,1.762,288,2.194,289,1.762,290,2.194,291,2.403,292,2.105,293,2.292,294,0.837,295,1.82,296,1.884,297,1.762,298,1.762,299,2.194,300,2.292,301,0.103,302,2.105,303,2.025,304,1.952,305,0.006,306,0.006]],["title/classes/Type.html",[26,0.059,307,0.343]],["body/classes/Type.html",[0,1.298,3,0.041,4,0.041,5,0.041,6,0.092,8,0.031,10,0.142,19,0.598,25,1.152,26,0.119,27,0.01,31,0.552,34,0.44,37,0.136,46,3.119,60,0.979,61,0.628,62,1.113,64,0.659,65,0.676,66,0.787,67,0.628,68,0.728,70,0.693,94,0.242,130,2.363,141,0.658,159,0.444,209,0.941,216,1.426,218,0.454,222,1.13,224,1.886,229,1.488,230,1.236,232,0.693,239,0.518,242,0.863,249,0.896,254,0.164,268,1.59,284,0.747,286,1.457,294,1.199,301,0.156,305,0.004,306,0.004,307,0.64,308,2.061,309,0.104,310,1.015,311,0.523,314,1.048,315,4.173,316,0.236,318,4.067,319,0.724,320,1.048,322,1.048,324,1.589,325,0.728,326,0.808,327,0.613,328,2.252,329,1.176,330,1.048,331,1.542,332,1.498,333,1.498,334,1.455,335,1.415,336,1.415,337,1.455,338,4.11,339,2.41,340,2.536,341,2.757,342,2.757,343,2.837,344,0.955,345,2.249,346,1.99,347,2.205,348,1.339,349,1.91,350,1.048,351,1.048,352,1.048,353,1.048,354,1.415,355,1.048,356,1.048,357,1.048,358,0.984,359,0.747,360,1.415,361,1.048,362,1.048,363,1.692,364,2.128,365,0.57,366,1.442,367,1.048,368,0.71,369,1.048,370,1.048,371,1.048,372,1.048,373,0.766,374,0.984,375,0.984,376,1.048,377,3.311,378,1.048,379,1.048,380,1.048,381,1.048,382,1.048,383,1.048,384,1.048,385,1.048,386,2.922,387,1.048,388,2.226,389,1.048,390,2.777,391,1.048,392,1.048,393,1.048,394,1.048,395,1.048,396,1.048,397,1.048,398,1.048,399,1.048,400,1.048,401,1.048,402,1.091,403,1.048,404,1.048,405,1.048,406,1.048,407,1.048,408,1.048,409,1.048,410,2.845,411,2.681,412,1.048,413,1.048,414,0.643,415,1.048,416,1.048,417,1.692,418,1.048,419,1.048,420,1.015,421,1.048,422,1.015,423,1.597,424,0.252,425,2.217,426,0.808,427,1.96,428,2.305,429,1.597,430,2.867,431,2.128,432,3.576,433,1.944,434,2.151,435,1.692,436,2.128,437,2.443,438,1.692,439,1.048,440,2.128,441,2.128,442,2.443,443,1.692,444,1.048,445,2.128,446,1.048,447,2.061,448,1.048,449,1.048,450,1.048,451,1.048,452,1.048,453,1.048,454,1.048,455,1.048,456,1.048,457,1.048,458,1.048,459,1.048,460,1.048,461,1.376,462,1.048,463,1.048,464,2.061,465,1.048,466,1.048,467,1.048,468,1.048,469,2.061,470,1.048,471,1.692,472,1.048,473,1.048,474,1.048,475,1.048,476,1.048,477,1.048,478,1.048,479,2.128,480,1.048,481,1.048,482,1.048,483,1.048,484,1.048,485,1.048,486,1.048,487,1.048,488,1.048,489,1.048,490,1.048,491,1.048,492,1.048,493,1.048,494,1.048,495,1.048,496,1.048,497,1.048,498,1.048,499,1.048,500,1.048,501,1.048,502,1.048,503,1.048,504,1.048,505,1.048,506,1.048,507,1.048,508,1.048,509,1.048,510,1.048,511,2.061,512,1.048,513,0.984,514,1.692,515,1.048,516,1.692,517,2.061,518,1.048,519,1.048,520,1.048,521,1.048,522,1.048,523,1.048,524,2.061,525,1.048,526,1.048,527,2.443,528,2.681,529,1.692,530,1.048,531,1.048,532,0.728,533,1.048,534,1.048,535,2.128,536,1.048,537,1.048,538,1.048,539,1.048,540,1.048,541,1.048,542,1.048,543,1.048,544,1.048,545,1.048,546,1.048,547,1.048,548,1.048,549,1.048,550,1.048,551,1.048,552,1.048,553,1.048,554,1.048,555,1.048,556,1.048,557,1.048,558,2.061,559,1.048,560,1.048,561,1.048,562,1.048,563,1.048,564,1.048,565,1.048,566,1.048,567,1.048,568,1.048,569,1.048,570,0.852,571,1.639,572,1.048,573,1.048,574,1.048,575,1.048,576,1.883,577,1.498,578,1.048,579,1.048,580,1.048,581,1.048,582,1.048,583,1.048,584,1.048,585,1.048,586,0.787,587,1.048,588,1.048,589,1.048,590,1.048,591,1.731,592,1.048,593,1.048,594,1.048,595,1.048,596,2.061,597,1.048,598,1.048,599,1.048,600,1.048,601,2.777,602,1.048,603,1.015,604,2.777,605,1.048,606,0.852,607,2.443,608,1.048,609,0.766,633,1.875,635,1.176,648,0.342,652,0.787,653,0.984,746,0.766,3292,2.275,3293,2.275,3294,2.275,3295,2.275,3296,2.275,3297,2.275,3298,2.275]],["title/classes/TypeFunctions.html",[307,0.343,511,1.954]],["body/classes/TypeFunctions.html",[0,1.31,3,0.041,4,0.041,5,0.041,6,0.063,8,0.031,10,0.1,19,0.608,26,0.117,27,0.01,31,0.554,34,0.442,37,0.136,46,3.126,60,0.929,61,0.638,62,1.119,64,0.67,65,0.687,66,0.8,67,0.638,68,0.74,70,0.704,94,0.243,130,2.372,141,0.666,159,0.45,209,0.942,216,1.433,218,0.459,222,1.143,224,1.886,229,1.491,230,1.27,232,0.704,239,0.527,242,0.87,249,0.824,254,0.158,268,1.6,284,0.76,286,1.465,294,1.2,301,0.125,305,0.004,306,0.004,307,0.642,308,2.085,309,0.106,310,1.032,311,0.531,314,1.066,315,4.174,316,0.134,318,4.076,319,0.463,320,1.066,322,1.066,324,1.611,325,0.74,326,0.821,327,0.623,328,2.265,329,1.192,330,1.066,331,1.563,332,1.518,333,1.518,334,1.475,335,1.434,336,1.434,337,1.475,338,4.113,339,2.376,340,2.447,341,2.763,342,2.763,343,2.842,344,0.971,345,2.151,346,1.847,347,2.112,348,1.357,349,1.927,350,1.066,351,1.066,352,1.066,353,1.066,354,1.434,355,1.066,356,1.066,357,1.066,358,1.001,359,0.76,360,1.434,361,1.066,362,1.066,363,1.715,364,2.152,365,0.58,366,0.722,367,1.066,368,0.722,369,1.066,370,1.066,371,1.066,372,1.066,373,0.779,374,1.001,375,1.001,376,1.066,377,3.325,378,1.066,379,1.066,380,1.066,381,1.066,382,1.066,383,1.066,384,1.066,385,1.066,386,2.942,387,1.066,388,2.248,389,1.066,390,2.798,391,1.066,392,1.066,393,1.066,394,1.066,395,1.066,396,1.066,397,1.066,398,1.066,399,1.066,400,1.066,401,1.066,402,1.106,403,1.066,404,1.066,405,1.066,406,1.066,407,1.066,408,1.066,409,1.066,410,2.859,411,2.704,412,1.066,413,1.066,414,0.654,415,1.066,416,1.066,417,1.715,418,1.066,419,1.066,420,1.032,421,1.066,422,1.032,423,1.506,424,0.232,425,2.227,426,0.821,427,1.977,428,2.325,429,1.615,430,2.888,431,2.152,432,3.59,433,1.743,434,2.029,435,1.715,436,2.152,437,2.467,438,1.715,439,1.066,440,2.152,441,2.152,442,2.467,443,1.715,444,1.066,445,2.152,446,1.066,447,2.085,448,1.066,449,1.066,450,1.066,451,1.066,452,1.066,453,1.066,454,1.066,455,1.066,456,1.066,457,1.066,458,1.066,459,1.066,460,1.066,461,1.395,462,1.066,463,1.066,464,2.085,465,1.066,466,1.066,467,1.066,468,1.066,469,2.085,470,1.066,471,1.715,472,1.066,473,1.066,474,1.066,475,1.066,476,1.066,477,1.066,478,1.066,479,2.152,480,1.066,481,1.066,482,1.066,483,1.066,484,1.066,485,1.066,486,1.066,487,1.066,488,1.066,489,1.066,490,1.066,491,1.066,492,1.066,493,1.066,494,1.066,495,1.066,496,1.066,497,1.066,498,1.066,499,1.066,500,1.066,501,1.066,502,1.066,503,1.066,504,1.066,505,1.066,506,1.066,507,1.066,508,1.066,509,1.066,510,1.066,511,2.389,512,1.715,513,2.021,514,1.715,515,1.715,516,1.715,517,2.085,518,1.066,519,1.066,520,1.066,521,1.066,522,1.066,523,1.066,524,2.085,525,1.066,526,1.066,527,2.467,528,2.704,529,1.715,530,1.066,531,1.066,532,0.74,533,1.066,534,1.066,535,2.152,536,1.066,537,1.066,538,1.066,539,1.066,540,1.066,541,1.066,542,1.066,543,1.066,544,1.066,545,1.066,546,1.066,547,1.066,548,1.066,549,1.066,550,1.066,551,1.066,552,1.066,553,1.066,554,1.066,555,1.066,556,1.066,557,1.066,558,2.085,559,1.066,560,1.066,561,1.066,562,1.066,563,1.066,564,1.066,565,1.066,566,1.066,567,1.066,568,1.066,569,1.066,570,0.867,571,1.661,572,1.066,573,1.066,574,1.066,575,1.066,576,1.905,577,1.518,578,1.066,579,1.066,580,1.066,581,1.066,582,1.066,583,1.066,584,1.066,585,1.066,586,0.8,587,1.066,588,1.066,589,1.066,590,1.066,591,1.75,592,1.066,593,1.066,594,1.066,595,1.066,596,2.085,597,1.066,598,1.066,599,1.066,600,1.066,601,2.798,602,1.066,603,1.032,604,2.798,605,1.066,606,0.867,607,2.467,608,1.066,609,0.779,648,0.559,3299,3.723,3300,3.723,3301,2.313,3302,2.313]],["title/dependencies.html",[3303,3.214,3304,4.649]],["body/dependencies.html",[27,0.009,36,3.232,305,0.008,306,0.008,2444,5.643,2449,4.911,3304,6.188,3305,7.015,3306,9.119,3307,7.015,3308,7.015,3309,8.081,3310,8.081,3311,7.015,3312,7.015,3313,7.015,3314,7.015,3315,7.015,3316,7.015,3317,7.015,3318,7.015,3319,7.015]],["title/miscellaneous/enumerations.html",[3320,2.719,3321,4.649]],["body/miscellaneous/enumerations.html",[6,0.109,7,3.156,8,0.075,26,0.095,27,0.01,28,3.213,31,0.411,52,3.321,53,3.694,54,3.113,55,2.613,56,3.321,57,1.925,58,3.694,59,3.84,60,1.207,61,2.223,62,1.074,63,2.412,64,2.021,65,2.071,66,2.412,67,1.925,68,2.232,69,3.84,70,2.123,71,3.213,72,3.213,73,3.436,74,4.002,75,3.84,76,3.84,77,3.297,79,3.297,84,3.156,85,3.297,88,3.297,89,3.297,94,0.147,95,3.297,96,4.002,99,3.297,101,3.297,102,3.297,103,3.297,104,3.297,105,3.297,106,3.297,107,3.297,108,2.913,113,3.297,117,3.297,118,3.297,121,3.297,122,3.297,123,4.002,128,3.297,134,3.297,135,3.297,145,3.297,146,3.297,150,2.619,151,3.297,153,3.297,154,3.297,155,3.297,158,3.297,160,3.297,165,3.297,166,3.297,168,3.297,169,3.297,171,3.297,172,3.297,175,3.297,176,3.297,178,3.297,179,3.297,181,3.297,182,3.297,184,3.297,185,3.297,186,3.297,187,3.297,189,3.297,190,3.297,191,3.297,192,3.297,193,3.297,194,3.297,195,3.297,196,3.297,197,3.297,198,3.297,199,3.297,200,3.297,201,3.297,227,3.018,268,1.283,305,0.007,306,0.007,610,5.205,1049,5.205,1087,4.851,1088,6.151,1095,4.851,1096,4.851,1319,3.84,1729,4.382,2055,5.61,2095,3.456,2473,5.61,3320,4.105,3321,4.851,3322,6.755,3323,5.5,3324,6.974,3325,6.151,3326,6.974,3327,6.974,3328,6.151,3329,6.974,3330,4.851,3331,6.151,3332,6.974,3333,6.974,3334,6.974,3335,5.5,3336,5.5,3337,5.5,3338,4.851,3339,6.974,3340,6.974,3341,6.974,3342,6.974]],["title/index.html",[8,0.049,2471,2.719,3343,3.214]],["body/index.html",[15,2.518,23,3.517,27,0.01,34,0.506,37,0.112,41,2.997,42,2.342,45,2.264,50,2.122,61,1.312,64,1.838,65,1.884,67,2.102,109,2.518,235,4.253,250,2.342,253,3.803,254,0.096,269,2.881,272,4.709,281,1.831,286,0.984,294,0.625,303,3.36,305,0.006,306,0.006,307,0.56,325,2.438,329,2.54,346,2.199,365,1.789,652,1.644,815,3.238,971,6.126,1098,2.987,1226,2.987,1276,3.541,1405,4.576,1412,6.251,1418,5.684,1516,3.803,1538,4.031,1588,4.734,1618,2.518,1635,4.193,1647,4.193,1745,3.328,1767,2.85,1874,2.618,1876,2.85,1946,3.328,1975,3.548,1977,3.145,2430,6.565,2431,5.554,2435,3.548,2436,4.44,2447,6.126,2449,4.997,2463,5.102,2538,3.824,2645,4.193,2838,6.297,2945,5.102,2966,7.841,3331,5.595,3344,7.56,3345,4.754,3346,4.754,3347,4.754,3348,4.754,3349,4.754,3350,4.754,3351,6.343,3352,4.754,3353,4.754,3354,6.718,3355,4.754,3356,4.754,3357,4.754,3358,6.343,3359,6.343,3360,6.718,3361,4.754,3362,6.343,3363,7.616,3364,4.754,3365,6.343,3366,6.343,3367,6.343,3368,4.754,3369,6.343,3370,4.754,3371,4.754,3372,6.343,3373,6.343,3374,6.343,3375,4.754,3376,6.343,3377,4.754,3378,4.754,3379,4.754,3380,4.754,3381,4.754,3382,4.754,3383,4.754,3384,4.754,3385,4.754,3386,4.754,3387,4.754,3388,4.754,3389,6.343,3390,9.112,3391,4.754,3392,4.754,3393,4.754,3394,7.139,3395,8.465,3396,4.754,3397,4.754,3398,4.754,3399,4.754,3400,7.139,3401,4.754,3402,4.754,3403,4.754,3404,4.754,3405,7.139,3406,6.343,3407,6.343,3408,4.754,3409,6.343,3410,6.343,3411,7.616,3412,6.343,3413,4.754,3414,6.343,3415,4.754,3416,4.754,3417,4.754,3418,4.754,3419,4.754,3420,4.754,3421,8.571,3422,4.754,3423,4.754,3424,4.754,3425,7.616,3426,4.754,3427,7.139,3428,4.754,3429,4.754,3430,4.754,3431,4.754,3432,4.754,3433,4.754,3434,4.754,3435,4.754,3436,4.754,3437,4.754,3438,4.754,3439,4.754,3440,4.754,3441,4.754,3442,4.754,3443,4.754,3444,4.754,3445,4.754,3446,4.193,3447,4.754,3448,4.754,3449,6.343,3450,6.343,3451,4.754,3452,4.754,3453,4.754,3454,4.193,3455,4.754]],["title/license.html",[2471,2.719,3343,3.214,3456,2.931]],["body/license.html",[27,0.008,63,2.31,109,4.418,305,0.008,306,0.008,1418,5.861,1494,5.892,1882,5.194,2125,4.676,3360,5.892,3456,5.373,3457,5.892,3458,8.342,3459,6.679,3460,6.679,3461,5.892,3462,5.892,3463,5.892,3464,7.853,3465,6.679,3466,6.679,3467,6.679,3468,6.679,3469,6.679,3470,6.679,3471,7.853,3472,9.097,3473,6.679,3474,6.679,3475,6.679,3476,6.679,3477,6.679,3478,6.679,3479,6.679,3480,6.679,3481,6.679,3482,6.679,3483,6.679,3484,6.679,3485,7.853,3486,6.679,3487,6.679,3488,6.679,3489,6.679,3490,6.679,3491,6.679,3492,7.853,3493,7.853,3494,6.679,3495,6.679,3496,6.679,3497,6.679,3498,6.679,3499,6.679,3500,6.679,3501,6.679,3502,6.679,3503,6.679,3504,6.679,3505,6.679,3506,6.679,3507,6.679,3508,6.679,3509,6.679,3510,6.679,3511,6.679,3512,6.679,3513,6.679,3514,6.679,3515,6.679,3516,6.679,3517,6.679,3518,6.679,3519,6.679,3520,6.679,3521,6.679,3522,6.679,3523,6.679]],["title/modules.html",[2432,4.825]],["body/modules.html",[27,0.008,305,0.008,306,0.008,2431,5.086,2432,5.844,3524,7.265]],["title/overview.html",[3525,5.291]],["body/overview.html",[2,3.687,27,0.008,305,0.008,306,0.008,309,0.331,414,2.043,2430,5.81,2538,5.81,3113,6.372,3525,6.372,3526,7.224,3527,7.224]],["title/properties.html",[9,0.439,3303,3.214]],["body/properties.html",[9,0.581,23,3.437,27,0.009,305,0.008,306,0.008,1284,2.844,1405,4.584,1516,4.182,2450,6.011,2459,6.479,3344,7.491,3354,6.153,3446,6.153,3454,7.105,3456,5.611,3457,6.153,3461,6.153,3462,6.153,3463,6.153,3528,6.976,3529,6.976,3530,6.976,3531,6.976,3532,6.976,3533,6.976,3534,6.976,3535,6.976,3536,6.976,3537,6.976,3538,6.976,3539,6.976]],["title/miscellaneous/typealiases.html",[3320,2.719,3540,5.271]],["body/miscellaneous/typealiases.html",[6,0.124,7,2.996,8,0.071,15,3.573,25,2.023,26,0.126,27,0.009,31,0.39,32,3.212,33,3.573,38,2.996,39,2.996,40,2.996,41,3.434,42,2.573,43,3.573,44,2.996,45,2.486,46,2.46,47,3.871,48,1.006,49,1.218,50,2.331,60,0.863,64,1.955,65,2.004,67,1.862,69,3.715,70,2.054,94,0.229,108,2.766,123,3.871,141,0.961,223,3.715,234,3.443,252,3.324,261,3.871,262,3.573,271,3.573,273,3.715,275,3.573,277,3.871,279,3.871,280,3.715,305,0.007,306,0.007,310,2.331,315,3.011,318,2.331,328,2.529,338,2.331,341,1.672,629,4.606,660,5.951,682,4.2,696,4.722,723,5.426,792,4.127,1007,4.2,1020,5.426,1021,4.722,1022,4.722,1023,5.035,1037,5.426,1323,4.462,1541,5.035,1757,3.281,2064,4.722,2068,5.426,2072,5.426,2076,6.011,2090,4.2,2097,5.426,2098,5.426,2099,5.426,2100,5.426,2101,5.426,2493,4.606,2497,5.035,2621,4.606,2643,5.951,2658,5.951,2886,5.951,2888,5.426,2894,5.951,3156,4.2,3193,4.2,3199,5.426,3261,4.606,3320,3.897,3322,8.036,3325,7.863,3328,8.071,3330,4.606,3338,4.606,3541,6.746,3542,5.222,3543,5.222,3544,5.222,3545,5.222,3546,5.222,3547,7.474,3548,6.746,3549,7.899,3550,6.746,3551,6.746,3552,7.899,3553,6.746,3554,8.179,3555,6.746,3556,6.746,3557,7.474,3558,7.474,3559,5.222,3560,5.222,3561,6.746,3562,6.746,3563,6.746,3564,6.746,3565,6.746,3566,5.222,3567,5.222,3568,7.474,3569,7.899,3570,6.746,3571,5.222,3572,7.899,3573,5.222,3574,5.222,3575,5.222,3576,5.222,3577,5.222,3578,5.222]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":359,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["0.126.0",{"_index":3528,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":3319,"title":{},"body":{"dependencies.html":{}}}],["00:00",{"_index":115,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["07/schema",{"_index":2283,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["1",{"_index":414,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["1.1.23",{"_index":3314,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3527,"title":{},"body":{"overview.html":{}}}],["126",{"_index":3526,"title":{},"body":{"overview.html":{}}}],["128",{"_index":80,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["15",{"_index":142,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["16",{"_index":78,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["17",{"_index":143,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["17.0.0",{"_index":3306,"title":{},"body":{"dependencies.html":{}}}],["1].tostring",{"_index":2859,"title":{},"body":{"classes/ODataRequest.html":{}}}],["1}\\$skiptoken=([\\d\\w\\s",{"_index":1397,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["2",{"_index":2538,"title":{},"body":{"classes/ODataPathSegments.html":{},"index.html":{},"overview.html":{}}}],["2.0",{"_index":38,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["2.3.0",{"_index":3317,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1693,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["2019",{"_index":3460,"title":{},"body":{"license.html":{}}}],["23:59:59.999999999999",{"_index":116,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["3",{"_index":3442,"title":{},"body":{"index.html":{}}}],["3.0",{"_index":39,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["4",{"_index":3437,"title":{},"body":{"index.html":{}}}],["4.0",{"_index":40,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["6",{"_index":148,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["7.8.0",{"_index":3315,"title":{},"body":{"dependencies.html":{}}}],["754",{"_index":137,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["8",{"_index":92,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["9",{"_index":149,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["9a",{"_index":2159,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["_add",{"_index":632,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["_add(name",{"_index":640,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["_add(node",{"_index":684,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_annotations",{"_index":2873,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_body",{"_index":2694,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_children",{"_index":631,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_connector",{"_index":3194,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_context",{"_index":2874,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_fields",{"_index":2187,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["_functions",{"_index":1382,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_headers",{"_index":2695,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_keys",{"_index":2186,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["_method",{"_index":2696,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_names",{"_index":351,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["_negated",{"_index":3195,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_options",{"_index":2875,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_params",{"_index":2697,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_path",{"_index":2698,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_payload",{"_index":2876,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_properties",{"_index":1373,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_requests",{"_index":1582,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responses",{"_index":1586,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responsetype",{"_index":2699,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_segments",{"_index":2494,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["above",{"_index":3491,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1550,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["abstract",{"_index":156,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["acc",{"_index":368,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["acc.params",{"_index":2545,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc.paths.push(path",{"_index":2544,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc?.field(name",{"_index":369,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["accept",{"_index":11,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["accept.length",{"_index":2801,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push",{"_index":2795,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`odata.metadata=${this.api.options.accept?.metadata",{"_index":2792,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`streaming=${this.api.options.accept?.streaming",{"_index":2798,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accessors",{"_index":635,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["action.ts",{"_index":743,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["action.ts:1",{"_index":855,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:12",{"_index":749,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:14",{"_index":752,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:15",{"_index":754,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:16",{"_index":751,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:17",{"_index":750,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:18",{"_index":753,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:22",{"_index":862,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:24",{"_index":866,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:25",{"_index":864,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:26",{"_index":863,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:27",{"_index":865,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:3",{"_index":859,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:31",{"_index":762,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:33",{"_index":765,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:34",{"_index":763,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:35",{"_index":764,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:39",{"_index":913,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:4",{"_index":861,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:41",{"_index":915,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:42",{"_index":920,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:43",{"_index":916,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:44",{"_index":914,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:45",{"_index":917,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:46",{"_index":918,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:47",{"_index":919,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:5",{"_index":857,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:51",{"_index":941,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:53",{"_index":947,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:54",{"_index":943,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:55",{"_index":942,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:56",{"_index":944,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:57",{"_index":945,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:58",{"_index":946,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:6",{"_index":856,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:7",{"_index":858,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:8",{"_index":860,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["actionimport",{"_index":1137,"title":{},"body":{"classes/Field.html":{}}}],["actionimports",{"_index":817,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["actions",{"_index":950,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["add",{"_index":610,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"miscellaneous/enumerations.html":{}}}],["add(ctx",{"_index":1616,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["add(left",{"_index":559,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["add(name",{"_index":2499,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["added",{"_index":3335,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["addfield",{"_index":2200,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["additionalitems",{"_index":2178,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["addressinfo",{"_index":3426,"title":{},"body":{"index.html":{}}}],["again",{"_index":3400,"title":{},"body":{"index.html":{}}}],["aggregate",{"_index":3541,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["airport",{"_index":3399,"title":{},"body":{"index.html":{}}}],["airports",{"_index":3390,"title":{},"body":{"index.html":{}}}],["airports.entity(\"cyyz\").fetch",{"_index":3403,"title":{},"body":{"index.html":{}}}],["airports.fetch",{"_index":3433,"title":{},"body":{"index.html":{}}}],["airports.fetch().subscribe",{"_index":3393,"title":{},"body":{"index.html":{}}}],["airports.query((q",{"_index":3412,"title":{},"body":{"index.html":{}}}],["airports.tojson",{"_index":3415,"title":{},"body":{"index.html":{}}}],["airportsservice",{"_index":3388,"title":{},"body":{"index.html":{}}}],["airportsservice.entities",{"_index":3392,"title":{},"body":{"index.html":{}}}],["alias",{"_index":268,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":341,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["all(left",{"_index":599,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["allows",{"_index":1607,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["along",{"_index":3371,"title":{},"body":{"index.html":{}}}],["and(exp",{"_index":3202,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["and(left",{"_index":548,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["and/or",{"_index":3483,"title":{},"body":{"license.html":{}}}],["angular",{"_index":3344,"title":{},"body":{"index.html":{},"properties.html":{}}}],["angular/animations",{"_index":3305,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2444,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1514,"title":{},"body":{"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/PassedInitialConfig.html":{}}}],["angular/compiler",{"_index":3307,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2449,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":3308,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":3309,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":3312,"title":{},"body":{"dependencies.html":{}}}],["angularodataentity",{"_index":3355,"title":{},"body":{"index.html":{}}}],["annot",{"_index":1286,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annot.bool",{"_index":1305,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.int",{"_index":1306,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.permissions",{"_index":1307,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.properties",{"_index":1308,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.string",{"_index":1304,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.term",{"_index":1293,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annotatable",{"_index":1283,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue",{"_index":1272,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue(term",{"_index":1278,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation",{"_index":873,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation.ts",{"_index":767,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{}}}],["annotation.ts:1",{"_index":771,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:15",{"_index":782,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:17",{"_index":784,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:18",{"_index":783,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:2",{"_index":772,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:22",{"_index":986,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:24",{"_index":991,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:25",{"_index":996,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:26",{"_index":988,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:27",{"_index":989,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:28",{"_index":987,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:29",{"_index":992,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:30",{"_index":990,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:31",{"_index":993,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:32",{"_index":994,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:33",{"_index":995,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:5",{"_index":786,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:7",{"_index":788,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:9",{"_index":787,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotationconfig",{"_index":262,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["annotationlist",{"_index":768,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["annotations",{"_index":269,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["annotations=${this.api.options.prefer?.includeannotations",{"_index":2813,"title":{},"body":{"classes/ODataRequest.html":{}}}],["annotationslist",{"_index":951,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["annots",{"_index":2966,"title":{},"body":{"classes/ODataResponse.html":{},"index.html":{}}}],["annots.data(payload",{"_index":2968,"title":{},"body":{"classes/ODataResponse.html":{}}}],["any(left",{"_index":597,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["any)['_names",{"_index":355,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["any)[f.name",{"_index":2227,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["any[]).map((v",{"_index":2142,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["api",{"_index":1516,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{},"properties.html":{}}}],["api.options",{"_index":2839,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apiconfig",{"_index":252,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apinameorentitytype",{"_index":3118,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["apioptions",{"_index":1,"title":{"interfaces/ApiOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["apioptions.helper.countparam",{"_index":2842,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apioptions.helper.etag(options.body",{"_index":2845,"title":{},"body":{"classes/ODataRequest.html":{}}}],["app",{"_index":3379,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":3384,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":3382,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":3385,"title":{},"body":{"index.html":{}}}],["application",{"_index":3365,"title":{},"body":{"index.html":{}}}],["application/json;${accept.join",{"_index":2803,"title":{},"body":{"classes/ODataRequest.html":{}}}],["application_http",{"_index":1517,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["application_json",{"_index":1518,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["appliesto",{"_index":780,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["applymixins(derivedctor",{"_index":394,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatafunctions",{"_index":605,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odataoperators",{"_index":602,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatasyntax",{"_index":608,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["appmodule",{"_index":3369,"title":{},"body":{"index.html":{}}}],["arbitrary",{"_index":183,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["arising",{"_index":3520,"title":{},"body":{"license.html":{}}}],["arithmeticfunctions",{"_index":308,"title":{"classes/ArithmeticFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["arithmeticoperators",{"_index":558,"title":{"classes/ArithmeticOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["array",{"_index":1757,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["array.isarray(config.keys",{"_index":2192,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["array.isarray(right",{"_index":530,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["array.isarray(this.configs",{"_index":1982,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(this.passedconfigs",{"_index":1979,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(value",{"_index":1932,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["arraybuffer",{"_index":2716,"title":{},"body":{"classes/ODataRequest.html":{}}}],["arrays",{"_index":1532,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["arrays.zip(this._requests",{"_index":1638,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["asc",{"_index":3173,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["ascending",{"_index":3157,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["ascending(field",{"_index":3161,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["asp",{"_index":1460,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["associated",{"_index":3473,"title":{},"body":{"license.html":{}}}],["atomicitygroup",{"_index":1562,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["attach",{"_index":2055,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/enumerations.html":{}}}],["attach(model",{"_index":3131,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["attach(value",{"_index":2060,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>(model",{"_index":3143,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["attach>(value",{"_index":2082,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attr",{"_index":1230,"title":{},"body":{"classes/Field.html":{}}}],["attr?.nodevalue",{"_index":1232,"title":{},"body":{"classes/Field.html":{}}}],["attribute",{"_index":1095,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["attribute_abstract",{"_index":1177,"title":{},"body":{"classes/Field.html":{}}}],["attribute_action",{"_index":1174,"title":{},"body":{"classes/Field.html":{}}}],["attribute_alias",{"_index":1144,"title":{},"body":{"classes/Field.html":{}}}],["attribute_applies_to",{"_index":1182,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_term",{"_index":1181,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_type",{"_index":1152,"title":{},"body":{"classes/Field.html":{}}}],["attribute_contains_target",{"_index":1166,"title":{},"body":{"classes/Field.html":{}}}],["attribute_default_value",{"_index":1161,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set",{"_index":1175,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set_path",{"_index":1168,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_type",{"_index":1170,"title":{},"body":{"classes/Field.html":{}}}],["attribute_extends",{"_index":1180,"title":{},"body":{"classes/Field.html":{}}}],["attribute_function",{"_index":1173,"title":{},"body":{"classes/Field.html":{}}}],["attribute_has_stream",{"_index":1165,"title":{},"body":{"classes/Field.html":{}}}],["attribute_include_in_service_document",{"_index":1176,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_bound",{"_index":1167,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_composable",{"_index":1169,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_flags",{"_index":1179,"title":{},"body":{"classes/Field.html":{}}}],["attribute_max_length",{"_index":1156,"title":{},"body":{"classes/Field.html":{}}}],["attribute_name",{"_index":1150,"title":{},"body":{"classes/Field.html":{}}}],["attribute_namespace",{"_index":1145,"title":{},"body":{"classes/Field.html":{}}}],["attribute_nullable",{"_index":1155,"title":{},"body":{"classes/Field.html":{}}}],["attribute_open_type",{"_index":1153,"title":{},"body":{"classes/Field.html":{}}}],["attribute_partner",{"_index":1162,"title":{},"body":{"classes/Field.html":{}}}],["attribute_path",{"_index":1171,"title":{},"body":{"classes/Field.html":{}}}],["attribute_precision",{"_index":1157,"title":{},"body":{"classes/Field.html":{}}}],["attribute_property",{"_index":1163,"title":{},"body":{"classes/Field.html":{}}}],["attribute_qualifier",{"_index":1147,"title":{},"body":{"classes/Field.html":{}}}],["attribute_referenced_property",{"_index":1164,"title":{},"body":{"classes/Field.html":{}}}],["attribute_scale",{"_index":1158,"title":{},"body":{"classes/Field.html":{}}}],["attribute_srid",{"_index":1160,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target",{"_index":1172,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target_namespace",{"_index":1148,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term",{"_index":1149,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term_namespace",{"_index":1146,"title":{},"body":{"classes/Field.html":{}}}],["attribute_type",{"_index":1154,"title":{},"body":{"classes/Field.html":{}}}],["attribute_underlying_type",{"_index":1178,"title":{},"body":{"classes/Field.html":{}}}],["attribute_unicode",{"_index":1159,"title":{},"body":{"classes/Field.html":{}}}],["attribute_uri",{"_index":1143,"title":{},"body":{"classes/Field.html":{}}}],["attribute_value",{"_index":1151,"title":{},"body":{"classes/Field.html":{}}}],["attribute_version",{"_index":1142,"title":{},"body":{"classes/Field.html":{}}}],["attributes",{"_index":1141,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attributes(data",{"_index":1326,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["attributes.getnameditem('version",{"_index":1231,"title":{},"body":{"classes/Field.html":{}}}],["attrs",{"_index":2250,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attrs[field.name",{"_index":2299,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["attrs[key",{"_index":2258,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["author",{"_index":3539,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":3510,"title":{},"body":{"license.html":{}}}],["available",{"_index":2465,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["average",{"_index":3341,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["backward",{"_index":2571,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["base",{"_index":157,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["base64",{"_index":2165,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["baseterm",{"_index":778,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["basetype",{"_index":794,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["basic",{"_index":3439,"title":{},"body":{"index.html":{}}}],["batch",{"_index":53,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["batch(\"trippin",{"_index":3432,"title":{},"body":{"index.html":{}}}],["batch._requests",{"_index":1594,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch_prefix",{"_index":1519,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batchboundary",{"_index":1652,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["binary",{"_index":96,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["binary32",{"_index":147,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["binary64",{"_index":138,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["binding",{"_index":839,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["binding.ts",{"_index":905,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:1",{"_index":907,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:3",{"_index":908,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:4",{"_index":909,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["bindingstructuredtype",{"_index":3080,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingstructuredtype.issubtypeof(callablebindingstructuredtype",{"_index":3088,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingtype",{"_index":3046,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bit",{"_index":81,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["blob",{"_index":2717,"title":{},"body":{"classes/ODataRequest.html":{}}}],["body",{"_index":228,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bodyqueryoptions",{"_index":12,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bool",{"_index":264,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boolean",{"_index":31,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["boolean((f.value",{"_index":2344,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["boolean(field.collection",{"_index":2117,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["boolean(field.navigation",{"_index":2119,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["bound",{"_index":299,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boundary",{"_index":1656,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix",{"_index":1520,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${batchboundary}${boundary_prefix_suffix",{"_index":1668,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${changesetboundary}${boundary_prefix_suffix",{"_index":1660,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["break",{"_index":2218,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["browse",{"_index":3524,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3310,"title":{},"body":{"dependencies.html":{}}}],["bugs",{"_index":3534,"title":{},"body":{"properties.html":{}}}],["build",{"_index":1723,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry",{"_index":1708,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry(payload",{"_index":1721,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["builder",{"_index":329,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["builders",{"_index":3445,"title":{},"body":{"index.html":{}}}],["buildjsonbody(requests",{"_index":1669,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildkey",{"_index":1709,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildkey(names",{"_index":1726,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildlegacybody",{"_index":1651,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildpathandquery",{"_index":2522,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["byte",{"_index":79,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["c",{"_index":3459,"title":{},"body":{"license.html":{}}}],["c.binding()?.type",{"_index":3085,"title":{},"body":{"classes/ODataSchema.html":{}}}],["c.clone",{"_index":675,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["c.issupertypeof(type",{"_index":2211,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["c.istypeof(type",{"_index":2138,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["c.tojson",{"_index":1086,"title":{},"body":{"classes/Expression.html":{}}}],["cache",{"_index":41,"title":{"interfaces/Cache.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cache_control",{"_index":2907,"title":{},"body":{"classes/ODataResponse.html":{}}}],["cache_key_separator",{"_index":1765,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cacheability",{"_index":219,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["cachecacheability",{"_index":47,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["cachecontrol",{"_index":2948,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["cachecontrol.split(',').foreach((directive",{"_index":3022,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["cached",{"_index":1813,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cachekey",{"_index":2707,"title":{},"body":{"classes/ODataRequest.html":{}}}],["california",{"_index":3414,"title":{},"body":{"index.html":{}}}],["callable",{"_index":1845,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["callable.configure",{"_index":3095,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callable_binding_parameter",{"_index":1923,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["callablebindingstructuredtype",{"_index":3086,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callablebindingtype",{"_index":3084,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callableconfig",{"_index":275,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["callables",{"_index":274,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["callaction",{"_index":2056,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["callaction(params",{"_index":2066,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction",{"_index":2057,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction(params",{"_index":2070,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["case",{"_index":377,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["case(left",{"_index":525,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["cast",{"_index":3299,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["cast(left",{"_index":512,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["catch",{"_index":422,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["caught",{"_index":258,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ceiling",{"_index":312,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["ceiling(left",{"_index":314,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["ch",{"_index":2215,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ch.findchildparser(predicate",{"_index":2217,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["change",{"_index":3331,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["changeset",{"_index":1655,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changeset_prefix",{"_index":1521,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetboundary",{"_index":1653,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetendline",{"_index":1685,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetid",{"_index":1654,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetresponses",{"_index":1683,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["channel",{"_index":1575,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["characters",{"_index":93,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["charge",{"_index":3468,"title":{},"body":{"license.html":{}}}],["check",{"_index":1226,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"index.html":{}}}],["checkversion(document",{"_index":1225,"title":{},"body":{"classes/Field.html":{}}}],["childparser",{"_index":2219,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["childparser((c",{"_index":2137,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["children",{"_index":634,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["children.push(exp",{"_index":3227,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children.push(new",{"_index":3225,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children[index",{"_index":673,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["chunk",{"_index":1691,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunk.slice(1",{"_index":1692,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunks",{"_index":1674,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["city",{"_index":3407,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3513,"title":{},"body":{"license.html":{}}}],["class",{"_index":307,"title":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["classes",{"_index":309,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["clean",{"_index":2413,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["clear",{"_index":2622,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["clearkey",{"_index":2604,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["clearparameters",{"_index":2609,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["client",{"_index":2450,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"properties.html":{}}}],["clock",{"_index":114,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["clone",{"_index":346,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["close",{"_index":1657,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["code",{"_index":1688,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["collection",{"_index":173,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["collectionfunctions",{"_index":464,"title":{"classes/CollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["commonmodule",{"_index":2443,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["complete.html#_toc406398229",{"_index":1452,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398230",{"_index":1453,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398236",{"_index":1456,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398237",{"_index":1457,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398238",{"_index":1454,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398240",{"_index":1455,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complextype",{"_index":1117,"title":{},"body":{"classes/Field.html":{}}}],["complextypes",{"_index":952,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["compodoc",{"_index":3448,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":3313,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":3376,"title":{},"body":{"index.html":{}}}],["composable",{"_index":300,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["compute",{"_index":66,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["compute(opts",{"_index":644,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["computed",{"_index":2093,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["computeexpression",{"_index":331,"title":{"classes/ComputeExpression.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["computeexpression.fromjson(value",{"_index":380,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["computeexpressionbuilder",{"_index":660,"title":{},"body":{"classes/ComputeExpression.html":{},"miscellaneous/typealiases.html":{}}}],["computeexpressionbuilder,current",{"_index":645,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["concat",{"_index":3272,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["concat(left",{"_index":448,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["conditionalfunctions",{"_index":524,"title":{"classes/ConditionalFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["conditions",{"_index":3490,"title":{},"body":{"license.html":{}}}],["config",{"_index":1276,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["config.accept",{"_index":1480,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.alias",{"_index":3060,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.annotations",{"_index":1296,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["config.base",{"_index":2189,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.bodyqueryoptions",{"_index":1478,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.bound",{"_index":1890,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.composable",{"_index":1892,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.configure",{"_index":3093,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.containers",{"_index":3071,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.deleterefby",{"_index":1486,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.entities",{"_index":3065,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entitysetpath",{"_index":1888,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.entitysets",{"_index":2050,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["config.entitytype",{"_index":2086,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.enums",{"_index":3062,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.etag",{"_index":1482,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fetchpolicy",{"_index":1476,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fields",{"_index":2197,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.flags",{"_index":2340,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.headers",{"_index":1470,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.jsonbatchformat",{"_index":1490,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.keys.map((key",{"_index":2194,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.members",{"_index":2329,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.name",{"_index":1948,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["config.namespace",{"_index":3059,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.nonparenthesisforemptyparameterfunction",{"_index":1488,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.open",{"_index":2191,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.params",{"_index":1468,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.prefer",{"_index":1484,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.return",{"_index":1951,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["config.service",{"_index":2088,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.stringasenum",{"_index":1466,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.stripmetadata",{"_index":1474,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.version",{"_index":1464,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.withcredentials",{"_index":1472,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["configs",{"_index":251,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["configure",{"_index":1830,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["configure(undefined",{"_index":1846,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSchema.html":{}}}],["connection",{"_index":3522,"title":{},"body":{"license.html":{}}}],["connector",{"_index":3196,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["console.log",{"_index":3411,"title":{},"body":{"index.html":{}}}],["console.log(\"airport",{"_index":3404,"title":{},"body":{"index.html":{}}}],["console.log(\"airports",{"_index":3394,"title":{},"body":{"index.html":{}}}],["console.log(\"all",{"_index":3398,"title":{},"body":{"index.html":{}}}],["const",{"_index":242,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["constants",{"_index":1094,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["constructor",{"_index":424,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["constructor(action",{"_index":910,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["constructor(annot",{"_index":1291,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["constructor(annotationlist",{"_index":769,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["constructor(client",{"_index":3115,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["constructor(config",{"_index":1274,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["constructor(configs",{"_index":1972,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["constructor(field",{"_index":730,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/OrderByField.html":{}}}],["constructor(group",{"_index":1252,"title":{},"body":{"classes/Grouping.html":{}}}],["constructor(helper",{"_index":1320,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["constructor(init",{"_index":2708,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["constructor(name",{"_index":746,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/Type.html":{}}}],["constructor(namespace",{"_index":869,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlSchema.html":{}}}],["constructor(op",{"_index":1260,"title":{},"body":{"classes/Lambda.html":{},"classes/Operator.html":{}}}],["constructor(passedconfigs",{"_index":1990,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["constructor(path",{"_index":906,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["constructor(private",{"_index":1977,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["constructor(property",{"_index":936,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["constructor(propertyrefs",{"_index":885,"title":{},"body":{"classes/CsdlKey.html":{}}}],["constructor(protected",{"_index":570,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["constructor(public",{"_index":773,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/ODataBatchRequest.html":{}}}],["constructor(request",{"_index":1498,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["constructor(segment",{"_index":3249,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["constructor(segments",{"_index":2496,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{}}}],["constructor(target",{"_index":785,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["constructor(term",{"_index":781,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["constructor(termnamespace",{"_index":880,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["constructor(type",{"_index":940,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["constructor(undefined",{"_index":636,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/ODataCache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["constructor(uri",{"_index":931,"title":{},"body":{"classes/CsdlReference.html":{}}}],["constructor(value",{"_index":3242,"title":{},"body":{"classes/SearchTerm.html":{}}}],["constructor(values",{"_index":2625,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["constructor(xml",{"_index":1184,"title":{},"body":{"classes/Field.html":{}}}],["constructors",{"_index":395,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["constructors.foreach((basector",{"_index":396,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["container",{"_index":972,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataSchema.html":{}}}],["container.entitysets",{"_index":3076,"title":{},"body":{"classes/ODataSchema.html":{}}}],["container.ts",{"_index":816,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:10",{"_index":829,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:11",{"_index":827,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:12",{"_index":824,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:5",{"_index":823,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:7",{"_index":828,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:8",{"_index":826,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:9",{"_index":825,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["containers",{"_index":276,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contains",{"_index":3273,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["contains(left",{"_index":450,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["containstarget",{"_index":890,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["content",{"_index":725,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["content_id",{"_index":1522,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_transfer_encoding",{"_index":1523,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_type",{"_index":1524,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["contentid",{"_index":1684,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["contents",{"_index":3357,"title":{},"body":{"index.html":{}}}],["contenttype",{"_index":1675,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["contenttype.indexof(application_json",{"_index":2931,"title":{},"body":{"classes/ODataResponse.html":{}}}],["context",{"_index":1322,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["context.entityset",{"_index":1782,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.entityset}(${context.key",{"_index":1785,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.key",{"_index":1784,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.type",{"_index":1786,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["continue",{"_index":2817,"title":{},"body":{"classes/ODataRequest.html":{}}}],["continueonerror",{"_index":211,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contract",{"_index":3517,"title":{},"body":{"license.html":{}}}],["coordinate",{"_index":163,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["copies",{"_index":3485,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3471,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3458,"title":{},"body":{"license.html":{}}}],["core",{"_index":1462,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["count",{"_index":61,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["count(opts",{"_index":687,"title":{},"body":{"classes/CountExpression.html":{}}}],["countdistinct",{"_index":3342,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["countexpression",{"_index":332,"title":{"classes/CountExpression.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["countexpression.fromjson(value",{"_index":384,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["countexpressionbuilder",{"_index":723,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["countexpressionbuilder,current",{"_index":688,"title":{},"body":{"classes/CountExpression.html":{}}}],["countfield",{"_index":697,"title":{"classes/CountField.html":{}},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(field",{"_index":728,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(this.field.clone",{"_index":718,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countryregion",{"_index":3408,"title":{},"body":{"index.html":{}}}],["count}(${object.keys(params",{"_index":710,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["create",{"_index":1871,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{}}}],["createsyncloader",{"_index":2476,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["createsyncloader(passedconfig",{"_index":2461,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["creating",{"_index":1876,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["creation",{"_index":255,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["credentials",{"_index":1431,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["csdl",{"_index":806,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdl/csdl",{"_index":1092,"title":{},"body":{"classes/Field.html":{}}}],["csdlaction",{"_index":741,"title":{"classes/CsdlAction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlactionimport",{"_index":760,"title":{"classes/CsdlActionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlannotable",{"_index":766,"title":{"classes/CsdlAnnotable.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotable:2",{"_index":789,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotation",{"_index":770,"title":{"classes/CsdlAnnotation.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["csdlannotations",{"_index":774,"title":{"classes/CsdlAnnotations.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdlcomplextype",{"_index":790,"title":{"classes/CsdlComplexType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlentitycontainer",{"_index":814,"title":{"classes/CsdlEntityContainer.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlentityset",{"_index":821,"title":{"classes/CsdlEntitySet.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["csdlentitytype",{"_index":809,"title":{"classes/CsdlEntityType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlenummember",{"_index":843,"title":{"classes/CsdlEnumMember.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["csdlenumtype",{"_index":847,"title":{"classes/CsdlEnumType.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunction",{"_index":755,"title":{"classes/CsdlFunction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunctionimport",{"_index":757,"title":{"classes/CsdlFunctionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlinclude",{"_index":867,"title":{"classes/CsdlInclude.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlincludeannotations",{"_index":877,"title":{"classes/CsdlIncludeAnnotations.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlkey",{"_index":810,"title":{"classes/CsdlKey.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationproperty",{"_index":798,"title":{"classes/CsdlNavigationProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationpropertybinding",{"_index":833,"title":{"classes/CsdlNavigationPropertyBinding.html":{}},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlondelete",{"_index":895,"title":{"classes/CsdlOnDelete.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlparameter",{"_index":748,"title":{"classes/CsdlParameter.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlproperty",{"_index":797,"title":{"classes/CsdlProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlpropertyref",{"_index":813,"title":{"classes/CsdlPropertyRef.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlreference",{"_index":874,"title":{"classes/CsdlReference.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlreferentialconstraint",{"_index":894,"title":{"classes/CsdlReferentialConstraint.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlreturntype",{"_index":747,"title":{"classes/CsdlReturnType.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlschema",{"_index":948,"title":{"classes/CsdlSchema.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlsingleton",{"_index":822,"title":{"classes/CsdlSingleton.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlstructuralproperty",{"_index":889,"title":{"classes/CsdlStructuralProperty.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["csdlstructuralproperty:3",{"_index":901,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:4",{"_index":903,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:5",{"_index":902,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuredtype",{"_index":793,"title":{"classes/CsdlStructuredType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["csdlstructuredtype:10",{"_index":803,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:11",{"_index":801,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:12",{"_index":804,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:13",{"_index":800,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:8",{"_index":802,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:9",{"_index":805,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlterm",{"_index":777,"title":{"classes/CsdlTerm.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdltypedefinition",{"_index":958,"title":{"classes/CsdlTypeDefinition.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["ctx",{"_index":1613,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ctx(this",{"_index":1620,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["current",{"_index":646,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["custom",{"_index":2102,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["customheaders",{"_index":2783,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[accept",{"_index":2802,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_match_header",{"_index":2787,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_none_match_header",{"_index":2790,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[prefer",{"_index":2822,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customizations",{"_index":3444,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1403,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["customparams",{"_index":2827,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$expand",{"_index":2830,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$select",{"_index":2828,"title":{},"body":{"classes/ODataRequest.html":{}}}],["damages",{"_index":3514,"title":{},"body":{"license.html":{}}}],["data",{"_index":152,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["data(data",{"_index":1330,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["dataservices",{"_index":1204,"title":{},"body":{"classes/Field.html":{}}}],["date",{"_index":108,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["date(left",{"_index":480,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["date.now",{"_index":1788,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["dateandtimefunctions",{"_index":479,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["datetimeoffset",{"_index":121,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["day(left",{"_index":482,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["days",{"_index":124,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deal",{"_index":3475,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3523,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":134,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["deep",{"_index":3443,"title":{},"body":{"index.html":{}}}],["default",{"_index":239,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["default_fetch_policy",{"_index":1436,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_strip_metadata",{"_index":1437,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_timeout",{"_index":1766,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["default_version",{"_index":1438,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["default_version].odata_etag",{"_index":2257,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["default_version].type(value",{"_index":2136,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaults",{"_index":2274,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaultvalue",{"_index":779,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["defined",{"_index":316,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["definition",{"_index":971,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"index.html":{}}}],["definition.ts",{"_index":997,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:10",{"_index":1006,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:11",{"_index":1004,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:3",{"_index":999,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:5",{"_index":1001,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:6",{"_index":1005,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:7",{"_index":1000,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:8",{"_index":1002,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:9",{"_index":1003,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["delete",{"_index":1409,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["delete'].indexof(this._method",{"_index":2786,"title":{},"body":{"classes/ODataRequest.html":{}}}],["deleterefby",{"_index":13,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deleting",{"_index":3348,"title":{},"body":{"index.html":{}}}],["delivered",{"_index":1574,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deltalink",{"_index":1391,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["demo",{"_index":3352,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3304,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependson",{"_index":1563,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deps",{"_index":2477,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["derivedctor.prototype",{"_index":399,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["desc",{"_index":3174,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["descending",{"_index":3158,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["descending(field",{"_index":3164,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["description",{"_index":1284,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"properties.html":{}}}],["deseialize",{"_index":1850,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialization",{"_index":1851,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialize",{"_index":225,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deserialize(value",{"_index":1848,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["deserialized",{"_index":1852,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["destroy",{"_index":3333,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["diego",{"_index":3461,"title":{},"body":{"license.html":{},"properties.html":{}}}],["digits",{"_index":144,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["directive",{"_index":3029,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["directive.startswith(max_age",{"_index":3023,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["disable",{"_index":2457,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["distribute",{"_index":3481,"title":{},"body":{"license.html":{}}}],["div",{"_index":611,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["div(left",{"_index":565,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["document",{"_index":1186,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement",{"_index":1197,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.attributes",{"_index":1194,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.getelementsbytagname",{"_index":1206,"title":{},"body":{"classes/Field.html":{}}}],["documentation",{"_index":3360,"title":{},"body":{"index.html":{},"license.html":{}}}],["domparser",{"_index":1185,"title":{},"body":{"classes/Field.html":{}}}],["double",{"_index":145,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["duration",{"_index":123,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["dynamic",{"_index":3311,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":281,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["e().eq(\"emails",{"_index":3428,"title":{},"body":{"index.html":{}}}],["e.istypeof(type",{"_index":3078,"title":{},"body":{"classes/ODataSchema.html":{}}}],["earth",{"_index":162,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["editlink",{"_index":1365,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["edm.binary",{"_index":151,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.boolean",{"_index":95,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.byte",{"_index":99,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.date",{"_index":107,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.datetimeoffset",{"_index":118,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.decimal",{"_index":128,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.double",{"_index":135,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.duration",{"_index":122,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geography",{"_index":155,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographycollection",{"_index":182,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographylinestring",{"_index":166,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultilinestring",{"_index":176,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultipoint",{"_index":172,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultipolygon",{"_index":179,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographypoint",{"_index":160,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographypolygon",{"_index":169,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometry",{"_index":185,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrycollection",{"_index":200,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrylinestring",{"_index":190,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultilinestring",{"_index":196,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultipoint",{"_index":194,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultipolygon",{"_index":198,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrypoint",{"_index":187,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrypolygon",{"_index":192,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.guid",{"_index":77,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int16",{"_index":85,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int32",{"_index":103,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int64",{"_index":105,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.sbyte",{"_index":101,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.single",{"_index":146,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.stream",{"_index":153,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.string",{"_index":89,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.timeofday",{"_index":113,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edmtype",{"_index":76,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edmtype.binary",{"_index":2154,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.boolean].indexof(this.type",{"_index":2175,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.byte",{"_index":2170,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.date",{"_index":2150,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.datetimeoffset",{"_index":2152,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.decimal",{"_index":2173,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.double].indexof(this.type",{"_index":2174,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.guid",{"_index":2153,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int16",{"_index":2169,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int32",{"_index":2168,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int64",{"_index":2167,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.sbyte",{"_index":2171,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.string",{"_index":2149,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.timeofday",{"_index":2151,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmx:dataservices",{"_index":1102,"title":{},"body":{"classes/Field.html":{}}}],["edmx:edmx",{"_index":1100,"title":{},"body":{"classes/Field.html":{}}}],["edmx:include",{"_index":1106,"title":{},"body":{"classes/Field.html":{}}}],["edmx:includeannotations",{"_index":1108,"title":{},"body":{"classes/Field.html":{}}}],["edmx:reference",{"_index":1104,"title":{},"body":{"classes/Field.html":{}}}],["element",{"_index":1205,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["empty",{"_index":1421,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["encode",{"_index":232,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["encode([this.value",{"_index":581,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["encode(params",{"_index":1918,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["encode(this.values",{"_index":441,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["encode(v",{"_index":419,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["encode(value",{"_index":236,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encoded",{"_index":1855,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["encoding",{"_index":1854,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["endline",{"_index":1678,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["endregion",{"_index":304,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["endswith",{"_index":3274,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["endswith(left",{"_index":452,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["entities",{"_index":272,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["entities'].indexof(this._responsetype",{"_index":2854,"title":{},"body":{"classes/ODataRequest.html":{}}}],["entity",{"_index":815,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["entity(\"cyyz",{"_index":3401,"title":{},"body":{"index.html":{}}}],["entity(key",{"_index":2063,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["entitycontainer",{"_index":953,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["entitycontainerconfig",{"_index":277,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityContainer.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entityid",{"_index":2964,"title":{},"body":{"classes/ODataResponse.html":{}}}],["entitykey",{"_index":2064,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["entityset",{"_index":55,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["entityset(entitysetname",{"_index":3117,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetconfig",{"_index":279,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entitysetname",{"_index":3120,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetpath",{"_index":298,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysets",{"_index":278,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytype",{"_index":302,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytypes",{"_index":954,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["entries",{"_index":1706,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptions.html":{}}}],["entry",{"_index":1724,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry.lastread",{"_index":1807,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.payload",{"_index":1796,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.tags.indexof(t",{"_index":1805,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["enu",{"_index":2314,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["enu.configure",{"_index":3091,"title":{},"body":{"classes/ODataSchema.html":{}}}],["enum",{"_index":51,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enumerations",{"_index":3321,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":270,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enums.toflags(this.members",{"_index":2353,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.toname(this.members",{"_index":2357,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalue(this.members",{"_index":2352,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalues(this.members",{"_index":2350,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enumtype",{"_index":1114,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["enumtypeconfig",{"_index":271,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypefieldconfig",{"_index":280,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypes",{"_index":955,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["eq(left",{"_index":536,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["errata02",{"_index":1448,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["error",{"_index":257,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["error(\"batch",{"_index":1606,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('batch",{"_index":1602,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('field",{"_index":1941,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["error('no",{"_index":1816,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["error('odata",{"_index":1228,"title":{},"body":{"classes/Field.html":{}}}],["error('unable",{"_index":1223,"title":{},"body":{"classes/Field.html":{}}}],["error(`${this.name",{"_index":2246,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["error(`no",{"_index":2584,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["errorhandler",{"_index":256,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["errors",{"_index":2126,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`maxlength",{"_index":2133,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`required",{"_index":2131,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors[field.name",{"_index":2302,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errs",{"_index":2300,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["escape",{"_index":342,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["eslint",{"_index":2456,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["eslint/explicit",{"_index":2460,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["etag",{"_index":14,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["etag_headers",{"_index":2909,"title":{},"body":{"classes/ODataResponse.html":{}}}],["event",{"_index":3509,"title":{},"body":{"license.html":{}}}],["events",{"_index":1605,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["example",{"_index":3363,"title":{},"body":{"index.html":{}}}],["examples",{"_index":3353,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1647,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["execute",{"_index":1615,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["existing",{"_index":3133,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["exists",{"_index":1735,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exp",{"_index":2630,"title":{},"body":{"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.children",{"_index":3238,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.connector",{"_index":3239,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.length",{"_index":3224,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["expand",{"_index":65,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expand(opts",{"_index":1011,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandexpression",{"_index":333,"title":{"classes/ExpandExpression.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["expandexpression.expand(opts",{"_index":1038,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandexpression.fromjson(value",{"_index":379,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["expandexpressionbuilder",{"_index":1037,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["expandexpressionbuilder,current",{"_index":1012,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield",{"_index":1014,"title":{"classes/ExpandField.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield>(field",{"_index":1052,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandobject",{"_index":3547,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandoptions",{"_index":3548,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandtype",{"_index":3549,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expand}(${object.keys(params",{"_index":1032,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expired",{"_index":1736,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exponentialdecimals",{"_index":203,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["exponentialdecimals=${this.api.options.accept?.exponentialdecimals",{"_index":2800,"title":{},"body":{"classes/ODataRequest.html":{}}}],["export",{"_index":37,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["express",{"_index":3500,"title":{},"body":{"license.html":{}}}],["expression",{"_index":630,"title":{"classes/Expression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["expression(key",{"_index":2629,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expression).render",{"_index":706,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["expression:101",{"_index":3168,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expression:120",{"_index":3163,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expression:140",{"_index":694,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:141",{"_index":3212,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:150",{"_index":693,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:160",{"_index":3204,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:168",{"_index":3217,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:169",{"_index":686,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:216",{"_index":1018,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:227",{"_index":1017,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:245",{"_index":1010,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:36",{"_index":656,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:39",{"_index":3269,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:40",{"_index":657,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:49",{"_index":3267,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:51",{"_index":658,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:52",{"_index":655,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:66",{"_index":654,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:67",{"_index":3264,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:7",{"_index":639,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:87",{"_index":643,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:90",{"_index":3169,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expressions",{"_index":2645,"title":{},"body":{"classes/ODataQueryOptions.html":{},"index.html":{}}}],["expressions/count",{"_index":2646,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expressions/expand",{"_index":2647,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expressions/select",{"_index":2648,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["extend",{"_index":818,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["extends",{"_index":218,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["extra",{"_index":1415,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["f",{"_index":679,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["f.configure",{"_index":2233,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.default",{"_index":2276,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.deserialize(value[f.name",{"_index":2226,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.isstructuredtype",{"_index":2277,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.name",{"_index":2223,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["f.navigation",{"_index":2286,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.nullable",{"_index":2298,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.serialize((value",{"_index":2228,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.structured().defaults",{"_index":2279,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.tojsonschema(expand",{"_index":2292,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.value",{"_index":2348,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["f]{12",{"_index":2163,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f]{12}$/.test",{"_index":2540,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["f]{4",{"_index":2162,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["f]{8",{"_index":2161,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["fa",{"_index":2160,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["factory",{"_index":1588,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["factory(api",{"_index":1589,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["false",{"_index":426,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["features",{"_index":2932,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["features.split(';').foreach((o",{"_index":3009,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["fetch",{"_index":1412,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["fetchall",{"_index":3396,"title":{},"body":{"index.html":{}}}],["fetching",{"_index":1747,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["fetchnavigationproperty",{"_index":2058,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchnavigationproperty(resource",{"_index":2074,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchpolicy",{"_index":15,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["field",{"_index":222,"title":{"classes/Field.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["field(enu",{"_index":2312,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["field(field",{"_index":690,"title":{},"body":{"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/SelectExpression.html":{}}}],["field(name",{"_index":649,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["field(namevalue",{"_index":2345,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["field(odatametadata.attribute_alias",{"_index":1212,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_namespace",{"_index":1211,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_uri",{"_index":1199,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_version",{"_index":1192,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_action",{"_index":1217,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotation",{"_index":1203,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotations",{"_index":1221,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_complex_type",{"_index":1214,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_container",{"_index":1218,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_type",{"_index":1215,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_enum_type",{"_index":1213,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_function",{"_index":1216,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include",{"_index":1200,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include_annotations",{"_index":1202,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_term",{"_index":1220,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_type_definition",{"_index":1219,"title":{},"body":{"classes/Field.html":{}}}],["field.default",{"_index":2113,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.encode(v",{"_index":2270,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.isstructuredtype",{"_index":2267,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.maxlength",{"_index":2115,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.name",{"_index":2244,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.navigation",{"_index":2237,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.nullable",{"_index":2116,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.precision",{"_index":2121,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.referentials",{"_index":2110,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.scale",{"_index":2123,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.structured",{"_index":2268,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.type",{"_index":2108,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.validate(value",{"_index":2301,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.value",{"_index":2338,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fieldfactory",{"_index":348,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fieldfactory([...names",{"_index":363,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fieldfactory(value['names",{"_index":393,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fieldnames",{"_index":1236,"title":{},"body":{"classes/Field.html":{}}}],["fieldparser",{"_index":237,"title":{"interfaces/FieldParser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields",{"_index":284,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fields(value",{"_index":2315,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fields.length",{"_index":413,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fields.reduce",{"_index":2225,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields.reduce((acc",{"_index":2278,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields[0].resolve(parser",{"_index":416,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fieldtype",{"_index":1088,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["fieldtype.attribute",{"_index":1193,"title":{},"body":{"classes/Field.html":{}}}],["fieldtype.tag",{"_index":1201,"title":{},"body":{"classes/Field.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["files",{"_index":3474,"title":{},"body":{"license.html":{}}}],["filter",{"_index":67,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["filter((f",{"_index":2275,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["filter((k",{"_index":2686,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((key",{"_index":701,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["filter((p",{"_index":1958,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["filter((r",{"_index":1824,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["filter((t",{"_index":2553,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["filter(opts",{"_index":733,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{}}}],["filterconnector",{"_index":3550,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["filterexpression",{"_index":334,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["filterexpression.filter(opts",{"_index":714,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["filterexpression.fromjson(value",{"_index":381,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["filterexpressionbuilder",{"_index":696,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["filterexpressionbuilder,current",{"_index":734,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{}}}],["filtertype",{"_index":3552,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["find",{"_index":1281,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["find((f",{"_index":2264,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((field",{"_index":2243,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((k",{"_index":2181,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((p",{"_index":2934,"title":{},"body":{"classes/ODataResponse.html":{}}}],["find(predicate",{"_index":2502,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["findannotation",{"_index":1273,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findannotation(predicate",{"_index":1285,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findcallablefortype",{"_index":3031,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findcallablefortype(type",{"_index":3045,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findchildparser",{"_index":2213,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["findentitysetfortype",{"_index":3032,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findentitysetfortype(type",{"_index":3048,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype",{"_index":3033,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype(type",{"_index":3050,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findoptionsfortype",{"_index":1900,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["findstructuredtypefortype",{"_index":3034,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype(type",{"_index":3052,"title":{},"body":{"classes/ODataSchema.html":{}}}],["first",{"_index":42,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["first(undefined",{"_index":2505,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fitness",{"_index":3505,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":131,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["flags",{"_index":282,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["flat",{"_index":188,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floating",{"_index":139,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floor",{"_index":313,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["floor(left",{"_index":320,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fluent",{"_index":3345,"title":{},"body":{"index.html":{}}}],["flush",{"_index":1710,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["following",{"_index":3489,"title":{},"body":{"license.html":{}}}],["foreach(([name",{"_index":2198,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["foreach((key",{"_index":2688,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["forget",{"_index":1711,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forget(undefined",{"_index":1730,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forkjoin",{"_index":1975,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"index.html":{}}}],["forkjoin(this.configs",{"_index":1983,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["format",{"_index":74,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["format/v4.01/odata",{"_index":1443,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["forroot",{"_index":2437,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["forroot(passedconfig",{"_index":2438,"title":{},"body":{"modules/ODataModule.html":{}}}],["found",{"_index":2245,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["fractionalseconds(left",{"_index":484,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["free",{"_index":3467,"title":{},"body":{"license.html":{}}}],["friends",{"_index":3425,"title":{},"body":{"index.html":{}}}],["fromhttpresponse",{"_index":2877,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromhttpresponse(req",{"_index":2889,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson",{"_index":633,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{}}}],["fromjson(json",{"_index":434,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fromjson(req",{"_index":2891,"title":{},"body":{"classes/ODataResponse.html":{}}}],["full",{"_index":45,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2529,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["function",{"_index":62,"title":{"classes/Function.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["function('case",{"_index":526,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('ceiling",{"_index":508,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('concat",{"_index":449,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('contains",{"_index":451,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('date",{"_index":481,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('day",{"_index":483,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('endswith",{"_index":453,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('floor",{"_index":509,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('fractionalseconds",{"_index":485,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.distance",{"_index":519,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.intersects",{"_index":521,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.length",{"_index":523,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubsequence",{"_index":468,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubset",{"_index":466,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('hour",{"_index":487,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('indexof",{"_index":455,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('length",{"_index":457,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('matchespattern",{"_index":472,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('maxdatetime",{"_index":489,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('mindatetime",{"_index":491,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('minute",{"_index":493,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('month",{"_index":495,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('now",{"_index":497,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('round",{"_index":510,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('second",{"_index":499,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('startswith",{"_index":459,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('substring",{"_index":463,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('time",{"_index":501,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('tolower",{"_index":474,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('totaloffsetminutes",{"_index":503,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('totalseconds",{"_index":505,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('toupper",{"_index":476,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('trim",{"_index":478,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('year",{"_index":507,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function(name",{"_index":1385,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["function.fromjson(value",{"_index":385,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["functionimport",{"_index":1135,"title":{},"body":{"classes/Field.html":{}}}],["functionimports",{"_index":819,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["functionname",{"_index":758,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["functions",{"_index":606,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlSchema.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["furnished",{"_index":3488,"title":{},"body":{"license.html":{}}}],["g",{"_index":1546,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["g1",{"_index":1564,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["g2",{"_index":1565,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ge(left",{"_index":542,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["generate",{"_index":3370,"title":{},"body":{"index.html":{}}}],["generated",{"_index":3447,"title":{},"body":{"index.html":{}}}],["generator",{"_index":3351,"title":{},"body":{"index.html":{}}}],["geodistance",{"_index":1246,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geodistance(left",{"_index":518,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["geofunctions",{"_index":517,"title":{"classes/GeoFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["geography",{"_index":158,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographycollection",{"_index":184,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographylinestring",{"_index":168,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultilinestring",{"_index":178,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultipoint",{"_index":175,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultipolygon",{"_index":181,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographypoint",{"_index":165,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographypolygon",{"_index":171,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geointersects",{"_index":1247,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geointersects(left",{"_index":520,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["geolength",{"_index":1248,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geolength(left",{"_index":522,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["geometry",{"_index":186,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrycollection",{"_index":201,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrylinestring",{"_index":191,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultilinestring",{"_index":197,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultipoint",{"_index":195,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultipolygon",{"_index":199,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrypoint",{"_index":189,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrypolygon",{"_index":193,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["get'].indexof(this._method",{"_index":2789,"title":{},"body":{"classes/ODataRequest.html":{}}}],["get(key",{"_index":248,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["get(name",{"_index":1733,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{}}}],["get(target",{"_index":352,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["getannotations",{"_index":2903,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getapi",{"_index":3104,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["getbody",{"_index":2739,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcachekey",{"_index":2751,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcontext",{"_index":2901,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getcount",{"_index":2003,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getdeltalink",{"_index":2007,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["geteditlink",{"_index":2035,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getentityset",{"_index":1336,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["getentitysets",{"_index":3056,"title":{},"body":{"classes/ODataSchema.html":{}}}],["getetag",{"_index":2028,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getfunctions",{"_index":2015,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getheaders",{"_index":2743,"title":{},"body":{"classes/ODataRequest.html":{}}}],["gethelper",{"_index":1434,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["getid",{"_index":2026,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediacontenttype",{"_index":2041,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaeditlink",{"_index":2039,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaetag",{"_index":2030,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediareadlink",{"_index":2037,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmetadataetag",{"_index":2032,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmethod",{"_index":2737,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getname",{"_index":3259,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["getnextlink",{"_index":2005,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getobjects",{"_index":1234,"title":{},"body":{"classes/Field.html":{}}}],["getoptions",{"_index":2897,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getparams",{"_index":2741,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getparseroptions",{"_index":1432,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["getpath",{"_index":2735,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpathwithparams",{"_index":2745,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpayload",{"_index":2899,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getproperties",{"_index":2043,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getreadlink",{"_index":2001,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getresponse",{"_index":1712,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["getresponse(req",{"_index":1737,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["getresponsetype",{"_index":2733,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getsingletonschema",{"_index":3140,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["getskip",{"_index":2011,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getskiptoken",{"_index":2013,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getstructuredtypeschema",{"_index":2078,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["getting",{"_index":2471,"title":{"index.html":{},"license.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["gettop",{"_index":2009,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["gettype",{"_index":1338,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["geturl",{"_index":2747,"title":{},"body":{"classes/ODataRequest.html":{}}}],["geturlwithparams",{"_index":2749,"title":{},"body":{"classes/ODataRequest.html":{}}}],["git+https://github.com/diegomvh/angular",{"_index":3537,"title":{},"body":{"properties.html":{}}}],["given",{"_index":1732,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["granted",{"_index":3466,"title":{},"body":{"license.html":{}}}],["group",{"_index":571,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["groupby",{"_index":3553,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grouping",{"_index":388,"title":{"classes/Grouping.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["grouping(exp",{"_index":3226,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(json['group'].map((v",{"_index":573,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["grouping(node",{"_index":3231,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(objects.clone(this.group",{"_index":575,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["grouping.fromjson(value",{"_index":389,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["gt(left",{"_index":540,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["guid",{"_index":84,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegments.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["haaster",{"_index":3463,"title":{},"body":{"license.html":{},"properties.html":{}}}],["hack",{"_index":2533,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["handle",{"_index":1746,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{}}}],["handlefetch",{"_index":1713,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlefetch(req",{"_index":1739,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate",{"_index":1714,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate(req",{"_index":1741,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handler",{"_index":720,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptions.html":{}}}],["handlerequest",{"_index":1715,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlerequest(req",{"_index":1743,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlers",{"_index":2524,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["has(key",{"_index":2632,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["has(left",{"_index":554,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["has(target",{"_index":371,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["haskey",{"_index":2602,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasparameters",{"_index":2607,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasreferentials",{"_index":2183,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["hasstream",{"_index":811,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["hassubsequence",{"_index":625,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubsequence(left",{"_index":467,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["hassubset",{"_index":626,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubset(left",{"_index":465,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["header",{"_index":1404,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["headerkey",{"_index":2937,"title":{},"body":{"classes/ODataResponse.html":{}}}],["headers",{"_index":16,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["headers.getall(key",{"_index":1558,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["helper",{"_index":1317,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["here",{"_index":3450,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":3465,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3511,"title":{},"body":{"license.html":{}}}],["holds",{"_index":1768,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["homepage",{"_index":3533,"title":{},"body":{"properties.html":{}}}],["hour(left",{"_index":486,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["hours",{"_index":125,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["htmlcollection",{"_index":1237,"title":{},"body":{"classes/Field.html":{}}}],["http",{"_index":1430,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["http.boundarydelimiter(contenttype",{"_index":1677,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.boundaryend(batchboundary",{"_index":1679,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders",{"_index":2824,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpheaders((options",{"_index":1628,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders(this._headers",{"_index":2860,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams",{"_index":2833,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams(params",{"_index":2841,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.parseresponsestatus(chunk[0",{"_index":1690,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.resolveheaderkey",{"_index":2938,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.resolveheaderkey(this.headers",{"_index":2961,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.splithttpparams",{"_index":2857,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.withouthttpparams(params",{"_index":2837,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http11",{"_index":1525,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http://docs.oasis",{"_index":1441,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["http://json",{"_index":2281,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["httpclientmodule",{"_index":2445,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["httpcontext",{"_index":2721,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httperrorresponse",{"_index":1504,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["httpheaders",{"_index":1512,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["httpheaders(json.headers",{"_index":2919,"title":{},"body":{"classes/ODataResponse.html":{}}}],["httpheaders(response['headers",{"_index":1701,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["httpparams",{"_index":2714,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httpresponse",{"_index":1513,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["httpresponsebase",{"_index":1507,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["https://devblogs.microsoft.com/odata/extension",{"_index":1458,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["https://diegomvh.github.io/angular",{"_index":3451,"title":{},"body":{"index.html":{}}}],["https://github.com/diegomvh/angular",{"_index":3454,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://github.com/odata/aspnetcoreodata/issues/171",{"_index":215,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1647",{"_index":214,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1974",{"_index":213,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://json",{"_index":2145,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["https://services.odata.org/v4/(s(4m0tuxtnhcfctl4gzem3gr10))/trippinservicerw",{"_index":3368,"title":{},"body":{"index.html":{}}}],["https://www.odata.org/getting",{"_index":1577,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["id",{"_index":30,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["identifier",{"_index":83,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["identify",{"_index":1758,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["ieee",{"_index":136,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754",{"_index":2793,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ieee754compatible",{"_index":204,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754compatible=${this.api.options.accept?.ieee754compatible",{"_index":2796,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_match_header",{"_index":2753,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_none_match_header",{"_index":2754,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ifmatch",{"_index":206,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ifnonematch",{"_index":207,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["implements",{"_index":423,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["implied",{"_index":3501,"title":{},"body":{"license.html":{}}}],["import",{"_index":34,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["imports",{"_index":2463,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["in(left",{"_index":556,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["include",{"_index":2234,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_etag",{"_index":2251,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_navigation",{"_index":2222,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_parents",{"_index":2180,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["includeannotations",{"_index":212,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["included",{"_index":3494,"title":{},"body":{"license.html":{}}}],["includeinservicedocument",{"_index":759,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["includes",{"_index":876,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["including",{"_index":1882,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"license.html":{}}}],["incorporates",{"_index":3438,"title":{},"body":{"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexof",{"_index":3275,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["indexof(left",{"_index":454,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["indexof(s.name",{"_index":2576,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["indexof(this.type",{"_index":2155,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["indicating",{"_index":1750,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSchemaElement.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["inherited",{"_index":638,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["init",{"_index":2710,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.api",{"_index":2761,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.body",{"_index":2770,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.bodyqueryoptions",{"_index":2778,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.context",{"_index":2766,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.etag",{"_index":2784,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.fetchpolicy",{"_index":2775,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.headers",{"_index":2826,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.method",{"_index":2758,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.observe",{"_index":2765,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.params",{"_index":2835,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.parseroptions",{"_index":2772,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.reportprogress",{"_index":2763,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.resource",{"_index":2760,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.responsetype",{"_index":2768,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.withcredentials",{"_index":2773,"title":{},"body":{"classes/ODataRequest.html":{}}}],["inject",{"_index":3375,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":3112,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"injectables/ODataServiceFactory.html":{}}}],["injectables",{"_index":3113,"title":{},"body":{"injectables/ODataServiceFactory.html":{},"overview.html":{}}}],["injection",{"_index":2467,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken",{"_index":2446,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken('odata.config",{"_index":2455,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["inside",{"_index":1282,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["install",{"_index":3361,"title":{},"body":{"index.html":{}}}],["installation",{"_index":3358,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":586,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["instead",{"_index":3108,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["int",{"_index":265,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["int16",{"_index":88,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["int32",{"_index":104,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["int64",{"_index":106,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["integer",{"_index":87,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"overview.html":{}}}],["invalid",{"_index":3334,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isbatch",{"_index":2701,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isbound",{"_index":744,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["iscallabletype",{"_index":3083,"title":{},"body":{"classes/ODataSchema.html":{}}}],["iscomplextype",{"_index":2241,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["iscomposable",{"_index":756,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["isedmtype",{"_index":1937,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isentitytype",{"_index":2239,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["isenumtype",{"_index":1939,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isexpired",{"_index":1716,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isexpired(entry",{"_index":1748,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isfetch",{"_index":2702,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isfield",{"_index":364,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["isflags",{"_index":849,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["iskey",{"_index":2179,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ismutate",{"_index":2703,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isnamespaceof",{"_index":3035,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isnamespaceof(type",{"_index":3054,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isof",{"_index":3300,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["isof(left",{"_index":515,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["isopentype",{"_index":2212,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["isquerybody",{"_index":2704,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isstructuredtype",{"_index":1942,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["issubtypeof",{"_index":1831,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(schema",{"_index":1861,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(type",{"_index":2205,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["issupertypeof",{"_index":1832,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issupertypeof(schema",{"_index":1864,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issupertypeof(type",{"_index":2209,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["istypeof",{"_index":1833,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof(type",{"_index":1867,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["items",{"_index":2177,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["john",{"_index":3430,"title":{},"body":{"index.html":{}}}],["john@example.com\").or(e().eq(\"username",{"_index":3429,"title":{},"body":{"index.html":{}}}],["join",{"_index":532,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json",{"_index":652,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{},"index.html":{}}}],["json.body",{"_index":2918,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.key",{"_index":2566,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parameters",{"_index":2568,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parse(this.storage.getitem(this.name",{"_index":2426,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.status",{"_index":2920,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.statustext",{"_index":2921,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.stringify(array.from(this.entries.entries",{"_index":2425,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.type",{"_index":2565,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.url",{"_index":2922,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json['alias",{"_index":592,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['children'].map((c",{"_index":667,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["json['connector",{"_index":3234,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["json['escape",{"_index":439,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['name",{"_index":435,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['names",{"_index":669,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["json['negated",{"_index":3235,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["json['normalize",{"_index":438,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['op",{"_index":529,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['type",{"_index":578,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['values'].map((v",{"_index":436,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["jsonbatchformat",{"_index":17,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["jsonschemacustom",{"_index":2098,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaexpand",{"_index":2099,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaoptions",{"_index":2100,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemarequired",{"_index":2101,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaselect",{"_index":2097,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["k",{"_index":1801,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponseOptions.html":{}}}],["k.name",{"_index":2182,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["k.startswith(key",{"_index":1802,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["k.trim",{"_index":3011,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["keep",{"_index":2623,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(...keys",{"_index":2690,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(keys",{"_index":2634,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["key",{"_index":286,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["key(value",{"_index":2600,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key.set(kt.alias",{"_index":2269,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["key.size",{"_index":2271,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keyof",{"_index":297,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys",{"_index":295,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys(values",{"_index":2508,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["keys.indexof(k",{"_index":2687,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keytypes",{"_index":2260,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keywords",{"_index":3530,"title":{},"body":{"properties.html":{}}}],["key}=${params[key",{"_index":712,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["key}=${value",{"_index":2563,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["kind",{"_index":3499,"title":{},"body":{"license.html":{}}}],["kt",{"_index":2262,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["kt.name.split",{"_index":2263,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["lambda",{"_index":390,"title":{"classes/Lambda.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["lambda('all",{"_index":600,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["lambda('any",{"_index":598,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["lambda.fromjson(value",{"_index":391,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["lambdaoperators",{"_index":596,"title":{"classes/LambdaOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["last",{"_index":1769,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["last(undefined",{"_index":2510,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["lastread",{"_index":1771,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["le(left",{"_index":546,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["leap",{"_index":119,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["left",{"_index":318,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["left.split('/').pop().tolowercase()[0",{"_index":593,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op",{"_index":595,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op}(${alias}:${render(right",{"_index":594,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["length",{"_index":461,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["length(left",{"_index":456,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["levels",{"_index":75,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["levels(n",{"_index":1048,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["liability",{"_index":3515,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3512,"title":{},"body":{"license.html":{}}}],["library",{"_index":3354,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":3456,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":3477,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3502,"title":{},"body":{"license.html":{}}}],["line",{"_index":167,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"modules/ODataModule.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["lines",{"_index":1680,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["link",{"_index":1440,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["literal",{"_index":25,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":3416,"title":{},"body":{"index.html":{}}}],["loadconfigs",{"_index":1971,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["loader",{"_index":2453,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["loaders",{"_index":2451,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["location",{"_index":2945,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["location_header",{"_index":2908,"title":{},"body":{"classes/ODataResponse.html":{}}}],["logic",{"_index":98,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["logicaloperators",{"_index":535,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["long_description",{"_index":2094,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["looking",{"_index":1873,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["lt(left",{"_index":544,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["m",{"_index":2061,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["mainly",{"_index":3436,"title":{},"body":{"index.html":{}}}],["make",{"_index":2464,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["map",{"_index":1297,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/ResponseJson.html":{}}}],["map(([key",{"_index":2562,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["map((f",{"_index":2291,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["map((key",{"_index":711,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{}}}],["map((n",{"_index":727,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["map((name",{"_index":672,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataResponse.html":{}}}],["map((response",{"_index":1636,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["map((s",{"_index":2551,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["map((v",{"_index":531,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["map((value",{"_index":1987,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["map([...this.annotations",{"_index":1348,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["map(entries",{"_index":2656,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["map(this.annotations",{"_index":1353,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mapfields",{"_index":2305,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapfields(mapper",{"_index":2318,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapped",{"_index":2322,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapper",{"_index":2320,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["maps",{"_index":2321,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["match",{"_index":1289,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["match(/[&?]{1}\\$skip=(\\d",{"_index":1396,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$top=(\\d",{"_index":1394,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match[1",{"_index":1398,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["matches",{"_index":1290,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["matchespattern",{"_index":470,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["matchespattern(left",{"_index":3287,"title":{},"body":{"classes/StringFunctions.html":{}}}],["matching",{"_index":306,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":1049,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/enumerations.html":{}}}],["max_age",{"_index":3005,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["maxage",{"_index":220,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxdatetime(left",{"_index":488,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["maxlength",{"_index":240,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxpagesize",{"_index":208,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["meant",{"_index":1875,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["mediacontenttype",{"_index":1371,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaeditlink",{"_index":1369,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaetag",{"_index":1359,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediareadlink",{"_index":1367,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["member",{"_index":285,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members",{"_index":283,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members.some((member",{"_index":2365,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["merchantability",{"_index":3504,"title":{},"body":{"license.html":{}}}],["merge",{"_index":3479,"title":{},"body":{"license.html":{}}}],["message",{"_index":1689,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["metadata",{"_index":54,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["metadataetag",{"_index":1361,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["method",{"_index":1345,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{}}}],["methods",{"_index":311,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["microsoft.odata.sampleservice.models.trippin.airport",{"_index":3391,"title":{},"body":{"index.html":{}}}],["microsoft.odata.sampleservice.models.trippin.person",{"_index":3422,"title":{},"body":{"index.html":{}}}],["min",{"_index":3340,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mindatetime(left",{"_index":490,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["minimal",{"_index":44,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["minute(left",{"_index":492,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["minutes",{"_index":126,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["miscellaneous",{"_index":3320,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":2366,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mit",{"_index":3457,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mod",{"_index":612,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mod(left",{"_index":567,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["model",{"_index":293,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["model.attach(this.entity",{"_index":3144,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["modelfieldoptions",{"_index":3555,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":3556,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["models/model",{"_index":2081,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["modify",{"_index":2125,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"license.html":{}}}],["module",{"_index":2430,"title":{"modules/ODataModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":2432,"title":{"modules.html":{}},"body":{"modules/ODataModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2442,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["month(left",{"_index":494,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["mul",{"_index":613,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mul(left",{"_index":563,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["multipart_mixed",{"_index":1526,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary",{"_index":1527,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary}${changesetboundary",{"_index":1662,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["n",{"_index":513,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["n.render",{"_index":671,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["name",{"_index":254,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["name?.resolve(parser",{"_index":370,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["named",{"_index":2247,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["namednodemap",{"_index":1227,"title":{},"body":{"classes/Field.html":{}}}],["names",{"_index":349,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["names.indexof(key",{"_index":2255,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["names.indexof(type",{"_index":1957,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.join",{"_index":2356,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.join(cache_key_separator",{"_index":1789,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["names.length",{"_index":358,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["names.map((n",{"_index":356,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["names.push(`${this.alias}.${this.name",{"_index":1956,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["names.push(`${this.schema.alias}.${this.name",{"_index":3110,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["names.reduce",{"_index":367,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["names[0",{"_index":361,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["namespace",{"_index":267,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["namespace/alias",{"_index":1883,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["namevalue",{"_index":2347,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["navigation",{"_index":287,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["navigationproperties",{"_index":795,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["navigationproperty",{"_index":58,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["navigationpropertybinding",{"_index":832,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["navigationpropertybindings",{"_index":974,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["ne(left",{"_index":538,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["neg",{"_index":614,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["neg(value",{"_index":569,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["negated",{"_index":3197,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["nestedexpandoptions",{"_index":3557,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nestedorderby",{"_index":3558,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["net",{"_index":1461,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["network",{"_index":43,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":294,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["newline",{"_index":1528,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["newline_regexp",{"_index":1529,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["next",{"_index":2458,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["nextlink",{"_index":1389,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["ngmodule",{"_index":2447,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["nicer",{"_index":1872,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["node",{"_index":641,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["node.children",{"_index":3230,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.connector",{"_index":3228,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.length",{"_index":3229,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.negated",{"_index":3232,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["none",{"_index":46,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["none_parser",{"_index":243,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["noninfringement",{"_index":3508,"title":{},"body":{"license.html":{}}}],["nonparenthesisforemptyparameterfunction",{"_index":18,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["normalize",{"_index":315,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["normalizevalue",{"_index":330,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["normalizevalue(value",{"_index":407,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["not(exp",{"_index":3208,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["not(left",{"_index":552,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["notexp",{"_index":3237,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["notice",{"_index":3492,"title":{},"body":{"license.html":{}}}],["now",{"_index":496,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["npm",{"_index":3362,"title":{},"body":{"index.html":{}}}],["null",{"_index":402,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["nullable",{"_index":238,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["number",{"_index":141,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["number(directive.split('=')[1",{"_index":3024,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["number(match[1",{"_index":1395,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["number.isnan(maxage",{"_index":3025,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["numeric",{"_index":129,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["o",{"_index":678,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["o.split",{"_index":3010,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["object",{"_index":1670,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.assign",{"_index":1350,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{}}}],["object.assign(acc",{"_index":707,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["object.assign(acc.params",{"_index":2546,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["object.assign(customparams",{"_index":2832,"title":{},"body":{"classes/ODataRequest.html":{}}}],["object.assign(json",{"_index":666,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["object.assign(this",{"_index":1294,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["object.assign(this.etag",{"_index":1481,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["object.create(null",{"_index":401,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["object.defineproperty",{"_index":398,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["object.entries",{"_index":2196,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.entries(config.fields).map",{"_index":2342,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["object.entries(config.parameters",{"_index":1953,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["object.entries(params",{"_index":2561,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["object.entries(values",{"_index":2654,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["object.fromentries(key",{"_index":2273,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.getownpropertydescriptor(basector.prototype",{"_index":400,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["object.getownpropertynames(basector.prototype).foreach((name",{"_index":397,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["object.keys(attrs",{"_index":2254,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.keys(this.values).reduce",{"_index":716,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects",{"_index":326,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this._segments",{"_index":2569,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["objects.clone(this.value",{"_index":585,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this.values[key",{"_index":717,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects.clone(v",{"_index":445,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["objects.resolvekey(key",{"_index":2272,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["observable",{"_index":35,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["observe",{"_index":1608,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["obtaining",{"_index":3470,"title":{},"body":{"license.html":{}}}],["odata",{"_index":1405,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"index.html":{},"properties.html":{}}}],["odata.git",{"_index":3538,"title":{},"body":{"properties.html":{}}}],["odata.include",{"_index":2812,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata.mergecallableparameters(config.callables",{"_index":3068,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata.metadata",{"_index":3012,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata.streaming",{"_index":3014,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/docs",{"_index":3452,"title":{},"body":{"index.html":{}}}],["odata/issues",{"_index":3535,"title":{},"body":{"properties.html":{}}}],["odata/src/lib/cache/cache.ts",{"_index":1705,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odata/src/lib/cache/cache.ts:105",{"_index":1752,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:126",{"_index":1734,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:138",{"_index":1731,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:159",{"_index":1728,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:168",{"_index":1749,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:178",{"_index":1744,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:189",{"_index":1740,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:22",{"_index":1720,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:224",{"_index":1742,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:23",{"_index":1719,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:30",{"_index":1738,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:31",{"_index":1754,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:38",{"_index":1756,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:55",{"_index":1760,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:76",{"_index":1722,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:93",{"_index":1727,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/memory.ts",{"_index":2384,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/memory.ts:4",{"_index":2385,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/storage.ts",{"_index":2408,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odata/src/lib/cache/storage.ts:13",{"_index":2411,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:14",{"_index":2410,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:35",{"_index":2417,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:45",{"_index":2416,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/helper.ts",{"_index":3577,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/loaders.ts",{"_index":1969,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:12",{"_index":1992,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:21",{"_index":1973,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:29",{"_index":1974,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:6",{"_index":1989,"title":{},"body":{"classes/ODataConfigLoader.html":{}}}],["odata/src/lib/loaders.ts:9",{"_index":1991,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/models/options.ts",{"_index":3330,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/module.ts",{"_index":2433,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata/src/lib/module.ts:31",{"_index":2440,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/options.ts",{"_index":1400,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:103",{"_index":1401,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:123",{"_index":1433,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:134",{"_index":1435,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:21",{"_index":1428,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:25",{"_index":1424,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:29",{"_index":1408,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:33",{"_index":1419,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:37",{"_index":1425,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:41",{"_index":1417,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:45",{"_index":1411,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:49",{"_index":1422,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:53",{"_index":1414,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:57",{"_index":1429,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:61",{"_index":1406,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:66",{"_index":1402,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:72",{"_index":1410,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:82",{"_index":1423,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/resources/path/handlers.ts",{"_index":2586,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:11",{"_index":3258,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:15",{"_index":3257,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:19",{"_index":3255,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:23",{"_index":3253,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:26",{"_index":3251,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:29",{"_index":3256,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:33",{"_index":3254,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:36",{"_index":3252,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:41",{"_index":2587,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:43",{"_index":2589,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:46",{"_index":2594,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:49",{"_index":2588,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:52",{"_index":2590,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:55",{"_index":2591,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:58",{"_index":2593,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:6",{"_index":3250,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:61",{"_index":2592,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:8",{"_index":3260,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/segments.ts",{"_index":2493,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/segments.ts:112",{"_index":2518,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:123",{"_index":2516,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:136",{"_index":2501,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:141",{"_index":2504,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:146",{"_index":2515,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:160",{"_index":2506,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:165",{"_index":2511,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:170",{"_index":2500,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:176",{"_index":2507,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:59",{"_index":2498,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:65",{"_index":2513,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:91",{"_index":2520,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:97",{"_index":2509,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/query/builder.ts",{"_index":3338,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts",{"_index":1076,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:16",{"_index":1084,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:20",{"_index":1081,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:34",{"_index":1079,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:36",{"_index":1078,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:40",{"_index":1080,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:44",{"_index":1083,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:51",{"_index":1082,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:7",{"_index":1077,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts",{"_index":629,"title":{},"body":{"classes/ComputeExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:100",{"_index":650,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:20",{"_index":637,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:32",{"_index":659,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:36",{"_index":647,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:59",{"_index":651,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:94",{"_index":642,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts",{"_index":682,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:106",{"_index":683,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:115",{"_index":695,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:119",{"_index":689,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:135",{"_index":685,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:14",{"_index":740,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:145",{"_index":692,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:175",{"_index":691,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:18",{"_index":739,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:24",{"_index":737,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:70",{"_index":735,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:8",{"_index":731,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:82",{"_index":732,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:91",{"_index":738,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:96",{"_index":736,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts",{"_index":1007,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:103",{"_index":1071,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:115",{"_index":1058,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:127",{"_index":1059,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:139",{"_index":1068,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:148",{"_index":1064,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:160",{"_index":1072,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:164",{"_index":1074,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:168",{"_index":1060,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:17",{"_index":1055,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:172",{"_index":1057,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:177",{"_index":1061,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:187",{"_index":1008,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:196",{"_index":1019,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:200",{"_index":1013,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:221",{"_index":1016,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:23",{"_index":1075,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:251",{"_index":1009,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:256",{"_index":1015,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:27",{"_index":1073,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:33",{"_index":1065,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:87",{"_index":1056,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:99",{"_index":1066,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/filter.ts",{"_index":3575,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts",{"_index":3156,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:10",{"_index":3184,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:126",{"_index":3162,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:130",{"_index":3165,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:14",{"_index":3183,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:22",{"_index":3181,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:44",{"_index":3180,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:47",{"_index":3182,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:56",{"_index":3159,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:65",{"_index":3170,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:69",{"_index":3167,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:7",{"_index":3179,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:85",{"_index":3160,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:95",{"_index":3166,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts",{"_index":3193,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:12",{"_index":3248,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:16",{"_index":3247,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:176",{"_index":3206,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:183",{"_index":3205,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:187",{"_index":3207,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:191",{"_index":3211,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:195",{"_index":3203,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:199",{"_index":3209,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:209",{"_index":3216,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:23",{"_index":3245,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:45",{"_index":3244,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:48",{"_index":3246,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:57",{"_index":3200,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:58",{"_index":3198,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:73",{"_index":3218,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:77",{"_index":3214,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:9",{"_index":3243,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:93",{"_index":3201,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts",{"_index":3261,"title":{},"body":{"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:10",{"_index":3262,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:19",{"_index":3270,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:23",{"_index":3268,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:44",{"_index":3266,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:73",{"_index":3263,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:78",{"_index":3265,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts",{"_index":310,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:17",{"_index":3189,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:215",{"_index":1239,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:223",{"_index":1245,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:227",{"_index":1244,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:238",{"_index":1241,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:247",{"_index":1242,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:287",{"_index":1240,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:296",{"_index":1243,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:30",{"_index":3192,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:302",{"_index":3277,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:306",{"_index":3278,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:31",{"_index":3191,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:310",{"_index":3279,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:314",{"_index":3280,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:318",{"_index":3281,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:32",{"_index":3188,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:322",{"_index":3282,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:326",{"_index":3284,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:33",{"_index":3190,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:341",{"_index":628,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:344",{"_index":627,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:350",{"_index":3288,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:357",{"_index":3289,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:360",{"_index":3290,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:363",{"_index":3291,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:414",{"_index":317,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:417",{"_index":321,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:420",{"_index":323,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:426",{"_index":3301,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:434",{"_index":3302,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:442",{"_index":1249,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:445",{"_index":1250,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:448",{"_index":1251,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:454",{"_index":681,"title":{},"body":{"classes/ConditionalFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:459",{"_index":3149,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:466",{"_index":3155,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:470",{"_index":3154,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:481",{"_index":3151,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:489",{"_index":3152,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:541",{"_index":3150,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:548",{"_index":3153,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:592",{"_index":616,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:595",{"_index":621,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:598",{"_index":619,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:601",{"_index":617,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:604",{"_index":618,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:607",{"_index":620,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:612",{"_index":1253,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:615",{"_index":1259,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:619",{"_index":1258,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:626",{"_index":1255,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:630",{"_index":1256,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:652",{"_index":1254,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:655",{"_index":1257,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:660",{"_index":3292,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:666",{"_index":3298,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:670",{"_index":3297,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:679",{"_index":3294,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:687",{"_index":3295,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:711",{"_index":3293,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:715",{"_index":3296,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:725",{"_index":1261,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:732",{"_index":1267,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:736",{"_index":1266,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:747",{"_index":1263,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:755",{"_index":1264,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:786",{"_index":1262,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:793",{"_index":1265,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:799",{"_index":1269,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:803",{"_index":1268,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/options.ts",{"_index":2621,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/options.ts:109",{"_index":2644,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:123",{"_index":2641,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:131",{"_index":2642,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:148",{"_index":2628,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:153",{"_index":2631,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:159",{"_index":2637,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:165",{"_index":2633,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:169",{"_index":2640,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:177",{"_index":2635,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:186",{"_index":2627,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:43",{"_index":2626,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:57",{"_index":2638,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/request.ts",{"_index":2693,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:18",{"_index":2719,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:19",{"_index":2724,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:20",{"_index":2722,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:21",{"_index":2725,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:22",{"_index":2727,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:225",{"_index":2728,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:23",{"_index":2720,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:24",{"_index":2723,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:276",{"_index":2734,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:285",{"_index":2736,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:289",{"_index":2738,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:293",{"_index":2740,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:30",{"_index":2726,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:302",{"_index":2742,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:31",{"_index":2718,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:311",{"_index":2744,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:317",{"_index":2746,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:323",{"_index":2748,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:327",{"_index":2750,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:331",{"_index":2752,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:337",{"_index":2732,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:345",{"_index":2729,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:349",{"_index":2730,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:353",{"_index":2731,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:40",{"_index":2713,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:41",{"_index":2711,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:42",{"_index":2712,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:43",{"_index":2715,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:44",{"_index":2709,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/resource.ts",{"_index":3574,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/responses/annotations.ts",{"_index":1316,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:103",{"_index":2036,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:107",{"_index":2038,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:111",{"_index":2040,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:115",{"_index":2042,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:119",{"_index":2018,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:12",{"_index":1327,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:120",{"_index":2044,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:127",{"_index":2022,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:128",{"_index":2023,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:129",{"_index":2024,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:139",{"_index":2017,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:140",{"_index":2045,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:147",{"_index":2021,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:173",{"_index":2002,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:177",{"_index":2004,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:181",{"_index":2006,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:185",{"_index":2008,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:189",{"_index":2010,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:19",{"_index":1335,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:194",{"_index":2012,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:199",{"_index":2014,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:206",{"_index":1993,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:207",{"_index":2016,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:214",{"_index":1997,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:26",{"_index":1337,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:30",{"_index":1339,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:35",{"_index":1333,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:36",{"_index":1329,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:37",{"_index":1331,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:5",{"_index":1324,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:7",{"_index":1325,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:83",{"_index":2027,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:87",{"_index":2029,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:91",{"_index":2031,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:95",{"_index":2033,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:99",{"_index":2034,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/csdl/csdl",{"_index":742,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["odata/src/lib/resources/responses/metadata.ts",{"_index":1087,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:46",{"_index":1089,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:48",{"_index":1091,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:49",{"_index":1090,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/options.ts",{"_index":2979,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:19",{"_index":2991,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:20",{"_index":2990,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:22",{"_index":2989,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:23",{"_index":2987,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:25",{"_index":2988,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:27",{"_index":2986,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:28",{"_index":2985,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:34",{"_index":3004,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:38",{"_index":2992,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:42",{"_index":2996,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:59",{"_index":3003,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:65",{"_index":2998,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:70",{"_index":3000,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:76",{"_index":2994,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/response.ts",{"_index":2872,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:134",{"_index":2883,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:135",{"_index":2900,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:145",{"_index":2880,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:146",{"_index":2902,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:155",{"_index":2879,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:156",{"_index":2904,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:178",{"_index":2887,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:202",{"_index":2885,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:220",{"_index":2893,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:247",{"_index":2896,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:30",{"_index":2884,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:31",{"_index":2878,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:47",{"_index":2890,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:59",{"_index":2892,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:80",{"_index":2895,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:93",{"_index":2882,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:94",{"_index":2898,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/types.ts",{"_index":3578,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/types/batch.ts",{"_index":1493,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:107",{"_index":1508,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:117",{"_index":1505,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:41",{"_index":1501,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:42",{"_index":1500,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:43",{"_index":1502,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:49",{"_index":1511,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:53",{"_index":1510,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:85",{"_index":1509,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/options.ts",{"_index":3576,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/annotation.ts",{"_index":1271,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:18",{"_index":1275,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:30",{"_index":1287,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:39",{"_index":1280,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:4",{"_index":1314,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:5",{"_index":1313,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:6",{"_index":1310,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:7",{"_index":1311,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:8",{"_index":1312,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:9",{"_index":1309,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/callable.ts",{"_index":1828,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:10",{"_index":1836,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:24",{"_index":1856,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:36",{"_index":1847,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:58",{"_index":1849,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:68",{"_index":1858,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:7",{"_index":1839,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:78",{"_index":1853,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:8",{"_index":1837,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:86",{"_index":1844,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:9",{"_index":1838,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/element.ts",{"_index":3096,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:19",{"_index":3105,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:29",{"_index":3102,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:38",{"_index":3103,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:47",{"_index":3101,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:58",{"_index":3099,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:68",{"_index":3100,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:7",{"_index":3098,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:8",{"_index":3097,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/entity",{"_index":2047,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{}}}],["odata/src/lib/schema/enum",{"_index":2304,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["odata/src/lib/schema/parsers/callable.ts",{"_index":1906,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:110",{"_index":1920,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:117",{"_index":1917,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:123",{"_index":1922,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:13",{"_index":2480,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:138",{"_index":1919,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:14",{"_index":2483,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:15",{"_index":2482,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:152",{"_index":1916,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:16",{"_index":2479,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:169",{"_index":1915,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:17",{"_index":2481,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:18",{"_index":2478,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:28",{"_index":2491,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:36",{"_index":2485,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:43",{"_index":2484,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:56",{"_index":2488,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:60",{"_index":2489,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:64",{"_index":2486,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:69",{"_index":2490,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:73",{"_index":2492,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:79",{"_index":2487,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:91",{"_index":1909,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:92",{"_index":1910,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:93",{"_index":1908,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:94",{"_index":1914,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:95",{"_index":1913,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:96",{"_index":1912,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:97",{"_index":1907,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/enum",{"_index":2335,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odata/src/lib/schema/parsers/structured",{"_index":2090,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/schema.ts",{"_index":3030,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:12",{"_index":3038,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:13",{"_index":3043,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:14",{"_index":3037,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:15",{"_index":3042,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:16",{"_index":3041,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:17",{"_index":3039,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:18",{"_index":3036,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:39",{"_index":3055,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:46",{"_index":3057,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:54",{"_index":3051,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:60",{"_index":3053,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:66",{"_index":3047,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:87",{"_index":3049,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:92",{"_index":3044,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/services/entity.ts",{"_index":2053,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:12",{"_index":2079,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:6",{"_index":2065,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:7",{"_index":2062,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/factory.ts",{"_index":3114,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:15",{"_index":3119,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:30",{"_index":3123,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:7",{"_index":3116,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/singleton.ts",{"_index":3127,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:34",{"_index":3141,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:44",{"_index":3139,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:58",{"_index":3137,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/types.ts",{"_index":7,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/types.ts:168",{"_index":3185,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:173",{"_index":3187,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:178",{"_index":3186,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:196",{"_index":624,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:197",{"_index":623,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/utils/durations.ts",{"_index":3573,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/wiki",{"_index":3455,"title":{},"body":{"index.html":{}}}],["odata_config",{"_index":2454,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata_entityid_headers",{"_index":2910,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata_etag",{"_index":3377,"title":{},"body":{"index.html":{}}}],["odata_version",{"_index":1530,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata_version_headers",{"_index":2906,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataactionoptions",{"_index":2068,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataactionresource",{"_index":2067,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odataannotatable",{"_index":1270,"title":{"classes/ODataAnnotatable.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:18",{"_index":1843,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:30",{"_index":1885,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:39",{"_index":1884,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation",{"_index":1277,"title":{"classes/ODataAnnotation.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation(annot",{"_index":1298,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odataannotations",{"_index":1315,"title":{"classes/ODataAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:12",{"_index":1999,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:153",{"_index":1998,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:161",{"_index":1995,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:169",{"_index":1996,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:19",{"_index":2000,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:41",{"_index":2619,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:49",{"_index":2617,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:57",{"_index":2618,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:63",{"_index":2025,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:7",{"_index":1994,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:71",{"_index":2019,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:79",{"_index":2020,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataapi",{"_index":1515,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["odataapioptions",{"_index":1399,"title":{"classes/ODataApiOptions.html":{}},"body":{"classes/ODataApiOptions.html":{}}}],["odatabaseservice",{"_index":2054,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:100",{"_index":2077,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:26",{"_index":2073,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:63",{"_index":2069,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabatchrequest",{"_index":1492,"title":{"classes/ODataBatchRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchrequest(req",{"_index":1610,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource",{"_index":1580,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odatabatchresource(api",{"_index":1592,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildjsonbody(this._requests",{"_index":1631,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildlegacybody",{"_index":1650,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildlegacybody(bound",{"_index":1644,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parsejsonresponse(this._requests",{"_index":1637,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parselegacyresponse(this._requests",{"_index":1646,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatacache",{"_index":1704,"title":{"classes/ODataCache.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacache:105",{"_index":2399,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:126",{"_index":2394,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:138",{"_index":2393,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:14",{"_index":2389,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:159",{"_index":2392,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:168",{"_index":2398,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:178",{"_index":2397,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:189",{"_index":2395,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:22",{"_index":2387,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:224",{"_index":2396,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:23",{"_index":2386,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:29",{"_index":2388,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:38",{"_index":2400,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:54",{"_index":2412,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:55",{"_index":2401,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:64",{"_index":2415,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:76",{"_index":2390,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:79",{"_index":2414,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:93",{"_index":2391,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacacheentry",{"_index":1725,"title":{"interfaces/ODataCacheEntry.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacallable",{"_index":1827,"title":{"classes/ODataCallable.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataSchema.html":{}}}],["odatacallable(config",{"_index":3069,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatacallableparser",{"_index":1840,"title":{"classes/ODataCallableParser.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataclient",{"_index":2435,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odataconfigasyncloader",{"_index":1968,"title":{"classes/ODataConfigAsyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odataconfigloader",{"_index":1970,"title":{"classes/ODataConfigLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader",{"_index":1976,"title":{"classes/ODataConfigSyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader(passedconfig.config",{"_index":2462,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odatacontext",{"_index":1323,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentities",{"_index":2886,"title":{},"body":{"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitiesannotations",{"_index":1377,"title":{"classes/ODataEntitiesAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitiesannotations(this.helper",{"_index":1380,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitiesoptions",{"_index":3561,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentity",{"_index":2888,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityannotations",{"_index":1355,"title":{"classes/ODataEntityAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentityannotations(this.helper",{"_index":1381,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitycontainer",{"_index":2046,"title":{"classes/ODataEntityContainer.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["odataentitycontainer(config",{"_index":3072,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataentityoptions",{"_index":3562,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentityservice",{"_index":2052,"title":{"classes/ODataEntityService.html":{}},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:19",{"_index":3134,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:27",{"_index":3132,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityset",{"_index":2048,"title":{"classes/ODataEntitySet.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataSchema.html":{}}}],["odataentityset(config",{"_index":2051,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["odataentitysetresource",{"_index":3418,"title":{},"body":{"index.html":{}}}],["odataentitysetservice",{"_index":3121,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odataentitytypekey",{"_index":2089,"title":{"classes/ODataEntityTypeKey.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataentitytypekey(key",{"_index":2195,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataenumtype",{"_index":2303,"title":{"classes/ODataEnumType.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odataenumtype(config",{"_index":3063,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataenumtypefieldparser",{"_index":2317,"title":{"classes/ODataEnumTypeFieldParser.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypefieldparser(name",{"_index":2343,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypeparser",{"_index":1924,"title":{"classes/ODataEnumTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatafunctionoptions",{"_index":2072,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odatafunctionresource",{"_index":2071,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatafunctions",{"_index":604,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["odatahelper",{"_index":1439,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["odatahelper[options?.version",{"_index":2135,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[parseroptions?.version",{"_index":2256,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[this.version",{"_index":1491,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatainmemorycache",{"_index":2383,"title":{"classes/ODataInMemoryCache.html":{}},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatainstoragecache",{"_index":2407,"title":{"classes/ODataInStorageCache.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatametadata",{"_index":1097,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_data_services",{"_index":1207,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_reference",{"_index":1198,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_schema",{"_index":1210,"title":{},"body":{"classes/Field.html":{}}}],["odatametadatatype",{"_index":32,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odatamodel",{"_index":2080,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatamodelentry",{"_index":3563,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodeleventtype",{"_index":3324,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodelfieldoptions",{"_index":3564,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelstate",{"_index":3326,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodule",{"_index":2431,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{},"modules.html":{}}}],["odatamodule.forroot",{"_index":3367,"title":{},"body":{"index.html":{}}}],["odatanavigationpropertyresource",{"_index":2075,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odataoperators",{"_index":601,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["odataoptions",{"_index":1541,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataparameterparser",{"_index":1911,"title":{"classes/ODataParameterParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparameterparser(name",{"_index":1954,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odatapathsegments",{"_index":1536,"title":{"classes/ODataPathSegments.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odatapathsegments(segments",{"_index":2570,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odatapathsegmentshandler",{"_index":2585,"title":{"classes/ODataPathSegmentsHandler.html":{}},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odataproperty",{"_index":2894,"title":{},"body":{"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odatapropertyannotations",{"_index":1346,"title":{"classes/ODataPropertyAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odatapropertyoptions",{"_index":3565,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataqueryarguments",{"_index":2643,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryargumentsoptions",{"_index":2076,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryoptionhandler",{"_index":2649,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionhandler(this.values",{"_index":2681,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions",{"_index":2620,"title":{"classes/ODataQueryOptions.html":{}},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(objects.clone(this.values",{"_index":2679,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odatareferential",{"_index":2103,"title":{"classes/ODataReferential.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatareferential(referential",{"_index":2111,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatarequest",{"_index":1499,"title":{"classes/ODataRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresource",{"_index":1537,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["odataresponse",{"_index":1539,"title":{"classes/ODataResponse.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponse.fromjson(req",{"_index":2429,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponseoptions",{"_index":2881,"title":{"classes/ODataResponseOptions.html":{}},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this",{"_index":3008,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this.api.options.parseroptions",{"_index":2929,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataschema",{"_index":1835,"title":{"classes/ODataSchema.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement",{"_index":1829,"title":{"classes/ODataSchemaElement.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement:29",{"_index":1870,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:38",{"_index":1881,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:47",{"_index":1868,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:58",{"_index":1862,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:68",{"_index":1865,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:7",{"_index":1841,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:8",{"_index":1842,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odatasegment",{"_index":2497,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["odataservicefactory",{"_index":2436,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odatasingletonresource",{"_index":3135,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odatasingletonservice",{"_index":3125,"title":{"classes/ODataSingletonService.html":{}},"body":{"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["odatastructuredtype",{"_index":3040,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtype(config",{"_index":3066,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtypefieldparser",{"_index":324,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["odatastructuredtypefieldparser(name",{"_index":2201,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser",{"_index":1925,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser).field",{"_index":1945,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatasyntax",{"_index":607,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["odataversion",{"_index":33,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataversionhelper",{"_index":1321,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odatawithout",{"_index":3364,"title":{},"body":{"index.html":{}}}],["of([this.passedconfigs",{"_index":1981,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["of(cached",{"_index":1815,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["of(this.passedconfigs",{"_index":1980,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["offset",{"_index":112,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ok",{"_index":1703,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["omit",{"_index":1459,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["omitnullvalues",{"_index":1463,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["ondelete",{"_index":891,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["one",{"_index":2470,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["onerror",{"_index":1495,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onerror(response",{"_index":1503,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload",{"_index":1496,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload(response",{"_index":1506,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["op",{"_index":527,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["open",{"_index":292,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["open.org/odata/odata",{"_index":1442,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["open.org/odata/odata/v4.0/errata02/os/complete/part1",{"_index":1445,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["opentype",{"_index":796,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["operator",{"_index":386,"title":{"classes/Operator.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('add",{"_index":560,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('and",{"_index":549,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('div",{"_index":566,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('eq",{"_index":537,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('ge",{"_index":543,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('gt",{"_index":541,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('has",{"_index":555,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('in",{"_index":557,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('le",{"_index":547,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('lt",{"_index":545,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('mod",{"_index":568,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('mul",{"_index":564,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('ne",{"_index":539,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('not",{"_index":553,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('or",{"_index":551,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('sub",{"_index":562,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator.fromjson(value",{"_index":387,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operators",{"_index":603,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["option",{"_index":719,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["option(key",{"_index":2636,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["option(name",{"_index":721,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["options",{"_index":229,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["options.body",{"_index":2847,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.bodyqueryoptions",{"_index":2853,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.context",{"_index":2846,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.custom",{"_index":2293,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.custom[f.name",{"_index":2294,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.etag",{"_index":2843,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.expand",{"_index":2287,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.fetchpolicy",{"_index":2851,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.headers",{"_index":1629,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.helper",{"_index":2967,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.annotations(this.payload",{"_index":2960,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes",{"_index":2974,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(data",{"_index":2970,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(payload",{"_index":2977,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.observe",{"_index":2848,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.params",{"_index":1633,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.parseroptions",{"_index":2852,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.reportprogress",{"_index":2849,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.required",{"_index":2296,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.required[f.name",{"_index":2297,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.responsetype",{"_index":2850,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.select",{"_index":2288,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.select).indexof(f.name",{"_index":2289,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.withcount",{"_index":2840,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.withcredentials",{"_index":1634,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options?.nonparenthesisforemptyparameterfunction",{"_index":2535,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["opts",{"_index":246,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts(node",{"_index":1053,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["or(exp",{"_index":3210,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["or(left",{"_index":550,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["order",{"_index":3172,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderby",{"_index":70,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["orderby(opts",{"_index":1062,"title":{},"body":{"classes/ExpandField.html":{},"classes/OrderByExpression.html":{}}}],["orderbyexpression",{"_index":335,"title":{"classes/OrderByExpression.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["orderbyexpression.fromjson(value",{"_index":382,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["orderbyexpression.orderby(opts",{"_index":1042,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["orderbyexpressionbuilder",{"_index":1021,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["orderbyexpressionbuilder,current",{"_index":1063,"title":{},"body":{"classes/ExpandField.html":{},"classes/OrderByExpression.html":{}}}],["orderbyfield",{"_index":3171,"title":{"classes/OrderByField.html":{}},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(field",{"_index":3178,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(this.field.clone",{"_index":3176,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyobject",{"_index":3568,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["orderbytype",{"_index":3569,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1617,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["os",{"_index":1449,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["other.annotations",{"_index":1349,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["other.context",{"_index":1352,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["otherwise",{"_index":3519,"title":{},"body":{"license.html":{}}}],["out",{"_index":3521,"title":{},"body":{"license.html":{}}}],["output",{"_index":1878,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["override",{"_index":664,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["overview",{"_index":3525,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":296,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["p.configure",{"_index":1966,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.encode(params[p.name",{"_index":1963,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.istypeof(this.type",{"_index":590,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["p.name",{"_index":1959,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.serialize(params[p.name",{"_index":1962,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.startswith(application_json",{"_index":2935,"title":{},"body":{"classes/ODataResponse.html":{}}}],["pack",{"_index":2306,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["pack(value",{"_index":2323,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["package",{"_index":3303,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":202,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parameter",{"_index":234,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["parameter.collection",{"_index":1930,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.nullable",{"_index":1928,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.type",{"_index":1926,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameters",{"_index":301,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parameters(value",{"_index":2605,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["parameters.reduce",{"_index":1961,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["params",{"_index":19,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["params[p.name",{"_index":1960,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parent",{"_index":2185,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parent.children.push(this",{"_index":2231,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parentelement",{"_index":1235,"title":{},"body":{"classes/Field.html":{}}}],["parentelement.children",{"_index":1238,"title":{},"body":{"classes/Field.html":{}}}],["parenthesis",{"_index":1420,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataPathSegments.html":{}}}],["parse",{"_index":1224,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parsejsonresponse",{"_index":1698,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parselegacyresponse",{"_index":1673,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parser",{"_index":224,"title":{"interfaces/Parser.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parser.deserialize(value",{"_index":2139,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser.encode(v",{"_index":421,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parser.isstructuredtype",{"_index":587,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parser.parsefromstring(xml",{"_index":1187,"title":{},"body":{"classes/Field.html":{}}}],["parser.serialize(value",{"_index":2141,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser.structured",{"_index":588,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parser?.findchildparser((p",{"_index":589,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parserfortype",{"_index":1899,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["parserfortype(this.base",{"_index":2230,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype(this.return.type",{"_index":1964,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parserfortype(this.type",{"_index":1936,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["parseroptions",{"_index":216,"title":{"interfaces/ParserOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parseroptions?.stringasenum",{"_index":2354,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["parsers",{"_index":259,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["part1",{"_index":1450,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["partial",{"_index":1328,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["particular",{"_index":3506,"title":{},"body":{"license.html":{}}}],["partner",{"_index":892,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["passed",{"_index":2472,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig",{"_index":2441,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig?.loader",{"_index":2474,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfigs",{"_index":1978,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["passedinitialconfig",{"_index":2439,"title":{"interfaces/PassedInitialConfig.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["patch",{"_index":1555,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["patch'].indexof(this._method",{"_index":2806,"title":{},"body":{"classes/ODataRequest.html":{}}}],["patch(attrs",{"_index":3136,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["path",{"_index":29,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["path(value",{"_index":2598,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["path.endswith",{"_index":2534,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.length",{"_index":2537,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.slice(1",{"_index":2532,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.startswith(path_separator",{"_index":2531,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.substring(0",{"_index":2536,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path_separator",{"_index":2521,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparams",{"_index":2495,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["pathandparams(undefined",{"_index":2512,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["paths",{"_index":2547,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment",{"_index":52,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["pathsegment.entityset",{"_index":1779,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["pathsegment.function",{"_index":2527,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment.navigationproperty",{"_index":2574,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment.property",{"_index":2575,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder",{"_index":2525,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathwithparams",{"_index":2705,"title":{},"body":{"classes/ODataRequest.html":{}}}],["pattern",{"_index":471,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["payload",{"_index":245,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["people",{"_index":3421,"title":{},"body":{"index.html":{}}}],["people.fetch",{"_index":3434,"title":{},"body":{"index.html":{}}}],["peopleservice",{"_index":3420,"title":{},"body":{"index.html":{}}}],["peopleservice.entities",{"_index":3423,"title":{},"body":{"index.html":{}}}],["permission",{"_index":3464,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":266,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["permit",{"_index":3486,"title":{},"body":{"license.html":{}}}],["person",{"_index":3469,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3487,"title":{},"body":{"license.html":{}}}],["pick",{"_index":2253,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picked",{"_index":2252,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picks",{"_index":2249,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["pipe",{"_index":1635,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["please",{"_index":3349,"title":{},"body":{"index.html":{}}}],["point",{"_index":140,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["points",{"_index":174,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["policy",{"_index":1413,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["polygon",{"_index":170,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["polygons",{"_index":180,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["portions",{"_index":3496,"title":{},"body":{"license.html":{}}}],["post",{"_index":1554,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["post'].indexof(this._method",{"_index":2819,"title":{},"body":{"classes/ODataRequest.html":{}}}],["precision",{"_index":132,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["predicate",{"_index":1288,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["predicate(this",{"_index":2214,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["prefer",{"_index":20,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["prefer.length",{"_index":2821,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push",{"_index":2811,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.continue",{"_index":2820,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxpagesize",{"_index":2809,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`omit",{"_index":2815,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`return=${this.api.options.prefer?.return",{"_index":2807,"title":{},"body":{"classes/ODataRequest.html":{}}}],["preference",{"_index":3001,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference.split(',').foreach((prefer",{"_index":3021,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference_applied",{"_index":2911,"title":{},"body":{"classes/ODataResponse.html":{}}}],["preferenceapplied",{"_index":2942,"title":{},"body":{"classes/ODataResponse.html":{}}}],["prefix",{"_index":343,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["pretty",{"_index":1877,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["private",{"_index":49,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":3350,"title":{},"body":{"index.html":{}}}],["projects/.../builder.ts",{"_index":3328,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../compute.ts",{"_index":3542,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../count.ts",{"_index":3543,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../durations.ts",{"_index":3544,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../expand.ts",{"_index":3546,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../filter.ts",{"_index":3551,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../helper.ts",{"_index":3560,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../metadata.ts",{"_index":3323,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../options.ts",{"_index":3325,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../orderby.ts",{"_index":3567,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../resource.ts",{"_index":3545,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../search.ts",{"_index":3570,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../segments.ts",{"_index":3566,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../select.ts",{"_index":3571,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../structured",{"_index":3554,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../syntax.ts",{"_index":3559,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":3322,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"properties.html":{}}}],["property",{"_index":57,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["property(name",{"_index":1376,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["property.enum",{"_index":2363,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["property.ts",{"_index":888,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["property.ts:1",{"_index":979,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:14",{"_index":923,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:15",{"_index":924,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:16",{"_index":925,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:17",{"_index":927,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:18",{"_index":926,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:19",{"_index":922,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:25",{"_index":896,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:3",{"_index":980,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:30",{"_index":899,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:31",{"_index":897,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:32",{"_index":900,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:33",{"_index":898,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:39",{"_index":937,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:4",{"_index":982,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:41",{"_index":938,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:42",{"_index":939,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:46",{"_index":911,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:47",{"_index":912,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:5",{"_index":981,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:9",{"_index":921,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["propertyref",{"_index":1122,"title":{},"body":{"classes/Field.html":{}}}],["propertyrefs",{"_index":812,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["props",{"_index":1378,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["protected",{"_index":425,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["protocol",{"_index":1451,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["protocol/odata",{"_index":1446,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["provide",{"_index":2468,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["provided",{"_index":3497,"title":{},"body":{"license.html":{}}}],["provider",{"_index":2448,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["providers",{"_index":2434,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["proxy",{"_index":350,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["public",{"_index":48,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":3480,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":3507,"title":{},"body":{"license.html":{}}}],["put",{"_index":622,"title":{},"body":{"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{}}}],["put(key",{"_index":244,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["put(name",{"_index":1751,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse",{"_index":1717,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse(req",{"_index":1753,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["q.expand",{"_index":3424,"title":{},"body":{"index.html":{}}}],["q.filter",{"_index":3406,"title":{},"body":{"index.html":{}}}],["q.filter().clear",{"_index":3419,"title":{},"body":{"index.html":{}}}],["q.filter().push",{"_index":3413,"title":{},"body":{"index.html":{}}}],["qualifier",{"_index":775,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["queries",{"_index":3387,"title":{},"body":{"index.html":{}}}],["query",{"_index":235,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["query((q",{"_index":3405,"title":{},"body":{"index.html":{}}}],["querycustomtype",{"_index":328,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["querycustomtypes",{"_index":3327,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["querying",{"_index":3346,"title":{},"body":{"index.html":{}}}],["queryoption",{"_index":28,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["queryoption.compute",{"_index":2650,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.count",{"_index":1030,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.expand",{"_index":1026,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.filter",{"_index":699,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.format",{"_index":2653,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.levels",{"_index":1031,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.orderby",{"_index":1027,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.search",{"_index":700,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.select",{"_index":1025,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.skip",{"_index":1028,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.skiptoken",{"_index":2652,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.top",{"_index":1029,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.transform",{"_index":2651,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptions",{"_index":2658,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["r",{"_index":1544,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSingletonService.html":{}}}],["r.ismutate",{"_index":1825,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["r.request",{"_index":1585,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["r2",{"_index":1566,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["range",{"_index":2172,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw",{"_index":2095,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"miscellaneous/enumerations.html":{}}}],["raw(`'${serialized",{"_index":2360,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(json.stringify(this.serialize(value",{"_index":2229,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw(key",{"_index":2541,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["raw(serialized",{"_index":2361,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(v.render",{"_index":2664,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["read",{"_index":1770,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["readlink",{"_index":1363,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["readonly",{"_index":724,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["readonlyarray",{"_index":2756,"title":{},"body":{"classes/ODataRequest.html":{}}}],["reduce",{"_index":1776,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["reduce((acc",{"_index":703,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["reference",{"_index":59,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["reference.ts",{"_index":868,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["reference.ts:14",{"_index":870,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:16",{"_index":872,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:17",{"_index":871,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:21",{"_index":881,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:23",{"_index":884,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:24",{"_index":882,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:25",{"_index":883,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:3",{"_index":932,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:5",{"_index":935,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:6",{"_index":934,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:7",{"_index":933,"title":{},"body":{"classes/CsdlReference.html":{}}}],["referenced",{"_index":291,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referencedproperty",{"_index":289,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["references",{"_index":1183,"title":{},"body":{"classes/Field.html":{}}}],["referential",{"_index":290,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referentialconstraint",{"_index":1125,"title":{},"body":{"classes/Field.html":{}}}],["referentialconstraints",{"_index":893,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["referentials",{"_index":288,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["reg",{"_index":1300,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["reg.test(a.term",{"_index":1303,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["regexp",{"_index":1279,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["regexp(`^${term",{"_index":1301,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["region",{"_index":250,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["related",{"_index":1946,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"index.html":{}}}],["relative",{"_index":1549,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["remove",{"_index":1729,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/enumerations.html":{}}}],["remove(...keys",{"_index":2684,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(keys",{"_index":2639,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["removed",{"_index":3336,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["render",{"_index":340,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(left",{"_index":442,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(n",{"_index":357,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(right",{"_index":533,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(this.field",{"_index":708,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["render(this.group",{"_index":574,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(this.value",{"_index":3220,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["render(undefined",{"_index":653,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{}}}],["render(v",{"_index":443,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(value(syntax",{"_index":404,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(value.render",{"_index":406,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderable",{"_index":339,"title":{"interfaces/Renderable.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory",{"_index":373,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory(c",{"_index":668,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["renderablefactory(json['value",{"_index":579,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory(v",{"_index":437,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory(value",{"_index":2655,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["replace",{"_index":2940,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reportprogress",{"_index":2700,"title":{},"body":{"classes/ODataRequest.html":{}}}],["repository",{"_index":3536,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":210,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["req",{"_index":1599,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["req.api",{"_index":1600,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["req.fetchpolicy",{"_index":1812,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isbatch",{"_index":1822,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isfetch",{"_index":1808,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.ismutate",{"_index":1810,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.observe",{"_index":1604,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.resource",{"_index":1823,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponse.html":{}}}],["req.resource.clonesegments",{"_index":1774,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["request",{"_index":227,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["request('post",{"_index":1630,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.request.method",{"_index":1658,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.tojson",{"_index":1672,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.urlwithparams",{"_index":1696,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request>('post",{"_index":1643,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requester",{"_index":1598,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests",{"_index":1583,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["requests.map((request",{"_index":1671,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests[index].request",{"_index":1687,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["required",{"_index":661,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["res",{"_index":1551,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{}}}],["res$.pipe",{"_index":1817,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res$.pipe(startwith(cached",{"_index":1821,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.body",{"_index":2913,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.context",{"_index":1781,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.headers",{"_index":2914,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.join(newline",{"_index":1561,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.length",{"_index":1667,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.modify(attrs",{"_index":3148,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["res.options.cacheability",{"_index":1819,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.options.maxage",{"_index":2405,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.push",{"_index":1659,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${batchboundary",{"_index":1661,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${changesetboundary",{"_index":1663,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_id",{"_index":1665,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_transfer_encoding",{"_index":1664,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_type",{"_index":1556,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${newline}${json.stringify(this.request.body",{"_index":1560,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${request.tolegacy",{"_index":1666,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(newline",{"_index":1559,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.status",{"_index":2915,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.statustext",{"_index":2916,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.tojson",{"_index":2428,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.update(attrs",{"_index":3147,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["res.url",{"_index":2917,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res['body",{"_index":1568,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res['headers",{"_index":1567,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["reset",{"_index":3332,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resolve",{"_index":366,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve'].includes(key",{"_index":372,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve([this.field",{"_index":1024,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["resolve([this.value",{"_index":580,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve(parser",{"_index":347,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve(this.values",{"_index":440,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve(values",{"_index":408,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolvekey",{"_index":2259,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["resource",{"_index":1538,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["resourceparams",{"_index":2780,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$expand",{"_index":2831,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$select",{"_index":2829,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourcepath",{"_index":2779,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resources",{"_index":1767,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["resources/query",{"_index":2096,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["response",{"_index":1427,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["response.body",{"_index":1681,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.headers.get(content_type",{"_index":1676,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.ok",{"_index":1570,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['body",{"_index":1702,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['status",{"_index":1700,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsejson",{"_index":2418,"title":{"interfaces/ResponseJson.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["responseoptions",{"_index":217,"title":{"interfaces/ResponseOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["responses",{"_index":1540,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responses.map((response",{"_index":1699,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsetype",{"_index":1632,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["restore",{"_index":1621,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["restorerequester",{"_index":1612,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["restriction",{"_index":3476,"title":{},"body":{"license.html":{}}}],["result",{"_index":1614,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["result.params",{"_index":2549,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["result.paths.join(path_separator",{"_index":2548,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["results",{"_index":305,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":209,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["returns",{"_index":319,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["returntype",{"_index":745,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["right",{"_index":338,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["rights",{"_index":3478,"title":{},"body":{"license.html":{}}}],["root",{"_index":3380,"title":{},"body":{"index.html":{}}}],["round",{"_index":161,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["round(left",{"_index":322,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["rxjs",{"_index":36,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1764,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["s",{"_index":1777,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataSingletonService.html":{}}}],["s.key",{"_index":2559,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.name",{"_index":1778,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.parameters",{"_index":2567,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.path",{"_index":1780,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.type",{"_index":2552,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["same",{"_index":1603,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sbyte",{"_index":102,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["scale",{"_index":133,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["schema",{"_index":325,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["schema.alias",{"_index":1895,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.contentencoding",{"_index":2164,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.default",{"_index":2176,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.format",{"_index":2157,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.maxlength",{"_index":2166,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.namespace",{"_index":1894,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.org",{"_index":2146,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.org/draft",{"_index":2282,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.pattern",{"_index":2158,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.properties",{"_index":2290,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.required",{"_index":2295,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.ts",{"_index":949,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:13",{"_index":959,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:15",{"_index":968,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:16",{"_index":961,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:17",{"_index":966,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:18",{"_index":963,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:19",{"_index":965,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:20",{"_index":967,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:21",{"_index":960,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:22",{"_index":964,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:23",{"_index":970,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:24",{"_index":969,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:25",{"_index":962,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.type",{"_index":2156,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schemaconfig",{"_index":261,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":260,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["scope",{"_index":1718,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["scope(req",{"_index":1755,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["scope.length",{"_index":1798,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["scope.push(name",{"_index":1797,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["search",{"_index":68,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["search(opts",{"_index":1067,"title":{},"body":{"classes/ExpandField.html":{},"classes/SearchExpression.html":{}}}],["searchconnector",{"_index":3199,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpression",{"_index":336,"title":{"classes/SearchExpression.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["searchexpression.fromjson(value",{"_index":383,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["searchexpression.search(opts",{"_index":1040,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["searchexpressionbuilder",{"_index":1022,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpressionbuilder,current",{"_index":3213,"title":{},"body":{"classes/SearchExpression.html":{}}}],["searchterm",{"_index":3219,"title":{"classes/SearchTerm.html":{}},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(this.value",{"_index":3221,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(value",{"_index":3241,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["second(left",{"_index":498,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["seconds",{"_index":120,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["segment",{"_index":2503,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segment.clearkey",{"_index":2556,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key",{"_index":2539,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key(key",{"_index":2557,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.name",{"_index":2526,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.parameters",{"_index":2528,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.path",{"_index":2530,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler",{"_index":2523,"title":{"classes/SegmentHandler.html":{}},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segmenthandler(s",{"_index":2577,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler(segment",{"_index":2582,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments",{"_index":1590,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segments(undefined",{"_index":2514,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.add(pathsegment.batch",{"_index":1591,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["segments.filter",{"_index":2573,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.foreach((segment",{"_index":2554,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.length",{"_index":2578,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.map((s",{"_index":2558,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.segments",{"_index":1775,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["segments[0",{"_index":2579,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments[segments.length",{"_index":2580,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["select",{"_index":64,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["select(opts",{"_index":1069,"title":{},"body":{"classes/ExpandField.html":{},"classes/SelectExpression.html":{}}}],["selectexpression",{"_index":337,"title":{"classes/SelectExpression.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["selectexpression.fromjson(value",{"_index":378,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["selectexpression.select(opts",{"_index":1035,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["selectexpressionbuilder",{"_index":1023,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["selectexpressionbuilder,current",{"_index":1070,"title":{},"body":{"classes/ExpandField.html":{},"classes/SelectExpression.html":{}}}],["selector",{"_index":3378,"title":{},"body":{"index.html":{}}}],["selecttype",{"_index":3572,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sell",{"_index":3484,"title":{},"body":{"license.html":{}}}],["send",{"_index":1407,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["send(options",{"_index":1623,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendjson(options",{"_index":1627,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendlegacy",{"_index":1642,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sent",{"_index":1416,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["sequence",{"_index":90,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialization",{"_index":1859,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["serialize",{"_index":231,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialize(params",{"_index":1921,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["serialize(value",{"_index":1857,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["serialized",{"_index":1860,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["server",{"_index":1697,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["service",{"_index":303,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["servicerooturl",{"_index":253,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["services/index",{"_index":2452,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["sessionstorage",{"_index":2419,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["set",{"_index":830,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{}}}],["set.ts",{"_index":831,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:3",{"_index":834,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:5",{"_index":837,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:6",{"_index":835,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:7",{"_index":838,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:8",{"_index":836,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["setcache",{"_index":2980,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setcache(cachecontrol",{"_index":2993,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures",{"_index":2981,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures(features",{"_index":2995,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation",{"_index":2982,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation(location",{"_index":2997,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied",{"_index":2983,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied(preference",{"_index":2999,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setup",{"_index":3366,"title":{},"body":{"index.html":{}}}],["setversion",{"_index":2984,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setversion(version",{"_index":3002,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["shall",{"_index":3493,"title":{},"body":{"license.html":{}}}],["side",{"_index":3529,"title":{},"body":{"properties.html":{}}}],["signed",{"_index":86,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["single",{"_index":150,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleconfigorarray",{"_index":1984,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleconfigorarray.pipe",{"_index":1986,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleton",{"_index":56,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleton(singletonname",{"_index":3122,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singleton.ts",{"_index":973,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:3",{"_index":975,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:5",{"_index":976,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:6",{"_index":978,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:7",{"_index":977,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singletonname",{"_index":3124,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singletons",{"_index":820,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["singletonschema",{"_index":3130,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["skip",{"_index":72,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skip(n",{"_index":1044,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["skiptoken",{"_index":73,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["software",{"_index":3472,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["specified",{"_index":1229,"title":{},"body":{"classes/Field.html":{}}}],["split",{"_index":2933,"title":{},"body":{"classes/ODataResponse.html":{}}}],["split(newline_regexp",{"_index":1682,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["srid",{"_index":761,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["standardaggregatemethods",{"_index":3329,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["started",{"_index":3343,"title":{"index.html":{},"license.html":{}},"body":{}}],["started/advanced",{"_index":1578,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataSingletonService.html":{}}}],["startindex",{"_index":1686,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["startswith",{"_index":3276,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["startswith(left",{"_index":458,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["startwith",{"_index":1762,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["states",{"_index":3410,"title":{},"body":{"index.html":{}}}],["static",{"_index":433,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["status",{"_index":1694,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["statustext",{"_index":1695,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["storage",{"_index":2409,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["store",{"_index":50,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store'].indexof(directive",{"_index":3027,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["storerequester",{"_index":1596,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["stream",{"_index":154,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["streaming",{"_index":205,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["string",{"_index":94,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["string(name",{"_index":2248,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["stringandcollectionfunctions",{"_index":447,"title":{"classes/StringAndCollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["stringasenum",{"_index":21,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["stringfunctions",{"_index":469,"title":{"classes/StringFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["strings",{"_index":177,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["strings.titlecase(this.name",{"_index":2204,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.uniqueid",{"_index":1543,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strip",{"_index":1426,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["stripmetadata",{"_index":22,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structural",{"_index":807,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["structured",{"_index":791,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["structuredtype",{"_index":1947,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["structuredtypeconfig",{"_index":273,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldconfig",{"_index":223,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldoptions",{"_index":221,"title":{"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structuredtypeschema",{"_index":2059,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["strucuturedtype",{"_index":1944,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["styleurls",{"_index":3383,"title":{},"body":{"index.html":{}}}],["sub",{"_index":615,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["sub(left",{"_index":561,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["sub)seconds",{"_index":127,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["subject",{"_index":1494,"title":{},"body":{"classes/ODataBatchRequest.html":{},"license.html":{}}}],["sublicense",{"_index":3482,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":3395,"title":{},"body":{"index.html":{}}}],["subscribe((airports",{"_index":3397,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":3495,"title":{},"body":{"license.html":{}}}],["substring",{"_index":460,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["substring(left",{"_index":3283,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["subtype",{"_index":1863,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["sum",{"_index":3339,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["super",{"_index":662,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["super(annotationlist",{"_index":776,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["super(config",{"_index":1886,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["super(field",{"_index":2106,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["super(init",{"_index":2912,"title":{},"body":{"classes/ODataResponse.html":{}}}],["super(name",{"_index":808,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{}}}],["super.clone",{"_index":1593,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["super.flush",{"_index":2427,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["super.tojson",{"_index":665,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["supertype",{"_index":1866,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["support",{"_index":3440,"title":{},"body":{"index.html":{}}}],["supported",{"_index":1233,"title":{},"body":{"classes/Field.html":{}}}],["switch",{"_index":375,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["switchmap",{"_index":3402,"title":{},"body":{"index.html":{}}}],["symbol",{"_index":353,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["symbol.tostringtag",{"_index":427,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["sync",{"_index":2473,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"miscellaneous/enumerations.html":{}}}],["syntax",{"_index":609,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["system",{"_index":164,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["t",{"_index":230,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["table",{"_index":3356,"title":{},"body":{"index.html":{}}}],["tag",{"_index":1096,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["tag_action",{"_index":1130,"title":{},"body":{"classes/Field.html":{}}}],["tag_action_import",{"_index":1136,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotation",{"_index":1111,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotations",{"_index":1110,"title":{},"body":{"classes/Field.html":{}}}],["tag_complex_type",{"_index":1116,"title":{},"body":{"classes/Field.html":{}}}],["tag_data_services",{"_index":1101,"title":{},"body":{"classes/Field.html":{}}}],["tag_edmx",{"_index":1099,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_container",{"_index":1131,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_set",{"_index":1132,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_type",{"_index":1118,"title":{},"body":{"classes/Field.html":{}}}],["tag_enum_type",{"_index":1113,"title":{},"body":{"classes/Field.html":{}}}],["tag_function",{"_index":1127,"title":{},"body":{"classes/Field.html":{}}}],["tag_function_import",{"_index":1134,"title":{},"body":{"classes/Field.html":{}}}],["tag_include",{"_index":1105,"title":{},"body":{"classes/Field.html":{}}}],["tag_include_annotations",{"_index":1107,"title":{},"body":{"classes/Field.html":{}}}],["tag_key",{"_index":1120,"title":{},"body":{"classes/Field.html":{}}}],["tag_member",{"_index":1115,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property",{"_index":1123,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property_binding",{"_index":1138,"title":{},"body":{"classes/Field.html":{}}}],["tag_on_delete",{"_index":1126,"title":{},"body":{"classes/Field.html":{}}}],["tag_parameter",{"_index":1129,"title":{},"body":{"classes/Field.html":{}}}],["tag_property",{"_index":1119,"title":{},"body":{"classes/Field.html":{}}}],["tag_property_ref",{"_index":1121,"title":{},"body":{"classes/Field.html":{}}}],["tag_reference",{"_index":1103,"title":{},"body":{"classes/Field.html":{}}}],["tag_referential_constraint",{"_index":1124,"title":{},"body":{"classes/Field.html":{}}}],["tag_return_type",{"_index":1128,"title":{},"body":{"classes/Field.html":{}}}],["tag_schema",{"_index":1112,"title":{},"body":{"classes/Field.html":{}}}],["tag_singleton",{"_index":1133,"title":{},"body":{"classes/Field.html":{}}}],["tag_term",{"_index":1109,"title":{},"body":{"classes/Field.html":{}}}],["tag_type_definition",{"_index":1139,"title":{},"body":{"classes/Field.html":{}}}],["tags",{"_index":1098,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["tags(res",{"_index":1759,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["tags.length",{"_index":1803,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push",{"_index":1783,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push(context.type",{"_index":1787,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.some((t",{"_index":1804,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap",{"_index":1763,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap((res",{"_index":1818,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["target",{"_index":354,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["targetnamespace",{"_index":879,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["templateurl",{"_index":3381,"title":{},"body":{"index.html":{}}}],["term",{"_index":263,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["term(value",{"_index":3215,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["termnamespace",{"_index":878,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["terms",{"_index":956,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["text",{"_index":1645,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["text/plain",{"_index":2804,"title":{},"body":{"classes/ODataRequest.html":{}}}],["text/xml",{"_index":1188,"title":{},"body":{"classes/Field.html":{}}}],["text_plain",{"_index":2755,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._add(countfield",{"_index":729,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["this._add(exp",{"_index":3236,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(field",{"_index":3271,"title":{},"body":{"classes/SelectExpression.html":{}}}],["this._add(name",{"_index":680,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._add(new",{"_index":3177,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(node",{"_index":1054,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this._add(notexp",{"_index":3240,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._annotations",{"_index":2958,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_etag",{"_index":2963,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_id",{"_index":2965,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._body",{"_index":2769,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._children",{"_index":726,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.length",{"_index":1085,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.map((c",{"_index":674,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.map((n",{"_index":670,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._children.push",{"_index":3233,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.push(node",{"_index":677,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["this._connector",{"_index":3222,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._context",{"_index":2954,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._fields",{"_index":2341,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this._fields.filter",{"_index":2236,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["this._fields.foreach((f",{"_index":2232,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._fields.map((f",{"_index":2364,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this._fields.push(field",{"_index":2202,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._functions",{"_index":1383,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._headers",{"_index":2823,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._keys",{"_index":2193,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._method",{"_index":2757,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._negated",{"_index":3223,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._options",{"_index":2928,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setcache(cachecontrol",{"_index":2950,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setfeatures(features",{"_index":2936,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setlocation(location",{"_index":2947,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setpreferenceapplied(preferenceapplied",{"_index":2944,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setversion(version",{"_index":2941,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._params",{"_index":2836,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.has(`$${name",{"_index":2870,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.keys().length",{"_index":2866,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path",{"_index":2782,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}/${$query",{"_index":2856,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}?${this._params",{"_index":2867,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._payload",{"_index":2951,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._properties",{"_index":1374,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._requests",{"_index":1595,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.map((r",{"_index":1584,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.push(new",{"_index":1609,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests[this._requests.length",{"_index":1611,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses",{"_index":1587,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses).foreach((tuple",{"_index":1639,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responsetype",{"_index":2767,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._segments",{"_index":2542,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.map((s",{"_index":2564,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.push(segment",{"_index":2581,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.reduce",{"_index":2543,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments].reverse().find(predicate",{"_index":2572,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.accept",{"_index":1479,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.add(ctx",{"_index":1648,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.addfield(name",{"_index":2199,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.alias",{"_index":591,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.annotatedvalue(computed",{"_index":2130,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(long_description",{"_index":2285,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(term",{"_index":2203,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["this.annotations",{"_index":1295,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.annotations.find(predicate",{"_index":1299,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.api",{"_index":1601,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["this.api.findentitysetbyname(this.name",{"_index":3145,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.api.findentitysetfortype(this.parser.return.type)?.name",{"_index":1898,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.api.findstructuredtypefortype(bindingtype",{"_index":3081,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(callablebindingtype",{"_index":3087,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(this.apinameorentitytype",{"_index":2084,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["this.api.options.accept?.exponentialdecimals",{"_index":2799,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.ieee754compatible",{"_index":2794,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.metadata",{"_index":2791,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.streaming",{"_index":2797,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.bodyqueryoptions",{"_index":2777,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifmatch",{"_index":2785,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifnonematch",{"_index":2788,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.fetchpolicy",{"_index":2776,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.headers",{"_index":2825,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.jsonbatchformat",{"_index":1624,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.options.params",{"_index":2834,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.continueonerror",{"_index":2818,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.includeannotations",{"_index":2810,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.maxpagesize",{"_index":2808,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.omitnullvalues",{"_index":2814,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.return",{"_index":2805,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.stripmetadata",{"_index":2971,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.api.options.withcredentials",{"_index":2774,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.requester",{"_index":1597,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.servicerooturl}${this.path",{"_index":2864,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.servicerooturl}${this.pathwithparams",{"_index":2865,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.apinameorentitytype",{"_index":2083,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["this.base",{"_index":2188,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.body",{"_index":2923,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.body)['d",{"_index":2953,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.bodyqueryoptions",{"_index":1477,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.length",{"_index":2868,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.map((name",{"_index":2858,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.some((name",{"_index":2869,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bound",{"_index":1889,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.buildentry(payload",{"_index":1790,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey([...(scope",{"_index":1791,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey(scope",{"_index":1799,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.cacheability",{"_index":3028,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.callables",{"_index":3067,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.find((c",{"_index":3082,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.foreach((callable",{"_index":3094,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.checkversion(document",{"_index":1189,"title":{},"body":{"classes/Field.html":{}}}],["this.children",{"_index":2216,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.children.some((c",{"_index":2210,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.client",{"_index":3126,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["this.client.singleton(this.name",{"_index":3142,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.collection",{"_index":1929,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.complete",{"_index":1572,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.composable",{"_index":1891,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.configs",{"_index":1985,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["this.containers",{"_index":3070,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.containers.reduce",{"_index":3075,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.context",{"_index":1351,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.context?.entityset",{"_index":1342,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.context?.type",{"_index":1344,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.default",{"_index":2112,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.deleterefby",{"_index":1485,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.deserialize(this.default",{"_index":2144,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.entities",{"_index":3064,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.find((e",{"_index":3079,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.foreach((config",{"_index":3092,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entity",{"_index":3146,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.entitysetpath",{"_index":1887,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.entitysets",{"_index":2049,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["this.entitysets.find((e",{"_index":3089,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entitytype",{"_index":2085,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.entries",{"_index":1773,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.entries.delete(k",{"_index":1806,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.foreach((entry",{"_index":1800,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.get(key",{"_index":1794,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.set(key",{"_index":1792,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.enum().validate(value",{"_index":2129,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.enums",{"_index":3061,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.find((e",{"_index":3077,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.foreach((enu",{"_index":3090,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.error(response",{"_index":1576,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.escape",{"_index":446,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.factory.entityset",{"_index":3389,"title":{},"body":{"index.html":{}}}],["this.fetchpolicy",{"_index":1475,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.field",{"_index":1033,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.field.clone",{"_index":1034,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.field.tojson",{"_index":698,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.fields",{"_index":2221,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields().find",{"_index":2346,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.fields().map(mapper",{"_index":2349,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.find((s",{"_index":2583,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.findannotation((a",{"_index":1302,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.findchildparser(predicate",{"_index":2220,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.flags",{"_index":2339,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.forget",{"_index":1793,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.functions[name",{"_index":1386,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.get(req.cachekey",{"_index":2406,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.getfieldvaluebyattribute",{"_index":1191,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects",{"_index":1196,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects(dataservices",{"_index":1209,"title":{},"body":{"classes/Field.html":{}}}],["this.getresponse(req",{"_index":1814,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.group",{"_index":1545,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.group.tojson",{"_index":572,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.handlefetch(req",{"_index":1809,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.handlemutate(req",{"_index":1811,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.headers",{"_index":1469,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponse.html":{}}}],["this.headers.get(cache_control",{"_index":2949,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(content_type",{"_index":2930,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(headerkey",{"_index":2939,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(key",{"_index":2962,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(location_header",{"_index":2946,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(preference_applied",{"_index":2943,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.getall(name",{"_index":2924,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.helper",{"_index":1347,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.annotations(data",{"_index":1341,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.attributes(data",{"_index":1340,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.count(this.annotations",{"_index":1388,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.deltalink(this.annotations",{"_index":1392,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.editlink(this.annotations",{"_index":1366,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entities(data",{"_index":1387,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entity(data",{"_index":1356,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.etag(this.annotations",{"_index":1358,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.functions(this.annotations",{"_index":1384,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.id(this.annotations",{"_index":1357,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediacontenttype(this.annotations",{"_index":1372,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaeditlink(this.annotations",{"_index":1370,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaetag(this.annotations",{"_index":1360,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediareadlink(this.annotations",{"_index":1368,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.metadataetag(this.annotations",{"_index":1362,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.nextlink(this.annotations",{"_index":1390,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.properties(this.annotations",{"_index":1375,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.property(data",{"_index":1354,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.readlink(this.annotations",{"_index":1364,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.type(this.annotations",{"_index":1343,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.id",{"_index":1542,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.ieee754compatible",{"_index":3016,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.isentitytype",{"_index":2242,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.isenumtype",{"_index":1940,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.isexpired(entry",{"_index":1795,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.isquerybody",{"_index":2855,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.isstructuredtype",{"_index":1943,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.istypeof(schema.type",{"_index":3111,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.istypeof(type",{"_index":2206,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.jsonbatchformat",{"_index":1489,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.keys",{"_index":2261,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.location",{"_index":3020,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxage",{"_index":3026,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxlength",{"_index":2114,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.members",{"_index":2328,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.metadata",{"_index":3013,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.name",{"_index":429,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.names",{"_index":663,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.names.push(name",{"_index":676,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.namespace",{"_index":1949,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["this.namespace}.${this.name",{"_index":1955,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.namespace}.${this.name}'${name",{"_index":2358,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.namespace}.${this.name}'${names.join",{"_index":2355,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.name}(${left",{"_index":582,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.name}(${params.join",{"_index":444,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.name}('${this.type",{"_index":583,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.navigation",{"_index":2118,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.next(response",{"_index":1571,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.nextlink",{"_index":1393,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.nonparenthesisforemptyparameterfunction",{"_index":1487,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.normalize",{"_index":432,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.nullable",{"_index":1927,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.observe",{"_index":2764,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.odata",{"_index":3431,"title":{},"body":{"index.html":{}}}],["this.odata.fromjson(json",{"_index":3417,"title":{},"body":{"index.html":{}}}],["this.op",{"_index":528,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.open",{"_index":2190,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.option",{"_index":713,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.count",{"_index":1051,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.levels",{"_index":1050,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.skip",{"_index":1045,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.top",{"_index":1047,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.options",{"_index":2959,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.helper.context",{"_index":2955,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.version",{"_index":2952,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.op}(${left",{"_index":534,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.order",{"_index":3175,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.parameters",{"_index":1952,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.find((p",{"_index":1967,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.foreach((p",{"_index":1965,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.params",{"_index":1467,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.params.keys().length",{"_index":2861,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.parent",{"_index":2207,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.fields",{"_index":2235,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.isentitytype",{"_index":2240,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.issubtypeof(type",{"_index":2208,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.keys",{"_index":2238,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parse(parser",{"_index":2140,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser",{"_index":1893,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.binding",{"_index":1905,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.configure",{"_index":1901,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.deserialize(value",{"_index":1902,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.encode(v",{"_index":1935,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.encode(value",{"_index":1904,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.field(enu",{"_index":2331,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.fields(value",{"_index":2330,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.mapfields(mapper",{"_index":2332,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.pack(value",{"_index":2334,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.return",{"_index":1897,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.serialize(v",{"_index":1934,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.serialize(value",{"_index":1903,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.tojsonschema(options",{"_index":2148,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser.unpack(value",{"_index":2333,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parseroptions",{"_index":1931,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.path",{"_index":2863,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.path.endswith($batch",{"_index":2871,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.pathandparams",{"_index":2560,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["this.path}?${this.params",{"_index":2862,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.payload",{"_index":2957,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.precision",{"_index":2120,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.prefer",{"_index":1483,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.properties.get(name",{"_index":1379,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.property",{"_index":2104,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.put(req.cachekey",{"_index":2404,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.putresponse(req",{"_index":1820,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.queries",{"_index":3386,"title":{},"body":{"index.html":{}}}],["this.referencedproperty",{"_index":2105,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.references",{"_index":1195,"title":{},"body":{"classes/Field.html":{}}}],["this.referentials",{"_index":2109,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.referentials.length",{"_index":2184,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.reportprogress",{"_index":2762,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.request.body",{"_index":1569,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.headers",{"_index":1557,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.method",{"_index":1552,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.pathwithparams",{"_index":1553,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.resource",{"_index":2759,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entities",{"_index":2973,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entity",{"_index":2972,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(property",{"_index":2975,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(value",{"_index":2978,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.pathandparams",{"_index":2781,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.resource.serialize(this._body",{"_index":2771,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.restore",{"_index":2421,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.restorerequester(handler",{"_index":1622,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.return",{"_index":1950,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.scale",{"_index":2122,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.schema",{"_index":3106,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.alias",{"_index":3109,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.api",{"_index":3107,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.namespace}.${this.name",{"_index":1896,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataSchemaElement.html":{}}}],["this.schemas",{"_index":1208,"title":{},"body":{"classes/Field.html":{}}}],["this.scope(r",{"_index":1826,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.scope(req",{"_index":2402,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.segment.key",{"_index":2601,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.name",{"_index":2595,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.parameters",{"_index":2606,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.path",{"_index":2599,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.type",{"_index":2597,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments",{"_index":2550,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.segments.get(pathsegment.action",{"_index":2612,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.entityset",{"_index":2610,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.function",{"_index":2613,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.navigationproperty",{"_index":2616,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.property",{"_index":2615,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.singleton",{"_index":2611,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.keys(values",{"_index":2614,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.send(options).pipe(map((response",{"_index":1649,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendjson(options",{"_index":1625,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendlegacy(options",{"_index":1626,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.serialize(value",{"_index":2359,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.service",{"_index":2087,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.status",{"_index":2925,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.statustext",{"_index":2926,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.storage",{"_index":2420,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storage.setitem",{"_index":2424,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.store",{"_index":2423,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storerequester",{"_index":1619,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.streaming",{"_index":3015,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.stringasenum",{"_index":1465,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.stripmetadata",{"_index":1473,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.structured().validate(value",{"_index":2128,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtype",{"_index":2107,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tags(res",{"_index":2403,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.term",{"_index":1292,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.timeout",{"_index":1772,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.titleize(description",{"_index":2284,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tojson(parser",{"_index":2143,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tolegacy",{"_index":1547,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.type",{"_index":576,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.type.startswith('edm",{"_index":1938,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.url",{"_index":2927,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.validate(v",{"_index":2127,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.value",{"_index":577,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.values",{"_index":2657,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.clear",{"_index":2691,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.delete(key",{"_index":2689,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(key",{"_index":2660,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.compute",{"_index":2670,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.count",{"_index":2678,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.expand",{"_index":2668,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.filter",{"_index":2672,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.levels",{"_index":2677,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.orderby",{"_index":2673,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.search",{"_index":2671,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.select",{"_index":2667,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.skip",{"_index":2675,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.skiptoken",{"_index":2676,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.top",{"_index":2674,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.transform",{"_index":2669,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.has(key",{"_index":2683,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.keys",{"_index":2685,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.keys()].reduce((acc",{"_index":2665,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.map((v",{"_index":430,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.values.set(key",{"_index":2680,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values[key",{"_index":704,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[name",{"_index":722,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.expand",{"_index":1039,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.filter",{"_index":715,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.orderby",{"_index":1043,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.search",{"_index":1041,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.select",{"_index":1036,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.version",{"_index":1190,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.withcredentials",{"_index":1471,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["through",{"_index":2466,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["throw",{"_index":1222,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["throwerror",{"_index":1761,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["time",{"_index":110,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["time(left",{"_index":500,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["timeofday",{"_index":117,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["timeout",{"_index":1707,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["title",{"_index":1874,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["titleize",{"_index":1834,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleize(term",{"_index":1869,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleized",{"_index":1879,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["todo",{"_index":1548,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["tojson",{"_index":345,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["tojsonschema",{"_index":2362,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["tojsonschema(options",{"_index":2147,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["tolegacy",{"_index":1497,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tolower",{"_index":3285,"title":{},"body":{"classes/StringFunctions.html":{}}}],["tolower(left",{"_index":473,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["tools",{"_index":2682,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["top",{"_index":71,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["top(n",{"_index":1046,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["toqueryarguments",{"_index":2624,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tort",{"_index":3518,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":344,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["tostring(undefined",{"_index":2517,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["totaloffsetminutes(left",{"_index":502,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["totalseconds(left",{"_index":504,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["toupper",{"_index":3286,"title":{},"body":{"classes/StringFunctions.html":{}}}],["toupper(left",{"_index":475,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["transform",{"_index":69,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["trim",{"_index":3018,"title":{},"body":{"classes/ODataResponseOptions.html":{},"classes/StringFunctions.html":{}}}],["trim(left",{"_index":477,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["trippin",{"_index":3374,"title":{},"body":{"index.html":{}}}],["trippinconfig",{"_index":3372,"title":{},"body":{"index.html":{}}}],["trippinmodule",{"_index":3373,"title":{},"body":{"index.html":{}}}],["trips",{"_index":3427,"title":{},"body":{"index.html":{}}}],["true",{"_index":365,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["try",{"_index":420,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["tslib",{"_index":3316,"title":{},"body":{"dependencies.html":{}}}],["tuple[0].isstopped",{"_index":1640,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tuple[0].onload(tuple[1",{"_index":1641,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#batch",{"_index":1579,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#singleton",{"_index":3129,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["type",{"_index":26,"title":{"classes/Type.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["type('cast",{"_index":514,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["type('isof",{"_index":516,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["type(this.name",{"_index":584,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["type(undefined",{"_index":1880,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["type(value",{"_index":2596,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["type.fromjson(value",{"_index":392,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["type.startswith(this.alias",{"_index":3074,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.startswith(this.namespace",{"_index":3073,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.ts",{"_index":792,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts:1",{"_index":850,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:10",{"_index":844,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:11",{"_index":983,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:111",{"_index":2378,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:12",{"_index":845,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:13",{"_index":846,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:131",{"_index":2373,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:14",{"_index":2336,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:141",{"_index":2379,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:150",{"_index":2382,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:17",{"_index":799,"title":{},"body":{"classes/CsdlComplexType.html":{}}}],["type.ts:170",{"_index":2380,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:174",{"_index":2377,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:19",{"_index":2309,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:22",{"_index":2337,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:3",{"_index":853,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:30",{"_index":840,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:31",{"_index":2370,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:32",{"_index":2371,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:33",{"_index":842,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:34",{"_index":2369,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:35",{"_index":2316,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:36",{"_index":2368,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:37",{"_index":2367,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:39",{"_index":841,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:4",{"_index":852,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:41",{"_index":2092,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:42",{"_index":2091,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:44",{"_index":2313,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:45",{"_index":886,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:46",{"_index":887,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:49",{"_index":928,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:5",{"_index":854,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:50",{"_index":2692,"title":{},"body":{"classes/ODataReferential.html":{}}}],["type.ts:51",{"_index":930,"title":{},"body":{"classes/CsdlPropertyRef.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["type.ts:52",{"_index":929,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:53",{"_index":2319,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:6",{"_index":851,"title":{},"body":{"classes/CsdlEnumType.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:63",{"_index":2310,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:69",{"_index":2375,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:7",{"_index":2308,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:73",{"_index":2325,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:77",{"_index":2374,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:8",{"_index":984,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:83",{"_index":2311,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:87",{"_index":2327,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:9",{"_index":985,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:91",{"_index":2324,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:92",{"_index":2376,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:97",{"_index":2372,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["typealiases",{"_index":3540,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedefinition",{"_index":1140,"title":{},"body":{"classes/Field.html":{}}}],["typedefinitions",{"_index":957,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["typefunctions",{"_index":511,"title":{"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["typeof",{"_index":360,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types",{"_index":159,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types(undefined",{"_index":2519,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["types.isarray(v",{"_index":418,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isarray(value",{"_index":2661,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(errors",{"_index":2134,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(params",{"_index":709,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(this.segment.key",{"_index":2603,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.segment.parameters",{"_index":2608,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.values.get(key",{"_index":2659,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(this.values[key",{"_index":702,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(value",{"_index":2280,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["types.isfunction(value",{"_index":403,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isobject(parser",{"_index":415,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isobject(v",{"_index":411,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isobject(value",{"_index":405,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isplainobject(data",{"_index":2969,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(options.body",{"_index":2844,"title":{},"body":{"classes/ODataRequest.html":{}}}],["types.isplainobject(payload",{"_index":2976,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(this.payload",{"_index":2956,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(v",{"_index":2265,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isplainobject(value",{"_index":374,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.rawtype(this",{"_index":428,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.rawtype(v).endswith('expression",{"_index":2663,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.rawtype(value).endswith('expression",{"_index":705,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["typescript",{"_index":2459,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"properties.html":{}}}],["unchanged",{"_index":3337,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":249,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["underlayingtype",{"_index":998,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["underlyingtype",{"_index":848,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["unicode",{"_index":904,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["union",{"_index":1318,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["union(other",{"_index":1332,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["unique",{"_index":82,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["united",{"_index":3409,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1988,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["unpack",{"_index":2307,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpack(value",{"_index":2326,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpacked",{"_index":1020,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["unsigned",{"_index":100,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["unsuccessful",{"_index":1573,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["update",{"_index":1319,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/enumerations.html":{}}}],["update(attrs",{"_index":3138,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["update(data",{"_index":1334,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["updating",{"_index":3347,"title":{},"body":{"index.html":{}}}],["uri",{"_index":875,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["url",{"_index":233,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["urlwithparams",{"_index":2706,"title":{},"body":{"classes/ODataRequest.html":{}}}],["usage",{"_index":3359,"title":{},"body":{"index.html":{}}}],["use",{"_index":1418,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataSchemaElement.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":2475,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["usevalue",{"_index":2469,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["using",{"_index":1745,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["utf",{"_index":91,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["utils",{"_index":327,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["utils/arrays",{"_index":1533,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/http",{"_index":1534,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["utils/odata",{"_index":3058,"title":{},"body":{"classes/ODataSchema.html":{}}}],["utils/strings",{"_index":1535,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/types",{"_index":2905,"title":{},"body":{"classes/ODataResponse.html":{}}}],["v",{"_index":410,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["v.isfield",{"_index":412,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["v.tojson",{"_index":431,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["v2",{"_index":3532,"title":{},"body":{"properties.html":{}}}],["v3",{"_index":3531,"title":{},"body":{"properties.html":{}}}],["v4",{"_index":3446,"title":{},"body":{"index.html":{},"properties.html":{}}}],["v4.0",{"_index":1447,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v4.01.html#sec_requestingthejsonformat",{"_index":1444,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v[field.name",{"_index":2266,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["validate",{"_index":2124,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["validate(member",{"_index":2381,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["value",{"_index":60,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["value).reduce",{"_index":2351,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["value.$type",{"_index":376,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["value.length",{"_index":2132,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["value.map((v",{"_index":1933,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["value.some((v",{"_index":2662,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value.tojson",{"_index":2666,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value/s",{"_index":226,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["value[f.name",{"_index":2224,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["valued",{"_index":97,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["values",{"_index":130,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values.filter",{"_index":409,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values.join",{"_index":362,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values.map((v",{"_index":417,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values.push(length",{"_index":462,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values=nulls",{"_index":2816,"title":{},"body":{"classes/ODataRequest.html":{}}}],["values[index",{"_index":2555,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["van",{"_index":3462,"title":{},"body":{"license.html":{},"properties.html":{}}}],["var",{"_index":1618,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["variable",{"_index":241,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["variables",{"_index":1581,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["version",{"_index":23,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"properties.html":{}}}],["version.replace(/\\;/g",{"_index":3017,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_2_0",{"_index":3006,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_3_0",{"_index":3007,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_4_0",{"_index":1093,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["version_4_0].indexof(value",{"_index":3019,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["versions",{"_index":3441,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":3449,"title":{},"body":{"index.html":{}}}],["void",{"_index":247,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["warranties",{"_index":3503,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3498,"title":{},"body":{"license.html":{}}}],["whether",{"_index":3516,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":3453,"title":{},"body":{"index.html":{}}}],["window.addeventlistener('beforeunload",{"_index":2422,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["withcount",{"_index":2838,"title":{},"body":{"classes/ODataRequest.html":{},"index.html":{}}}],["withcredentials",{"_index":24,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["without",{"_index":109,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"license.html":{}}}],["works",{"_index":3435,"title":{},"body":{"index.html":{}}}],["www.odata.org/getting",{"_index":3128,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["xssi_prefix",{"_index":1531,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["year(left",{"_index":506,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["yes",{"_index":648,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["zone",{"_index":111,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["zone.js",{"_index":3318,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiOptions.html":{"url":"interfaces/ApiOptions.html","title":"interface - ApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accept\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodyQueryOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            etag\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetchPolicy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jsonBatchFormat\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stripMetadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accept:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodyQueryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodyQueryOptions:         QueryOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueryOption[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etag\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etag:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetchPolicy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetchPolicy:         FetchPolicy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FetchPolicy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jsonBatchFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jsonBatchFormat:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefer:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stripMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stripMetadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticFunctions.html":{"url":"classes/ArithmeticFunctions.html","title":"class - ArithmeticFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ceiling\n                            \n                            \n                                floor\n                            \n                            \n                                round\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ceiling\n                        \n                    \n                \n            \n            \n                \nceiling(left: T | string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:414\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n            \n                \nfloor(left: T | string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:417\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        round\n                        \n                    \n                \n            \n            \n                \nround(left: T | string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:420\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticOperators.html":{"url":"classes/ArithmeticOperators.html","title":"class - ArithmeticOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                div\n                            \n                            \n                                mod\n                            \n                            \n                                mul\n                            \n                            \n                                neg\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:592\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n            \n                \ndiv(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:601\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mod\n                        \n                    \n                \n            \n            \n                \nmod(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:604\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mul\n                        \n                    \n                \n            \n            \n                \nmul(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:598\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neg\n                        \n                    \n                \n            \n            \n                \nneg(value: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:607\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n            \n                \nsub(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:595\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cache.html":{"url":"interfaces/Cache.html","title":"interface - Cache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string, ...opts: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:197\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, payload: T, ...opts: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:196\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionFunctions.html":{"url":"classes/CollectionFunctions.html","title":"class - CollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasSubsequence\n                            \n                            \n                                hasSubset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubsequence\n                        \n                    \n                \n            \n            \n                \nhasSubsequence(left: T, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:344\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubset\n                        \n                    \n                \n            \n            \n                \nhasSubset(left: T, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:341\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeExpression.html":{"url":"classes/ComputeExpression.html","title":"class - ComputeExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                names\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                compute\n                            \n                            \n                                field\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(name: string, node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ComputeExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:87\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     ComputeExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        compute\n                        \n                    \n                \n            \n            \n                \n                        \n                    compute(opts: (builder: ComputeExpressionBuilder,current: ComputeExpression) => void, current?: ComputeExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:36\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                        ComputeExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ComputeExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string, opts: (e: literal type) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:100\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ComputeExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:59\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ComputeExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:66\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:52\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:51\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:32\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport {\n  FieldFactory,\n  functions,\n  ODataFunctions,\n  ODataOperators,\n  operators,\n  Renderable,\n  RenderableFactory,\n} from './syntax';\n\nexport type ComputeExpressionBuilder = {\n  t: Required>;\n  e: () => ComputeExpression;\n};\nexport class ComputeExpression extends Expression {\n  names: string[];\n  constructor({\n    children,\n    names,\n  }: {\n    children?: Renderable[];\n    names?: string[];\n  } = {}) {\n    super({ children });\n    this.names = names || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ComputeExpression';\n  }\n\n  static compute(\n    opts: (\n      builder: ComputeExpressionBuilder,\n      current?: ComputeExpression,\n    ) => ComputeExpression,\n    current?: ComputeExpression,\n  ): ComputeExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new ComputeExpression(),\n      },\n      current,\n    ) as ComputeExpression;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {\n      names: this.names,\n    });\n  }\n\n  static fromJson(json: { [name: string]: any }): ComputeExpression {\n    return new ComputeExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n      names: json['names'],\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let children = this._children.map((n) =>\n      n.render({ aliases, escape, prefix, parser, options }),\n    );\n    return this.names\n      .map((name, index) => `${children[index]} as ${name}`)\n      .join(',');\n  }\n\n  clone() {\n    return new ComputeExpression({\n      children: this._children.map((c) => c.clone()),\n      names: [...this.names],\n    });\n  }\n\n  private _add(name: string, node: Renderable): ComputeExpression {\n    this.names.push(name);\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    name: string,\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable,\n  ): ComputeExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(name, node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConditionalFunctions.html":{"url":"classes/ConditionalFunctions.html","title":"class - ConditionalFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConditionalFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                case\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        case\n                        \n                    \n                \n            \n            \n                \ncase(left: T | string, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:454\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountExpression.html":{"url":"classes/CountExpression.html","title":"class - CountExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                count\n                            \n                            \n                                field\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:106\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CountExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:169\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     CountExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        count\n                        \n                    \n                \n            \n            \n                \n                        \n                    count(opts: (builder: CountExpressionBuilder,current: CountExpression) => void, current?: CountExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:119\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                        CountExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CountExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F[], opts?: (e?: literal type) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:175\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        F[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CountExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:145\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CountExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:150\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:140\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:51\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:115\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { render, FieldFactory, Renderable, RenderableFactory } from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJson() {\n    return {\n      field: this.field.toJson(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const params: { [name: string]: string } = [\n      QueryOption.filter,\n      QueryOption.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n            options,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Readonly>;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'CountExpression';\n  }\n\n  static count(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression\n    ) => CountExpression,\n    current?: CountExpression\n  ): CountExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new CountExpression(),\n      },\n      current\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): CountExpression {\n    return new CountExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: FieldFactory>>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountField.html":{"url":"classes/CountField.html","title":"class - CountField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                filter\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:82\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     CountField\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                        \n                    option(name: QueryOption, opts?: O)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:96\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        O\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { field: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { render, FieldFactory, Renderable, RenderableFactory } from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJson() {\n    return {\n      field: this.field.toJson(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const params: { [name: string]: string } = [\n      QueryOption.filter,\n      QueryOption.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n            options,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Readonly>;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'CountExpression';\n  }\n\n  static count(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression\n    ) => CountExpression,\n    current?: CountExpression\n  ): CountExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new CountExpression(),\n      },\n      current\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): CountExpression {\n    return new CountExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: FieldFactory>>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAction.html":{"url":"classes/CsdlAction.html","title":"class - CsdlAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                    Optional\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType?: CsdlReturnType, isBound?: boolean, entitySetPath?: string, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlActionImport.html":{"url":"classes/CsdlActionImport.html","title":"class - CsdlActionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlActionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, action: string, entitySet?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotable.html":{"url":"classes/CsdlAnnotable.html","title":"class - CsdlAnnotable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotation.html":{"url":"classes/CsdlAnnotation.html","title":"class - CsdlAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(term: string, qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotations.html":{"url":"classes/CsdlAnnotations.html","title":"class - CsdlAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: string, annotationList: CsdlAnnotation[], qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlComplexType.html":{"url":"classes/CsdlComplexType.html","title":"class - CsdlComplexType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlComplexType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityContainer.html":{"url":"classes/CsdlEntityContainer.html","title":"class - CsdlEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actionImports\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySets\n                            \n                            \n                                    Public\n                                    Optional\n                                extend\n                            \n                            \n                                    Public\n                                    Optional\n                                functionImports\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                singletons\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, extend?: string, entitySets?: CsdlEntitySet[], singletons?: CsdlSingleton[], functionImports?: CsdlFunctionImport[], actionImports?: CsdlActionImport[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        extend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySets\n                                                  \n                                                        \n                                                                        CsdlEntitySet[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        singletons\n                                                  \n                                                        \n                                                                        CsdlSingleton[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionImports\n                                                  \n                                                        \n                                                                    CsdlFunctionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionImports\n                                                  \n                                                        \n                                                                    CsdlActionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlActionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        extend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunctionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        singletons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlSingleton[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n  constructor(\n    public name: string,\n    public extend?: string,\n    public entitySets?: CsdlEntitySet[],\n    public singletons?: CsdlSingleton[],\n    public functionImports?: CsdlFunctionImport[],\n    public actionImports?: CsdlActionImport[],\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntitySet.html":{"url":"classes/CsdlEntitySet.html","title":"class - CsdlEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                entityType\n                            \n                            \n                                    Public\n                                    Optional\n                                includeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBinding\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, entityType: string, navigationPropertyBinding?: CsdlNavigationPropertyBinding[], includeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBinding\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n  constructor(\n    public name: string,\n    public entityType: string,\n    public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n    public includeInServiceDocument?: boolean,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityType.html":{"url":"classes/CsdlEntityType.html","title":"class - CsdlEntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                hasStream\n                            \n                            \n                                    Public\n                                    Optional\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, key?: CsdlKey, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean, hasStream?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        CsdlKey\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        hasStream\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        hasStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlKey\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumMember.html":{"url":"classes/CsdlEnumMember.html","title":"class - CsdlEnumMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value?: number)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean,\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(\n    public name: string,\n    public value?: number,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumType.html":{"url":"classes/CsdlEnumType.html","title":"class - CsdlEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                isFlags\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                underlyingType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, members: CsdlEnumMember[], underlyingType?: string, isFlags?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        members\n                                                  \n                                                        \n                                                                        CsdlEnumMember[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlyingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isFlags\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isFlags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumMember[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        underlyingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean,\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(\n    public name: string,\n    public value?: number,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunction.html":{"url":"classes/CsdlFunction.html","title":"class - CsdlFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                    Optional\n                                isComposable\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType: CsdlReturnType, isBound?: boolean, entitySetPath?: string, isComposable?: boolean, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isComposable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isComposable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunctionImport.html":{"url":"classes/CsdlFunctionImport.html","title":"class - CsdlFunctionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunctionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                functionName\n                            \n                            \n                                    Public\n                                    Optional\n                                IncludeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, functionName: string, entitySet?: string, IncludeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        IncludeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        IncludeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlInclude.html":{"url":"classes/CsdlInclude.html","title":"class - CsdlInclude","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlInclude\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                namespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n  ) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlIncludeAnnotations.html":{"url":"classes/CsdlIncludeAnnotations.html","title":"class - CsdlIncludeAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlIncludeAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                    Optional\n                                targetNamespace\n                            \n                            \n                                    Public\n                                termNamespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termNamespace: string, qualifier?: string, targetNamespace?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        targetNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        termNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n  ) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlKey.html":{"url":"classes/CsdlKey.html","title":"class - CsdlKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                propertyRefs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyRefs: CsdlPropertyRef[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyRefs\n                                                  \n                                                        \n                                                                    CsdlPropertyRef[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        propertyRefs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlPropertyRef[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationProperty.html":{"url":"classes/CsdlNavigationProperty.html","title":"class - CsdlNavigationProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                containsTarget\n                            \n                            \n                                    Public\n                                    Optional\n                                onDelete\n                            \n                            \n                                    Public\n                                    Optional\n                                partner\n                            \n                            \n                                    Public\n                                    Optional\n                                referentialConstraints\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, partner?: string, containsTarget?: boolean, referentialConstraints?: CsdlReferentialConstraint[], onDelete?: CsdlOnDelete)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        partner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        containsTarget\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        referentialConstraints\n                                                  \n                                                        \n                                                                        CsdlReferentialConstraint[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        onDelete\n                                                  \n                                                        \n                                                                        CsdlOnDelete\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        containsTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlOnDelete\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        partner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        referentialConstraints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReferentialConstraint[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationPropertyBinding.html":{"url":"classes/CsdlNavigationPropertyBinding.html","title":"class - CsdlNavigationPropertyBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationPropertyBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                path\n                            \n                            \n                                    Public\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(path: string, target: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlNavigationPropertyBinding {\n  constructor(\n    public path: string,\n    public target: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlOnDelete.html":{"url":"classes/CsdlOnDelete.html","title":"class - CsdlOnDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlOnDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(action: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlParameter.html":{"url":"classes/CsdlParameter.html","title":"class - CsdlParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlProperty.html":{"url":"classes/CsdlProperty.html","title":"class - CsdlProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, defaultValue?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlPropertyRef.html":{"url":"classes/CsdlPropertyRef.html","title":"class - CsdlPropertyRef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlPropertyRef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReference.html":{"url":"classes/CsdlReference.html","title":"class - CsdlReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                includeAnnotations\n                            \n                            \n                                    Public\n                                    Optional\n                                includes\n                            \n                            \n                                    Public\n                                uri\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uri: string, includes?: CsdlInclude[], includeAnnotations?: CsdlIncludeAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        includes\n                                                  \n                                                        \n                                                                        CsdlInclude[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeAnnotations\n                                                  \n                                                        \n                                                                    CsdlIncludeAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeAnnotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlIncludeAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlInclude[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n  ) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReferentialConstraint.html":{"url":"classes/CsdlReferentialConstraint.html","title":"class - CsdlReferentialConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReferentialConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                property\n                            \n                            \n                                    Public\n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(property: string, referencedProperty: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        referencedProperty\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReturnType.html":{"url":"classes/CsdlReturnType.html","title":"class - CsdlReturnType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReturnType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSchema.html":{"url":"classes/CsdlSchema.html","title":"class - CsdlSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actions\n                            \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationsList\n                            \n                            \n                                    Public\n                                    Optional\n                                complexTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                entityContainer\n                            \n                            \n                                    Public\n                                    Optional\n                                entityTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                enumTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                functions\n                            \n                            \n                                    Public\n                                namespace\n                            \n                            \n                                    Public\n                                    Optional\n                                terms\n                            \n                            \n                                    Public\n                                    Optional\n                                typeDefinitions\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string, enumTypes?: CsdlEnumType[], complexTypes?: CsdlComplexType[], entityTypes?: CsdlEntityType[], functions?: CsdlFunction[], actions?: CsdlAction[], entityContainer?: CsdlEntityContainer, typeDefinitions?: CsdlTypeDefinition[], terms?: CsdlTerm[], annotationsList?: CsdlAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        enumTypes\n                                                  \n                                                        \n                                                                    CsdlEnumType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        complexTypes\n                                                  \n                                                        \n                                                                    CsdlComplexType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityTypes\n                                                  \n                                                        \n                                                                    CsdlEntityType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functions\n                                                  \n                                                        \n                                                                    CsdlFunction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        CsdlAction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityContainer\n                                                  \n                                                        \n                                                                        CsdlEntityContainer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        typeDefinitions\n                                                  \n                                                        \n                                                                    CsdlTypeDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        terms\n                                                  \n                                                        \n                                                                        CsdlTerm[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationsList\n                                                  \n                                                        \n                                                                    CsdlAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        complexTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlComplexType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityContainer\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlEntityType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        enumTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTerm[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        typeDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlTypeDefinition[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAnnotation,\n  CsdlAnnotable,\n  CsdlTerm,\n  CsdlAnnotations,\n} from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n    public enumTypes?: CsdlEnumType[],\n    public complexTypes?: CsdlComplexType[],\n    public entityTypes?: CsdlEntityType[],\n    public functions?: CsdlFunction[],\n    public actions?: CsdlAction[],\n    public entityContainer?: CsdlEntityContainer,\n    public typeDefinitions?: CsdlTypeDefinition[],\n    public terms?: CsdlTerm[],\n    public annotationsList?: CsdlAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSingleton.html":{"url":"classes/CsdlSingleton.html","title":"class - CsdlSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBindings\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, navigationPropertyBindings?: CsdlNavigationPropertyBinding[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBindings\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n  constructor(\n    public name: string,\n    public type: string,\n    public navigationPropertyBindings?: CsdlNavigationPropertyBinding[],\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuralProperty.html":{"url":"classes/CsdlStructuralProperty.html","title":"class - CsdlStructuralProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuralProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuredType.html":{"url":"classes/CsdlStructuredType.html","title":"class - CsdlStructuredType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuredType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTerm.html":{"url":"classes/CsdlTerm.html","title":"class - CsdlTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appliesTo\n                            \n                            \n                                    Public\n                                    Optional\n                                baseTerm\n                            \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, baseTerm?: string, defaultValue?: string, appliesTo?: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseTerm\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        appliesTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appliesTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTypeDefinition.html":{"url":"classes/CsdlTypeDefinition.html","title":"class - CsdlTypeDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTypeDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                underlayingType\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, underlayingType: string, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlayingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        underlayingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n  constructor(\n    public name: string,\n    public underlayingType: string,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandExpression.html":{"url":"classes/ExpandExpression.html","title":"class - ExpandExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                expand\n                            \n                            \n                                field\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:187\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:251\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:245\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ExpandExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        expand\n                        \n                    \n                \n            \n            \n                \n                        \n                    expand(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void, current?: ExpandExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:200\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                            ExpandExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F, opts?: (e?: ExpandField>) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:256\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        F\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:221\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:227\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:216\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:51\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:196\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType, Unpacked } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport {\n  FieldFactory,\n  render,\n  Renderable,\n  RenderableFactory,\n  resolve,\n} from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJson() {\n    return {\n      field: this.field.toJson(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve([this.field], parser);\n    const params: { [name: string]: string } = [\n      QueryOption.select,\n      QueryOption.expand,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.orderBy,\n      QueryOption.skip,\n      QueryOption.top,\n      QueryOption.count,\n      QueryOption.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n            options,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(\n      typeof this.field === 'string' ? this.field : this.field.clone(),\n      values\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOption.select,\n      SelectExpression.select(opts, this.values[QueryOption.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOption.expand,\n      ExpandExpression.expand(opts, this.values[QueryOption.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  search(\n    opts: (builder: SearchExpressionBuilder) => SearchExpression\n  ) {\n    return this.option(\n      QueryOption.search,\n      SearchExpression.search(opts, this.values[QueryOption.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOption.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOption.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOption.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOption.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOption.levels, n);\n  }\n\n  count() {\n    return this.option(QueryOption.count, true);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name] as O;\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Readonly>;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandExpression';\n  }\n\n  static expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new ExpandExpression(),\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): ExpandExpression {\n    return new ExpandExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    field: F,\n    opts?: (e: ExpandField>) => void\n  ): ExpandExpression {\n    let node = new ExpandField>(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandField.html":{"url":"classes/ExpandField.html","title":"class - ExpandField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                count\n                            \n                            \n                                expand\n                            \n                            \n                                filter\n                            \n                            \n                                levels\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                search\n                            \n                            \n                                select\n                            \n                            \n                                skip\n                            \n                            \n                                toJson\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ExpandField\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:172\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expand\n                        \n                    \n                \n            \n            \n                \nexpand(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:127\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        levels\n                        \n                    \n                \n            \n            \n                \nlevels(n: number | \"max\")\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                n\n                                            \n                                                        number | \"max\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | \"max\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                        \n                    option(name: QueryOption, opts?: O)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:177\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        O\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     O\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderBy\n                        \n                    \n                \n            \n            \n                \norderBy(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:148\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(opts: (builder: SearchExpressionBuilder) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:139\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:103\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n            \n                \nskip(n: number)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                n\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { field: any; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        top\n                        \n                    \n                \n            \n            \n                \ntop(n: number)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                n\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:23\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType, Unpacked } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport {\n  FieldFactory,\n  render,\n  Renderable,\n  RenderableFactory,\n  resolve,\n} from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJson() {\n    return {\n      field: this.field.toJson(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve([this.field], parser);\n    const params: { [name: string]: string } = [\n      QueryOption.select,\n      QueryOption.expand,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.orderBy,\n      QueryOption.skip,\n      QueryOption.top,\n      QueryOption.count,\n      QueryOption.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n            options,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(\n      typeof this.field === 'string' ? this.field : this.field.clone(),\n      values\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOption.select,\n      SelectExpression.select(opts, this.values[QueryOption.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOption.expand,\n      ExpandExpression.expand(opts, this.values[QueryOption.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  search(\n    opts: (builder: SearchExpressionBuilder) => SearchExpression\n  ) {\n    return this.option(\n      QueryOption.search,\n      SearchExpression.search(opts, this.values[QueryOption.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOption.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOption.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOption.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOption.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOption.levels, n);\n  }\n\n  count() {\n    return this.option(QueryOption.count, true);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name] as O;\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Readonly>;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandExpression';\n  }\n\n  static expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new ExpandExpression(),\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): ExpandExpression {\n    return new ExpandExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    field: F,\n    opts?: (e: ExpandField>) => void\n  ): ExpandExpression {\n    let node = new ExpandField>(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Expression.html":{"url":"classes/Expression.html","title":"class - Expression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Expression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/base.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                length\n                            \n                            \n                                    Abstract\n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                        \n                    clone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Expression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        render\n                        \n                    \n                \n            \n            \n                \n                        \n                    render(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; children: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:16\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Renderable } from './syntax';\n\nexport abstract class Expression implements Renderable {\n  protected _children: Renderable[];\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    this._children = children || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Expression';\n  }\n\n  abstract render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n\n  abstract clone(): Expression;\n\n  children() {\n    return this._children;\n  }\n\n  length() {\n    return this._children.length;\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      children: this._children.map((c) => c.toJson()),\n    };\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/metadata.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fieldType\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, fieldType: FieldType)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fieldType\n                                                  \n                                                        \n                                                                        FieldType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fieldType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FieldType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAction,\n  CsdlActionImport,\n  CsdlFunction,\n  CsdlFunctionImport,\n  CsdlParameter,\n  CsdlReturnType,\n} from './csdl/csdl-function-action';\nimport {\n  CsdlAnnotation,\n  CsdlAnnotations,\n  CsdlTerm,\n} from './csdl/csdl-annotation';\nimport {\n  CsdlComplexType,\n  CsdlEntityType,\n  CsdlKey,\n  CsdlPropertyRef,\n} from './csdl/csdl-structured-type';\nimport { CsdlEnumMember, CsdlEnumType } from './csdl/csdl-enum-type';\nimport {\n  CsdlInclude,\n  CsdlIncludeAnnotations,\n  CsdlReference,\n} from './csdl/csdl-reference';\nimport {\n  CsdlNavigationProperty,\n  CsdlOnDelete,\n  CsdlProperty,\n  CsdlReferentialConstraint,\n} from './csdl/csdl-structural-property';\n\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { VERSION_4_0 } from '../../constants';\n\nenum FieldType {\n  ATTRIBUTE,\n  TAG,\n}\n\nclass Field {\n  constructor(\n    public name: string,\n    public fieldType: FieldType,\n  ) {}\n}\n\nexport class ODataMetadata {\n  // TAGS\n  private static readonly TAG_EDMX = 'edmx:Edmx';\n  private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n  private static readonly TAG_REFERENCE = 'edmx:Reference';\n  private static readonly TAG_INCLUDE = 'edmx:Include';\n  private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n  private static readonly TAG_TERM = 'Term';\n  private static readonly TAG_ANNOTATIONS = 'Annotations';\n  private static readonly TAG_ANNOTATION = 'Annotation';\n  private static readonly TAG_SCHEMA = 'Schema';\n  private static readonly TAG_ENUM_TYPE = 'EnumType';\n  private static readonly TAG_MEMBER = 'Member';\n  private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n  private static readonly TAG_ENTITY_TYPE = 'EntityType';\n  private static readonly TAG_PROPERTY = 'Property';\n  private static readonly TAG_KEY = 'Key';\n  private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n  private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n  private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n  private static readonly TAG_ON_DELETE = 'OnDelete';\n  private static readonly TAG_FUNCTION = 'Function';\n  private static readonly TAG_RETURN_TYPE = 'ReturnType';\n  private static readonly TAG_PARAMETER = 'Parameter';\n  private static readonly TAG_ACTION = 'Action';\n  private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n  private static readonly TAG_ENTITY_SET = 'EntitySet';\n  private static readonly TAG_SINGLETON = 'Singleton';\n  private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n  private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n  private static readonly TAG_NAVIGATION_PROPERTY_BINDING =\n    'NavigationPropertyBinding';\n  private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n  // ATTRIBUTES\n  private static readonly ATTRIBUTE_VERSION = 'Version';\n  private static readonly ATTRIBUTE_URI = 'Uri';\n  private static readonly ATTRIBUTE_ALIAS = 'Alias';\n  private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n  private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n  private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n  private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n  private static readonly ATTRIBUTE_TERM = 'Term';\n  private static readonly ATTRIBUTE_NAME = 'Name';\n  private static readonly ATTRIBUTE_VALUE = 'Value';\n  private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n  private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n  private static readonly ATTRIBUTE_TYPE = 'Type';\n  private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n  private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n  private static readonly ATTRIBUTE_PRECISION = 'Precision';\n  private static readonly ATTRIBUTE_SCALE = 'Scale';\n  private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n  private static readonly ATTRIBUTE_SRID = 'SRID';\n  private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n  private static readonly ATTRIBUTE_PARTNER = 'Partner';\n  private static readonly ATTRIBUTE_PROPERTY = 'Property';\n  private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n  private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n  private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n  private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n  private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n  private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n  private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n  private static readonly ATTRIBUTE_PATH = 'Path';\n  private static readonly ATTRIBUTE_TARGET = 'Target';\n  private static readonly ATTRIBUTE_FUNCTION = 'Function';\n  private static readonly ATTRIBUTE_ACTION = 'Action';\n  private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n  private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT =\n    'IncludeInServiceDocument';\n  private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n  private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n  private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n  private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n  private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n  private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n  public readonly version: string;\n  public readonly references: CsdlReference[];\n  public readonly schemas: CsdlSchema[];\n\n  constructor(xml: string) {\n    try {\n      const parser: DOMParser = new DOMParser();\n      const document: Document = parser.parseFromString(xml, 'text/xml');\n\n      this.checkVersion(document);\n\n      this.version = this.getFieldValueByAttribute(\n        new Field(ODataMetadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n        document.documentElement.attributes,\n      );\n\n      this.references = this.getObjects(\n        document.documentElement,\n        ODataMetadata.TAG_REFERENCE,\n        [\n          new Field(ODataMetadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n          new Field(ODataMetadata.TAG_INCLUDE, FieldType.TAG),\n          new Field(ODataMetadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n          new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n        ],\n      );\n\n      const dataServices: Element =\n        document.documentElement.getElementsByTagName(\n          ODataMetadata.TAG_DATA_SERVICES,\n        )[0];\n      this.schemas = this.getObjects(dataServices, ODataMetadata.TAG_SCHEMA, [\n        new Field(ODataMetadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.TAG_ENUM_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_FUNCTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ACTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TERM, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATIONS, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n      ]);\n    } catch (error) {\n      throw new Error('Unable to parse metadata, ' + error);\n    }\n  }\n\n  protected checkVersion(document: Document) {\n    // check version\n    const attributes: NamedNodeMap = document.documentElement.attributes;\n    if (!attributes) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const attr: Attr | null = attributes.getNamedItem('Version');\n    if (attr === null) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const odataVersion = attr?.nodeValue;\n    if (odataVersion !== VERSION_4_0) {\n      throw new Error('OData version \"' + odataVersion + '\" is not supported');\n    }\n  }\n\n  protected getObjects(\n    parentElement: Element,\n    tag: string,\n    fieldNames: Field[],\n  ): any[] {\n    let objects: any[] = [];\n\n    const children: HTMLCollection = parentElement.children;\n    for (let index = 0; index \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FieldParser.html":{"url":"interfaces/FieldParser.html","title":"interface - FieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Parser\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxLength\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nullable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            precision\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scale\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxLength\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxLength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nullable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nullable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precision\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        precision:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scale:     number | \"variable\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \"variable\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Function.html":{"url":"classes/Function.html","title":"class - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, values: any[], normalize: Normalize, escape: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:215\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        Normalize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        escape\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:287\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Function\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:238\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:247\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:296\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:227\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         { $type: any; name: string; values: any; normalize: Normalize; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:223\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeoFunctions.html":{"url":"classes/GeoFunctions.html","title":"class - GeoFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeoFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                geoDistance\n                            \n                            \n                                geoIntersects\n                            \n                            \n                                geoLength\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        geoDistance\n                        \n                    \n                \n            \n            \n                \ngeoDistance(left: T, right: string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:442\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoIntersects\n                        \n                    \n                \n            \n            \n                \ngeoIntersects(left: T, right: string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:445\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoLength\n                        \n                    \n                \n            \n            \n                \ngeoLength(left: T, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:448\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grouping.html":{"url":"classes/Grouping.html","title":"class - Grouping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grouping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(group: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:612\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:652\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Grouping\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:626\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Grouping\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:630\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:655\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:619\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; group: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:615\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Lambda.html":{"url":"classes/Lambda.html","title":"class - Lambda","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Lambda\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:725\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:786\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Lambda\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:747\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Lambda\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:755\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:793\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:736\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         { $type: any; op: string; values: any; alias: string; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:732\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaOperators.html":{"url":"classes/LambdaOperators.html","title":"class - LambdaOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                all\n                            \n                            \n                                any\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n            \n                \nall(left: T, right: any, alias?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:803\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                alias\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Lambda\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        any\n                        \n                    \n                \n            \n            \n                \nany(left: T, right: any, alias?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:799\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                alias\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Lambda\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotatable.html":{"url":"classes/ODataAnnotatable.html","title":"class - ODataAnnotatable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotatable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/annotation.ts:39\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/annotation.ts:30\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot),\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotation.html":{"url":"classes/ODataAnnotation.html","title":"class - ODataAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bool\n                            \n                            \n                                    Optional\n                                int\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                properties\n                            \n                            \n                                    Optional\n                                string\n                            \n                            \n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annot: AnnotationConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annot\n                                                  \n                                                        \n                                                                        AnnotationConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        int\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        string\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot),\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotations.html":{"url":"classes/ODataAnnotations.html","title":"class - ODataAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                    Abstract\n                                data\n                            \n                            \n                                    Abstract\n                                union\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySet\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(helper: ODataVersionHelper, annotations: Map, context?: ODataContext)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        ODataVersionHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotations\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        ODataContext\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ODataMetadataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Partial\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                        \n                    clone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataAnnotations\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        data\n                        \n                    \n                \n            \n            \n                \n                        \n                    data(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        union\n                        \n                    \n                \n            \n            \n                \n                        \n                    union(other: ODataAnnotations)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            ODataAnnotations\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySet\n                    \n                \n\n                \n                    \n                        getentitySet()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:26\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataApiOptions.html":{"url":"classes/ODataApiOptions.html","title":"class - ODataApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ApiOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accept\n                            \n                            \n                                bodyQueryOptions\n                            \n                            \n                                deleteRefBy\n                            \n                            \n                                etag\n                            \n                            \n                                fetchPolicy\n                            \n                            \n                                headers\n                            \n                            \n                                jsonBatchFormat\n                            \n                            \n                                nonParenthesisForEmptyParameterFunction\n                            \n                            \n                                params\n                            \n                            \n                                    Optional\n                                prefer\n                            \n                            \n                                stringAsEnum\n                            \n                            \n                                stripMetadata\n                            \n                            \n                                version\n                            \n                            \n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    parserOptions\n                                \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:103\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accept\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:66\n                        \n                    \n\n            \n                \n                    Customize accept header with OData options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOption[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:61\n                        \n                    \n\n            \n                \n                    Send query options in the request body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRefBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"path\" | \"id\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:29\n                        \n                    \n\n            \n                \n                    Delete reference by path or by id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        etag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { ifMatch: true, ifNoneMatch: false }\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FetchPolicy\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:45\n                        \n                    \n\n            \n                \n                    Cache fetch policy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:53\n                        \n                    \n\n            \n                \n                    Extra headers to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jsonBatchFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:41\n                        \n                    \n\n            \n                \n                    Use JSON Batch Format\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nonParenthesisForEmptyParameterFunction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:33\n                        \n                    \n\n            \n                \n                    No use parenthesis for empty parameters functions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:49\n                        \n                    \n\n            \n                \n                    Extra params to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        prefer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:25\n                        \n                    \n\n            \n                \n                    Send enum as string in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:37\n                        \n                    \n\n            \n                \n                    Strip metadata from the response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:21\n                        \n                    \n\n            \n                \n                    Default OData version\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:57\n                        \n                    \n\n            \n                \n                    Http request with credentials\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        parserOptions\n                    \n                \n\n                \n                    \n                        getparserOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:123\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:134\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  QueryOption,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum: boolean;\n  /**\n   * Delete reference by path or by id\n   */\n  deleteRefBy: 'path' | 'id';\n  /**\n   * No use parenthesis for empty parameters functions\n   */\n  nonParenthesisForEmptyParameterFunction: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Use JSON Batch Format\n   */\n  jsonBatchFormat: boolean;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOption[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n    /**\n     * @link https://devblogs.microsoft.com/odata/extension-omit-null-value-properties-in-asp-net-core-odata/\n     */\n    omitNullValues?: boolean;\n  };\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum || false;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n    this.deleteRefBy = config.deleteRefBy ?? 'path';\n    this.nonParenthesisForEmptyParameterFunction =\n      config.nonParenthesisForEmptyParameterFunction ?? false;\n    this.jsonBatchFormat = config.jsonBatchFormat ?? false;\n  }\n\n  get parserOptions(): ParserOptions {\n    return {\n      version: this.version,\n      stringAsEnum: this.stringAsEnum,\n      deleteRefBy: this.deleteRefBy,\n      nonParenthesisForEmptyParameterFunction:\n        this.nonParenthesisForEmptyParameterFunction,\n      ...this.accept,\n    };\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBatchRequest.html":{"url":"classes/ODataBatchRequest.html","title":"class - ODataBatchRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBatchRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/types/batch.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Subject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                            \n                                id\n                            \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onError\n                            \n                            \n                                onLoad\n                            \n                            \n                                toJson\n                            \n                            \n                                toLegacy\n                            \n                            \n                                    \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: ODataRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        ODataRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataRequest\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:43\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onError\n                        \n                    \n                \n            \n            \n                \nonError(response: HttpErrorResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            HttpErrorResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLoad\n                        \n                    \n                \n            \n            \n                \nonLoad(response: HttpResponseBase)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            HttpResponseBase\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:85\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { [name: string]: any; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLegacy\n                        \n                    \n                \n            \n            \n                \ntoLegacy()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toString\n                        \n                    \n                \n            \n            \n                \n                        \n                    toString()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  HttpErrorResponse,\n  HttpHeaders,\n  HttpResponse,\n  HttpResponseBase,\n} from '@angular/common/http';\nimport { map, Observable, Subject } from 'rxjs';\nimport { ODataApi } from '../../api';\nimport {\n  $BATCH,\n  ACCEPT,\n  APPLICATION_HTTP,\n  APPLICATION_JSON,\n  BATCH_PREFIX,\n  BINARY,\n  BOUNDARY_PREFIX_SUFFIX,\n  CHANGESET_PREFIX,\n  CONTENT_ID,\n  CONTENT_TRANSFER_ENCODING,\n  CONTENT_TYPE,\n  HTTP11,\n  MULTIPART_MIXED,\n  MULTIPART_MIXED_BOUNDARY,\n  NEWLINE,\n  NEWLINE_REGEXP,\n  ODATA_VERSION,\n  VERSION_4_0,\n  XSSI_PREFIX,\n} from '../../constants';\nimport { PathSegment } from '../../types';\nimport { Arrays } from '../../utils/arrays';\nimport { Http } from '../../utils/http';\nimport { Strings } from '../../utils/strings';\nimport { ODataPathSegments } from '../path';\nimport { ODataRequest } from '../request';\nimport { ODataResource } from '../resource';\nimport { ODataResponse } from '../responses';\nimport { ODataOptions } from './options';\n\nexport class ODataBatchRequest extends Subject {\n  id: string;\n  group: string;\n  constructor(public request: ODataRequest) {\n    super();\n    this.id = Strings.uniqueId({ prefix: 'r' });\n    this.group = Strings.uniqueId({ prefix: 'g' });\n  }\n\n  override toString() {\n    return this.toLegacy();\n  }\n\n  toLegacy() {\n    //TODO: Relative or Absolute url ?\n    let res = [\n      `${this.request.method} ${this.request.pathWithParams} ${HTTP11}`,\n    ];\n    if (\n      this.request.method === 'POST' ||\n      this.request.method === 'PATCH' ||\n      this.request.method === 'PUT'\n    ) {\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_JSON}`);\n    }\n\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res = [\n        ...res,\n        ...headers\n          .keys()\n          .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`),\n      ];\n    }\n\n    if (this.request.method === 'GET' || this.request.method === 'DELETE') {\n      res.push(NEWLINE);\n    } else {\n      res.push(`${NEWLINE}${JSON.stringify(this.request.body)}`);\n    }\n\n    return res.join(NEWLINE);\n  }\n\n  toJson() {\n    //TODO: Relative or Absolute url ?\n    let res: { [name: string]: any } = {\n      id: this.id,\n      method: this.request.method,\n      url: this.request.pathWithParams,\n      //'atomicityGroup': this.group\n      //\"dependsOn\": [\"g1\", \"g2\", \"r2\"]\n    };\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res['headers'] = headers\n        .keys()\n        .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`);\n    }\n    if (!(this.request.method === 'GET' || this.request.method === 'DELETE')) {\n      res['body'] = this.request.body;\n    }\n\n    return res;\n  }\n\n  onLoad(response: HttpResponseBase) {\n    if (response.ok) {\n      this.next(response);\n      this.complete();\n    } else {\n      // An unsuccessful request is delivered on the error channel.\n      this.error(response as HttpErrorResponse);\n    }\n  }\n\n  onError(response: HttpErrorResponse) {\n    this.error(response);\n  }\n}\n\n/**\n * OData Batch Resource\n * https://www.odata.org/getting-started/advanced-tutorial/#batch\n */\nexport class ODataBatchResource extends ODataResource {\n  // VARIABLES\n  private _requests: ODataBatchRequest[] = [];\n  requests() {\n    return this._requests.map((r) => r.request);\n  }\n\n  private _responses: HttpResponseBase[] | null = null;\n  responses() {\n    return this._responses;\n  }\n\n  //#region Factory\n  static factory(api: ODataApi) {\n    let segments = new ODataPathSegments();\n    segments.add(PathSegment.batch, $BATCH);\n    return new ODataBatchResource(api, { segments });\n  }\n\n  override clone(): ODataBatchResource {\n    const batch = super.clone() as ODataBatchResource;\n    batch._requests = [...this._requests];\n    return batch;\n  }\n  //#endregion\n\n  private storeRequester() {\n    const current = this.api.requester;\n    // Switch to the batch requester\n    this.api.requester = (req: ODataRequest): Observable => {\n      if (req.api !== this.api)\n        throw new Error('Batch Request are for the same api.');\n      if (req.observe === 'events')\n        throw new Error(\"Batch Request does not allows observe == 'events'.\");\n      this._requests.push(new ODataBatchRequest(req));\n      return this._requests[this._requests.length - 1];\n    };\n    return current;\n  }\n\n  private restoreRequester(\n    handler: ((req: ODataRequest) => Observable) | undefined,\n  ) {\n    this.api.requester = handler;\n  }\n\n  /**\n   * Add to batch request\n   * @param ctx The context for the request\n   * @returns The result of execute the context\n   */\n  add(ctx: (batch: this) => R): R {\n    // Store original requester\n    var handler = this.storeRequester();\n    // Execute the context\n    const result = ctx(this);\n    // Restore original requester\n    this.restoreRequester(handler);\n\n    return result;\n  }\n\n  send(options?: ODataOptions): Observable> {\n    if (this.api.options.jsonBatchFormat) {\n      return this.sendJson(options);\n    } else {\n      return this.sendLegacy(options);\n    }\n  }\n\n  private sendJson(options?: ODataOptions): Observable> {\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n    });\n    return this.api\n      .request('POST', this, {\n        body: ODataBatchResource.buildJsonBody(this._requests),\n        responseType: 'json',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseJsonResponse(this._requests, response),\n          ];\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        }),\n      );\n  }\n\n  private sendLegacy(\n    options?: ODataOptions,\n  ): Observable> {\n    const bound = Strings.uniqueId({ prefix: BATCH_PREFIX });\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n      [CONTENT_TYPE]: MULTIPART_MIXED_BOUNDARY + bound,\n      [ACCEPT]: MULTIPART_MIXED,\n    });\n    return this.api\n      .request>('POST', this, {\n        body: ODataBatchResource.buildLegacyBody(bound, this._requests),\n        responseType: 'text',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseLegacyResponse(this._requests, response),\n          ];\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        }),\n      );\n  }\n\n  /**\n   * Execute the batch request\n   * @param ctx The context for the request\n   * @param options The options of the batch request\n   * @returns The result of execute the context\n   */\n  exec(\n    ctx: (batch: this) => R,\n    options?: ODataOptions,\n  ): Observable]> {\n    let result = this.add(ctx);\n    return this.send(options).pipe(map((response) => [result, response]));\n  }\n\n  body() {\n    return ODataBatchResource.buildLegacyBody(\n      Strings.uniqueId({ prefix: BATCH_PREFIX }),\n      this._requests,\n    );\n  }\n\n  json() {\n    return ODataBatchResource.buildJsonBody(this._requests);\n  }\n\n  static buildLegacyBody(\n    batchBoundary: string,\n    requests: ODataBatchRequest[],\n  ): string {\n    let res = [];\n    let changesetBoundary: string | null = null;\n    let changesetId = 1;\n\n    for (const request of requests) {\n      // if method is GET and there is a changeset boundary open then close it\n      if (request.request.method === 'GET' && changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`,\n        );\n        changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (changesetBoundary === null) {\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}`);\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (request.request.method !== 'GET') {\n        if (changesetBoundary === null) {\n          changesetBoundary = Strings.uniqueId({ prefix: CHANGESET_PREFIX });\n          res.push(\n            `${CONTENT_TYPE}: ${MULTIPART_MIXED_BOUNDARY}${changesetBoundary}`,\n          );\n          res.push(NEWLINE);\n        }\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}`);\n      }\n\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_HTTP}`);\n      res.push(`${CONTENT_TRANSFER_ENCODING}: ${BINARY}`);\n\n      if (request.request.method !== 'GET') {\n        res.push(`${CONTENT_ID}: ${changesetId++}`);\n      }\n\n      res.push(NEWLINE);\n      res.push(`${request.toLegacy()}`);\n    }\n\n    if (res.length) {\n      if (changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`,\n        );\n        changesetBoundary = null;\n      }\n      res.push(\n        `${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}${BOUNDARY_PREFIX_SUFFIX}`,\n      );\n    }\n    return res.join(NEWLINE);\n  }\n\n  static buildJsonBody(requests: ODataBatchRequest[]): Object {\n    return {\n      requests: requests.map((request) => request.toJson()),\n    };\n  }\n\n  static parseLegacyResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse,\n  ): HttpResponseBase[] {\n    let chunks: string[][] = [];\n    const contentType: string = response.headers.get(CONTENT_TYPE) || '';\n    const batchBoundary: string = Http.boundaryDelimiter(contentType);\n    const endLine: string = Http.boundaryEnd(batchBoundary);\n\n    const lines: string[] = (response.body || '').split(NEWLINE_REGEXP);\n\n    let changesetResponses: string[][] | null = null;\n    let contentId: number | null = null;\n    let changesetBoundary: string | null = null;\n    let changesetEndLine: string | null = null;\n    let startIndex: number | null = null;\n    for (let index = 0; index  {\n      let request = requests[index].request;\n      let { code, message } = Http.parseResponseStatus(chunk[0]);\n      chunk = chunk.slice(1);\n\n      let headers: HttpHeaders = new HttpHeaders();\n      var index = 1;\n      for (; index = 200 && code ({\n            body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          });\n    });\n  }\n\n  static parseJsonResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse,\n  ): HttpResponseBase[] {\n    const responses: Object[] =\n      (response.body ? response.body : {})['responses'] ?? [];\n\n    return responses.map((response: any, index: number) => {\n      let request = requests[index].request;\n      let code = response['status'];\n\n      let headers: HttpHeaders = new HttpHeaders(response['headers']);\n      let body: string | { error: any; text: string } = response['body'];\n      if (code === 0) {\n        code = !!body ? 200 : 0;\n      }\n\n      let ok = code >= 200 && code ({\n            body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCache.html":{"url":"classes/ODataCache.html","title":"class - ODataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Cache\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Abstract\n                                getResponse\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                    Abstract\n                                putResponse\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:76\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Build an entry from a payload and some options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataCacheEntry\n\n                        \n                            \n                                The entry to store in the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:93\n                        \n                    \n\n\n            \n                \n                        Build a key from store an entry in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                names\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The names of the entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The key for the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:159\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:138\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries that are matching with the given options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:126\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Return the payload from the cache if it exists and is not expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name of the entry\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                The payload of the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:224\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:178\n                        \n                    \n\n\n            \n                \n                        Using the request, handle the fetching of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request to fetch\n\n                                            \n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Observable of the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:168\n                        \n                    \n\n\n            \n                \n                        Check if the entry is expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            ODataCacheEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The cache entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Boolean indicating if the entry is expired\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:105\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Put some payload in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name for the entry\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        putResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    putResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:38\n                        \n                    \n\n\n            \n                \n                        Using the resource on the request build an array of string to identify the scope of the request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to build the scope\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the scope of the request\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:55\n                        \n                    \n\n\n            \n                \n                        Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to build the tags\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the tags of the response\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegment } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegment.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request'],\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key\n          ? `${context.entitySet}(${context.key})`\n          : context.entitySet,\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] },\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {},\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>,\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        }),\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ODataCacheEntry.html":{"url":"interfaces/ODataCacheEntry.html","title":"interface - ODataCacheEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ODataCacheEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n            \n                Description\n            \n            \n                A cache entry that holds a payload, a last read time, and a timeout for the entry.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastRead\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegment } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegment.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request'],\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key\n          ? `${context.entitySet}(${context.key})`\n          : context.entitySet,\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] },\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {},\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>,\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        }),\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallable.html":{"url":"classes/ODataCallable.html","title":"class - ODataCallable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/callable.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bound\n                            \n                            \n                                    Optional\n                                composable\n                            \n                            \n                                    Optional\n                                entitySetPath\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                path\n                            \n                            \n                                serialize\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        composable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallableParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:86\n                        \n                    \n\n\n            \n                \n                        Returns the binding parameter of the callable.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The binding parameter of the callable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:58\n                        \n                    \n\n\n            \n                \n                        Deseialize the given value from the callable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to deserialize\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for deserialization\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Deserialized value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:78\n                        \n                    \n\n\n            \n                \n                        Encode the given value for the callable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to encode\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for encoding\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Encoded value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:68\n                        \n                    \n\n\n            \n                \n                        Serialize the given value for the callable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to serialize\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for serialization\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Serialized value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:58\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:68\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:47\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:29\n\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:38\n\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallableConfig, ParserOptions, Parser } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataCallableParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataCallable extends ODataSchemaElement {\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parser: ODataCallableParser;\n\n  constructor(config: CallableConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySetPath = config.entitySetPath;\n    this.bound = config.bound;\n    this.composable = config.composable;\n    this.parser = new ODataCallableParser(\n      config,\n      schema.namespace,\n      schema.alias,\n    );\n  }\n\n  path() {\n    let path: string;\n    if (this.entitySetPath) path = this.entitySetPath;\n    else if (this.bound) path = `${this.schema.namespace}.${this.name}`;\n    else\n      path = this.parser.return\n        ? this.api.findEntitySetForType(this.parser.return.type)?.name ||\n          this.name\n        : this.name;\n    return path;\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({\n      options,\n      parserForType,\n      findOptionsForType,\n    });\n  }\n\n  /**\n   * Deseialize the given value from the callable.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): any {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the callable.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: any, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the callable.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: any, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  /**\n   * Returns the binding parameter of the callable.\n   * @returns The binding parameter of the callable.\n   */\n  binding() {\n    return this.parser.binding();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallableParser.html":{"url":"classes/ODataCallableParser.html","title":"class - ODataCallableParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallableParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                parameters\n                            \n                            \n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                    Optional\n                                return\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataParameterParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        return\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:94\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:169\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     R\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(params: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(params: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T,\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`,\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter),\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigAsyncLoader.html":{"url":"classes/ODataConfigAsyncLoader.html","title":"class - ODataConfigAsyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigAsyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configs$: Observable | Observable[] | Observable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configs$\n                                                  \n                                                        \n                                                                        Observable | Observable[] | Observable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/loaders.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable,\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigLoader.html":{"url":"classes/ODataConfigLoader.html","title":"class - ODataConfigLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfigs()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/loaders.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable,\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigSyncLoader.html":{"url":"classes/ODataConfigSyncLoader.html","title":"class - ODataConfigSyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigSyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(passedConfigs: ApiConfig | ApiConfig[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passedConfigs\n                                                  \n                                                        \n                                                                        ApiConfig | ApiConfig[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/loaders.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable,\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitiesAnnotations.html":{"url":"classes/ODataEntitiesAnnotations.html","title":"class - ODataEntitiesAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitiesAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readLink\n                                \n                                \n                                    count\n                                \n                                \n                                    nextLink\n                                \n                                \n                                    deltaLink\n                                \n                                \n                                    top\n                                \n                                \n                                    skip\n                                \n                                \n                                    skiptoken\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:206\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:161\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataEntitiesAnnotations\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:169\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:214\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntitiesAnnotations)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:153\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            ODataEntitiesAnnotations\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntitiesAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:12\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ODataMetadataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Partial\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:19\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:173\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:177\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nextLink\n                    \n                \n\n                \n                    \n                        getnextLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:181\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        deltaLink\n                    \n                \n\n                \n                    \n                        getdeltaLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:185\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n\n                \n                    \n                        gettop()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:189\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:194\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skiptoken\n                    \n                \n\n                \n                    \n                        getskiptoken()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:199\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:207\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityAnnotations.html":{"url":"classes/ODataEntityAnnotations.html","title":"class - ODataEntityAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Private\n                                    Optional\n                                _properties\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                                \n                                    etag\n                                \n                                \n                                    mediaEtag\n                                \n                                \n                                    metadataEtag\n                                \n                                \n                                    readLink\n                                \n                                \n                                    editLink\n                                \n                                \n                                    mediaReadLink\n                                \n                                \n                                    mediaEditLink\n                                \n                                \n                                    mediaContentType\n                                \n                                \n                                    properties\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:71\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataEntityAnnotations\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:79\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:127\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntitiesAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:128\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntityAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type: \"single\" | \"collection\")\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:129\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"single\" | \"collection\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntityAnnotations | ODataEntitiesAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntityAnnotations)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:63\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            ODataEntityAnnotations\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntityAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:12\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ODataMetadataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Partial\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:19\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:83\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        etag\n                    \n                \n\n                \n                    \n                        getetag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:87\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEtag\n                    \n                \n\n                \n                    \n                        getmediaEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:91\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadataEtag\n                    \n                \n\n                \n                    \n                        getmetadataEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:95\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:99\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        editLink\n                    \n                \n\n                \n                    \n                        geteditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:103\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaReadLink\n                    \n                \n\n                \n                    \n                        getmediaReadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:107\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEditLink\n                    \n                \n\n                \n                    \n                        getmediaEditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:111\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaContentType\n                    \n                \n\n                \n                    \n                        getmediaContentType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:115\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        properties\n                    \n                \n\n                \n                    \n                        getproperties()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:120\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:140\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityContainer.html":{"url":"classes/ODataEntityContainer.html","title":"class - ODataEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-container.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entitySets\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntityContainerConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntityContainerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:58\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:68\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:47\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:29\n\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:38\n\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityContainerConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntityContainer extends ODataSchemaElement {\n  entitySets: ODataEntitySet[];\n\n  constructor(config: EntityContainerConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySets = (config.entitySets || []).map(\n      (config) => new ODataEntitySet(config, schema),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityService.html":{"url":"classes/ODataEntityService.html","title":"class - ODataEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataBaseService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                attach\n                            \n                            \n                                    Public\n                                    Abstract\n                                entity\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    structuredTypeSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                        \n                    attach(value: M)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/entity.ts:7\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    M\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        M\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        entity\n                        \n                    \n                \n            \n            \n                \n                        \n                    entity(key?: EntityKey)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/entity.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            EntityKey\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResource\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:63\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                                    R\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        P | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataActionResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataActionOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                        \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:26\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                                    R\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        P | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataFunctionResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataFunctionOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:100\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    S\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resource\n                                            \n                                                            ODataNavigationPropertyResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataQueryArgumentsOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        structuredTypeSchema\n                    \n                \n\n                \n                    \n                        getstructuredTypeSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity.ts:12\n                                \n                            \n                    \n                        \n                                The schema for the structured type.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ODataModel } from '../models/model';\nimport { EntityKey, ODataResource } from '../resources';\nimport { ODataBaseService } from './base';\n\nexport abstract class ODataEntityService extends ODataBaseService {\n  public abstract entity(key?: EntityKey): ODataResource;\n  public abstract attach>(value: M): void;\n\n  /**\n   * The schema for the structured type.\n   */\n  get structuredTypeSchema() {\n    return this.apiNameOrEntityType !== undefined\n      ? this.api.findStructuredTypeForType(this.apiNameOrEntityType)\n      : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySet.html":{"url":"classes/ODataEntitySet.html","title":"class - ODataEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entityType\n                            \n                            \n                                service\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntitySetConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntitySetConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:58\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:68\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:47\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:29\n\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:38\n\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntitySetConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntitySet extends ODataSchemaElement {\n  entityType: string;\n  service: { new (...params: any[]): any };\n  constructor(config: EntitySetConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entityType = config.entityType;\n    this.service = config.service;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityTypeKey.html":{"url":"classes/ODataEntityTypeKey.html","title":"class - ODataEntityTypeKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityTypeKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n  FieldParser,\n  EdmType,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string | EdmType;\n  private parser: Parser;\n  collection: boolean;\n  navigation: boolean;\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable ?? true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        EdmType.String,\n        EdmType.Date,\n        EdmType.TimeOfDay,\n        EdmType.DateTimeOffset,\n        EdmType.Guid,\n        EdmType.Binary,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === EdmType.Date) schema.format = 'date';\n      else if (this.type === EdmType.TimeOfDay) schema.format = 'time';\n      else if (this.type === EdmType.DateTimeOffset)\n        schema.format = 'date-time';\n      else if (this.type === EdmType.Guid)\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === EdmType.Binary) schema.contentEncoding = 'base64';\n      else if (this.type === EdmType.String && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      [\n        EdmType.Int64,\n        EdmType.Int32,\n        EdmType.Int16,\n        EdmType.Byte,\n        EdmType.SByte,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (\n      [EdmType.Decimal, EdmType.Double].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'number';\n    } else if ([EdmType.Boolean].indexOf(this.type as EdmType) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[] = [];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).forEach(([name, config]) => this.addField(name, config));\n  }\n\n  addField(\n    name: string,\n    config: StructuredTypeFieldConfig\n  ): ODataStructuredTypeFieldParser {\n    const field = new ODataStructuredTypeFieldParser(name, this, config);\n    this._fields.push(field);\n    return field;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  isSupertypeOf(type: string): boolean {\n    return (\n      this.isTypeOf(type) || this.children.some((c) => c.isSupertypeOf(type))\n    );\n  }\n\n  isOpenType() {\n    return this.open;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  isEntityType(): boolean {\n    return (\n      this._keys !== undefined ||\n      (this.parent !== undefined && this.parent.isEntityType())\n    );\n  }\n\n  isComplexType(): boolean {\n    return !this.isEntityType();\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {}\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag)\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {}\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumType.html":{"url":"classes/ODataEnumType.html","title":"class - ODataEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                unpack\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:63\n                        \n                    \n\n\n            \n                \n                        Deseialize the given value from the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to deserialize\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for deserialization\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     E\n\n                        \n                            \n                                Deserialized value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:83\n                        \n                    \n\n\n            \n                \n                        Encode the given value for the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to encode\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for encoding\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Encoded value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(enu: string | E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:44\n                        \n                    \n\n\n            \n                \n                        Find a field by name or value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                enu\n                                            \n                                                        string | E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name or value of the field\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The field with the given name or value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the fields of the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEnumTypeFieldParser[]\n\n                        \n                            \n                                The fields of the enum type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:53\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Map the fields of the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mapper\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that maps the value to the new value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The fields mapped by the mapper\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:73\n                        \n                    \n\n\n            \n                \n                        Serialize the given value for the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to serialize\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for serialization\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Serialized value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:58\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:68\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:47\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:29\n\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:38\n\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EnumTypeConfig, Parser, ParserOptions } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEnumTypeFieldParser, ODataEnumTypeParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataEnumType extends ODataSchemaElement {\n  parser: ODataEnumTypeParser;\n  members: { [name: string]: E } | { [value: number]: string };\n  constructor(config: EnumTypeConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.members = config.members;\n    this.parser = new ODataEnumTypeParser(\n      config,\n      schema.namespace,\n      schema.alias,\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({ options, parserForType, findOptionsForType });\n  }\n\n  /**\n   * Returns the fields of the enum type.\n   * @returns The fields of the enum type.\n   */\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return this.parser.fields(value);\n  }\n\n  /**\n   * Find a field by name or value.\n   * @param enu The name or value of the field\n   * @returns The field with the given name or value\n   */\n  field(enu: string | E) {\n    return this.parser.field(enu);\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => T) {\n    return this.parser.mapFields(mapper);\n  }\n\n  /**\n   * Deseialize the given value from the enum type.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): E {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the enum type.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: E, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the enum type.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: E, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  unpack(value: E) {\n    return this.parser.unpack(value);\n  }\n\n  pack(value: number[]) {\n    return this.parser.pack(value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeFieldParser.html":{"url":"classes/ODataEnumTypeFieldParser.html","title":"class - ODataEnumTypeFieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeFieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                value\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                titleize\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, field: EnumTypeFieldConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        EnumTypeFieldConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     E\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n  FieldParser,\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f),\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value)),\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue,\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0,\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toFlags(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this._fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0,\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeParser.html":{"url":"classes/ODataEnumTypeParser.html","title":"class - ODataEnumTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotatable\n            \n\n            \n                Implements\n            \n            \n                            FieldParser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _fields\n                            \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                flags\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                unpack\n                            \n                            \n                                validate\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: string, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     E\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(nameValue: string | E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nameValue\n                                            \n                                                        string | E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEnumTypeFieldParser[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:92\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    R\n                            \n                        \n                    \n\n            \n                \n                        Map the fields of the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mapper\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that maps the value to the new value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The fields mapped by the mapper\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:174\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     E\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:141\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:170\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(member: string | number, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [] | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n  FieldParser,\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f),\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value)),\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue,\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0,\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toFlags(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this._fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0,\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInMemoryCache.html":{"url":"classes/ODataInMemoryCache.html","title":"class - ODataInMemoryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInMemoryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/memory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/memory.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:29\n\n                        \n                    \n\n\n            \n                \n                        Restore the response from the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to get the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse | undefined\n\n                        \n                            \n                                The response from the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:14\n\n                        \n                    \n\n\n            \n                \n                        Store the response in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to store the response\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to store in the cache\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:76\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Build an entry from a payload and some options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataCacheEntry\n\n                        \n                            \n                                The entry to store in the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:93\n\n                        \n                    \n\n\n            \n                \n                        Build a key from store an entry in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                names\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The names of the entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The key for the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:159\n\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:138\n\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries that are matching with the given options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:126\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Return the payload from the cache if it exists and is not expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name of the entry\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                The payload of the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:189\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:224\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:178\n\n                        \n                    \n\n\n            \n                \n                        Using the request, handle the fetching of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request to fetch\n\n                                            \n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Observable of the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:168\n\n                        \n                    \n\n\n            \n                \n                        Check if the entry is expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            ODataCacheEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The cache entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Boolean indicating if the entry is expired\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:105\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Put some payload in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name for the entry\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:38\n\n                        \n                    \n\n\n            \n                \n                        Using the resource on the request build an array of string to identify the scope of the request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to build the scope\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the scope of the request\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:55\n\n                        \n                    \n\n\n            \n                \n                        Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to build the tags\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the tags of the response\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache } from './cache';\n\nexport class ODataInMemoryCache extends ODataCache {\n  constructor({ timeout }: { timeout?: number } = {}) {\n    super({ timeout });\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    let scope = this.scope(req);\n    let tags = this.tags(res);\n    this.put(req.cacheKey, res, {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    let scope = this.scope(req);\n    return this.get(req.cacheKey, { scope });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInStorageCache.html":{"url":"classes/ODataInStorageCache.html","title":"class - ODataInStorageCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInStorageCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                storage\n                            \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                flush\n                            \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                restore\n                            \n                            \n                                store\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        flush\n                        \n                    \n                \n            \n            \n                \n                        \n                    flush()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:54\n\n                        \n                    \n\n\n            \n                \n                        Flush the cache and clean the storage\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:79\n\n                        \n                    \n\n\n            \n                \n                        Restore the response from the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to get the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse | undefined\n\n                        \n                            \n                                The response from the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:64\n\n                        \n                    \n\n\n            \n                \n                        Store the response in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to store the response\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to store in the cache\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/storage.ts:45\n                        \n                    \n\n\n            \n                \n                        Restore the cache from the storage\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/storage.ts:35\n                        \n                    \n\n\n            \n                \n                        Store the cache in the storage\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:76\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Build an entry from a payload and some options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataCacheEntry\n\n                        \n                            \n                                The entry to store in the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:93\n\n                        \n                    \n\n\n            \n                \n                        Build a key from store an entry in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                names\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The names of the entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The key for the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:138\n\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries that are matching with the given options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:126\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Return the payload from the cache if it exists and is not expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name of the entry\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                The payload of the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:189\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:224\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:178\n\n                        \n                    \n\n\n            \n                \n                        Using the request, handle the fetching of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request to fetch\n\n                                            \n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Observable of the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:168\n\n                        \n                    \n\n\n            \n                \n                        Check if the entry is expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            ODataCacheEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The cache entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Boolean indicating if the entry is expired\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:105\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Put some payload in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name for the entry\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:38\n\n                        \n                    \n\n\n            \n                \n                        Using the resource on the request build an array of string to identify the scope of the request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to build the scope\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the scope of the request\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:55\n\n                        \n                    \n\n\n            \n                \n                        Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to build the tags\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the tags of the response\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries())),\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]'),\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJson(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJson(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ODataModule.html":{"url":"modules/ODataModule.html","title":"module - ODataModule","body":"\n                   \n\n\n\n\n    Modules\n    ODataModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ODataClient\n                        \n                        \n                            ODataServiceFactory\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(passedConfig: PassedInitialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/module.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                passedConfig\n                                            \n                                                            PassedInitialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig,\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParameterParser.html":{"url":"classes/ODataParameterParser.html","title":"class - ODataParameterParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParameterParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                collection\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                nullable\n                            \n                            \n                                    Private\n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                encode\n                            \n                            \n                                enum\n                            \n                            \n                                field\n                            \n                            \n                                isEdmType\n                            \n                            \n                                isEnumType\n                            \n                            \n                                isStructuredType\n                            \n                            \n                                serialize\n                            \n                            \n                                structured\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, parameter: Parameter)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameter\n                                                  \n                                                        \n                                                                        Parameter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enum\n                        \n                    \n                \n            \n            \n                \nenum()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:64\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataEnumTypeParser\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:79\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEdmType\n                        \n                    \n                \n            \n            \n                \nisEdmType()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnumType\n                        \n                    \n                \n            \n            \n                \nisEnumType()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:60\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStructuredType\n                        \n                    \n                \n            \n            \n                \nisStructuredType()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structured\n                        \n                    \n                \n            \n            \n                \nstructured()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataStructuredTypeParser\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T,\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`,\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter),\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegments.html":{"url":"classes/ODataPathSegments.html","title":"class - ODataPathSegments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/segments.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _segments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                find\n                            \n                            \n                                first\n                            \n                            \n                                get\n                            \n                            \n                                keys\n                            \n                            \n                                last\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                segments\n                            \n                            \n                                toJson\n                            \n                            \n                                toString\n                            \n                            \n                                types\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments?: ODataSegment[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:59\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataSegment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _segments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSegment[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:59\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(name: string, path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:170\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:136\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataPathSegments\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (segment: ODataSegment) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first\n                        \n                    \n                \n            \n            \n                \nfirst(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            (EntityKey | undefined)[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last\n                        \n                    \n                \n            \n            \n                \nlast(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:123\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        types\n                        \n                    \n                \n            \n            \n                \ntypes(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PATH_SEPARATOR } from '../../constants';\nimport { Parser, ParserOptions, PathSegment } from '../../types';\nimport { Objects } from '../../utils';\nimport { buildPathAndQuery, raw } from '../query';\nimport { EntityKey } from '../resource';\nimport { SegmentHandler } from './handlers';\n\nexport type ODataSegment = {\n  name: PathSegment;\n  path: string;\n  type?: string;\n  key?: any;\n  parameters?: any;\n};\n\nfunction pathSegmentsBuilder(\n  segment: ODataSegment,\n  escape: boolean = false,\n  parser?: Parser,\n  options?: ParserOptions,\n): [string, { [name: string]: any }] {\n  if (segment.name === PathSegment.function) {\n    let [path, params] = segment.parameters\n      ? buildPathAndQuery({\n          func: { [segment.path]: segment.parameters },\n          escape,\n        })\n      : buildPathAndQuery({ func: segment.path, escape });\n    if (path.startsWith(PATH_SEPARATOR)) {\n      path = path.slice(1);\n    }\n    // HACK: Remove parenthesis\n    if (\n      path.endsWith('()') &&\n      options?.nonParenthesisForEmptyParameterFunction\n    ) {\n      path = path.substring(0, path.length - 2);\n    }\n\n    return [path, params];\n  } else {\n    //TODO: Parser key\n    let key = segment.key;\n    // HACK: Check guid string\n    if (\n      typeof key === 'string' &&\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n        key,\n      )\n    ) {\n      key = raw(key);\n    }\n    let [path, params] = key ? buildPathAndQuery({ key, escape }) : ['', {}];\n    return [segment.path + path, params];\n  }\n}\n\nexport class ODataPathSegments {\n  private _segments: ODataSegment[];\n\n  constructor(segments?: ODataSegment[]) {\n    this._segments = segments || [];\n  }\n\n  pathAndParams({\n    escape,\n    parser,\n    options,\n  }: {\n    escape?: boolean;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): [string, { [name: string]: any }] {\n    const result = this._segments.reduce(\n      (acc, segment) => {\n        const [path, params] = pathSegmentsBuilder(\n          segment,\n          escape,\n          parser,\n          options,\n        );\n        acc.paths.push(path);\n        acc.params = Object.assign(acc.params, params);\n        return acc;\n      },\n      { paths: [] as string[], params: {} as { [name: string]: any } },\n    );\n    return [result.paths.join(PATH_SEPARATOR), result.params];\n  }\n\n  types({ key = false }: { key?: boolean } = {}): string[] {\n    return this.segments({ key })\n      .map((s) => s.type())\n      .filter((t) => t !== undefined) as string[];\n  }\n\n  keys(values?: (EntityKey | undefined)[]) {\n    const segments = this.segments({ key: true });\n    if (values !== undefined) {\n      segments.forEach((segment, index) => {\n        const key = values[index];\n        if (key === undefined) {\n          segment.clearKey();\n        } else {\n          segment.key(key);\n        }\n      });\n    }\n    return segments.map((s) => s.key() as EntityKey | undefined);\n  }\n\n  toString({ escape }: { escape?: boolean } = {}): string {\n    const [path, params] = this.pathAndParams({ escape });\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => value)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJson() {\n    return this._segments.map((s) => {\n      let json = {\n        name: s.name as string,\n        path: s.path,\n      } as any;\n      if (s.type !== undefined) json.type = s.type;\n      if (s.key !== undefined) json.key = s.key;\n      if (s.parameters !== undefined) json.parameters = s.parameters;\n      return json;\n    });\n  }\n\n  clone() {\n    const segments = Objects.clone(this._segments);\n    return new ODataPathSegments(segments);\n  }\n\n  find(predicate: (segment: ODataSegment) => boolean) {\n    //Backward Find\n    return [...this._segments].reverse().find(predicate);\n  }\n\n  segments({ key = false }: { key?: boolean } = {}) {\n    let segments = [...this._segments];\n    if (key)\n      segments = segments.filter(\n        (s) =>\n          [\n            PathSegment.entitySet,\n            PathSegment.navigationProperty,\n            PathSegment.property,\n          ].indexOf(s.name) !== -1,\n      );\n    return segments.map((s) => new SegmentHandler(s));\n  }\n\n  first({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[0] : undefined;\n  }\n\n  last({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[segments.length - 1] : undefined;\n  }\n\n  add(name: string, path: string) {\n    const segment = { name, path } as ODataSegment;\n    this._segments.push(segment);\n    return new SegmentHandler(segment);\n  }\n\n  get(name: string) {\n    let segment = this.find((s) => s.name === name);\n    if (segment === undefined)\n      throw Error(`No Segment for name ${name} was found`);\n    return new SegmentHandler(segment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegmentsHandler.html":{"url":"classes/ODataPathSegmentsHandler.html","title":"class - ODataPathSegmentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegmentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                entitySet\n                            \n                            \n                                function\n                            \n                            \n                                keys\n                            \n                            \n                                navigationProperty\n                            \n                            \n                                property\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments: ODataPathSegments)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataPathSegments\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n            \n                \naction()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            (EntityKey | undefined)[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigationProperty\n                        \n                    \n                \n            \n            \n                \nnavigationProperty()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PathSegment } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegment.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegment.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegment.action);\n  }\n  function() {\n    return this.segments.get(PathSegment.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegment.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegment.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPropertyAnnotations.html":{"url":"classes/ODataPropertyAnnotations.html","title":"class - ODataPropertyAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPropertyAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:49\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataPropertyAnnotations\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:57\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataPropertyAnnotations)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:41\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            ODataPropertyAnnotations\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataPropertyAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:12\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ODataMetadataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Partial\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:19\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptions.html":{"url":"classes/ODataQueryOptions.html","title":"class - ODataQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                clone\n                            \n                            \n                                expression\n                            \n                            \n                                has\n                            \n                            \n                                keep\n                            \n                            \n                                option\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                remove\n                            \n                            \n                                toJson\n                            \n                            \n                                toQueryArguments\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values?: Map | literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                        Map | literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:43\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:186\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:148\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n\n                        \n                            Returns :         ODataQueryOptions\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expression\n                        \n                    \n                \n            \n            \n                \nexpression(key: QueryOption, exp?: Expression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                exp\n                                            \n                                                            Expression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(key: QueryOption)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keep\n                        \n                    \n                \n            \n            \n                \nkeep(keys: QueryOption[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                            QueryOption[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n            \n                \noption(key: QueryOption, opts?: O)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:159\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        O\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(keys: QueryOption[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:169\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                            QueryOption[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:123\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toQueryArguments\n                        \n                    \n                \n            \n            \n                \ntoQueryArguments()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:131\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataQueryArguments\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  buildPathAndQuery,\n  Expand,\n  Filter,\n  OrderBy,\n  QueryCustomType,\n  raw,\n  Select,\n  Transform,\n} from './builder';\nimport {\n  ComputeExpression,\n  Expression,\n  FilterExpression,\n  OrderByExpression,\n  RenderableFactory,\n  SearchExpression,\n} from './expressions';\nimport { CountExpression } from './expressions/count';\nimport { ExpandExpression } from './expressions/expand';\nimport { SelectExpression } from './expressions/select';\nimport { ODataQueryOptionHandler } from './handlers';\n\nexport type ODataQueryArguments = {\n  [QueryOption.select]?: Select | SelectExpression | null;\n  [QueryOption.expand]?: Expand | ExpandExpression | null;\n  [QueryOption.compute]?: string | ComputeExpression | null;\n  [QueryOption.filter]?: Filter | FilterExpression | null;\n  [QueryOption.search]?: string | SearchExpression | null;\n  [QueryOption.transform]?: Transform | null;\n  [QueryOption.orderBy]?: OrderBy | OrderByExpression | null;\n  [QueryOption.top]?: number | null;\n  [QueryOption.skip]?: number | null;\n  [QueryOption.skiptoken]?: string | null;\n  [QueryOption.format]?: string | null;\n  [QueryOption.levels]?: number | 'max' | null;\n  [QueryOption.count]?: boolean | null;\n};\n\nexport class ODataQueryOptions {\n  values: Map;\n\n  constructor(values?: Map | { [name: string]: any }) {\n    if (!(values instanceof Map)) {\n      const entries = Object.entries(values || {}).map(([key, value]) => [\n        key,\n        RenderableFactory(value),\n      ]) as [QueryOption, any][];\n      values = new Map(entries);\n    }\n    this.values = values as Map;\n  }\n\n  // Params\n  pathAndParams({\n    escape,\n    parser,\n    options,\n  }: { escape?: boolean; parser?: Parser; options?: ParserOptions } = {}): [\n    string,\n    { [name: string]: any },\n  ] {\n    let aliases: QueryCustomType[] = [];\n    let queryOptions = [\n      QueryOption.select,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.compute,\n      QueryOption.transform,\n      QueryOption.orderBy,\n      QueryOption.top,\n      QueryOption.skip,\n      QueryOption.skiptoken,\n      QueryOption.expand,\n      QueryOption.format,\n      QueryOption.levels,\n      QueryOption.count,\n    ]\n      .filter((key) => !Types.isEmpty(this.values.get(key)))\n      .reduce((acc, key) => {\n        let value = this.values.get(key);\n        if (\n          Types.rawType(value).endsWith('Expression') ||\n          (Types.isArray(value) &&\n            value.some((v: any) => Types.rawType(v).endsWith('Expression')))\n        ) {\n          value = Types.isArray(value)\n            ? value.map((v: Expression) =>\n                Types.rawType(v).endsWith('Expression')\n                  ? raw(v.render({ aliases, escape, parser, options }))\n                  : v,\n              )\n            : raw(\n                (value as Expression).render({\n                  aliases,\n                  escape,\n                  parser,\n                  options,\n                }),\n              );\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    return buildPathAndQuery({ ...queryOptions, aliases, escape });\n  }\n\n  toString({\n    escape,\n    parser,\n  }: { escape?: boolean; parser?: Parser } = {}): string {\n    const [path, params] = this.pathAndParams({ escape, parser });\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => !Types.isEmpty(value))\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJson() {\n    return [...this.values.keys()].reduce((acc, key) => {\n      let value = this.values.get(key);\n      value = 'toJson' in value ? value.toJson() : value;\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  }\n\n  toQueryArguments(): ODataQueryArguments {\n    return {\n      select: this.values.get(QueryOption.select) || null,\n      expand: this.values.get(QueryOption.expand) || null,\n      transform: this.values.get(QueryOption.transform) || null,\n      compute: this.values.get(QueryOption.compute) || null,\n      search: this.values.get(QueryOption.search) || null,\n      filter: this.values.get(QueryOption.filter) || null,\n      orderBy: this.values.get(QueryOption.orderBy) || null,\n      top: this.values.get(QueryOption.top) || null,\n      skip: this.values.get(QueryOption.skip) || null,\n      skiptoken: this.values.get(QueryOption.skiptoken) || null,\n      levels: this.values.get(QueryOption.levels) || null,\n      count: this.values.get(QueryOption.count) || null,\n    } as ODataQueryArguments;\n  }\n\n  clone() {\n    return new ODataQueryOptions(Objects.clone(this.values));\n  }\n\n  // Set Renderable\n  expression(key: QueryOption, exp?: Expression) {\n    if (exp !== undefined) this.values.set(key, exp);\n    return this.values.get(key);\n  }\n\n  // Option Handler\n  option(key: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values.set(key, opts);\n    return new ODataQueryOptionHandler(this.values, key);\n  }\n\n  // Query Options tools\n  has(key: QueryOption) {\n    return this.values.has(key);\n  }\n\n  remove(...keys: QueryOption[]) {\n    [...this.values.keys()]\n      .filter((k) => keys.indexOf(k) !== -1)\n      .forEach((key) => {\n        this.values.delete(key);\n      });\n  }\n\n  keep(...keys: QueryOption[]) {\n    [...this.values.keys()]\n      .filter((k) => keys.indexOf(k) === -1)\n      .forEach((key) => {\n        this.values.delete(key);\n      });\n  }\n\n  // Clear\n  clear() {\n    this.values.clear();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataReferential.html":{"url":"classes/ODataReferential.html","title":"class - ODataReferential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataReferential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                property\n                            \n                            \n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n  FieldParser,\n  EdmType,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string | EdmType;\n  private parser: Parser;\n  collection: boolean;\n  navigation: boolean;\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable ?? true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        EdmType.String,\n        EdmType.Date,\n        EdmType.TimeOfDay,\n        EdmType.DateTimeOffset,\n        EdmType.Guid,\n        EdmType.Binary,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === EdmType.Date) schema.format = 'date';\n      else if (this.type === EdmType.TimeOfDay) schema.format = 'time';\n      else if (this.type === EdmType.DateTimeOffset)\n        schema.format = 'date-time';\n      else if (this.type === EdmType.Guid)\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === EdmType.Binary) schema.contentEncoding = 'base64';\n      else if (this.type === EdmType.String && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      [\n        EdmType.Int64,\n        EdmType.Int32,\n        EdmType.Int16,\n        EdmType.Byte,\n        EdmType.SByte,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (\n      [EdmType.Decimal, EdmType.Double].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'number';\n    } else if ([EdmType.Boolean].indexOf(this.type as EdmType) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[] = [];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).forEach(([name, config]) => this.addField(name, config));\n  }\n\n  addField(\n    name: string,\n    config: StructuredTypeFieldConfig\n  ): ODataStructuredTypeFieldParser {\n    const field = new ODataStructuredTypeFieldParser(name, this, config);\n    this._fields.push(field);\n    return field;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  isSupertypeOf(type: string): boolean {\n    return (\n      this.isTypeOf(type) || this.children.some((c) => c.isSupertypeOf(type))\n    );\n  }\n\n  isOpenType() {\n    return this.open;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  isEntityType(): boolean {\n    return (\n      this._keys !== undefined ||\n      (this.parent !== undefined && this.parent.isEntityType())\n    );\n  }\n\n  isComplexType(): boolean {\n    return !this.isEntityType();\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {}\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag)\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {}\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataRequest.html":{"url":"classes/ODataRequest.html","title":"class - ODataRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/request.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _body\n                            \n                            \n                                    Private\n                                    Readonly\n                                _headers\n                            \n                            \n                                    Private\n                                    Readonly\n                                _method\n                            \n                            \n                                    Private\n                                    Readonly\n                                _params\n                            \n                            \n                                    Private\n                                    Readonly\n                                _path\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                _responseType\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                bodyQueryOptions\n                            \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                fetchPolicy\n                            \n                            \n                                    Readonly\n                                observe\n                            \n                            \n                                    Readonly\n                                    Optional\n                                reportProgress\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                            \n                                    Readonly\n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                factory\n                            \n                            \n                                isBatch\n                            \n                            \n                                isFetch\n                            \n                            \n                                isMutate\n                            \n                            \n                                isQueryBody\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    responseType\n                                \n                                \n                                    path\n                                \n                                \n                                    method\n                                \n                                \n                                    body\n                                \n                                \n                                    params\n                                \n                                \n                                    headers\n                                \n                                \n                                    pathWithParams\n                                \n                                \n                                    url\n                                \n                                \n                                    urlWithParams\n                                \n                                \n                                    cacheKey\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | null\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpHeaders\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpParams\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        _responseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"arraybuffer\" | \"blob\" | \"json\" | \"text\" | \"value\" | \"property\" | \"entity\" | \"entities\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOption[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpContext\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        observe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"events\" | \"response\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reportProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                        \n                    factory(api: ODataApi, method: string, resource: ODataResource, options)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:225\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                api\n                                            \n                                                            ODataApi\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataRequest\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBatch\n                        \n                    \n                \n            \n            \n                \nisBatch()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:345\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFetch\n                        \n                    \n                \n            \n            \n                \nisFetch()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:349\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMutate\n                        \n                    \n                \n            \n            \n                \nisMutate()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:353\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isQueryBody\n                        \n                    \n                \n            \n            \n                \nisQueryBody()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        responseType\n                    \n                \n\n                \n                    \n                        getresponseType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:276\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n                \n                    \n                        getpath()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:285\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        method\n                    \n                \n\n                \n                    \n                        getmethod()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:289\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:293\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:302\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n                \n                    \n                        getheaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:311\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathWithParams\n                    \n                \n\n                \n                    \n                        getpathWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:317\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:323\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        urlWithParams\n                    \n                \n\n                \n                    \n                        geturlWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:327\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        cacheKey\n                    \n                \n\n                \n                    \n                        getcacheKey()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:331\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { ODataApi } from '../api';\nimport {\n  $BATCH,\n  $QUERY,\n  ACCEPT,\n  IF_MATCH_HEADER,\n  IF_NONE_MATCH_HEADER,\n  PREFER,\n  TEXT_PLAIN,\n} from '../constants';\nimport { FetchPolicy, ParserOptions, QueryOption } from '../types';\nimport { Http, Types } from '../utils';\nimport { ODataResource } from './resource';\nimport { ODataOptions } from './types';\n\nexport class ODataRequest {\n  readonly api: ODataApi;\n  readonly observe: 'events' | 'response';\n  readonly context?: HttpContext;\n  readonly reportProgress?: boolean;\n  readonly withCredentials?: boolean;\n  readonly bodyQueryOptions: QueryOption[];\n  readonly fetchPolicy:\n    | 'cache-first'\n    | 'cache-and-network'\n    | 'network-only'\n    | 'no-cache'\n    | 'cache-only';\n  readonly resource: ODataResource;\n  private readonly _responseType?:\n    | 'arraybuffer'\n    | 'blob'\n    | 'json'\n    | 'text'\n    | 'value'\n    | 'property'\n    | 'entity'\n    | 'entities';\n  private readonly _method: string;\n  private readonly _body: any | null;\n  private readonly _headers: HttpHeaders;\n  private readonly _params: HttpParams;\n  private readonly _path: string;\n\n  constructor(init: {\n    method: string;\n    api: ODataApi;\n    resource: ODataResource;\n    body: any;\n    observe: 'events' | 'response';\n    context?: HttpContext;\n    etag?: string;\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n    params?:\n      | HttpParams\n      | {\n          [param: string]:\n            | string\n            | number\n            | boolean\n            | ReadonlyArray;\n        };\n    responseType?:\n      | 'arraybuffer'\n      | 'blob'\n      | 'json'\n      | 'text'\n      | 'value'\n      | 'property'\n      | 'entity'\n      | 'entities';\n    fetchPolicy?: FetchPolicy;\n    parserOptions?: ParserOptions;\n    withCredentials?: boolean;\n    bodyQueryOptions?: QueryOption[];\n  }) {\n    this._method = init.method;\n    this.resource = init.resource;\n\n    this.api = init.api;\n    this.reportProgress = init.reportProgress;\n    this.observe = init.observe;\n    this.context = init.context;\n\n    // Response Type\n    this._responseType = init.responseType;\n\n    // The Body\n    this._body = init.body !== undefined ? init.body : null;\n    if (this._body !== null)\n      this._body = this.resource.serialize(this._body, init.parserOptions);\n\n    this.withCredentials =\n      init.withCredentials === undefined\n        ? this.api.options.withCredentials\n        : init.withCredentials;\n    this.fetchPolicy = init.fetchPolicy || this.api.options.fetchPolicy;\n    this.bodyQueryOptions = [\n      ...(this.api.options.bodyQueryOptions || []),\n      ...(init.bodyQueryOptions || []),\n    ];\n\n    // The Path and Params from resource\n    const [resourcePath, resourceParams] = this.resource.pathAndParams(\n      init.parserOptions,\n    );\n    this._path = resourcePath;\n\n    //#region Headers\n    const customHeaders: { [name: string]: string | string[] } = {};\n    if (typeof init.etag === 'string') {\n      if (\n        this.api.options.etag.ifMatch &&\n        ['PUT', 'PATCH', 'DELETE'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_MATCH_HEADER] = init.etag;\n      else if (\n        this.api.options.etag.ifNoneMatch &&\n        ['GET'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_NONE_MATCH_HEADER] = init.etag;\n    }\n\n    const accept = [];\n    // Metadata\n    if (this.api.options.accept?.metadata !== undefined)\n      accept.push(`odata.metadata=${this.api.options.accept?.metadata}`);\n    // IEEE754\n    if (this.api.options.accept?.ieee754Compatible !== undefined)\n      accept.push(\n        `IEEE754Compatible=${this.api.options.accept?.ieee754Compatible}`,\n      );\n    // streaming\n    if (this.api.options.accept?.streaming !== undefined)\n      accept.push(`streaming=${this.api.options.accept?.streaming}`);\n    // ExponentialDecimals\n    if (this.api.options.accept?.exponentialDecimals !== undefined)\n      accept.push(\n        `ExponentialDecimals=${this.api.options.accept?.exponentialDecimals}`,\n      );\n    if (accept.length > 0)\n      customHeaders[ACCEPT] = [\n        `application/json;${accept.join(';')}`,\n        'text/plain',\n        '*/*',\n      ];\n\n    const prefer = [];\n    // Return\n    if (\n      this.api.options.prefer?.return !== undefined &&\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1\n    )\n      prefer.push(`return=${this.api.options.prefer?.return}`);\n    // MaxPageSize\n    if (\n      this.api.options.prefer?.maxPageSize !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxPageSize}`);\n    // Annotations\n    if (\n      this.api.options.prefer?.includeAnnotations !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(\n        `odata.include-annotations=${this.api.options.prefer?.includeAnnotations}`,\n      );\n    // Omit Null Values\n    if (\n      this.api.options.prefer?.omitNullValues === true &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`omit-values=nulls`);\n    // Continue on Error\n    if (\n      this.api.options.prefer?.continueOnError === true &&\n      ['POST'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.continue-on-error`);\n    if (prefer.length > 0) customHeaders[PREFER] = prefer;\n    this._headers = Http.mergeHttpHeaders(\n      this.api.options.headers,\n      customHeaders,\n      init.headers || {},\n    );\n    //#endregion\n\n    //#region Params\n    const customParams: { [name: string]: string | string[] } = {};\n    if (\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1 &&\n      '$select' in resourceParams\n    ) {\n      customParams['$select'] = resourceParams['$select'];\n    }\n    if (['POST'].indexOf(this._method) !== -1 && '$expand' in resourceParams) {\n      customParams['$expand'] = resourceParams['$expand'];\n    }\n    if (['GET'].indexOf(this._method) !== -1) {\n      Object.assign(customParams, resourceParams);\n    }\n\n    const params = Http.mergeHttpParams(\n      this.api.options.params,\n      customParams,\n      init.params || {},\n    );\n\n    this._params =\n      this._responseType === 'entity'\n        ? Http.withoutHttpParams(params, [\n            '$filter',\n            '$orderby',\n            '$count',\n            '$skip',\n            '$top',\n          ])\n        : params;\n    //#endregion\n  }\n\n  static factory(\n    api: ODataApi,\n    method: string,\n    resource: ODataResource,\n    options: ODataOptions & {\n      body?: any;\n      etag?: string;\n      responseType?:\n        | 'arraybuffer'\n        | 'blob'\n        | 'json'\n        | 'text'\n        | 'value'\n        | 'property'\n        | 'entity'\n        | 'entities';\n      observe: 'events' | 'response';\n      withCount?: boolean;\n      bodyQueryOptions?: QueryOption[];\n    },\n  ) {\n    const apiOptions = api.options;\n    let params = options.params || {};\n    if (options.withCount) {\n      params = Http.mergeHttpParams(params, apiOptions.helper.countParam());\n    }\n\n    let etag = options.etag;\n    if (etag === undefined && Types.isPlainObject(options.body)) {\n      etag = apiOptions.helper.etag(options.body);\n    }\n\n    return new ODataRequest({\n      method,\n      etag,\n      api,\n      resource,\n      params,\n      context: options.context,\n      body: options.body,\n      observe: options.observe,\n      headers: options.headers,\n      reportProgress: options.reportProgress,\n      responseType: options.responseType,\n      fetchPolicy: options.fetchPolicy,\n      parserOptions: options.parserOptions,\n      withCredentials: options.withCredentials,\n      bodyQueryOptions: options.bodyQueryOptions,\n    });\n  }\n\n  get responseType(): 'arraybuffer' | 'blob' | 'json' | 'text' {\n    return this._responseType &&\n      ['property', 'entity', 'entities'].indexOf(this._responseType) !== -1\n      ? 'json'\n      : this._responseType === 'value'\n      ? 'text'\n      : this._responseType;\n  }\n\n  get path() {\n    return this.isQueryBody() ? `${this._path}/${$QUERY}` : this._path;\n  }\n\n  get method() {\n    return this.isQueryBody() ? 'POST' : this._method;\n  }\n\n  get body() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`),\n        )[1].toString()\n      : this._body;\n  }\n\n  get params() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`),\n        )[0]\n      : this._params;\n  }\n\n  get headers() {\n    return this.isQueryBody()\n      ? Http.mergeHttpHeaders(this._headers, { CONTENT_TYPE: TEXT_PLAIN })\n      : this._headers;\n  }\n\n  get pathWithParams() {\n    return this.params.keys().length > 0\n      ? `${this.path}?${this.params}`\n      : this.path;\n  }\n\n  get url() {\n    return `${this.api.serviceRootUrl}${this.path}`;\n  }\n\n  get urlWithParams() {\n    return `${this.api.serviceRootUrl}${this.pathWithParams}`;\n  }\n\n  get cacheKey() {\n    return this._params.keys().length > 0\n      ? `${this._path}?${this._params}`\n      : this._path;\n  }\n\n  isQueryBody() {\n    return (\n      this._method === 'GET' &&\n      this.bodyQueryOptions.length > 0 &&\n      this.bodyQueryOptions.some((name) => this._params.has(`$${name}`))\n    );\n  }\n\n  isBatch() {\n    return this.path.endsWith($BATCH);\n  }\n\n  isFetch() {\n    return ['GET'].indexOf(this._method) !== -1;\n  }\n\n  isMutate() {\n    return ['PUT', 'PATCH', 'POST', 'DELETE'].indexOf(this._method) !== -1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponse.html":{"url":"classes/ODataResponse.html","title":"class - ODataResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/response.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Response\n\n            \n\n            \n                Extends\n            \n            \n                            HttpResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _annotations\n                            \n                            \n                                    Private\n                                    Optional\n                                _context\n                            \n                            \n                                    Private\n                                    Optional\n                                _options\n                            \n                            \n                                    Private\n                                    Optional\n                                _payload\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entities\n                            \n                            \n                                entity\n                            \n                            \n                                    Static\n                                fromHttpResponse\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                property\n                            \n                            \n                                toJson\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    payload\n                                \n                                \n                                    context\n                                \n                                \n                                    annotations\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResponseOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n            \n                \nentities()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:202\n                        \n                    \n\n\n            \n                \n                        Handle the response body as entities\n\n\n                        \n                            Returns :         ODataEntities\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:178\n                        \n                    \n\n\n            \n                \n                        Handle the response body as an entity\n\n\n                        \n                            Returns :         ODataEntity\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromHttpResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromHttpResponse(req: ODataRequest, res: HttpResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:47\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            HttpResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(req: ODataRequest, json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:59\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:220\n                        \n                    \n\n\n            \n                \n                        Handle the response body as a property\n\n\n                        \n                            Returns :         ODataProperty\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { body: any; headers: any; status: any; statusText: any; url: any; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:247\n                        \n                    \n\n\n            \n                \n                        Handle the response body as a value\n\n\n                        \n                            Returns :     T | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:94\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        payload\n                    \n                \n\n                \n                    \n                        getpayload()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:135\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:146\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        annotations\n                    \n                \n\n                \n                    \n                        getannotations()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:156\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  ODataEntityAnnotations,\n  ODataEntitiesAnnotations,\n  ODataPropertyAnnotations,\n} from './annotations';\nimport { Types } from '../../utils/types';\nimport { ODataResource } from '../resource';\nimport { ODataEntities, ODataEntity, ODataProperty } from './types';\nimport {\n  APPLICATION_JSON,\n  ODATA_VERSION_HEADERS,\n  CONTENT_TYPE,\n  CACHE_CONTROL,\n  LOCATION_HEADER,\n  ETAG_HEADERS,\n  ODATA_ENTITYID_HEADERS,\n  PREFERENCE_APPLIED,\n} from '../../constants';\nimport { ODataApi } from '../../api';\nimport { ODataRequest } from '../request';\nimport { ODataResponseOptions } from './options';\nimport { Http } from '../../utils/http';\nimport { ODataContext } from '../../helper';\n\n/**\n * OData Response\n */\nexport class ODataResponse extends HttpResponse {\n  readonly api: ODataApi;\n  readonly resource: ODataResource;\n\n  constructor(init: {\n    api: ODataApi;\n    resource: ODataResource;\n    body: T | null;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n    url?: string;\n  }) {\n    super(init);\n    this.api = init.api;\n    this.resource = init.resource;\n  }\n\n  static fromHttpResponse(req: ODataRequest, res: HttpResponse) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: res.body,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n      url: res.url || undefined,\n    });\n  }\n\n  static fromJson(\n    req: ODataRequest,\n    json: {\n      body: T | null;\n      headers: { [name: string]: string | string[] };\n      status: number;\n      statusText: string;\n      url: string | null;\n    },\n  ) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: json.body,\n      headers: new HttpHeaders(json.headers),\n      status: json.status,\n      statusText: json.statusText,\n      url: json.url || undefined,\n    });\n  }\n\n  toJson() {\n    return {\n      body: this.body,\n      headers: this.headers\n        .keys()\n        .map((name) => ({ [name]: this.headers.getAll(name) || [] }))\n        .reduce((acc, header) => Object.assign(acc, header), {}),\n      status: this.status,\n      statusText: this.statusText,\n      url: this.url,\n    };\n  }\n\n  private _options?: ODataResponseOptions;\n  get options(): ODataResponseOptions {\n    if (this._options === undefined) {\n      this._options = new ODataResponseOptions(this.api.options.parserOptions);\n      const contentType = this.headers.get(CONTENT_TYPE);\n      if (contentType && contentType.indexOf(APPLICATION_JSON) !== -1) {\n        const features = contentType\n          .split(',')\n          .find((p) => p.startsWith(APPLICATION_JSON)) as string;\n        this._options.setFeatures(features);\n      }\n      const headerKey = Http.resolveHeaderKey(\n        this.headers,\n        ODATA_VERSION_HEADERS,\n      );\n      if (headerKey) {\n        const version = (this.headers.get(headerKey) || '').replace(\n          /\\;/g,\n          '',\n        ) as '2.0' | '3.0' | '4.0';\n        this._options.setVersion(version);\n      }\n\n      const preferenceApplied = this.headers.get(PREFERENCE_APPLIED);\n      if (preferenceApplied) {\n        this._options.setPreferenceApplied(preferenceApplied);\n      }\n\n      const location = this.headers.get(LOCATION_HEADER);\n      if (location) {\n        this._options.setLocation(location);\n      }\n\n      const cacheControl = this.headers.get(CACHE_CONTROL);\n      if (cacheControl) {\n        this._options.setCache(cacheControl);\n      }\n    }\n    return this._options;\n  }\n\n  private _payload?: any;\n  get payload() {\n    if (this._payload === undefined) {\n      this._payload =\n        this.body && this.options.version === '2.0'\n          ? (this.body)['d']\n          : this.body;\n    }\n    return this._payload;\n  }\n\n  private _context?: any;\n  get context(): ODataContext {\n    if (this._context === undefined) {\n      this._context = this.options.helper.context(\n        Types.isPlainObject(this.payload) ? this.payload : {},\n      );\n    }\n    return this._context;\n  }\n\n  private _annotations?: Map;\n  get annotations(): Map {\n    if (this._annotations === undefined) {\n      const options = this.options;\n      this._annotations = options.helper.annotations(this.payload || {});\n      let key = Http.resolveHeaderKey(this.headers, ETAG_HEADERS);\n      if (key) {\n        const etag = this.headers.get(key);\n        if (etag) this._annotations.set(options.helper.ODATA_ETAG, etag);\n      }\n      key = Http.resolveHeaderKey(this.headers, ODATA_ENTITYID_HEADERS);\n      if (key) {\n        const entityId = this.headers.get(key);\n        if (entityId) this._annotations.set(options.helper.ODATA_ID, entityId);\n      }\n    }\n    return this._annotations;\n  }\n\n  /**\n   * Handle the response body as an entity\n   * @returns\n   */\n  entity(): ODataEntity {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntityAnnotations(\n      options.helper,\n      this.annotations,\n      this.context,\n    );\n    const data = payload ? annots.data(payload) : null;\n    let entity = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (entity !== null)\n      entity = this.resource.deserialize(entity, options) as T;\n    return { entity, annots };\n  }\n\n  /**\n   * Handle the response body as entities\n   * @returns\n   */\n  entities(): ODataEntities {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntitiesAnnotations(\n      options.helper,\n      this.annotations,\n      this.context,\n    );\n    let entities = payload ? annots.data(payload) : null;\n    if (entities !== null)\n      entities = this.resource.deserialize(entities, options) as T[];\n    return { entities, annots };\n  }\n\n  /**\n   * Handle the response body as a property\n   * @returns\n   */\n  property(): ODataProperty {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataPropertyAnnotations(\n      options.helper,\n      this.annotations,\n      this.context,\n    );\n    const data = payload ? (annots.data(payload) as T) : null;\n    let property = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(\n            data as { [name: string]: any },\n            this.api.options.stripMetadata,\n          )\n        : data\n    ) as T | null;\n\n    if (property !== null)\n      property = this.resource.deserialize(property, options) as T;\n    return { property, annots };\n  }\n\n  /**\n   * Handle the response body as a value\n   * @returns\n   */\n  value(): T | null {\n    const options = this.options;\n    const payload = this.payload;\n    let value = (\n      payload !== null && Types.isPlainObject(payload)\n        ? options.helper.attributes(payload, this.api.options.stripMetadata)\n        : payload\n    ) as T | null;\n\n    if (value !== null) value = this.resource.deserialize(value, options) as T;\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponseOptions.html":{"url":"classes/ODataResponseOptions.html","title":"class - ODataResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ResponseOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cacheability\n                            \n                            \n                                    Optional\n                                ieee754Compatible\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                maxAge\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                streaming\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                setCache\n                            \n                            \n                                setFeatures\n                            \n                            \n                                setLocation\n                            \n                            \n                                setPreferenceApplied\n                            \n                            \n                                setVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ParserOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ParserOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cacheability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ieee754Compatible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        streaming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataResponseOptions\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCache\n                        \n                    \n                \n            \n            \n                \nsetCache(cacheControl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cacheControl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFeatures\n                        \n                    \n                \n            \n            \n                \nsetFeatures(features: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                features\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLocation\n                        \n                    \n                \n            \n            \n                \nsetLocation(location: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                location\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPreferenceApplied\n                        \n                    \n                \n            \n            \n                \nsetPreferenceApplied(preference: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                preference\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVersion\n                        \n                    \n                \n            \n            \n                \nsetVersion(version: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                version\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  CacheCacheability,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  ResponseOptions,\n} from '../../types';\nimport {\n  DEFAULT_VERSION,\n  MAX_AGE,\n  VERSION_2_0,\n  VERSION_3_0,\n  VERSION_4_0,\n} from '../../constants';\n\nimport { ODataHelper } from '../../helper';\n\nexport class ODataResponseOptions implements ResponseOptions {\n  version: ODataVersion;\n  streaming?: boolean;\n  // OData\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  // Location\n  location?: string;\n  // Cache\n  cacheability?: 'public' | 'private' | 'no-cache' | 'no-store';\n  maxAge?: number;\n\n  constructor(config: ParserOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n\n  clone() {\n    return new ODataResponseOptions(this);\n  }\n\n  setFeatures(features: string) {\n    features.split(';').forEach((o) => {\n      let [k, v] = o.split('=');\n      switch (k.trim()) {\n        case 'odata.metadata':\n          this.metadata = v as ODataMetadataType;\n          break;\n        case 'odata.streaming':\n          this.streaming = v == 'true';\n          break;\n        case 'IEEE754Compatible':\n          this.ieee754Compatible = v == 'true';\n          break;\n      }\n    });\n  }\n\n  setVersion(version: string) {\n    const value = version.replace(/\\;/g, '').trim();\n    if ([VERSION_2_0, VERSION_3_0, VERSION_4_0].indexOf(value) !== -1)\n      this.version = value as ODataVersion;\n  }\n\n  setLocation(location: string) {\n    // TODO: resolve location?\n    this.location = location;\n  }\n\n  setPreferenceApplied(preference: string) {\n    preference.split(',').forEach((prefer) => {\n      // TODO: resolve preference\n    });\n  }\n\n  setCache(cacheControl: string) {\n    cacheControl.split(',').forEach((directive) => {\n      if (directive.startsWith(MAX_AGE)) {\n        let maxAge = Number(directive.split('=')[1]);\n        if (!Number.isNaN(maxAge)) this.maxAge = maxAge;\n      }\n      if (\n        ['public', 'private', 'no-cache', 'no-store'].indexOf(directive) !== -1\n      ) {\n        this.cacheability = directive as CacheCacheability;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchema.html":{"url":"classes/ODataSchema.html","title":"class - ODataSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                api\n                            \n                            \n                                callables\n                            \n                            \n                                containers\n                            \n                            \n                                entities\n                            \n                            \n                                enums\n                            \n                            \n                                namespace\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                    Public\n                                findCallableForType\n                            \n                            \n                                    Public\n                                findEntitySetForType\n                            \n                            \n                                    Public\n                                findEnumTypeForType\n                            \n                            \n                                    Public\n                                findStructuredTypeForType\n                            \n                            \n                                isNamespaceOf\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySets\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: SchemaConfig, api: ODataApi)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        ODataApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callables\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityContainer[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findCallableForType\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCallableForType(type: string, bindingType?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:66\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                bindingType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findEntitySetForType\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEntitySetForType(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findEnumTypeForType\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEnumTypeForType(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findStructuredTypeForType\n                        \n                    \n                \n            \n            \n                \n                        \n                    findStructuredTypeForType(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:60\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNamespaceOf\n                        \n                    \n                \n            \n            \n                \nisNamespaceOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySets\n                    \n                \n\n                \n                    \n                        getentitySets()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/schema.ts:46\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataApi } from '../api';\nimport { Parser, ParserOptions, SchemaConfig } from '../types';\nimport { OData } from '../utils/odata';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataCallable } from './callable';\nimport { ODataEntityContainer } from './entity-container';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataEnumType } from './enum-type';\nimport { ODataStructuredType } from './structured-type';\n\nexport class ODataSchema extends ODataAnnotatable {\n  api: ODataApi;\n  namespace: string;\n  alias?: string;\n  enums: ODataEnumType[];\n  entities: ODataStructuredType[];\n  callables: ODataCallable[];\n  containers: ODataEntityContainer[];\n\n  constructor(config: SchemaConfig, api: ODataApi) {\n    super(config);\n    this.api = api;\n    this.namespace = config.namespace;\n    this.alias = config.alias;\n    this.enums = (config.enums || []).map(\n      (config) => new ODataEnumType(config, this),\n    );\n    this.entities = (config.entities || []).map(\n      (config) => new ODataStructuredType(config, this),\n    );\n    this.callables = OData.mergeCallableParameters(config.callables || []).map(\n      (config) => new ODataCallable(config, this),\n    );\n    this.containers = (config.containers || []).map(\n      (config) => new ODataEntityContainer(config, this),\n    );\n  }\n\n  isNamespaceOf(type: string) {\n    return (\n      type.startsWith(this.namespace) ||\n      (this.alias && type.startsWith(this.alias))\n    );\n  }\n\n  get entitySets() {\n    return this.containers.reduce(\n      (acc, container) => [...acc, ...container.entitySets],\n      [] as ODataEntitySet[],\n    );\n  }\n\n  //#region Find for Type\n  public findEnumTypeForType(type: string) {\n    return this.enums.find((e) => e.isTypeOf(type)) as\n      | ODataEnumType\n      | undefined;\n  }\n\n  public findStructuredTypeForType(type: string) {\n    return this.entities.find((e) => e.isTypeOf(type)) as\n      | ODataStructuredType\n      | undefined;\n  }\n\n  public findCallableForType(type: string, bindingType?: string) {\n    const bindingStructuredType =\n      bindingType !== undefined\n        ? this.api.findStructuredTypeForType(bindingType)\n        : undefined;\n    return this.callables.find((c) => {\n      const isCallableType = c.isTypeOf(type);\n      const callableBindingType = c.binding()?.type;\n      const callableBindingStructuredType =\n        callableBindingType !== undefined\n          ? this.api.findStructuredTypeForType(callableBindingType)\n          : undefined;\n      return (\n        isCallableType &&\n        (!bindingStructuredType ||\n          (callableBindingStructuredType &&\n            bindingStructuredType.isSubtypeOf(callableBindingStructuredType)))\n      );\n    }) as ODataCallable | undefined;\n  }\n\n  public findEntitySetForType(type: string) {\n    return this.entitySets.find((e) => e.isTypeOf(type));\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    // Configure Enums\n    this.enums.forEach((enu) =>\n      enu.configure({ options, parserForType, findOptionsForType }),\n    );\n    // Configure Entities\n    this.entities.forEach((config) =>\n      config.configure({ options, parserForType, findOptionsForType }),\n    );\n    // Configure callables\n    this.callables.forEach((callable) =>\n      callable.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchemaElement.html":{"url":"classes/ODataSchemaElement.html","title":"class - ODataSchemaElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchemaElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/element.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:58\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:68\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:47\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:29\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:38\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/element.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\nimport { Strings } from '../utils';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataSchemaElement extends ODataAnnotatable {\n  name: string;\n  schema: ODataSchema;\n\n  constructor(\n    config: { annotations?: AnnotationConfig[]; name: string },\n    schema: ODataSchema,\n  ) {\n    super(config);\n    this.schema = schema;\n    this.name = config.name;\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  /**\n   * Returns a full type of the structured type including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string): boolean {\n    var names = [`${this.schema.namespace}.${this.name}`];\n    if (this.schema.alias) names.push(`${this.schema.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a subtype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSubtypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a supertype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSupertypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ODataServiceFactory.html":{"url":"injectables/ODataServiceFactory.html","title":"injectable - ODataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ODataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entitySet\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet(entitySetName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/factory.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Factory method to create an entity set service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entitySetName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the entity set.\n\n                                            \n                                        \n                                        \n                                                apiNameOrEntityType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Name of the API or the type of the entity.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntitySetService\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton(singletonName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/factory.ts:30\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Factory method to create a singleton service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                singletonName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the singleton.\n\n                                            \n                                        \n                                        \n                                                apiNameOrEntityType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Name of the API or the type of the entity.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataSingletonService\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ODataClient } from '../client';\nimport { ODataEntitySetService } from './entity-set';\nimport { ODataSingletonService } from './singleton';\n\n@Injectable()\nexport class ODataServiceFactory {\n  constructor(protected client: ODataClient) {}\n\n  /**\n   * Factory method to create an entity set service.\n   * @param entitySetName Name of the entity set.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  entitySet(\n    entitySetName: string,\n    apiNameOrEntityType?: string,\n  ): ODataEntitySetService {\n    return new (class extends ODataEntitySetService {})(\n      this.client,\n      entitySetName,\n      apiNameOrEntityType,\n    );\n  }\n\n  /** Factory method to create a singleton service.\n   * @param singletonName Name of the singleton.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  singleton(\n    singletonName: string,\n    apiNameOrEntityType?: string,\n  ): ODataSingletonService {\n    return new (class extends ODataSingletonService {})(\n      this.client,\n      singletonName,\n      apiNameOrEntityType,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSingletonService.html":{"url":"classes/ODataSingletonService.html","title":"class - ODataSingletonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSingletonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Singleton Service\nwww.odata.org/getting-started/advanced-tutorial/#singleton\n\n            \n\n            \n                Extends\n            \n            \n                            ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    singletonSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                        \n                    attach(model: M)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataEntityService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataEntityService:27\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    M\n                            \n                        \n                    \n\n            \n                \n                        Attach an existing model to this service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                        M\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The model to attach.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                        \n                    entity()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataEntityService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataEntityService:19\n\n                        \n                    \n\n\n            \n                \n                        Get the entity resource for this service.\n\n\n                        \n                            Returns :         ODataSingletonResource\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                        \n                    patch(attrs: Partial, options?)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/singleton.ts:58\n                        \n                    \n\n\n            \n                \n                        Patch the singleton entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                attrs\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The attributes for the entity.\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The options for the request.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(attrs: Partial, options?)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/singleton.ts:44\n                        \n                    \n\n\n            \n                \n                        Update the singleton entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                attrs\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The attributes for the entity.\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The options for the request.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:63\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                                    R\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        P | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataActionResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataActionOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                        \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:26\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                                    R\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        P | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataFunctionResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataFunctionOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:100\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    S\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resource\n                                            \n                                                            ODataNavigationPropertyResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataQueryArgumentsOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        singletonSchema\n                    \n                \n\n                \n                    \n                        getsingletonSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/singleton.ts:34\n                                \n                            \n                    \n                        \n                                The schema for the singleton.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport type { ODataModel } from '../models/model';\nimport type {\n  ODataEntity,\n  ODataOptions,\n  ODataSingletonResource,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\n/**\n * OData Singleton Service\n * www.odata.org/getting-started/advanced-tutorial/#singleton\n */\nexport class ODataSingletonService extends ODataEntityService {\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(): ODataSingletonResource {\n    return this.client.singleton(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M) {\n    model.attach(this.entity());\n  }\n\n  /**\n   * The schema for the singleton.\n   */\n  get singletonSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Update the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string },\n  ): Observable> {\n    const res = this.entity();\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public patch(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string },\n  ): Observable> {\n    const res = this.entity();\n    return res.modify(attrs, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: Normalize)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:459\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        Normalize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:541\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Operator\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:481\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:489\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:548\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:470\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         { $type: any; op: string; values: any; normalize: Normalize; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:466\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByExpression.html":{"url":"classes/OrderByExpression.html","title":"class - OrderByExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                ascending\n                            \n                            \n                                clone\n                            \n                            \n                                descending\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                    Static\n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:56\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ascending\n                        \n                    \n                \n            \n            \n                \nascending(field: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:120\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         OrderByExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descending\n                        \n                    \n                \n            \n            \n                \ndescending(field: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:95\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        orderBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    orderBy(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void, current?: OrderByExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:69\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                            OrderByExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:101\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:90\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:51\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:65\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, FieldFactory, Renderable, RenderableFactory } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      field: this.field.toJson(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Readonly>;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByExpression';\n  }\n\n  static orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new OrderByExpression(),\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): OrderByExpression {\n    return new OrderByExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByField.html":{"url":"classes/OrderByField.html","title":"class - OrderByField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: Renderable, order: \"asc\" | \"desc\")\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        order\n                                                  \n                                                        \n                                                                    \"asc\" | \"desc\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         OrderByField\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; field: any; order: \"asc\" | \"desc\"; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, FieldFactory, Renderable, RenderableFactory } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      field: this.field.toJson(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Readonly>;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByExpression';\n  }\n\n  static orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new OrderByExpression(),\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): OrderByExpression {\n    return new OrderByExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Parser.html":{"url":"interfaces/Parser.html","title":"interface - Parser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Parser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deserialize\n                                    \n                                \n                                \n                                    \n                                        encode\n                                    \n                                \n                                \n                                    \n                                        serialize\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        ParserOptions | StructuredTypeFieldOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        ParserOptions | StructuredTypeFieldOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        ParserOptions | StructuredTypeFieldOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParserOptions.html":{"url":"interfaces/ParserOptions.html","title":"interface - ParserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exponentialDecimals\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ieee754Compatible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            streaming\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exponentialDecimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exponentialDecimals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ieee754Compatible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ieee754Compatible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        streaming\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        streaming:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PassedInitialConfig.html":{"url":"interfaces/PassedInitialConfig.html","title":"interface - PassedInitialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PassedInitialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            config\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:         ApiConfig | ApiConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiConfig | ApiConfig[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loader:     Provider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Provider\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig,\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Renderable.html":{"url":"interfaces/Renderable.html","title":"interface - Renderable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Renderable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        clone\n                                    \n                                \n                                \n                                    \n                                        render\n                                    \n                                \n                                \n                                    \n                                        resolve\n                                    \n                                \n                                \n                                    \n                                        toJson\n                                    \n                                \n                                \n                                    \n                                        toString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseJson.html":{"url":"interfaces/ResponseJson.html","title":"interface - ResponseJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            statusText\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries())),\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]'),\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJson(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJson(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseOptions.html":{"url":"interfaces/ResponseOptions.html","title":"interface - ResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cacheability\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAge\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheability\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheability:         CacheCacheability\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CacheCacheability\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAge\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAge:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchExpression.html":{"url":"classes/SearchExpression.html","title":"class - SearchExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _connector\n                            \n                            \n                                    Private\n                                _negated\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                and\n                            \n                            \n                                clone\n                            \n                            \n                                connector\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                negated\n                            \n                            \n                                not\n                            \n                            \n                                or\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                search\n                            \n                            \n                                term\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _connector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SearchConnector\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _negated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable, connector?: SearchConnector)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                connector\n                                            \n                                                            SearchConnector\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        and\n                        \n                    \n                \n            \n            \n                \nand(exp: SearchExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:195\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exp\n                                            \n                                                        SearchExpression\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:160\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     SearchExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connector\n                        \n                    \n                \n            \n            \n                \nconnector()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:183\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         SearchConnector\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:176\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        negated\n                        \n                    \n                \n            \n            \n                \nnegated()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:187\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(exp: SearchExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:199\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exp\n                                            \n                                                        SearchExpression\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        or\n                        \n                    \n                \n            \n            \n                \nor(exp: SearchExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exp\n                                            \n                                                        SearchExpression\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:141\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(opts: (builder: SearchExpressionBuilder,current: SearchExpression) => void, current?: SearchExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:77\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                        SearchExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n            \n                \nterm(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:168\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:51\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:73\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable, RenderableFactory } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SearchExpression';\n  }\n\n  static search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  static fromJson(json: { [name: string]: any }): SearchExpression {\n    return new SearchExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n      connector: json['connector'],\n      negated: json['negated'],\n    });\n  }\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchTerm.html":{"url":"classes/SearchTerm.html","title":"class - SearchTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         SearchTerm\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; value: string; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable, RenderableFactory } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SearchExpression';\n  }\n\n  static search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  static fromJson(json: { [name: string]: any }): SearchExpression {\n    return new SearchExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n      connector: json['connector'],\n      negated: json['negated'],\n    });\n  }\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SegmentHandler.html":{"url":"classes/SegmentHandler.html","title":"class - SegmentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SegmentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearKey\n                            \n                            \n                                clearParameters\n                            \n                            \n                                hasKey\n                            \n                            \n                                hasParameters\n                            \n                            \n                                key\n                            \n                            \n                                parameters\n                            \n                            \n                                path\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segment: ODataSegment)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segment\n                                                  \n                                                        \n                                                                        ODataSegment\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearKey\n                        \n                    \n                \n            \n            \n                \nclearKey()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearParameters\n                        \n                    \n                \n            \n            \n                \nclearParameters()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasKey\n                        \n                    \n                \n            \n            \n                \nhasKey()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasParameters\n                        \n                    \n                \n            \n            \n                \nhasParameters()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n            \n                \nkey(value?: EntityKey)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:19\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            EntityKey\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EntityKey\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n            \n                \nparameters(value?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:29\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath(value?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(value?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PathSegment } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegment.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegment.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegment.action);\n  }\n  function() {\n    return this.segments.get(PathSegment.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegment.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegment.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectExpression.html":{"url":"classes/SelectExpression.html","title":"class - SelectExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/select.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                field\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                select\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:67\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         SelectExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:44\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:49\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        select\n                        \n                    \n                \n            \n            \n                \n                        \n                    select(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void, current?: SelectExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:23\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                            SelectExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:39\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:51\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FieldFactory, Renderable, RenderableFactory } from './syntax';\n\nexport type SelectExpressionBuilder = {\n  t: Readonly>;\n  e: () => SelectExpression;\n};\nexport class SelectExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SelectExpression';\n  }\n\n  static select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression,\n    current?: SelectExpression\n  ): SelectExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new SelectExpression(),\n      },\n      current\n    ) as SelectExpression;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): SelectExpression {\n    return new SelectExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(',');\n  }\n\n  clone() {\n    return new SelectExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): SelectExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: any): SelectExpression {\n    return this._add(field);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringAndCollectionFunctions.html":{"url":"classes/StringAndCollectionFunctions.html","title":"class - StringAndCollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringAndCollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                concat\n                            \n                            \n                                contains\n                            \n                            \n                                endsWith\n                            \n                            \n                                indexOf\n                            \n                            \n                                length\n                            \n                            \n                                startsWith\n                            \n                            \n                                subString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        concat\n                        \n                    \n                \n            \n            \n                \nconcat(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:302\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:306\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endsWith\n                        \n                    \n                \n            \n            \n                \nendsWith(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:310\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indexOf\n                        \n                    \n                \n            \n            \n                \nindexOf(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:314\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(left: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:318\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startsWith\n                        \n                    \n                \n            \n            \n                \nstartsWith(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:322\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subString\n                        \n                    \n                \n            \n            \n                \nsubString(left: any, right: number, length?: number, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:326\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                length\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringFunctions.html":{"url":"classes/StringFunctions.html","title":"class - StringFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesPattern\n                            \n                            \n                                toLower\n                            \n                            \n                                toUpper\n                            \n                            \n                                trim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesPattern\n                        \n                    \n                \n            \n            \n                \nmatchesPattern(left: any | string, pattern: string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:350\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        any | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                pattern\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLower\n                        \n                    \n                \n            \n            \n                \ntoLower(left: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:357\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUpper\n                        \n                    \n                \n            \n            \n                \ntoUpper(left: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:360\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trim\n                        \n                    \n                \n            \n            \n                \ntrim(left: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:363\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuredTypeFieldOptions.html":{"url":"interfaces/StructuredTypeFieldOptions.html","title":"interface - StructuredTypeFieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuredTypeFieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         StructuredTypeFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuredTypeFieldConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Type.html":{"url":"classes/Type.html","title":"class - Type","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Type\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, value?: any)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:660\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:711\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:679\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:687\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:715\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:670\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; name: string; type: string; value: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:666\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeFunctions.html":{"url":"classes/TypeFunctions.html","title":"class - TypeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cast\n                            \n                            \n                                isof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cast\n                        \n                    \n                \n            \n            \n                \ncast(left: T | string, type?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:426\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    N\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     N\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isof\n                        \n                    \n                \n            \n            \n                \nisof(left: T | string, type?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:434\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toString(): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      left = render(left, { aliases, escape, prefix, parser, options });\n      return `${this.name}(${left}, '${this.type}')`;\n    } else {\n      return `${this.name}('${this.type}')`;\n    }\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.0.0\n        \n            @angular/common : ^17.0.0\n        \n            @angular/compiler : ^17.0.0\n        \n            @angular/core : ^17.0.0\n        \n            @angular/forms : ^17.0.0\n        \n            @angular/platform-browser : ^17.0.0\n        \n            @angular/platform-browser-dynamic : ^17.0.0\n        \n            @angular/router : ^17.0.0\n        \n            @compodoc/compodoc : ^1.1.23\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EdmType   (projects/.../types.ts)\n                        \n                        \n                            FieldType   (projects/.../metadata.ts)\n                        \n                        \n                            ODataModelEventType   (projects/.../options.ts)\n                        \n                        \n                            ODataModelState   (projects/.../options.ts)\n                        \n                        \n                            PathSegment   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomTypes   (projects/.../builder.ts)\n                        \n                        \n                            QueryOption   (projects/.../types.ts)\n                        \n                        \n                            StandardAggregateMethods   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        EdmType\n                    \n                \n                        \n                            \n                                 Guid\n                            \n                        \n                        \n                            \n                                Value : Edm.Guid\n                            \n                        \n                        \n                            \n                                 Int16\n                            \n                        \n                        \n                            \n                                Value : Edm.Int16\n                            \n                        \n                        \n                            \n                                 String\n                            \n                        \n                        \n                            \n                                Value : Edm.String\n                            \n                        \n                        \n                            \n                                 Boolean\n                            \n                        \n                        \n                            \n                                Value : Edm.Boolean\n                            \n                        \n                        \n                            \n                                 Byte\n                            \n                        \n                        \n                            \n                                Value : Edm.Byte\n                            \n                        \n                        \n                            \n                                 SByte\n                            \n                        \n                        \n                            \n                                Value : Edm.SByte\n                            \n                        \n                        \n                            \n                                 Int32\n                            \n                        \n                        \n                            \n                                Value : Edm.Int32\n                            \n                        \n                        \n                            \n                                 Int64\n                            \n                        \n                        \n                            \n                                Value : Edm.Int64\n                            \n                        \n                        \n                            \n                                 Date\n                            \n                        \n                        \n                            \n                                Value : Edm.Date\n                            \n                        \n                        \n                            \n                                 TimeOfDay\n                            \n                        \n                        \n                            \n                                Value : Edm.TimeOfDay\n                            \n                        \n                        \n                            \n                                 DateTimeOffset\n                            \n                        \n                        \n                            \n                                Value : Edm.DateTimeOffset\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                Value : Edm.Duration\n                            \n                        \n                        \n                            \n                                 Decimal\n                            \n                        \n                        \n                            \n                                Value : Edm.Decimal\n                            \n                        \n                        \n                            \n                                 Double\n                            \n                        \n                        \n                            \n                                Value : Edm.Double\n                            \n                        \n                        \n                            \n                                 Single\n                            \n                        \n                        \n                            \n                                Value : Edm.Single\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n                        \n                            \n                                Value : Edm.Binary\n                            \n                        \n                        \n                            \n                                 Stream\n                            \n                        \n                        \n                            \n                                Value : Edm.Stream\n                            \n                        \n                        \n                            \n                                 Geography\n                            \n                        \n                        \n                            \n                                Value : Edm.Geography\n                            \n                        \n                        \n                            \n                                 GeographyPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyPoint\n                            \n                        \n                        \n                            \n                                 GeographyLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyLineString\n                            \n                        \n                        \n                            \n                                 GeographyPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyPolygon\n                            \n                        \n                        \n                            \n                                 GeographyMultiPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiPoint\n                            \n                        \n                        \n                            \n                                 GeographyMultiLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiLineString\n                            \n                        \n                        \n                            \n                                 GeographyMultiPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiPolygon\n                            \n                        \n                        \n                            \n                                 GeographyCollection\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyCollection\n                            \n                        \n                        \n                            \n                                 Geometry\n                            \n                        \n                        \n                            \n                                Value : Edm.Geometry\n                            \n                        \n                        \n                            \n                                 GeometryPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryPoint\n                            \n                        \n                        \n                            \n                                 GeometryLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryLineString\n                            \n                        \n                        \n                            \n                                 GeometryPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryPolygon\n                            \n                        \n                        \n                            \n                                 GeometryMultiPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiPoint\n                            \n                        \n                        \n                            \n                                 GeometryMultiLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiLineString\n                            \n                        \n                        \n                            \n                                 GeometryMultiPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiPolygon\n                            \n                        \n                        \n                            \n                                 GeometryCollection\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryCollection\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PathSegment\n                    \n                \n                        \n                            \n                                 batch\n                            \n                        \n                        \n                            \n                                Value : batch\n                            \n                        \n                        \n                            \n                                 metadata\n                            \n                        \n                        \n                            \n                                Value : metadata\n                            \n                        \n                        \n                            \n                                 entitySet\n                            \n                        \n                        \n                            \n                                Value : entitySet\n                            \n                        \n                        \n                            \n                                 singleton\n                            \n                        \n                        \n                            \n                                Value : singleton\n                            \n                        \n                        \n                            \n                                 type\n                            \n                        \n                        \n                            \n                                Value : type\n                            \n                        \n                        \n                            \n                                 property\n                            \n                        \n                        \n                            \n                                Value : property\n                            \n                        \n                        \n                            \n                                 navigationProperty\n                            \n                        \n                        \n                            \n                                Value : navigationProperty\n                            \n                        \n                        \n                            \n                                 reference\n                            \n                        \n                        \n                            \n                                Value : reference\n                            \n                        \n                        \n                            \n                                 value\n                            \n                        \n                        \n                            \n                                Value : value\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 function\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 action\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryOption\n                    \n                \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 expand\n                            \n                        \n                        \n                            \n                                Value : expand\n                            \n                        \n                        \n                            \n                                 compute\n                            \n                        \n                        \n                            \n                                Value : compute\n                            \n                        \n                        \n                            \n                                 filter\n                            \n                        \n                        \n                            \n                                Value : filter\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : search\n                            \n                        \n                        \n                            \n                                 transform\n                            \n                        \n                        \n                            \n                                Value : transform\n                            \n                        \n                        \n                            \n                                 orderBy\n                            \n                        \n                        \n                            \n                                Value : orderBy\n                            \n                        \n                        \n                            \n                                 top\n                            \n                        \n                        \n                            \n                                Value : top\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : skip\n                            \n                        \n                        \n                            \n                                 skiptoken\n                            \n                        \n                        \n                            \n                                Value : skiptoken\n                            \n                        \n                        \n                            \n                                 format\n                            \n                        \n                        \n                            \n                                Value : format\n                            \n                        \n                        \n                            \n                                 levels\n                            \n                        \n                        \n                            \n                                Value : levels\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/responses/metadata.ts\n    \n        \n            \n                \n                    \n                        \n                        FieldType\n                    \n                \n                        \n                            \n                                 ATTRIBUTE\n                            \n                        \n                        \n                            \n                                 TAG\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n            \n                \n                    \n                        \n                        ODataModelEventType\n                    \n                \n                        \n                            \n                                 Change\n                            \n                        \n                        \n                            \n                                Value : change\n                            \n                        \n                        \n                            \n                                 Reset\n                            \n                        \n                        \n                            \n                                Value : reset\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Destroy\n                            \n                        \n                        \n                            \n                                Value : destroy\n                            \n                        \n                        \n                            \n                                 Add\n                            \n                        \n                        \n                            \n                                Value : add\n                            \n                        \n                        \n                            \n                                 Remove\n                            \n                        \n                        \n                            \n                                Value : remove\n                            \n                        \n                        \n                            \n                                 Invalid\n                            \n                        \n                        \n                            \n                                Value : invalid\n                            \n                        \n                        \n                            \n                                 Request\n                            \n                        \n                        \n                            \n                                Value : request\n                            \n                        \n                        \n                            \n                                 Sync\n                            \n                        \n                        \n                            \n                                Value : sync\n                            \n                        \n                        \n                            \n                                 Attach\n                            \n                        \n                        \n                            \n                                Value : attach\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ODataModelState\n                    \n                \n                        \n                            \n                                 Added\n                            \n                        \n                        \n                            \n                                 Removed\n                            \n                        \n                        \n                            \n                                 Unchanged\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n            \n                \n                    \n                        \n                        QueryCustomTypes\n                    \n                \n                        \n                            \n                                 Raw\n                            \n                        \n                        \n                            \n                                 Alias\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardAggregateMethods\n                    \n                \n                        \n                            \n                                 sum\n                            \n                        \n                        \n                            \n                                Value : sum\n                            \n                        \n                        \n                            \n                                 min\n                            \n                        \n                        \n                            \n                                Value : min\n                            \n                        \n                        \n                            \n                                 max\n                            \n                        \n                        \n                            \n                                Value : max\n                            \n                        \n                        \n                            \n                                 average\n                            \n                        \n                        \n                            \n                                Value : average\n                            \n                        \n                        \n                            \n                                 countdistinct\n                            \n                        \n                        \n                            \n                                Value : countdistinct\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngular OData\n\n\nA fluent API for querying, creating, updating and deleting OData resources in Angular.\nOData service for Angular.\nPlease check also my other related project, OData Angular Generator\nDemo:\nFull examples of the library:\n\nAngularODataEntity\n\nTable of contents\n\nInstallation\nWithout Schema\nWith Schema\nUsage\nOData Version\nQuery Builder\nDocumentation\n\nInstallation\nInstall from npm:\nExample :npm i angular-odataWithout Schema\nImport ODataModule into your application module definition and setup the module for the serviceRootUrl.\nExample :import { NgModule } from '@angular/core';\nimport { ODataModule } from 'angular-odata';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({\n      config: {\n        serviceRootUrl: 'https://services.odata.org/V4/(S(4m0tuxtnhcfctl4gzem3gr10))/TripPinServiceRW/'\n      }\n    })\n    ...\n  ]\n})\nexport class AppModule {}With Schema\nUse OData Angular Generator for generate the Config and the Module definition.\nImport ODataModule, Config and Module into your application module.\nSetup ODataModule with Config and import it along with Module.\nExample :import { NgModule } from '@angular/core';\n\nimport { ODataModule } from 'angular-odata';\nimport { TripPinConfig, TripPinModule } from './trippin';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({ config: TripPinConfig }),\n    TripPinModule\n  ]\n  ...\n})\nexport class AppModule {}Usage\nInject and use the ODataServiceFactory\nExample :import { Component } from \"@angular/core\";\nimport { ODataClient, ODATA_ETAG } from \"angular-odata\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"TripPin\";\n  constructor(private factory: ODataServiceFactory) {\n    this.queries();\n  }\n\n  queries() {\n    // Use OData Service Factory\n    let airportsService = this.factory.entitySet(\n      \"Airports\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Airport\"\n    );\n    let airports = airportsService.entities();\n\n    // Fetch airports\n    airports.fetch().subscribe(({ entities }) => {\n      console.log(\"Airports: \", entities);\n    });\n\n    // Fetch airports with count\n    airports\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    // Fetch all airports\n    airports\n      .fetchAll()\n      .subscribe((airports) => console.log(\"All Airports: \", airports));\n\n    // Fetch airport with key and fetch again from cache\n    airports\n      .entity(\"CYYZ\")\n      .fetch()\n      .pipe(\n        switchMap(() =>\n          // From Cache!\n          airports.entity(\"CYYZ\").fetch({ fetchPolicy: \"cache-first\" })\n        )\n      )\n      .subscribe(({ entity, annots }) =>\n        console.log(\"Airport: \", entity, \"Annotations: \", annots)\n      );\n\n    // Clone airports resource and filter new resource\n    airports\n      .clone()\n      .query((q) =>\n        q.filter({ Location: { City: { CountryRegion: \"United States\" } } })\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports of United States: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) =>\n      q.filter().push({ Location: { City: { Region: \"California\" } } })\n    );\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports in California: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Store airports resource\n    var json = airports.toJson();\n    // Load airports resource\n    airports = this.odata.fromJson(json) as ODataEntitySetResource;\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) => q.filter().clear());\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    let peopleService = this.factory.entitySet(\n      \"People\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Person\"\n    );\n    let people = peopleService.entities();\n\n    // Clone people resource and expand and fetch\n    people\n      .clone()\n      .query((q) =>\n        q.expand({\n          Friends: {\n            expand: { Friends: { select: [\"AddressInfo\"] } },\n          },\n          Trips: { select: [\"Name\", \"Tags\"] },\n        })\n      )\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Clone people resource and filter with expressions\n    people\n      .clone()\n      .query((q) =>\n        q.filter(({ e }) =>\n          e().eq(\"Emails\", \"john@example.com\").or(e().eq(\"UserName\", \"john\"))\n        )\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    this.odata\n      .batch(\"TripPin\")\n      .exec(() =>\n        forkJoin({\n          airports: airports.fetch(),\n          people: people.fetch({ withCount: true }),\n        })\n      )\n      .subscribe();\n  }\n}OData Version\nThe library works mainly with OData Version 4, however, it incorporates basic support for versions 3 and 2.\nQuery Builder\nFor a deep query customizations the library use odata-query and odata-filter-builder as a builders.\n\nOData v4 query builder\nOData Filter Builder\n\nDocumentation\nThe api documentation is generated using compodoc and can be viewed here: https://diegomvh.github.io/angular-odata/docs/\nLibrary documentation can be viewed on the wiki here: https://github.com/diegomvh/angular-odata/wiki\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Diego van Haaster\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ODataModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    126 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.126.0\n        \n            Description : Client side OData typescript library for Angular\n        \n            Keywords : client, odata, odata v4, odata v3, odata v2, typescript, api, @angular, angular\n        \n            Homepage : https://github.com/diegomvh/angular-odata\n        \n            Bugs : https://github.com/diegomvh/angular-odata/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/diegomvh/angular-odata.git\n        \n            Author : Diego van Haaster\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (projects/.../builder.ts)\n                        \n                        \n                            AnnotationConfig   (projects/.../types.ts)\n                        \n                        \n                            ApiConfig   (projects/.../types.ts)\n                        \n                        \n                            CacheCacheability   (projects/.../types.ts)\n                        \n                        \n                            CallableConfig   (projects/.../types.ts)\n                        \n                        \n                            ComputeExpressionBuilder   (projects/.../compute.ts)\n                        \n                        \n                            CountExpressionBuilder   (projects/.../count.ts)\n                        \n                        \n                            Duration   (projects/.../durations.ts)\n                        \n                        \n                            EntityContainerConfig   (projects/.../types.ts)\n                        \n                        \n                            EntityKey   (projects/.../resource.ts)\n                        \n                        \n                            EntitySetConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Expand   (projects/.../builder.ts)\n                        \n                        \n                            ExpandExpressionBuilder   (projects/.../expand.ts)\n                        \n                        \n                            ExpandObject   (projects/.../builder.ts)\n                        \n                        \n                            ExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ExpandType   (projects/.../builder.ts)\n                        \n                        \n                            FetchPolicy   (projects/.../types.ts)\n                        \n                        \n                            Filter   (projects/.../builder.ts)\n                        \n                        \n                            FilterConnector   (projects/.../filter.ts)\n                        \n                        \n                            FilterExpressionBuilder   (projects/.../filter.ts)\n                        \n                        \n                            FilterType   (projects/.../builder.ts)\n                        \n                        \n                            GroupBy   (projects/.../builder.ts)\n                        \n                        \n                            JsonSchemaCustom   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaExpand   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaOptions   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaRequired   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaSelect   (projects/.../structured-type.ts)\n                        \n                        \n                            ModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ModelOptions   (projects/.../options.ts)\n                        \n                        \n                            NestedExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            NestedOrderBy   (projects/.../builder.ts)\n                        \n                        \n                            Normalize   (projects/.../syntax.ts)\n                        \n                        \n                            ODataActionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataContext   (projects/.../helper.ts)\n                        \n                        \n                            ODataEntities   (projects/.../types.ts)\n                        \n                        \n                            ODataEntitiesOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataEntity   (projects/.../types.ts)\n                        \n                        \n                            ODataEntityOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataFunctionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataMetadataType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEntry   (projects/.../options.ts)\n                        \n                        \n                            ODataModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataProperty   (projects/.../types.ts)\n                        \n                        \n                            ODataPropertyOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArguments   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArgumentsOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataSegment   (projects/.../segments.ts)\n                        \n                        \n                            ODataVersion   (projects/.../types.ts)\n                        \n                        \n                            OrderBy   (projects/.../builder.ts)\n                        \n                        \n                            OrderByExpressionBuilder   (projects/.../orderby.ts)\n                        \n                        \n                            OrderByObject   (projects/.../builder.ts)\n                        \n                        \n                            OrderByType   (projects/.../builder.ts)\n                        \n                        \n                            Parameter   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomType   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptions   (projects/.../builder.ts)\n                        \n                        \n                            SchemaConfig   (projects/.../types.ts)\n                        \n                        \n                            SearchConnector   (projects/.../search.ts)\n                        \n                        \n                            SearchExpressionBuilder   (projects/.../search.ts)\n                        \n                        \n                            Select   (projects/.../builder.ts)\n                        \n                        \n                            SelectExpressionBuilder   (projects/.../select.ts)\n                        \n                        \n                            SelectType   (projects/.../builder.ts)\n                        \n                        \n                            StructuredTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            StructuredTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Transform   (projects/.../builder.ts)\n                        \n                        \n                            Unpacked   (projects/.../builder.ts)\n                        \n                        \n                            Value   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Expand\n                \n            \n            \n                \n                            ExpandType | ExpandType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandObject\n                \n            \n            \n                \n                         | NestedExpandOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandType\n                \n            \n            \n                \n                        string | ExpandObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                            FilterType | FilterType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GroupBy\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedExpandOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedOrderBy\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderBy\n                \n            \n            \n                \n                            OrderByType | OrderByType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByObject\n                \n            \n            \n                \n                         |  | NestedOrderBy\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByType\n                \n            \n            \n                \n                        string | OrderByObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryCustomType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Select\n                \n            \n            \n                \n                            SelectType | SelectType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectType\n                \n            \n            \n                \n                        string | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Transform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Unpacked\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Value\n                \n            \n            \n                \n                            string | Date | number | boolean | QueryCustomType\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnnotationConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheCacheability\n                \n            \n            \n                \n                        \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallableConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityContainerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySetConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FetchPolicy\n                \n            \n            \n                \n                        \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataMetadataType\n                \n            \n            \n                \n                        \"minimal\" | \"full\" | \"none\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataVersion\n                \n            \n            \n                \n                        \"2.0\" | \"3.0\" | \"4.0\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n    \n    \n        \n            \n                \n                    \n                    ComputeExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/count.ts\n    \n    \n        \n            \n                \n                    \n                    CountExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/durations.ts\n    \n    \n        \n            \n                \n                    \n                    Duration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/resource.ts\n    \n    \n        \n            \n                \n                    \n                    EntityKey\n                \n            \n            \n                \n                             | QueryCustomType | string | number\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n    \n    \n        \n            \n                \n                    \n                    ExpandExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/filter.ts\n    \n    \n        \n            \n                \n                    \n                    FilterConnector\n                \n            \n            \n                \n                        \"and\" | \"or\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n    \n    \n        \n            \n                \n                    \n                    JsonSchemaCustom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaExpand\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaSelect\n                \n            \n            \n                \n                        Array\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n    \n        \n            \n                \n                    \n                    ModelFieldOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEntry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelFieldOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n    \n    \n        \n            \n                \n                    \n                    Normalize\n                \n            \n            \n                \n                        \"all\" | \"right\" | \"left\" | \"none\"\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/types/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataActionOptions\n                \n            \n            \n                \n                            ODataQueryArgumentsOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntitiesOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntityOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataFunctionOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataPropertyOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataQueryArgumentsOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/helper.ts\n    \n    \n        \n            \n                \n                    \n                    ODataContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/responses/types.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntities\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataProperty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataQueryArguments\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n    \n        \n            \n                \n                    \n                    ODataSegment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n    \n    \n        \n            \n                \n                    \n                    OrderByExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/search.ts\n    \n    \n        \n            \n                \n                    \n                    SearchConnector\n                \n            \n            \n                \n                        \"AND\" | \"OR\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SearchExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/select.ts\n    \n    \n        \n            \n                \n                    \n                    SelectExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
