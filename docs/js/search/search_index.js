var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiOptions.html",[0,0.989,1,2.329]],["body/interfaces/ApiOptions.html",[0,1.801,1,3.484,2,2.06,3,0.069,4,0.06,5,0.069,6,0.05,7,2.238,8,0.739,9,2.519,10,0.05,11,0.581,12,0.217,13,3.63,14,3.779,15,3.943,16,2.941,17,4.001,18,3.423,19,1.848,20,3.779,21,3.943,22,3.63,23,2.155,24,0.115,25,0.01,26,3.367,27,2.627,28,2.895,29,3.43,30,0.69,31,0.348,32,2.895,33,2.504,34,2.8,35,1.844,36,0.133,37,3.22,38,2.238,39,2.238,40,2.238,41,3.165,42,1.911,43,2.895,44,3.014,45,1.844,46,2.238,47,3.145,48,0.646,49,1.248,50,1.782,51,2.076,52,1.844,53,3.014,54,2.941,55,2.016,56,2.591,57,1.775,58,2.895,59,3.145,60,1.122,61,3.14,62,0.883,63,1.852,64,2.504,65,2.504,66,3.014,67,2.591,68,3.014,69,2.895,70,2.786,71,2.504,72,2.504,73,2.591,74,2.895,75,2.685,76,2.145,77,1.905,78,0.18,79,3.014,80,3.014,81,2.895,82,2.238,83,2.238,84,2.145,85,0.961,86,0.618,87,1.844,88,2.238,89,1.983,90,2.458,91,2.458,92,3.318,93,2.238,94,2.342,95,2.342,96,3.779,97,1.064,98,3.484,99,2.627,100,2.895,101,3.993,102,2.422,103,2.591,104,1.107,105,2.895,106,2.504,107,1.911,108,3.104,109,1.911,110,1.782,111,0.739,112,2.06,113,2.458,114,1.983,115,3.145,116,1.122,117,2.458,118,0.545,119,1.782,120,2.342,121,2.238,122,2.342,123,0.122,124,1.852,125,2.458,126,2.06,127,2.458,128,2.145,129,2.458,130,2.238,131,2.342,132,3.145,133,4.158,134,1.356,135,2.238,136,2.238,137,2.238,138,1.522,139,1.095,140,2.607,141,2.145,142,2.895,143,1.911,144,3.014,145,2.342,146,2.895,147,2.342,148,3.145,149,2.145,150,3.145,151,3.014,152,2.238,153,1.983,154,2.786,155,2.145,156,1.283,157,1.283,158,3.63,159,1.754,160,1.064,161,1.283,162,1.283,163,2.238,164,1.782,165,2.238,166,2.458,167,2.145,168,2.145,169,2.238,170,0.938,171,1.911,172,1.064,173,1.248,174,1.782,175,2.238,176,2.342,177,0.088,178,2.145,179,1.983,180,1.844,181,0.006,182,0.006]],["title/classes/ArithmeticFunctions.html",[183,0.344,184,1.703]],["body/classes/ArithmeticFunctions.html",[0,1.337,3,0.047,4,0.041,5,0.047,6,0.074,8,0.519,10,0.034,12,0.128,19,0.643,24,0.095,25,0.01,30,0.682,31,0.264,36,0.13,60,1.197,62,1.168,78,0.176,85,0.611,86,1.007,97,2.214,104,1.365,111,1.085,118,0.71,123,0.118,139,1.411,160,1.134,170,1.313,172,1.388,173,0.858,177,0.115,181,0.005,182,0.005,183,0.671,184,2.303,185,0.124,186,1.079,187,0.669,188,4.216,189,4.216,190,4.216,191,1.723,192,0.181,193,2.722,194,0.753,195,1.723,196,2.722,197,1.723,198,2.722,199,2.756,200,1.574,201,1.112,202,2.748,203,2.929,204,3.297,205,3.297,206,3.524,207,1.016,208,2.278,209,1.671,210,1.112,211,2.569,212,2.303,213,2.045,214,1.987,215,1.112,216,0.61,217,0.987,218,1.016,219,1.723,220,1.723,221,1.723,222,1.112,223,1.112,224,0.932,225,1.112,226,1.112,227,1.112,228,1.112,229,1.112,230,1.112,231,1.112,232,1.112,233,1.112,234,1.112,235,1.112,236,3.68,237,1.105,238,1.529,239,1.112,240,1.047,241,1.112,242,1.112,243,1.112,244,0.235,245,2.414,246,2.746,247,0.996,248,0.858,249,2.569,250,0.836,251,2.717,252,2.569,253,1.112,254,1.112,255,1.723,256,1.112,257,2.045,258,1.112,259,1.112,260,1.112,261,1.112,262,1.112,263,1.112,264,1.112,265,1.112,266,1.112,267,1.112,268,1.112,269,1.112,270,1.112,271,1.723,272,1.723,273,1.112,274,1.112,275,2.045,276,1.112,277,2.375,278,1.112,279,1.723,280,1.112,281,1.112,282,2.045,283,1.112,284,1.723,285,1.112,286,1.112,287,1.112,288,1.112,289,1.112,290,1.112,291,1.112,292,2.045,293,1.112,294,1.112,295,1.112,296,1.112,297,1.112,298,1.112,299,1.112,300,1.112,301,1.112,302,1.112,303,1.112,304,1.112,305,1.112,306,1.112,307,1.112,308,1.112,309,1.112,310,1.112,311,1.112,312,1.112,313,1.112,314,1.112,315,1.112,316,1.112,317,1.112,318,1.112,319,1.112,320,1.112,321,1.112,322,1.112,323,1.112,324,2.045,325,1.112,326,1.112,327,1.112,328,1.112,329,2.045,330,1.112,331,1.723,332,1.112,333,1.112,334,1.723,335,1.112,336,1.112,337,1.112,338,1.112,339,2.045,340,1.112,341,1.112,342,1.112,343,2.375,344,2.109,345,3.405,346,3.578,347,1.723,348,1.112,349,1.112,350,1.016,351,1.112,352,1.112,353,2.045,354,1.112,355,1.112,356,1.112,357,1.112,358,1.112,359,1.112,360,1.112,361,1.112,362,1.112,363,1.112,364,1.112,365,1.112,366,1.112,367,1.112,368,1.112,369,1.112,370,1.112,371,1.112,372,1.112,373,1.112,374,1.112,375,1.112,376,2.045,377,1.112,378,1.112,379,1.112,380,1.112,381,1.112,382,1.112,383,1.112,384,1.112,385,1.112,386,1.112,387,1.112,388,1.529,389,1.723,390,1.112,391,1.112,392,1.112,393,1.047,394,1.112,395,2.045,396,1.723,397,1.723,398,1.671,399,1.405,400,1.112,401,1.112,402,2.045,403,1.112,404,1.112,405,1.112,406,1.112,407,2.635,408,1.112,409,1.112,410,2.635,411,1.112,412,0.959,413,1.112,414,1.079]],["title/classes/ArithmeticOperators.html",[183,0.344,376,1.703]],["body/classes/ArithmeticOperators.html",[0,1.317,3,0.046,4,0.04,5,0.046,6,0.087,8,0.509,10,0.033,12,0.163,19,0.625,24,0.099,25,0.01,30,0.691,31,0.258,36,0.13,60,1.193,62,1.043,78,0.174,85,0.6,86,1.006,97,2.203,104,1.33,111,1.068,118,0.698,123,0.121,139,1.397,160,1.109,170,1.311,172,1.362,173,0.834,177,0.147,181,0.005,182,0.005,183,0.668,184,2.008,185,0.121,186,1.048,187,0.654,191,1.081,192,0.23,194,0.959,195,1.081,197,1.081,199,2.729,200,1.539,201,1.081,202,2.719,203,2.901,204,3.285,205,3.285,206,3.513,207,0.987,208,2.251,209,1.634,210,1.081,211,2.535,212,2.955,213,2.008,214,1.964,215,1.081,216,0.593,217,0.959,218,0.987,219,1.685,220,1.685,221,1.685,222,1.081,223,1.081,224,0.906,225,1.081,226,1.081,227,1.081,228,1.081,229,1.081,230,1.081,231,1.081,232,1.081,233,1.081,234,1.081,235,1.081,236,3.696,237,1.08,238,1.495,239,1.081,240,1.017,241,1.081,242,1.081,243,1.081,244,0.231,245,2.396,246,2.722,247,0.974,248,0.834,249,2.535,250,0.812,251,2.685,252,2.535,253,1.081,254,1.081,255,1.685,256,1.081,257,2.008,258,1.081,259,1.081,260,1.081,261,1.081,262,1.081,263,1.081,264,1.081,265,1.081,266,1.081,267,1.081,268,1.081,269,1.081,270,1.081,271,1.685,272,1.685,273,1.081,274,1.081,275,2.008,276,1.081,277,2.338,278,1.081,279,1.685,280,1.081,281,1.081,282,2.008,283,1.081,284,1.685,285,1.081,286,1.081,287,1.081,288,1.081,289,1.081,290,1.081,291,1.081,292,2.008,293,1.081,294,1.081,295,1.081,296,1.081,297,1.081,298,1.081,299,1.081,300,1.081,301,1.081,302,1.081,303,1.081,304,1.081,305,1.081,306,1.081,307,1.081,308,1.081,309,1.081,310,1.081,311,1.081,312,1.081,313,1.081,314,1.081,315,1.081,316,1.081,317,1.081,318,1.081,319,1.081,320,1.081,321,1.081,322,1.081,323,1.081,324,2.008,325,1.081,326,1.081,327,1.081,328,1.081,329,2.008,330,1.081,331,1.685,332,1.081,333,1.081,334,1.685,335,1.081,336,1.081,337,1.081,338,1.081,339,2.008,340,1.081,341,1.081,342,1.081,343,2.338,344,2.071,345,3.468,346,3.62,347,1.685,348,1.081,349,1.081,350,0.987,351,1.081,352,1.081,353,2.008,354,1.081,355,1.081,356,1.081,357,1.081,358,1.081,359,1.081,360,1.081,361,1.081,362,1.081,363,1.081,364,1.081,365,1.081,366,1.081,367,1.081,368,1.081,369,1.081,370,1.081,371,1.081,372,1.081,373,1.081,374,1.081,375,1.081,376,2.267,377,1.685,378,1.081,379,1.685,380,1.081,381,1.685,382,1.081,383,1.685,384,1.081,385,1.685,386,1.081,387,1.685,388,1.495,389,1.685,390,1.081,391,1.081,392,1.081,393,1.017,394,1.081,395,2.008,396,1.685,397,1.685,398,1.634,399,1.373,400,1.081,401,1.081,402,2.008,403,1.081,404,1.081,405,1.081,406,1.081,407,2.604,408,1.081,409,1.081,410,2.604,411,1.081,412,0.932,413,1.081,414,1.048,415,3.057,416,4.123,417,4.123,418,4.123,419,4.123,420,2.7,421,2.645,422,0.959,423,2.645,424,2.645,425,2.645,426,2.645,427,2.645]],["title/interfaces/Cache.html",[0,0.989,41,1.703]],["body/interfaces/Cache.html",[0,1.819,1,3.091,2,2.136,3,0.072,4,0.062,5,0.072,6,0.083,7,2.321,8,0.712,9,2.493,10,0.052,11,0.371,12,0.141,13,2.136,14,2.224,15,2.321,16,1.731,17,3.284,18,2.658,19,1.673,20,2.224,21,2.321,22,2.136,24,0.113,25,0.01,26,2.754,27,1.677,28,1.848,29,3.19,30,0.689,31,0.357,32,2.969,33,2.568,34,2.855,35,1.912,36,0.134,37,3.284,38,2.321,39,2.321,40,2.321,41,3.243,42,1.981,43,2.969,44,3.091,45,1.912,46,2.321,47,3.225,48,0.67,49,1.294,50,1.848,51,2.129,52,1.912,53,3.091,54,2.988,55,2.068,56,2.658,57,1.809,58,2.969,59,3.225,60,1.129,61,3.19,62,0.905,63,1.9,64,2.568,65,2.568,66,3.091,67,2.658,68,3.091,69,2.969,70,2.857,71,2.568,72,2.568,73,2.658,74,2.969,75,2.754,76,2.224,77,1.954,78,0.181,79,3.091,80,3.091,81,2.969,82,2.321,83,2.321,84,2.224,85,0.969,86,0.634,87,1.912,88,2.321,89,2.056,90,2.549,91,2.549,92,3.357,93,2.321,94,2.428,95,2.428,96,3.839,97,1.103,98,3.553,99,2.679,100,2.952,101,4.072,102,2.484,103,2.658,104,1.299,105,2.952,106,2.568,107,1.981,108,3.165,109,1.981,110,1.848,111,0.766,112,2.136,113,3.543,114,3.284,115,4.358,116,1.616,117,3.543,118,0.785,119,1.848,120,2.428,121,2.321,122,2.428,123,0.126,124,1.9,125,2.549,126,2.136,127,2.549,128,2.224,129,2.549,130,2.321,131,2.428,132,3.225,133,4.196,134,1.406,135,2.321,136,2.321,137,2.321,138,1.578,139,1.123,140,2.633,141,2.224,142,2.969,143,1.981,144,3.091,145,2.428,146,2.969,147,2.428,148,3.225,149,2.224,150,3.225,151,3.091,152,2.321,153,2.056,154,2.857,155,2.224,156,1.33,157,2.124,158,3.688,159,1.799,160,1.103,161,1.33,162,1.33,163,2.321,164,1.848,165,2.321,166,2.549,167,2.224,168,2.224,169,2.321,170,0.956,171,1.981,172,1.103,173,1.294,174,1.848,175,2.321,176,2.428,177,0.166,178,2.224,179,2.056,180,1.912,181,0.006,182,0.006,187,0.905,192,0.199,194,0.832,428,3.543,429,4.104,430,4.104]],["title/classes/CollectionFunctions.html",[183,0.344,275,1.703]],["body/classes/CollectionFunctions.html",[0,1.345,3,0.048,4,0.041,5,0.048,6,0.066,8,0.522,10,0.035,12,0.105,19,0.65,24,0.093,25,0.01,30,0.683,31,0.266,36,0.13,60,1.195,62,1.142,78,0.174,85,0.615,86,1.008,97,2.218,104,1.358,111,1.091,118,0.715,123,0.117,139,1.416,160,1.143,170,1.313,172,1.397,173,0.868,177,0.095,181,0.005,182,0.005,183,0.672,184,2.059,185,0.126,186,1.091,187,0.675,191,1.125,192,0.149,194,0.62,195,1.125,197,1.125,199,2.765,200,1.587,201,1.125,202,2.759,203,2.939,204,3.301,205,3.301,206,3.528,207,1.027,208,2.288,209,1.685,210,1.125,211,2.582,212,2.316,213,2.059,214,1.996,215,1.125,216,0.617,217,0.998,218,1.027,219,1.738,220,1.738,221,1.738,222,1.125,223,1.125,224,0.943,225,1.125,226,1.125,227,1.125,228,1.125,229,1.125,230,1.125,231,1.125,232,1.125,233,1.125,234,1.125,235,1.125,236,3.682,237,1.114,238,1.542,239,1.125,240,1.058,241,1.125,242,1.125,243,1.125,244,0.237,245,2.42,246,2.755,247,1.004,248,0.868,249,2.582,250,0.845,251,2.73,252,2.582,253,1.125,254,1.125,255,1.738,256,1.125,257,2.059,258,1.125,259,1.125,260,1.125,261,1.125,262,1.125,263,1.125,264,1.125,265,1.125,266,1.125,267,1.125,268,1.125,269,1.125,270,1.125,271,1.738,272,1.738,273,1.125,274,1.125,275,2.316,276,1.738,277,2.939,278,1.125,279,2.389,280,1.738,281,1.125,282,2.059,283,1.125,284,1.738,285,1.125,286,1.125,287,1.125,288,1.125,289,1.125,290,1.125,291,1.125,292,2.059,293,1.125,294,1.125,295,1.125,296,1.125,297,1.125,298,1.125,299,1.125,300,1.125,301,1.125,302,1.125,303,1.125,304,1.125,305,1.125,306,1.125,307,1.125,308,1.125,309,1.125,310,1.125,311,1.125,312,1.125,313,1.125,314,1.125,315,1.125,316,1.125,317,1.125,318,1.125,319,1.125,320,1.125,321,1.125,322,1.125,323,1.125,324,2.059,325,1.125,326,1.125,327,1.125,328,1.125,329,2.059,330,1.125,331,1.738,332,1.125,333,1.125,334,1.738,335,1.125,336,1.125,337,1.125,338,1.125,339,2.059,340,1.125,341,1.125,342,1.125,343,2.389,344,2.123,345,3.411,346,3.581,347,1.738,348,1.125,349,1.125,350,1.027,351,1.125,352,1.125,353,2.059,354,1.125,355,1.125,356,1.125,357,1.125,358,1.125,359,1.125,360,1.125,361,1.125,362,1.125,363,1.125,364,1.125,365,1.125,366,1.125,367,1.125,368,1.125,369,1.125,370,1.125,371,1.125,372,1.125,373,1.125,374,1.125,375,1.125,376,2.059,377,1.125,378,1.125,379,1.125,380,1.125,381,1.125,382,1.125,383,1.125,384,1.125,385,1.125,386,1.125,387,1.125,388,1.542,389,1.738,390,1.125,391,1.125,392,1.125,393,1.058,394,1.125,395,2.059,396,1.738,397,1.738,398,1.685,399,1.416,400,1.125,401,1.125,402,2.059,403,1.125,404,1.125,405,1.125,406,1.125,407,2.647,408,1.125,409,1.125,410,2.647,411,1.125,412,0.97,413,1.125,414,1.091,431,4.252,432,4.252,433,2.752,434,2.752]],["title/classes/ConditionalFunctions.html",[183,0.344,339,1.703]],["body/classes/ConditionalFunctions.html",[0,1.35,3,0.048,4,0.042,5,0.048,6,0.054,8,0.525,10,0.035,12,0.069,19,0.654,24,0.091,25,0.01,30,0.683,31,0.267,36,0.13,60,1.197,62,1.108,78,0.175,85,0.618,86,1.008,97,2.22,104,1.35,111,1.095,118,0.718,123,0.116,139,1.419,160,1.149,170,1.314,172,1.403,173,0.874,177,0.062,181,0.005,182,0.005,183,0.672,184,2.068,185,0.126,186,1.098,187,0.678,191,1.132,192,0.097,194,0.404,195,1.132,197,1.132,199,2.771,200,1.595,201,1.132,202,2.766,203,2.946,204,3.303,205,3.303,206,3.531,207,1.034,208,2.294,209,1.694,210,1.132,211,2.59,212,2.324,213,2.068,214,2.001,215,1.132,216,0.621,217,1.005,218,1.034,219,1.747,220,1.747,221,1.747,222,1.132,223,1.132,224,0.949,225,1.132,226,1.132,227,1.132,228,1.132,229,1.132,230,1.132,231,1.132,232,1.132,233,1.132,234,1.132,235,1.132,236,3.683,237,1.12,238,1.55,239,1.132,240,1.065,241,1.132,242,1.132,243,1.132,244,0.238,245,2.424,246,2.761,247,1.009,248,0.874,249,2.59,250,0.85,251,2.737,252,2.59,253,1.132,254,1.132,255,1.747,256,1.132,257,2.068,258,1.132,259,1.132,260,1.132,261,1.132,262,1.132,263,1.132,264,1.132,265,1.132,266,1.132,267,1.132,268,1.132,269,1.132,270,1.132,271,1.747,272,1.747,273,1.132,274,1.132,275,2.068,276,1.132,277,2.397,278,1.132,279,1.747,280,1.132,281,1.132,282,2.068,283,1.132,284,1.747,285,1.132,286,1.132,287,1.132,288,1.132,289,1.132,290,1.132,291,1.132,292,2.068,293,1.132,294,1.132,295,1.132,296,1.132,297,1.132,298,1.132,299,1.132,300,1.132,301,1.132,302,1.132,303,1.132,304,1.132,305,1.132,306,1.132,307,1.132,308,1.132,309,1.132,310,1.132,311,1.132,312,1.132,313,1.132,314,1.132,315,1.132,316,1.132,317,1.132,318,1.132,319,1.132,320,1.132,321,1.132,322,1.132,323,1.132,324,2.068,325,1.132,326,1.132,327,1.132,328,1.132,329,2.068,330,1.132,331,1.747,332,1.132,333,1.132,334,1.747,335,1.132,336,1.132,337,1.132,338,1.132,339,2.324,340,1.747,341,1.132,342,1.747,343,2.397,344,2.132,345,3.414,346,3.583,347,1.747,348,1.132,349,1.132,350,1.034,351,1.132,352,1.132,353,2.068,354,1.132,355,1.132,356,1.132,357,1.132,358,1.132,359,1.132,360,1.132,361,1.132,362,1.132,363,1.132,364,1.132,365,1.132,366,1.132,367,1.132,368,1.132,369,1.132,370,1.132,371,1.132,372,1.132,373,1.132,374,1.132,375,1.132,376,2.068,377,1.132,378,1.132,379,1.132,380,1.132,381,1.132,382,1.132,383,1.132,384,1.132,385,1.132,386,1.132,387,1.132,388,1.55,389,1.747,390,1.132,391,1.132,392,1.132,393,1.065,394,1.132,395,2.068,396,1.747,397,1.747,398,1.694,399,1.424,400,1.132,401,1.132,402,2.068,403,1.132,404,1.132,405,1.132,406,1.132,407,2.654,408,1.132,409,1.132,410,2.654,411,1.132,412,0.976,413,1.132,414,1.098,435,3.422,436,2.77]],["title/classes/CsdlAction.html",[183,0.344,437,2.431]],["body/classes/CsdlAction.html",[3,0.096,4,0.083,5,0.096,6,0.108,10,0.07,11,0.628,12,0.215,24,0.109,25,0.01,30,0.674,36,0.126,48,1.5,55,2.517,62,1.35,63,1.839,78,0.18,85,0.992,123,0.131,156,2.25,159,2.189,161,2.25,162,2.25,174,3.773,177,0.19,181,0.008,182,0.008,183,0.671,185,0.252,192,0.293,244,0.388,422,1.162,437,3.926,438,2.41,439,3.616,440,5.205,441,5.205,442,1.789,443,4.958,444,4.958,445,5.521,446,5.521,447,5.521,448,5.521,449,5.521,450,5.521,451,3.122,452,3.43,453,3.122,454,3.616,455,3.267,456,3.122,457,2.928]],["title/classes/CsdlActionImport.html",[183,0.344,456,2.431]],["body/classes/CsdlActionImport.html",[3,0.1,4,0.086,5,0.1,6,0.105,10,0.073,11,0.643,12,0.191,24,0.107,25,0.01,30,0.657,36,0.127,48,1.499,55,3.066,62,1.317,63,2.765,78,0.181,85,1.001,123,0.131,156,2.302,159,2.24,161,2.302,162,2.302,174,3.199,177,0.172,181,0.008,182,0.008,183,0.677,185,0.261,192,0.282,244,0.391,422,0.836,437,3.24,438,2.352,439,3.752,440,4.413,441,4.413,442,1.857,443,4.569,444,4.569,451,3.24,452,3.559,453,3.24,454,3.752,455,3.39,456,4.018,457,2.996,458,5.729,459,5.729,460,5.729,461,5.729]],["title/classes/CsdlAnnotable.html",[183,0.344,462,2.329]],["body/classes/CsdlAnnotable.html",[3,0.11,4,0.095,5,0.11,6,0.102,8,0.632,10,0.08,11,0.68,12,0.199,24,0.102,25,0.01,30,0.488,36,0.125,48,1.477,78,0.177,85,0.952,123,0.113,134,2.155,156,2.038,159,1.984,161,2.038,162,2.038,177,0.14,181,0.008,182,0.008,183,0.667,185,0.287,192,0.263,216,1.686,224,2.155,244,0.367,422,0.918,438,2.28,457,2.653,462,4.36,463,4.664,464,4.818,465,6.29,466,4.501,467,6.29,468,6.29,469,3.907,470,4.449,471,3.557,472,3.907,473,4.366,474,3.409,475,4.366]],["title/classes/CsdlAnnotation.html",[183,0.344,466,2.237]],["body/classes/CsdlAnnotation.html",[3,0.108,4,0.093,5,0.108,6,0.105,8,0.623,10,0.078,11,0.674,12,0.198,24,0.105,25,0.01,30,0.481,36,0.125,48,1.481,78,0.18,85,0.946,123,0.112,134,2.841,156,2.008,159,1.954,161,2.008,162,2.008,177,0.138,181,0.008,182,0.008,183,0.664,185,0.283,192,0.28,216,1.671,224,2.123,244,0.365,422,0.904,438,2.35,457,2.613,462,4.039,463,4.594,464,4.214,466,4.317,469,3.849,470,5.099,471,3.504,472,3.849,473,4.301,474,3.358,475,4.301,476,6.196,477,6.196,478,7.452]],["title/classes/CsdlAnnotations.html",[183,0.344,469,2.67]],["body/classes/CsdlAnnotations.html",[3,0.106,4,0.091,5,0.106,6,0.104,8,0.741,10,0.077,11,0.666,12,0.209,24,0.107,25,0.01,30,0.472,36,0.124,48,1.483,78,0.18,85,0.938,123,0.111,134,2.083,156,1.971,159,1.918,161,1.971,162,1.971,177,0.136,181,0.008,182,0.008,183,0.66,185,0.277,192,0.288,216,1.652,224,2.823,244,0.362,422,0.887,438,2.335,457,2.565,462,4.466,463,4.509,464,4.852,466,4.466,469,4.577,470,5.076,471,3.439,472,3.778,473,4.222,474,3.296,475,4.222,479,6.081,480,6.081,481,6.081,482,6.081,483,2.083,484,4.509]],["title/classes/CsdlComplexType.html",[183,0.344,485,2.543]],["body/classes/CsdlComplexType.html",[3,0.097,4,0.084,5,0.097,6,0.088,8,0.766,10,0.07,11,0.796,12,0.218,24,0.108,25,0.01,30,0.689,31,0.347,36,0.124,48,1.477,57,1.534,78,0.177,123,0.13,139,1.094,157,1.8,177,0.124,181,0.008,182,0.008,183,0.658,185,0.253,192,0.298,216,1.563,244,0.364,422,1.2,438,1.975,442,1.8,483,2.875,485,4.124,486,2.848,487,2.682,488,5.73,489,3.443,490,5.689,491,6.031,492,5.689,493,4.266,494,4.266,495,5.556,496,4.888,497,4.888,498,4.888,499,4.888,500,4.888,501,4.888,502,2.682,503,2.892,504,3.777,505,3.287,506,4.329,507,3.638,508,3.857,509,4.329]],["title/classes/CsdlEntityContainer.html",[183,0.344,510,3.186]],["body/classes/CsdlEntityContainer.html",[3,0.103,4,0.089,5,0.103,6,0.11,10,0.075,11,0.655,12,0.22,24,0.109,25,0.01,31,0.49,36,0.089,48,1.477,56,2.756,62,0.939,63,1.97,78,0.173,123,0.126,149,4.539,177,0.132,181,0.008,182,0.008,183,0.473,185,0.27,192,0.302,244,0.33,422,1.222,438,2.47,442,1.917,453,4.736,456,4.736,502,3.781,510,5.371,511,4.092,512,5.203,513,8.375,514,8.375,515,8.375,516,8.375,517,6.209,518,6.209,519,5.914,520,5.914,521,5.914,522,5.914,523,5.914,524,5.203,525,5.914,526,3.499]],["title/classes/CsdlEntitySet.html",[183,0.344,517,3.186]],["body/classes/CsdlEntitySet.html",[3,0.109,4,0.094,5,0.109,6,0.109,10,0.079,11,0.679,12,0.211,24,0.108,25,0.01,30,0.646,31,0.392,36,0.094,48,1.465,57,1.731,78,0.175,123,0.128,160,1.686,177,0.14,178,4.613,181,0.008,182,0.008,183,0.502,185,0.286,192,0.298,244,0.342,422,1.095,438,2.449,442,2.032,455,5.037,502,3.028,511,4.026,517,5.565,527,5.02,528,7.488,529,5.909,530,6.271,531,5.517,532,6.271,533,6.271,534,5.517,535,4.107]],["title/classes/CsdlEntityType.html",[183,0.344,505,2.543]],["body/classes/CsdlEntityType.html",[3,0.094,4,0.081,5,0.094,6,0.1,8,0.754,10,0.068,11,0.792,12,0.221,24,0.109,25,0.01,30,0.694,31,0.336,36,0.122,48,1.481,57,1.483,78,0.176,123,0.129,139,1.058,157,2.639,177,0.12,181,0.008,182,0.008,183,0.652,185,0.245,192,0.302,216,1.53,244,0.36,422,1.233,438,2.236,442,1.741,483,2.85,485,3.18,486,3.224,487,2.595,488,5.699,489,3.423,490,5.656,491,5.996,492,5.656,493,4.235,494,4.235,496,4.728,497,4.728,498,4.728,499,4.728,500,4.728,501,4.728,502,2.595,503,2.797,504,3.698,505,4.038,506,5.058,507,5.332,508,3.73,509,4.239,536,5.374,537,5.374,538,4.728]],["title/classes/CsdlEnumMember.html",[183,0.344,539,3.186]],["body/classes/CsdlEnumMember.html",[3,0.113,4,0.097,5,0.113,6,0.107,10,0.082,11,0.692,12,0.202,24,0.103,25,0.01,30,0.503,36,0.115,48,1.453,51,3.14,60,1.148,78,0.173,85,0.996,123,0.131,153,3.243,177,0.144,181,0.009,182,0.009,183,0.612,185,0.295,192,0.285,216,1.451,244,0.349,422,0.944,438,2.384,442,2.098,487,3.125,539,6.036,540,5.695,541,6.729,542,4.493,543,5.182,544,5.182]],["title/classes/CsdlEnumType.html",[183,0.344,542,2.983]],["body/classes/CsdlEnumType.html",[3,0.109,4,0.094,5,0.109,6,0.109,10,0.079,11,0.677,12,0.211,24,0.108,25,0.01,30,0.646,36,0.113,48,1.469,51,3.222,60,0.835,78,0.176,85,0.739,123,0.13,153,4.259,177,0.139,181,0.008,182,0.008,183,0.599,185,0.285,192,0.297,216,1.401,244,0.342,422,1.092,438,2.446,442,2.024,487,3.016,539,6.304,542,5.198,543,6.807,544,6.807,545,6.246,546,5.495,547,6.246,548,6.246,549,6.246]],["title/classes/CsdlFunction.html",[183,0.344,451,2.431]],["body/classes/CsdlFunction.html",[3,0.095,4,0.082,5,0.095,6,0.109,10,0.069,11,0.622,12,0.215,24,0.11,25,0.01,30,0.685,36,0.126,48,1.5,55,2.495,62,1.361,63,1.814,78,0.18,85,0.988,123,0.13,156,2.23,159,2.17,161,2.23,162,2.23,174,3.76,177,0.189,181,0.008,182,0.008,183,0.668,185,0.248,192,0.297,244,0.387,422,1.156,437,3.079,438,2.431,439,3.565,440,5.186,441,5.186,442,1.764,443,4.94,444,4.94,451,3.891,452,5.078,453,3.079,454,3.565,455,3.221,456,3.079,457,2.902,550,5.444,551,5.444,552,5.444,553,5.444,554,5.444,555,5.444,556,5.444]],["title/classes/CsdlFunctionImport.html",[183,0.344,453,2.431]],["body/classes/CsdlFunctionImport.html",[3,0.098,4,0.085,5,0.098,6,0.107,10,0.071,11,0.636,12,0.205,24,0.108,25,0.01,30,0.676,36,0.127,48,1.5,55,3.053,62,1.336,63,1.876,78,0.181,85,0.997,123,0.131,156,2.278,159,2.216,161,2.278,162,2.278,174,3.165,177,0.171,181,0.008,182,0.008,183,0.674,185,0.257,192,0.289,244,0.39,422,1.025,437,3.185,438,2.386,439,3.687,440,4.366,441,4.366,442,1.825,443,4.533,444,4.533,451,3.185,452,3.498,453,3.975,454,5.407,455,4.886,456,3.185,457,2.964,557,5.631,558,5.631,559,5.631,560,5.631,561,5.631]],["title/classes/CsdlInclude.html",[183,0.344,562,2.983]],["body/classes/CsdlInclude.html",[3,0.11,4,0.095,5,0.11,6,0.106,8,0.636,10,0.08,11,0.682,12,0.2,24,0.102,25,0.01,31,0.395,36,0.121,48,1.461,78,0.179,89,3.167,123,0.095,138,3.21,139,1.679,177,0.141,181,0.008,182,0.008,183,0.645,185,0.288,192,0.282,216,1.418,244,0.368,422,0.922,438,2.366,462,4.088,464,3.575,466,3.926,470,3.741,471,3.575,502,3.052,562,5.596,563,5.061,564,5.562,565,6.322,566,7.542,567,2.584,568,4.389,569,4.687,570,5.061,571,5.236,572,4.687,573,4.687]],["title/classes/CsdlIncludeAnnotations.html",[183,0.344,571,2.983]],["body/classes/CsdlIncludeAnnotations.html",[3,0.108,4,0.093,5,0.108,6,0.107,8,0.624,10,0.079,11,0.675,12,0.211,24,0.105,25,0.01,31,0.388,36,0.12,48,1.468,78,0.18,89,3.11,123,0.093,138,2.387,139,1.222,177,0.139,181,0.008,182,0.008,183,0.64,185,0.283,192,0.29,216,1.392,244,0.365,422,1.088,438,2.406,462,4.044,464,3.511,466,3.884,470,5.023,471,3.511,502,2.998,562,5.179,563,4.97,567,2.537,568,4.31,569,4.603,570,4.97,571,5.553,572,6.152,573,6.294,574,6.209,575,6.209,576,6.209,577,6.209,578,6.209]],["title/classes/CsdlKey.html",[183,0.344,506,2.67]],["body/classes/CsdlKey.html",[3,0.105,4,0.091,5,0.105,6,0.1,8,0.738,10,0.077,11,0.784,12,0.15,24,0.093,25,0.01,30,0.673,31,0.378,36,0.127,48,1.453,57,1.669,78,0.174,123,0.127,139,1.19,157,1.959,177,0.135,181,0.008,182,0.008,183,0.675,185,0.276,192,0.257,216,1.646,244,0.375,438,2.241,485,3.578,486,3.232,487,2.919,488,5.178,489,3.339,490,5.518,491,5.85,492,5.518,493,4.12,494,4.12,502,2.919,503,3.147,504,3.979,505,3.578,506,4.912,507,3.959,508,5.709,509,5.234,579,6.046,580,4.84,581,6.046]],["title/classes/CsdlNavigationProperty.html",[183,0.344,494,2.153]],["body/classes/CsdlNavigationProperty.html",[3,0.096,4,0.083,5,0.096,6,0.106,8,0.763,10,0.07,11,0.627,12,0.218,24,0.114,25,0.01,30,0.682,36,0.123,48,1.488,57,1.521,63,1.836,78,0.18,85,0.898,123,0.128,156,1.786,159,2.736,161,1.786,162,1.786,164,2.482,177,0.123,181,0.008,182,0.008,183,0.657,185,0.251,192,0.301,216,1.555,244,0.363,422,1.197,438,2.373,442,1.786,457,2.324,474,2.987,483,2.599,489,2.184,493,2.761,494,3.474,503,4.36,504,3.758,582,3.826,583,5.567,584,5.373,585,5.373,586,5.373,587,5.696,588,5.097,589,5.097,590,5.511,591,5.511,592,5.511,593,5.511,594,5.511,595,4.849,596,4.849,597,4.849,598,3.424]],["title/classes/CsdlNavigationPropertyBinding.html",[183,0.344,529,2.983]],["body/classes/CsdlNavigationPropertyBinding.html",[3,0.115,4,0.099,5,0.115,6,0.107,10,0.084,11,0.7,12,0.164,24,0.104,25,0.01,27,3.46,36,0.099,48,1.408,57,2.337,78,0.177,123,0.099,160,2.277,177,0.147,181,0.009,182,0.009,183,0.529,185,0.301,192,0.287,216,1.481,224,2.956,244,0.301,438,2.4,529,5.372,599,6.603,600,6.603,601,6.603,602,7.739]],["title/classes/CsdlOnDelete.html",[183,0.344,589,2.67]],["body/classes/CsdlOnDelete.html",[3,0.106,4,0.092,5,0.106,6,0.101,8,0.743,10,0.077,11,0.668,12,0.151,24,0.11,25,0.01,30,0.656,36,0.127,48,1.476,57,1.685,63,2.749,78,0.179,85,0.94,123,0.124,156,1.979,159,2.665,161,1.979,162,1.979,164,2.749,177,0.136,181,0.008,182,0.008,183,0.676,185,0.279,192,0.258,216,1.656,244,0.376,438,2.25,457,2.575,474,3.309,489,2.419,493,3.058,494,3.058,503,4.134,504,4.003,582,4.238,583,5.2,584,3.998,585,3.998,586,3.998,587,4.238,588,4.588,589,4.933,598,3.792,603,6.105,604,6.105,605,6.105]],["title/classes/CsdlParameter.html",[183,0.344,444,2.543]],["body/classes/CsdlParameter.html",[3,0.093,4,0.081,5,0.093,6,0.109,10,0.068,11,0.616,12,0.217,24,0.112,25,0.01,30,0.67,36,0.125,48,1.5,55,2.469,62,1.37,63,1.784,78,0.18,85,1.054,123,0.13,156,2.694,159,2.622,161,2.694,162,2.694,174,3.066,177,0.167,181,0.008,182,0.008,183,0.666,185,0.244,192,0.299,244,0.385,422,1.187,437,3.029,438,2.446,439,3.507,440,4.23,441,4.23,442,1.735,443,4.43,444,4.662,451,3.029,452,3.327,453,3.029,454,3.507,455,3.169,456,3.029,457,3.506,606,5.355,607,5.355,608,5.355,609,5.355,610,5.355,611,5.355,612,5.355,613,5.355]],["title/classes/CsdlProperty.html",[183,0.344,493,2.153]],["body/classes/CsdlProperty.html",[3,0.093,4,0.08,5,0.093,6,0.108,8,0.751,10,0.068,11,0.614,12,0.221,24,0.114,25,0.01,30,0.679,36,0.122,48,1.49,57,1.472,63,1.776,78,0.18,85,1.041,123,0.127,156,2.633,159,2.72,161,2.633,162,2.633,164,2.401,177,0.119,181,0.008,182,0.008,183,0.65,185,0.243,192,0.304,216,1.523,244,0.359,422,1.231,438,2.421,442,1.728,457,3.426,474,4.403,483,2.559,489,2.113,493,3.402,494,2.671,503,4.447,504,3.68,582,3.702,583,5.526,584,3.492,585,3.492,586,3.492,587,3.702,588,4.218,589,4.218,595,4.691,596,4.691,597,4.691,598,5.046,614,5.332,615,5.332,616,5.332,617,5.332,618,5.332,619,5.332,620,5.332]],["title/classes/CsdlPropertyRef.html",[183,0.344,509,2.67]],["body/classes/CsdlPropertyRef.html",[3,0.104,4,0.089,5,0.104,6,0.104,8,0.73,10,0.075,11,0.781,12,0.195,24,0.099,25,0.01,30,0.671,31,0.371,36,0.126,48,1.46,57,1.639,78,0.178,123,0.131,139,1.65,157,1.924,177,0.133,181,0.008,182,0.008,183,0.671,185,0.271,192,0.274,216,1.628,244,0.373,422,0.866,438,2.316,442,1.924,485,3.513,486,3.34,487,2.866,488,5.137,489,3.322,490,5.49,491,5.82,492,5.49,493,4.094,494,4.094,502,2.866,503,3.09,504,3.935,505,3.513,506,4.511,507,3.888,508,4.121,509,4.873,621,5.937,622,7.261]],["title/classes/CsdlReference.html",[183,0.344,568,2.983]],["body/classes/CsdlReference.html",[3,0.106,4,0.092,5,0.106,6,0.107,8,0.741,10,0.077,11,0.667,12,0.215,24,0.107,25,0.01,31,0.381,36,0.119,48,1.472,78,0.175,89,4.229,123,0.092,138,2.341,139,1.198,177,0.136,181,0.008,182,0.008,183,0.635,185,0.278,192,0.295,216,1.365,244,0.362,422,1.157,438,2.393,462,4.468,464,4.775,466,4.395,470,3.602,471,3.443,483,2.085,484,4.513,502,2.939,562,5.861,563,4.873,567,2.488,568,5.118,569,6.112,570,6.759,571,5.861,572,4.513,573,4.513,623,6.087,624,6.087,625,6.087,626,6.087,627,6.087]],["title/classes/CsdlReferentialConstraint.html",[183,0.344,588,2.67]],["body/classes/CsdlReferentialConstraint.html",[3,0.105,4,0.09,5,0.105,6,0.104,8,0.736,10,0.076,11,0.662,12,0.149,24,0.111,25,0.01,30,0.653,36,0.127,48,1.479,57,2.266,63,2.002,78,0.18,85,0.934,123,0.123,156,1.948,159,2.653,161,1.948,162,1.948,164,3.788,177,0.134,181,0.008,182,0.008,183,0.673,185,0.274,192,0.276,216,1.641,244,0.374,438,2.326,457,2.535,474,3.258,489,2.382,493,3.011,494,3.011,503,4.273,504,3.965,582,4.173,583,5.165,584,3.936,585,3.936,586,3.936,587,4.173,588,4.9,589,4.545,598,3.734,628,6.011,629,6.011,630,7.317]],["title/classes/CsdlReturnType.html",[183,0.344,443,2.543]],["body/classes/CsdlReturnType.html",[3,0.095,4,0.082,5,0.095,6,0.109,10,0.069,11,0.621,12,0.218,24,0.112,25,0.01,30,0.672,36,0.126,48,1.5,55,2.491,62,1.361,63,1.809,78,0.18,85,1.056,123,0.126,156,2.704,159,2.631,161,2.704,162,2.704,174,3.093,177,0.168,181,0.008,182,0.008,183,0.668,185,0.248,192,0.296,244,0.387,422,1.191,437,3.071,438,2.43,439,3.556,440,4.267,441,4.267,443,4.686,444,4.459,451,3.071,452,3.373,453,3.071,454,3.556,455,3.213,456,3.071,457,3.519,631,5.43,632,5.43,633,5.43,634,5.43,635,5.43,636,5.43,637,5.43,638,5.43]],["title/classes/CsdlSchema.html",[183,0.344,639,3.441]],["body/classes/CsdlSchema.html",[3,0.09,4,0.078,5,0.09,6,0.111,8,0.671,10,0.066,11,0.603,12,0.224,24,0.113,25,0.01,31,0.516,36,0.078,48,1.491,51,1.936,62,0.823,63,1.728,78,0.169,123,0.078,138,2.993,139,1.585,177,0.116,181,0.007,182,0.007,183,0.415,185,0.237,192,0.308,244,0.304,412,2.838,422,1.271,437,4.555,438,2.495,451,4.555,462,4.219,464,4.555,466,4.193,469,5.003,471,2.933,472,5.003,483,1.776,484,3.845,485,4.766,486,2.119,502,3.981,505,4.766,510,5.972,511,2.417,542,5.591,564,4.562,567,2.119,639,5.34,640,5.186,641,8.054,642,8.054,643,8.054,644,7.086,645,8.054,646,8.054,647,8.054,648,8.054,649,5.972,650,5.186,651,5.186,652,5.186,653,5.186,654,5.186,655,5.186,656,5.186,657,5.186,658,5.186,659,5.186,660,5.186,661,5.186,662,4.152,663,4.152]],["title/classes/CsdlSingleton.html",[183,0.344,518,3.186]],["body/classes/CsdlSingleton.html",[3,0.112,4,0.097,5,0.112,6,0.109,10,0.082,11,0.69,12,0.202,24,0.113,25,0.01,31,0.403,36,0.097,48,1.452,57,1.779,78,0.176,123,0.129,160,1.733,177,0.144,181,0.009,182,0.009,183,0.516,185,0.294,192,0.294,244,0.348,422,0.94,438,2.43,442,2.089,502,3.112,518,5.657,529,5.953,535,4.221,664,6.446,665,8.575,666,6.446,667,6.446,668,6.446,669,6.446]],["title/classes/CsdlStructuralProperty.html",[183,0.344,583,2.814]],["body/classes/CsdlStructuralProperty.html",[3,0.103,4,0.089,5,0.103,6,0.106,8,0.727,10,0.075,11,0.654,12,0.194,24,0.113,25,0.01,30,0.676,36,0.126,48,1.482,57,1.629,63,1.966,78,0.18,85,0.926,123,0.13,156,1.913,159,2.768,161,1.913,162,1.913,164,2.658,177,0.132,181,0.008,182,0.008,183,0.67,185,0.269,192,0.285,216,1.623,244,0.372,422,0.861,438,2.372,442,1.913,457,2.49,474,3.199,489,2.339,493,2.957,494,2.957,503,4.357,504,3.922,582,4.098,583,5.342,584,3.866,585,3.866,586,3.866,587,4.098,588,4.495,589,4.495,598,3.667,670,5.903,671,5.903,672,5.903,673,5.903]],["title/classes/CsdlStructuredType.html",[183,0.344,488,2.814]],["body/classes/CsdlStructuredType.html",[3,0.097,4,0.083,5,0.097,6,0.109,8,0.699,10,0.07,11,0.796,12,0.218,24,0.108,25,0.01,30,0.689,31,0.346,36,0.124,48,1.477,57,1.528,78,0.177,123,0.129,139,1.09,157,1.794,177,0.124,181,0.008,182,0.008,183,0.658,185,0.253,192,0.298,216,1.559,244,0.364,422,1.198,438,2.439,442,1.794,485,3.276,486,3.517,487,2.673,488,5.222,489,3.441,490,5.686,491,6.027,492,5.686,493,4.263,494,4.263,502,2.673,503,2.882,504,3.769,505,3.276,506,4.319,507,3.625,508,3.843,509,4.319,540,4.87,541,4.87,546,4.87,674,5.536,675,4.87,676,5.536,677,5.536]],["title/classes/CsdlTerm.html",[183,0.344,472,2.67]],["body/classes/CsdlTerm.html",[3,0.095,4,0.082,5,0.095,6,0.112,8,0.546,10,0.069,11,0.622,12,0.222,24,0.113,25,0.01,30,0.615,36,0.119,48,1.492,78,0.181,85,1.044,123,0.123,134,1.862,156,2.648,159,2.577,161,2.648,162,2.648,177,0.121,181,0.008,182,0.008,183,0.634,185,0.248,192,0.307,216,1.541,224,1.862,244,0.344,422,1.251,438,2.499,442,1.761,457,3.446,462,3.725,463,4.029,464,3.887,466,3.924,469,3.376,470,4.067,471,3.073,472,4.269,473,5.672,474,4.428,475,5.672,678,5.435,679,5.435,680,5.435,681,5.435,682,5.435,683,5.435,684,5.435,685,5.435,686,5.435,687,5.435,688,5.435]],["title/classes/CsdlTypeDefinition.html",[183,0.344,649,3.186]],["body/classes/CsdlTypeDefinition.html",[3,0.1,4,0.086,5,0.1,6,0.111,8,0.715,10,0.073,11,0.644,12,0.221,24,0.114,25,0.01,30,0.627,31,0.359,36,0.086,48,1.484,78,0.176,85,1.051,123,0.125,156,2.692,161,2.692,162,2.692,177,0.128,181,0.008,182,0.008,183,0.46,185,0.262,192,0.306,244,0.325,422,1.234,438,2.476,442,1.862,457,3.503,462,4.379,464,4.697,466,4.323,471,3.249,483,1.968,484,4.26,502,2.774,567,2.348,598,5.159,649,5.276,689,5.745,690,8.305,691,5.745,692,5.745,693,5.745,694,5.745,695,5.745,696,5.745,697,5.745,698,5.745]],["title/classes/DateAndTimeFunctions.html",[183,0.344,292,1.703]],["body/classes/DateAndTimeFunctions.html",[0,1.295,3,0.045,4,0.039,5,0.045,6,0.101,8,0.499,10,0.032,12,0.193,19,0.606,24,0.105,25,0.01,30,0.678,31,0.252,36,0.129,60,1.201,62,1.31,78,0.173,85,0.588,86,1.005,97,2.191,104,1.324,111,1.05,118,0.684,123,0.126,126,2.095,139,1.383,160,1.082,170,1.308,172,1.336,173,0.809,177,0.173,181,0.005,182,0.005,183,0.665,184,1.968,185,0.117,186,1.016,187,0.639,191,1.048,192,0.275,194,1.147,195,1.048,197,1.048,199,2.701,200,1.502,201,1.048,202,2.688,203,2.871,204,3.273,205,3.273,206,3.5,207,0.957,208,2.222,209,1.595,210,1.048,211,2.498,212,2.229,213,1.968,214,1.938,215,1.048,216,0.575,217,0.93,218,0.957,219,1.645,220,1.645,221,1.645,222,1.048,223,1.048,224,0.878,225,1.048,226,1.048,227,1.048,228,1.048,229,1.048,230,1.048,231,1.048,232,1.048,233,1.048,234,1.048,235,1.048,236,3.668,237,1.054,238,1.459,239,1.048,240,0.986,241,1.048,242,1.048,243,1.048,244,0.227,245,2.376,246,2.696,247,0.95,248,0.809,249,2.498,250,0.787,251,2.651,252,2.498,253,1.048,254,1.048,255,1.645,256,1.048,257,1.968,258,1.048,259,1.048,260,1.048,261,1.048,262,1.048,263,1.048,264,1.048,265,1.048,266,1.048,267,1.048,268,1.048,269,1.048,270,1.048,271,1.645,272,1.645,273,1.048,274,1.048,275,1.968,276,1.048,277,2.299,278,1.048,279,1.645,280,1.048,281,1.048,282,1.968,283,1.048,284,1.645,285,1.048,286,1.048,287,1.048,288,1.048,289,1.048,290,1.048,291,1.048,292,2.229,293,1.645,294,1.048,295,1.645,296,1.048,297,1.645,298,1.048,299,1.645,300,1.048,301,1.645,302,1.048,303,1.645,304,1.048,305,1.645,306,1.048,307,1.645,308,1.048,309,2.299,310,1.048,311,1.645,312,1.048,313,1.645,314,1.048,315,1.645,316,1.048,317,1.645,318,1.048,319,1.645,320,1.048,321,1.048,322,1.048,323,1.048,324,1.968,325,1.048,326,1.048,327,1.048,328,1.048,329,1.968,330,1.048,331,1.645,332,1.048,333,1.048,334,1.645,335,1.048,336,1.048,337,1.048,338,1.048,339,1.968,340,1.048,341,1.048,342,1.048,343,2.299,344,2.03,345,3.373,346,3.558,347,1.645,348,1.048,349,1.048,350,0.957,351,1.048,352,1.048,353,1.968,354,1.048,355,1.048,356,1.048,357,1.048,358,1.048,359,1.048,360,1.048,361,1.048,362,1.048,363,1.048,364,1.048,365,1.048,366,1.048,367,1.048,368,1.048,369,1.048,370,1.048,371,1.048,372,1.048,373,1.048,374,1.048,375,1.048,376,1.968,377,1.048,378,1.048,379,1.048,380,1.048,381,1.048,382,1.048,383,1.048,384,1.048,385,1.048,386,1.048,387,1.048,388,1.459,389,1.645,390,1.048,391,1.048,392,1.048,393,0.986,394,1.048,395,1.968,396,1.645,397,1.645,398,1.595,399,1.341,400,1.048,401,1.048,402,1.968,403,1.048,404,1.048,405,1.048,406,1.048,407,2.571,408,1.048,409,1.048,410,2.571,411,1.048,412,0.903,413,1.048,414,1.016,699,4.024,700,4.024,701,4.024,702,4.024,703,4.024,704,4.024,705,4.024,706,4.024,707,3.222,708,4.024,709,4.024,710,4.024,711,2.564,712,2.564,713,2.564,714,2.564,715,2.564,716,2.564,717,2.564,718,2.564,719,2.564,720,2.564,721,2.564,722,2.564,723,2.564,724,2.564]],["title/classes/Field.html",[97,1.156,183,0.344]],["body/classes/Field.html",[0,1.336,3,0.047,4,0.041,5,0.047,6,0.08,8,0.518,10,0.034,11,0.381,12,0.104,19,0.642,24,0.097,25,0.01,30,0.682,31,0.263,36,0.13,48,0.687,60,1.195,62,1.055,78,0.176,85,0.61,86,1.007,97,2.227,104,1.352,111,1.084,118,0.71,123,0.121,124,0.905,139,1.41,160,1.132,170,1.313,172,1.689,173,0.857,177,0.115,181,0.005,182,0.005,183,0.67,184,2.043,185,0.124,186,1.077,187,0.668,191,1.11,192,0.203,194,0.614,195,1.11,197,1.11,199,2.754,200,1.572,201,1.11,202,2.747,203,2.927,204,3.296,205,3.296,206,3.523,207,1.014,208,2.276,209,1.668,210,1.11,211,2.567,212,2.301,213,2.043,214,2.071,215,1.721,216,0.609,217,1.869,218,2.167,219,1.721,220,1.721,221,1.721,222,1.721,223,2.107,224,1.442,225,1.11,226,1.11,227,1.11,228,1.11,229,1.11,230,1.11,231,1.11,232,1.11,233,1.11,234,1.11,235,1.11,236,3.679,237,1.103,238,1.527,239,1.11,240,1.045,241,1.11,242,1.11,243,1.11,244,0.265,245,2.412,246,2.745,247,0.994,248,0.857,249,2.567,250,0.834,251,2.715,252,2.567,253,1.11,254,1.11,255,1.721,256,1.11,257,2.043,258,1.11,259,1.11,260,1.11,261,1.11,262,1.11,263,1.11,264,1.11,265,1.11,266,1.11,267,1.11,268,1.11,269,1.11,270,1.11,271,1.721,272,1.721,273,1.11,274,1.11,275,2.043,276,1.11,277,2.373,278,1.11,279,1.721,280,1.11,281,1.11,282,2.043,283,1.11,284,1.721,285,1.11,286,1.11,287,1.11,288,1.11,289,1.11,290,1.11,291,1.11,292,2.043,293,1.11,294,1.11,295,1.11,296,1.11,297,1.11,298,1.11,299,1.11,300,1.11,301,1.11,302,1.11,303,1.11,304,1.11,305,1.11,306,1.11,307,1.11,308,1.11,309,1.11,310,1.11,311,1.11,312,1.11,313,1.11,314,1.11,315,1.11,316,1.11,317,1.11,318,1.11,319,1.11,320,1.11,321,1.11,322,1.11,323,1.11,324,2.043,325,1.11,326,1.11,327,1.11,328,1.11,329,2.043,330,1.11,331,1.721,332,1.11,333,1.11,334,1.721,335,1.11,336,1.11,337,1.11,338,1.11,339,2.043,340,1.11,341,1.11,342,1.11,343,2.373,344,2.107,345,3.404,346,3.577,347,1.721,348,1.11,349,1.11,350,1.014,351,1.11,352,1.11,353,2.043,354,1.11,355,1.11,356,1.11,357,1.11,358,1.11,359,1.11,360,1.11,361,1.11,362,1.11,363,1.11,364,1.11,365,1.11,366,1.11,367,1.11,368,1.11,369,1.11,370,1.11,371,1.11,372,1.11,373,1.11,374,1.11,375,1.11,376,2.043,377,1.11,378,1.11,379,1.11,380,1.11,381,1.11,382,1.11,383,1.11,384,1.11,385,1.11,386,1.11,387,1.11,388,1.527,389,1.721,390,1.11,391,1.11,392,1.11,393,1.045,394,1.11,395,2.043,396,1.721,397,1.721,398,1.668,399,1.403,400,1.11,401,1.11,402,2.043,403,1.11,404,1.11,405,1.11,406,1.11,407,2.633,408,1.11,409,1.11,410,2.633,411,1.11,412,0.957,413,1.11,414,1.077,442,0.881,725,2.717,726,2.717,727,2.717,728,2.717]],["title/classes/Field-1.html",[97,0.962,183,0.286,729,1.462]],["body/classes/Field-1.html",[3,0.065,4,0.056,5,0.065,6,0.086,8,0.373,10,0.079,11,0.48,12,0.092,24,0.097,25,0.01,27,1.516,31,0.527,36,0.056,37,3.108,48,1.282,49,2.886,51,1.983,54,2.617,55,1.926,56,2.475,57,1.87,58,1.932,59,2.098,60,0.496,62,0.985,63,2.067,75,3.601,78,0.153,97,1.668,99,1.516,108,1.791,111,1.434,123,0.112,128,2.879,131,2.195,134,1.82,138,1.427,139,0.73,140,1.236,155,2.011,156,1.202,157,1.202,159,1.17,160,0.998,161,1.202,162,1.202,164,1.671,170,1.275,174,1.671,177,0.083,178,2.879,181,0.006,182,0.006,183,0.425,185,0.169,192,0.217,216,0.832,217,3.318,224,1.271,237,1.392,244,0.169,245,1.675,437,2.098,440,2.305,441,2.305,442,1.202,443,2.195,444,2.195,451,2.098,452,2.305,453,2.098,455,2.195,456,2.098,457,1.565,466,1.932,469,2.305,470,2.195,472,2.305,473,2.576,474,2.011,475,2.576,485,2.195,486,1.516,489,1.47,490,2.43,492,2.43,493,1.859,494,1.859,503,1.932,505,2.195,506,2.305,507,2.43,509,2.305,510,2.751,511,2.475,517,2.751,518,2.751,526,2.195,528,3.264,529,2.576,535,2.43,539,2.751,542,2.576,543,2.97,544,2.97,562,2.576,567,2.171,568,3.688,569,2.751,571,2.576,572,2.751,573,2.751,584,2.43,585,2.43,586,2.43,588,2.305,589,2.305,598,2.305,639,4.253,644,3.264,649,2.751,662,2.97,663,2.97,730,3.264,731,7.138,732,3.71,733,5.312,734,8.296,735,2.565,736,0.998,737,3.264,738,4.253,739,1.729,740,3.264,741,4.673,742,3.71,743,2.305,744,7.332,745,3.71,746,3.71,747,3.71,748,3.71,749,3.71,750,3.71,751,3.71,752,3.71,753,3.71,754,3.71,755,3.71,756,3.71,757,3.71,758,3.71,759,3.71,760,2.576,761,3.71,762,3.71,763,3.71,764,3.71,765,3.71,766,3.71,767,3.71,768,3.71,769,3.71,770,3.71,771,3.71,772,3.71,773,3.71,774,3.71,775,3.71,776,3.71,777,3.71,778,3.71,779,3.71,780,3.71,781,3.71,782,3.71,783,3.71,784,3.71,785,3.71,786,3.71,787,3.854,788,3.71,789,3.71,790,3.71,791,3.71,792,3.71,793,3.71,794,3.71,795,3.71,796,3.71,797,3.71,798,3.71,799,3.71,800,3.71,801,3.71,802,3.71,803,3.71,804,3.71,805,3.71,806,3.71,807,3.71,808,3.71,809,3.71,810,3.71,811,3.71,812,3.71,813,3.71,814,3.71,815,3.71,816,3.71,817,3.71,818,3.71,819,3.71,820,3.71,821,3.71,822,3.71,823,3.71,824,3.71,825,3.71,826,3.71,827,3.71,828,3.71,829,3.71,830,3.71,831,3.71,832,5.312,833,6.205,834,3.71,835,3.71,836,3.71,837,2.751,838,3.71,839,3.71,840,6.774,841,5.312,842,3.71,843,3.71,844,3.71,845,3.71,846,3.71,847,3.71,848,8.369,849,3.71,850,5.312,851,3.71,852,3.688,853,3.71,854,3.71,855,2.879,856,3.71,857,3.71,858,3.71,859,3.71,860,3.71,861,3.71,862,3.71,863,3.71,864,3.71,865,3.71,866,3.71,867,3.71,868,3.71,869,3.71,870,3.71,871,4.208,872,3.71,873,2.97,874,3.71,875,2.97,876,3.71,877,6.205,878,5.312,879,5.459,880,3.71,881,3.71,882,3.71,883,3.71,884,3.71,885,3.71,886,2.43,887,2.97,888,3.71,889,3.71]],["title/classes/Function.html",[62,0.682,183,0.344]],["body/classes/Function.html",[0,1.336,3,0.047,4,0.041,5,0.047,6,0.08,8,0.518,10,0.034,12,0.104,19,0.642,23,1.103,24,0.097,25,0.01,30,0.687,31,0.263,36,0.13,60,1.194,62,1.1,78,0.175,85,0.61,86,1.007,97,2.213,104,1.335,111,1.084,118,0.865,123,0.12,139,1.41,160,1.133,170,1.313,172,1.386,173,0.857,177,0.094,181,0.005,182,0.005,183,0.67,184,2.043,185,0.124,186,1.077,187,0.668,191,1.111,192,0.203,194,0.614,195,1.111,197,1.111,199,2.754,200,1.572,201,1.111,202,2.839,203,3.071,204,3.296,205,3.315,206,3.523,207,1.015,208,2.519,209,1.669,210,1.111,211,2.568,212,2.301,213,2.043,214,2.072,215,1.111,216,0.61,217,0.986,218,1.015,219,1.721,220,1.721,221,1.721,222,1.111,223,1.111,224,0.931,225,1.111,226,1.111,227,1.111,228,1.111,229,1.111,230,1.111,231,1.111,232,1.111,233,1.111,234,1.111,235,1.111,236,3.685,237,1.103,238,1.527,239,1.111,240,1.045,241,1.111,242,1.111,243,1.111,244,0.265,245,2.413,246,2.9,247,0.995,248,0.857,249,2.568,250,0.834,251,2.716,252,2.568,253,1.111,254,1.111,255,1.721,256,1.111,257,2.043,258,1.111,259,1.111,260,1.111,261,1.111,262,1.111,263,1.111,264,1.111,265,1.111,266,1.111,267,1.111,268,1.111,269,1.111,270,1.111,271,1.721,272,1.721,273,1.111,274,1.111,275,2.043,276,1.111,277,2.373,278,1.111,279,1.721,280,1.111,281,1.111,282,2.043,283,1.111,284,1.721,285,1.111,286,1.111,287,1.111,288,1.111,289,1.111,290,1.111,291,1.111,292,2.043,293,1.111,294,1.111,295,1.111,296,1.111,297,1.111,298,1.111,299,1.111,300,1.111,301,1.111,302,1.111,303,1.111,304,1.111,305,1.111,306,1.111,307,1.111,308,1.111,309,1.111,310,1.111,311,1.111,312,1.111,313,1.111,314,1.111,315,1.111,316,1.111,317,1.111,318,1.111,319,1.111,320,1.111,321,1.111,322,1.111,323,1.111,324,2.043,325,1.111,326,1.111,327,1.111,328,1.111,329,2.043,330,1.111,331,1.721,332,1.111,333,1.111,334,1.721,335,1.111,336,1.111,337,1.111,338,1.111,339,2.043,340,1.111,341,1.111,342,1.111,343,2.373,344,2.107,345,3.405,346,3.577,347,1.721,348,1.111,349,1.111,350,1.015,351,1.111,352,1.111,353,2.043,354,1.111,355,1.111,356,1.111,357,1.111,358,1.111,359,1.111,360,1.111,361,1.111,362,1.111,363,1.111,364,1.111,365,1.111,366,1.111,367,1.111,368,1.111,369,1.111,370,1.111,371,1.111,372,1.111,373,1.111,374,1.111,375,1.111,376,2.043,377,1.111,378,1.111,379,1.111,380,1.111,381,1.111,382,1.111,383,1.111,384,1.111,385,1.111,386,1.111,387,1.111,388,1.527,389,1.721,390,1.111,391,1.111,392,1.111,393,1.045,394,1.111,395,2.043,396,1.721,397,1.721,398,1.669,399,1.403,400,1.111,401,1.111,402,2.043,403,1.111,404,1.111,405,1.111,406,1.111,407,2.634,408,1.111,409,1.111,410,2.634,411,1.111,412,0.958,413,1.111,414,1.077,442,0.881,890,1.619,891,2.718,892,1.887,893,2.718,894,2.718,895,2.718]],["title/classes/GeoFunctions.html",[183,0.344,329,1.703]],["body/classes/GeoFunctions.html",[0,1.334,3,0.047,4,0.041,5,0.047,6,0.073,8,0.517,10,0.034,12,0.128,19,0.64,24,0.095,25,0.01,30,0.687,31,0.263,36,0.13,60,1.195,62,1.166,78,0.175,85,0.609,86,1.007,97,2.212,104,1.364,111,1.082,118,0.708,123,0.118,139,1.408,160,1.13,170,1.312,172,1.383,173,0.854,177,0.115,181,0.005,182,0.005,183,0.67,184,2.039,185,0.124,186,1.074,187,0.667,191,1.107,192,0.18,194,0.75,195,1.107,197,1.107,199,2.751,200,1.568,201,1.107,202,2.743,203,2.924,204,3.295,205,3.295,206,3.522,207,1.011,208,2.273,209,1.665,210,1.107,211,2.563,212,2.297,213,2.039,214,1.983,215,1.107,216,0.607,217,0.982,218,1.011,219,1.717,220,1.717,221,1.717,222,1.107,223,1.107,224,0.928,225,1.107,226,1.107,227,1.107,228,1.107,229,1.107,230,1.107,231,1.107,232,1.107,233,1.107,234,1.107,235,1.107,236,3.69,237,1.1,238,1.523,239,1.107,240,1.042,241,1.107,242,1.107,243,1.107,244,0.235,245,2.411,246,2.742,247,0.992,248,0.854,249,2.563,250,0.832,251,2.712,252,2.563,253,1.107,254,1.107,255,1.717,256,1.107,257,2.039,258,1.107,259,1.107,260,1.107,261,1.107,262,1.107,263,1.107,264,1.107,265,1.107,266,1.107,267,1.107,268,1.107,269,1.107,270,1.107,271,1.717,272,1.717,273,1.107,274,1.107,275,2.039,276,1.107,277,2.369,278,1.107,279,1.717,280,1.107,281,1.107,282,2.039,283,1.107,284,1.717,285,1.107,286,1.107,287,1.107,288,1.107,289,1.107,290,1.107,291,1.107,292,2.039,293,1.107,294,1.107,295,1.107,296,1.107,297,1.107,298,1.107,299,1.107,300,1.107,301,1.107,302,1.107,303,1.107,304,1.107,305,1.107,306,1.107,307,1.107,308,1.107,309,1.107,310,1.107,311,1.107,312,1.107,313,1.107,314,1.107,315,1.107,316,1.107,317,1.107,318,1.107,319,1.107,320,1.107,321,1.107,322,1.107,323,1.107,324,2.039,325,1.107,326,1.107,327,1.107,328,1.107,329,2.297,330,1.717,331,2.369,332,1.107,333,1.717,334,2.369,335,1.107,336,1.717,337,1.107,338,1.717,339,2.039,340,1.107,341,1.107,342,1.107,343,2.369,344,2.102,345,3.403,346,3.576,347,1.717,348,1.107,349,1.107,350,1.011,351,1.107,352,1.107,353,2.039,354,1.107,355,1.107,356,1.107,357,1.107,358,1.107,359,1.107,360,1.107,361,1.107,362,1.107,363,1.107,364,1.107,365,1.107,366,1.107,367,1.107,368,1.107,369,1.107,370,1.107,371,1.107,372,1.107,373,1.107,374,1.107,375,1.107,376,2.039,377,1.107,378,1.107,379,1.107,380,1.107,381,1.107,382,1.107,383,1.107,384,1.107,385,1.107,386,1.107,387,1.107,388,1.523,389,1.717,390,1.107,391,1.107,392,1.107,393,1.042,394,1.107,395,2.039,396,1.717,397,1.717,398,1.665,399,1.399,400,1.107,401,1.107,402,2.039,403,1.107,404,1.107,405,1.107,406,1.107,407,2.63,408,1.107,409,1.107,410,2.63,411,1.107,412,0.955,413,1.107,414,1.074,422,0.75,896,4.201,897,4.201,898,4.201,899,2.709,900,2.709,901,2.709]],["title/classes/Grouping.html",[183,0.344,213,1.703]],["body/classes/Grouping.html",[0,1.341,3,0.048,4,0.041,5,0.048,6,0.08,8,0.521,10,0.035,12,0.105,19,0.646,23,1.109,24,0.097,25,0.01,30,0.682,31,0.265,36,0.13,60,1.194,62,1.058,78,0.175,85,0.613,86,1.007,97,2.216,104,1.337,111,1.088,118,0.868,123,0.117,139,1.413,160,1.138,170,1.313,172,1.392,173,0.863,177,0.094,181,0.005,182,0.005,183,0.671,184,2.052,185,0.125,186,1.084,187,0.672,191,1.118,192,0.204,194,0.618,195,1.118,197,1.118,199,2.76,200,1.58,201,1.118,202,2.983,203,3.076,204,3.299,205,3.299,206,3.526,207,1.021,208,2.524,209,1.678,210,1.118,211,2.575,212,2.309,213,2.309,214,2.076,215,1.118,216,0.614,217,0.992,218,1.021,219,1.73,220,1.73,221,1.73,222,1.118,223,1.118,224,0.937,225,1.118,226,1.118,227,1.118,228,1.118,229,1.118,230,1.118,231,1.118,232,1.118,233,1.118,234,1.118,235,1.118,236,3.681,237,1.109,238,1.535,239,1.118,240,1.052,241,1.118,242,1.118,243,1.118,244,0.266,245,2.417,246,2.751,247,1,248,0.863,249,2.575,250,0.84,251,2.723,252,2.575,253,1.118,254,1.118,255,1.73,256,1.118,257,2.052,258,1.118,259,1.118,260,1.118,261,1.118,262,1.118,263,1.118,264,1.118,265,1.118,266,1.118,267,1.118,268,1.118,269,1.118,270,1.118,271,1.73,272,1.73,273,1.118,274,1.118,275,2.052,276,1.118,277,2.381,278,1.118,279,1.73,280,1.118,281,1.118,282,2.052,283,1.118,284,1.73,285,1.118,286,1.118,287,1.118,288,1.118,289,1.118,290,1.118,291,1.118,292,2.052,293,1.118,294,1.118,295,1.118,296,1.118,297,1.118,298,1.118,299,1.118,300,1.118,301,1.118,302,1.118,303,1.118,304,1.118,305,1.118,306,1.118,307,1.118,308,1.118,309,1.118,310,1.118,311,1.118,312,1.118,313,1.118,314,1.118,315,1.118,316,1.118,317,1.118,318,1.118,319,1.118,320,1.118,321,1.118,322,1.118,323,1.118,324,2.052,325,1.118,326,1.118,327,1.118,328,1.118,329,2.052,330,1.118,331,1.73,332,1.118,333,1.118,334,1.73,335,1.118,336,1.118,337,1.118,338,1.118,339,2.052,340,1.118,341,1.118,342,1.118,343,2.381,344,2.116,345,3.408,346,3.579,347,1.73,348,1.118,349,1.118,350,1.021,351,1.118,352,1.118,353,2.052,354,1.118,355,1.118,356,1.118,357,1.118,358,1.118,359,1.118,360,1.118,361,1.118,362,1.118,363,1.118,364,1.118,365,1.118,366,1.118,367,1.118,368,1.118,369,1.118,370,1.118,371,1.118,372,1.118,373,1.118,374,1.118,375,1.118,376,2.052,377,1.118,378,1.118,379,1.118,380,1.118,381,1.118,382,1.118,383,1.118,384,1.118,385,1.118,386,1.118,387,1.118,388,1.535,389,2.381,390,1.118,391,1.118,392,1.118,393,1.052,394,1.118,395,2.052,396,1.73,397,1.73,398,1.678,399,1.41,400,1.118,401,1.118,402,2.052,403,1.118,404,1.118,405,1.118,406,1.118,407,2.641,408,1.118,409,1.118,410,2.641,411,1.118,412,0.964,413,1.118,414,1.084,890,1.628,892,1.9,902,2.736,903,2.736,904,2.736,905,2.736,906,2.736]],["title/classes/GroupingOperators.html",[183,0.344,395,1.703]],["body/classes/GroupingOperators.html",[0,1.352,3,0.048,4,0.042,5,0.048,6,0.054,8,0.526,10,0.035,12,0.069,19,0.657,24,0.091,25,0.01,30,0.683,31,0.268,36,0.13,60,1.196,62,1.064,78,0.175,85,0.619,86,1.008,97,2.222,104,1.34,111,1.097,118,0.72,123,0.116,139,1.42,160,1.152,170,1.314,172,1.406,173,0.877,177,0.062,181,0.005,182,0.005,183,0.673,184,2.072,185,0.127,186,1.102,187,0.68,191,1.136,192,0.097,194,0.406,195,1.136,197,1.136,199,2.775,200,1.6,201,1.136,202,2.769,203,2.949,204,3.305,205,3.305,206,3.532,207,1.038,208,2.297,209,1.698,210,1.136,211,2.594,212,2.329,213,2.658,214,2.004,215,1.136,216,0.623,217,1.008,218,1.038,219,1.751,220,1.751,221,1.751,222,1.136,223,1.136,224,0.952,225,1.136,226,1.136,227,1.136,228,1.136,229,1.136,230,1.136,231,1.136,232,1.136,233,1.136,234,1.136,235,1.136,236,3.684,237,1.123,238,1.554,239,1.136,240,1.069,241,1.136,242,1.136,243,1.136,244,0.239,245,2.427,246,2.764,247,1.012,248,0.877,249,2.594,250,0.853,251,2.741,252,2.594,253,1.136,254,1.136,255,1.751,256,1.136,257,2.072,258,1.136,259,1.136,260,1.136,261,1.136,262,1.136,263,1.136,264,1.136,265,1.136,266,1.136,267,1.136,268,1.136,269,1.136,270,1.136,271,1.751,272,1.751,273,1.136,274,1.136,275,2.072,276,1.136,277,2.402,278,1.136,279,1.751,280,1.136,281,1.136,282,2.072,283,1.136,284,1.751,285,1.136,286,1.136,287,1.136,288,1.136,289,1.136,290,1.136,291,1.136,292,2.072,293,1.136,294,1.136,295,1.136,296,1.136,297,1.136,298,1.136,299,1.136,300,1.136,301,1.136,302,1.136,303,1.136,304,1.136,305,1.136,306,1.136,307,1.136,308,1.136,309,1.136,310,1.136,311,1.136,312,1.136,313,1.136,314,1.136,315,1.136,316,1.136,317,1.136,318,1.136,319,1.136,320,1.136,321,1.136,322,1.136,323,1.136,324,2.072,325,1.136,326,1.136,327,1.136,328,1.136,329,2.072,330,1.136,331,1.751,332,1.136,333,1.136,334,1.751,335,1.136,336,1.136,337,1.136,338,1.136,339,2.072,340,1.136,341,1.136,342,1.136,343,2.402,344,2.137,345,3.416,346,3.584,347,1.751,348,1.136,349,1.136,350,1.038,351,1.136,352,1.136,353,2.072,354,1.136,355,1.136,356,1.136,357,1.136,358,1.136,359,1.136,360,1.136,361,1.136,362,1.136,363,1.136,364,1.136,365,1.136,366,1.136,367,1.136,368,1.136,369,1.136,370,1.136,371,1.136,372,1.136,373,1.136,374,1.136,375,1.136,376,2.072,377,1.136,378,1.136,379,1.136,380,1.136,381,1.136,382,1.136,383,1.136,384,1.136,385,1.136,386,1.136,387,1.136,388,1.554,389,1.751,390,1.136,391,1.136,392,1.136,393,1.069,394,1.136,395,2.329,396,2.137,397,1.751,398,1.698,399,1.428,400,1.136,401,1.136,402,2.072,403,1.136,404,1.136,405,1.136,406,1.136,407,2.658,408,1.136,409,1.136,410,2.658,411,1.136,412,0.98,413,1.136,414,1.102,907,2.78]],["title/classes/Lambda.html",[183,0.344,398,1.703]],["body/classes/Lambda.html",[0,1.337,3,0.047,4,0.041,5,0.047,6,0.08,8,0.519,10,0.034,12,0.105,19,0.643,23,1.105,24,0.097,25,0.01,30,0.682,31,0.264,36,0.13,60,1.194,62,1.055,78,0.176,85,0.611,86,1.007,97,2.214,104,1.336,111,1.085,118,0.866,123,0.117,139,1.506,160,1.134,170,1.313,172,1.388,173,0.858,177,0.094,181,0.005,182,0.005,183,0.671,184,2.045,185,0.124,186,1.079,187,0.669,191,1.112,192,0.203,194,0.615,195,1.112,197,1.112,199,2.756,200,1.574,201,1.112,202,2.84,203,3.072,204,3.297,205,3.297,206,3.524,207,1.016,208,2.52,209,1.671,210,1.112,211,2.569,212,2.303,213,2.045,214,2.073,215,1.112,216,0.61,217,0.987,218,1.016,219,1.723,220,1.723,221,1.723,222,1.112,223,1.112,224,0.932,225,1.112,226,1.112,227,1.112,228,1.112,229,1.112,230,1.112,231,1.112,232,1.112,233,1.112,234,1.112,235,1.112,236,3.68,237,1.105,238,1.529,239,1.112,240,1.047,241,1.112,242,1.112,243,1.112,244,0.265,245,2.414,246,2.901,247,0.996,248,0.858,249,2.569,250,0.836,251,2.717,252,2.569,253,1.112,254,1.112,255,1.723,256,1.112,257,2.045,258,1.112,259,1.112,260,1.112,261,1.112,262,1.112,263,1.112,264,1.112,265,1.112,266,1.112,267,1.112,268,1.112,269,1.112,270,1.112,271,1.723,272,1.723,273,1.112,274,1.112,275,2.045,276,1.112,277,2.375,278,1.112,279,1.723,280,1.112,281,1.112,282,2.045,283,1.112,284,1.723,285,1.112,286,1.112,287,1.112,288,1.112,289,1.112,290,1.112,291,1.112,292,2.045,293,1.112,294,1.112,295,1.112,296,1.112,297,1.112,298,1.112,299,1.112,300,1.112,301,1.112,302,1.112,303,1.112,304,1.112,305,1.112,306,1.112,307,1.112,308,1.112,309,1.112,310,1.112,311,1.112,312,1.112,313,1.112,314,1.112,315,1.112,316,1.112,317,1.112,318,1.112,319,1.112,320,1.112,321,1.112,322,1.112,323,1.112,324,2.045,325,1.112,326,1.112,327,1.112,328,1.112,329,2.045,330,1.112,331,1.723,332,1.112,333,1.112,334,1.723,335,1.112,336,1.112,337,1.112,338,1.112,339,2.045,340,1.112,341,1.112,342,1.112,343,2.717,344,2.109,345,3.405,346,3.578,347,1.723,348,1.112,349,1.112,350,1.016,351,1.112,352,1.112,353,2.045,354,1.112,355,1.112,356,1.112,357,1.112,358,1.112,359,1.112,360,1.112,361,1.112,362,1.112,363,1.112,364,1.112,365,1.112,366,1.112,367,1.112,368,1.112,369,1.112,370,1.112,371,1.112,372,1.112,373,1.112,374,1.112,375,1.112,376,2.045,377,1.112,378,1.112,379,1.112,380,1.112,381,1.112,382,1.112,383,1.112,384,1.112,385,1.112,386,1.112,387,1.112,388,1.529,389,1.723,390,1.112,391,1.112,392,1.112,393,1.047,394,1.112,395,2.045,396,1.723,397,1.723,398,2.045,399,1.405,400,1.112,401,1.112,402,2.045,403,1.112,404,1.112,405,1.112,406,1.112,407,2.635,408,1.112,409,1.112,410,2.635,411,1.112,412,0.959,413,1.112,414,1.079,422,0.397,890,1.621,892,1.89,908,2.395,909,2.722,910,2.722,911,2.722,912,2.722]],["title/classes/LambdaOperators.html",[183,0.344,402,1.703]],["body/classes/LambdaOperators.html",[0,1.343,3,0.048,4,0.041,5,0.048,6,0.066,8,0.522,10,0.035,12,0.105,19,0.648,24,0.093,25,0.01,30,0.682,31,0.265,36,0.13,60,1.198,62,1.059,78,0.175,85,0.614,86,1.008,97,2.244,104,1.358,111,1.09,118,0.714,123,0.117,139,1.533,160,1.141,170,1.313,172,1.395,173,0.866,177,0.095,181,0.005,182,0.005,183,0.671,184,2.056,185,0.125,186,1.088,187,0.673,191,1.122,192,0.148,194,0.619,195,1.122,197,1.122,199,2.763,200,1.584,201,1.122,202,2.757,203,2.937,204,3.3,205,3.3,206,3.527,207,1.025,208,2.285,209,1.682,210,1.122,211,2.579,212,2.313,213,2.056,214,1.994,215,1.122,216,0.615,217,0.995,218,1.025,219,1.734,220,1.734,221,1.734,222,1.122,223,1.122,224,0.94,225,1.122,226,1.122,227,1.122,228,1.122,229,1.122,230,1.122,231,1.122,232,1.122,233,1.122,234,1.122,235,1.122,236,3.681,237,1.112,238,1.539,239,1.122,240,1.055,241,1.122,242,1.122,243,1.122,244,0.237,245,2.419,246,2.753,247,1.002,248,0.866,249,2.579,250,0.843,251,2.727,252,2.579,253,1.122,254,1.122,255,1.734,256,1.122,257,2.056,258,1.122,259,1.122,260,1.122,261,1.122,262,1.122,263,1.122,264,1.122,265,1.122,266,1.122,267,1.122,268,1.122,269,1.122,270,1.122,271,1.734,272,1.734,273,1.122,274,1.122,275,2.056,276,1.122,277,2.385,278,1.122,279,1.734,280,1.122,281,1.122,282,2.056,283,1.122,284,1.734,285,1.122,286,1.122,287,1.122,288,1.122,289,1.122,290,1.122,291,1.122,292,2.056,293,1.122,294,1.122,295,1.122,296,1.122,297,1.122,298,1.122,299,1.122,300,1.122,301,1.122,302,1.122,303,1.122,304,1.122,305,1.122,306,1.122,307,1.122,308,1.122,309,1.122,310,1.122,311,1.122,312,1.122,313,1.122,314,1.122,315,1.122,316,1.122,317,1.122,318,1.122,319,1.122,320,1.122,321,1.122,322,1.122,323,1.122,324,2.056,325,1.122,326,1.122,327,1.122,328,1.122,329,2.056,330,1.122,331,1.734,332,1.122,333,1.122,334,1.734,335,1.122,336,1.122,337,1.122,338,1.122,339,2.056,340,1.122,341,1.122,342,1.122,343,2.385,344,2.12,345,3.41,346,3.58,347,1.734,348,1.122,349,1.122,350,1.025,351,1.122,352,1.122,353,2.056,354,1.122,355,1.122,356,1.122,357,1.122,358,1.122,359,1.122,360,1.122,361,1.122,362,1.122,363,1.122,364,1.122,365,1.122,366,1.122,367,1.122,368,1.122,369,1.122,370,1.122,371,1.122,372,1.122,373,1.122,374,1.122,375,1.122,376,2.056,377,1.122,378,1.122,379,1.122,380,1.122,381,1.122,382,1.122,383,1.122,384,1.122,385,1.122,386,1.122,387,1.122,388,1.539,389,1.734,390,1.122,391,1.122,392,1.122,393,1.055,394,1.122,395,2.056,396,1.734,397,1.734,398,2.313,399,1.414,400,1.122,401,1.122,402,2.313,403,1.734,404,1.122,405,1.734,406,1.122,407,2.644,408,1.122,409,1.122,410,2.644,411,1.122,412,0.967,413,1.122,414,1.088,422,0.619,913,2.745,914,2.745]],["title/classes/LogicalOperators.html",[183,0.344,353,1.703]],["body/classes/LogicalOperators.html",[0,1.299,3,0.045,4,0.039,5,0.045,6,0.094,8,0.501,10,0.033,12,0.179,19,0.609,24,0.102,25,0.01,30,0.693,31,0.253,36,0.129,60,1.191,62,1.032,78,0.173,85,0.59,86,1.005,97,2.194,104,1.325,111,1.054,118,0.686,123,0.124,139,1.385,160,1.087,170,1.309,172,1.341,173,0.813,177,0.162,181,0.005,182,0.005,183,0.665,184,1.976,185,0.118,186,1.022,187,0.642,191,1.054,192,0.253,194,1.056,195,1.054,197,1.054,199,2.706,200,1.509,201,1.054,202,2.694,203,2.876,204,3.275,205,3.275,206,3.503,207,0.963,208,2.227,209,1.602,210,1.054,211,2.505,212,3.082,213,1.976,214,1.943,215,1.054,216,0.578,217,0.935,218,0.963,219,1.652,220,1.652,221,1.652,222,1.054,223,1.054,224,0.883,225,1.054,226,1.054,227,1.054,228,1.054,229,1.054,230,1.054,231,1.054,232,1.054,233,1.054,234,1.054,235,1.054,236,3.701,237,1.059,238,1.466,239,1.054,240,0.992,241,1.054,242,1.054,243,1.054,244,0.227,245,2.38,246,2.701,247,0.955,248,0.813,249,2.505,250,0.792,251,2.657,252,2.505,253,1.054,254,1.054,255,1.652,256,1.054,257,1.976,258,1.054,259,1.054,260,1.054,261,1.054,262,1.054,263,1.054,264,1.054,265,1.054,266,1.054,267,1.054,268,1.054,269,1.054,270,1.054,271,1.652,272,1.652,273,1.054,274,1.054,275,1.976,276,1.054,277,2.306,278,1.054,279,1.652,280,1.054,281,1.054,282,1.976,283,1.054,284,1.652,285,1.054,286,1.054,287,1.054,288,1.054,289,1.054,290,1.054,291,1.054,292,1.976,293,1.054,294,1.054,295,1.054,296,1.054,297,1.054,298,1.054,299,1.054,300,1.054,301,1.054,302,1.054,303,1.054,304,1.054,305,1.054,306,1.054,307,1.054,308,1.054,309,1.054,310,1.054,311,1.054,312,1.054,313,1.054,314,1.054,315,1.054,316,1.054,317,1.054,318,1.054,319,1.054,320,1.054,321,1.054,322,1.054,323,1.054,324,1.976,325,1.054,326,1.054,327,1.054,328,1.054,329,1.976,330,1.054,331,1.652,332,1.054,333,1.054,334,1.652,335,1.054,336,1.054,337,1.054,338,1.054,339,1.976,340,1.054,341,1.054,342,1.054,343,2.306,344,2.037,345,3.492,346,3.636,347,1.652,348,1.054,349,1.054,350,0.963,351,1.054,352,1.054,353,2.237,354,1.652,355,1.054,356,1.652,357,1.054,358,1.652,359,1.054,360,1.652,361,1.054,362,1.652,363,1.054,364,1.652,365,1.054,366,1.054,367,1.054,368,1.054,369,1.054,370,1.652,371,1.054,372,1.652,373,1.054,374,1.652,375,1.054,376,1.976,377,1.054,378,1.054,379,1.054,380,1.054,381,1.054,382,1.054,383,1.054,384,1.054,385,1.054,386,1.054,387,1.054,388,1.466,389,1.652,390,1.054,391,1.054,392,1.054,393,0.992,394,1.054,395,1.976,396,1.652,397,1.652,398,1.602,399,1.347,400,1.054,401,1.054,402,1.976,403,1.054,404,1.054,405,1.054,406,1.054,407,2.577,408,1.054,409,1.054,410,2.577,411,1.054,412,0.909,413,1.054,414,1.022,422,1.056,915,4.043,916,4.043,917,4.043,918,4.043,919,4.043,920,4.043,921,2.579,922,2.579,923,2.579,924,2.579,925,2.579,926,2.579,927,2.579,928,2.579,929,2.579]],["title/classes/ODataAnnotatable.html",[183,0.344,930,2.075]],["body/classes/ODataAnnotatable.html",[3,0.097,4,0.083,5,0.097,6,0.104,10,0.07,11,0.688,12,0.189,23,1.825,24,0.108,25,0.01,30,0.541,31,0.347,36,0.105,60,1.067,62,1.208,77,2.386,78,0.171,85,0.657,86,0.913,104,1.208,111,1.3,116,1.573,118,1.048,123,0.114,133,3.962,134,2.917,135,3.139,136,3.139,137,3.139,140,2.659,170,1.016,177,0.178,181,0.008,182,0.008,183,0.558,185,0.253,187,1.105,192,0.279,194,1.224,244,0.253,247,1.645,567,3.614,736,1.493,930,3.363,931,4.883,932,3.939,933,3.939,934,3.136,935,6.965,936,2.5,937,4.28,938,3.775,939,3.999,940,5.551,941,4.051,942,4.326,943,4.326,944,3.136,945,3.775,946,3.91,947,5.551,948,3.854,949,3.034,950,3.775,951,4.883,952,4.883,953,4.883,954,4.883,955,3.448,956,4.883,957,2.587,958,4.883,959,4.883,960,4.883,961,3.284,962,4.883,963,4.883,964,4.883,965,4.883,966,4.883,967,4.883,968,4.883,969,4.883]],["title/classes/ODataAnnotation.html",[183,0.344,937,2.237]],["body/classes/ODataAnnotation.html",[3,0.099,4,0.085,5,0.099,6,0.11,10,0.072,11,0.749,12,0.219,24,0.108,25,0.01,30,0.597,31,0.355,36,0.106,60,0.944,62,0.901,77,2.42,78,0.176,85,0.836,86,0.894,104,0.901,111,1.319,118,0.973,123,0.085,133,4.309,134,2.931,135,4.349,136,4.349,137,4.349,140,2.353,170,1.03,177,0.127,181,0.008,182,0.008,183,0.565,185,0.259,192,0.299,194,1.122,244,0.259,247,1.341,567,3.448,736,1.527,930,2.741,931,4.995,934,2.556,937,4.189,938,3.077,939,3.539,941,3.713,942,3.828,943,3.828,945,3.077,946,3.932,948,3.411,949,2.473,950,3.077,951,6.214,952,4.995,953,4.995,954,4.995,955,3.526,956,4.995,957,2.646,958,4.995,959,4.995,960,4.995,961,3.359,962,4.995,963,4.995,964,4.995,965,4.995,966,4.995,967,4.995,968,4.995,969,4.995,970,7.064,971,5.677,972,5.677,973,5.677,974,5.677,975,5.677]],["title/classes/ODataAnnotations.html",[183,0.344,976,2.983]],["body/classes/ODataAnnotations.html",[3,0.081,4,0.07,5,0.081,6,0.105,8,0.702,10,0.059,11,0.632,12,0.173,16,1.957,23,2.139,24,0.111,25,0.01,28,2.09,29,3.358,31,0.388,32,4.045,33,3.499,36,0.112,48,1.14,49,2.203,54,3.145,55,2.533,61,2.09,71,2.09,72,2.09,73,2.163,78,0.172,86,1.005,104,1.183,118,1.101,123,0.13,140,2.327,170,1.019,177,0.166,181,0.007,182,0.007,183,0.597,185,0.212,187,0.984,192,0.286,194,1.019,237,1.83,244,0.283,245,1.956,412,2.186,422,0.677,489,3.235,736,1.248,787,3.853,890,2.385,946,2.163,949,3.483,955,4.34,976,5.668,977,3.441,978,4.831,979,4.632,980,4.641,981,4.134,982,4.883,983,4.641,984,4.641,985,4.599,986,4.641,987,4.641,988,5.762,989,4.641,990,4.641,991,4.641,992,4.641,993,4.641,994,3.441,995,3.441,996,3.441,997,3.441,998,2.325,999,4.575,1000,5.18,1001,4.85,1002,3.441,1003,4.575,1004,3.441,1005,3.441,1006,3.441,1007,3.441,1008,3.441,1009,3.441,1010,3.441,1011,4.599,1012,4.599,1013,3.441,1014,3.441,1015,3.441,1016,3.441,1017,3.441,1018,3.441,1019,3.441,1020,3.441,1021,3.441,1022,5.18,1023,3.441,1024,3.441,1025,3.441,1026,4.599,1027,5.928,1028,4.599,1029,4.599,1030,4.599,1031,4.575,1032,3.441,1033,3.441,1034,3.441,1035,3.441,1036,3.441,1037,3.441,1038,5.18,1039,3.441,1040,4.599,1041,3.441,1042,3.441,1043,3.441]],["title/classes/ODataApiOptions.html",[183,0.344,1044,3.441]],["body/classes/ODataApiOptions.html",[1,4.283,3,0.078,4,0.067,5,0.078,6,0.11,9,2.492,10,0.056,11,0.546,12,0.207,13,3.991,14,3.71,15,3.871,16,2.887,17,3.959,18,3.572,19,1.81,20,3.71,21,3.871,22,3.563,23,2.008,24,0.112,25,0.01,26,3.305,27,2.797,28,2.719,29,3.304,30,0.66,31,0.428,33,3.452,36,0.091,37,3.675,41,2.392,44,2.417,51,2.254,54,2.887,60,0.596,74,2.321,75,3.816,76,3.976,77,2.068,78,0.166,79,2.417,80,2.417,81,2.321,82,3.871,83,3.871,84,2.417,85,0.528,86,0.76,87,2.078,88,2.522,89,2.234,92,3.196,102,3.669,103,2.813,109,2.915,123,0.067,124,2.28,177,0.1,181,0.007,182,0.007,183,0.483,185,0.203,192,0.303,214,2.046,244,0.203,247,1.426,248,1.904,736,1.199,739,2.078,837,4.476,890,2.321,934,3.083,936,2.008,1044,4.833,1045,3.923,1046,6.038,1047,4.459,1048,5.312,1049,4.476,1050,4.149,1051,4.459,1052,6.454,1053,4.459,1054,4.459,1055,4.833,1056,4.476,1057,4.459,1058,6.454,1059,6.454,1060,4.459,1061,4.459,1062,4.459,1063,4.459,1064,5.312,1065,4.191,1066,4.459,1067,4.459,1068,4.191,1069,5.312,1070,3.57,1071,4.459,1072,5.312,1073,5.312,1074,5.48,1075,3.57,1076,6.47,1077,7.11,1078,3.923,1079,3.272,1080,3.923,1081,3.923,1082,6.953,1083,6.953,1084,6.953,1085,6.953,1086,6.953,1087,6.953,1088,6.953,1089,3.923,1090,3.923,1091,3.923,1092,3.923,1093,3.923,1094,3.923,1095,4.833,1096,4.833,1097,4.833,1098,3.923,1099,3.923,1100,3.57,1101,3.923,1102,3.57,1103,3.923,1104,3.923,1105,3.923,1106,3.57,1107,3.923,1108,3.57,1109,3.923,1110,3.923,1111,3.923,1112,3.923,1113,3.923,1114,3.923,1115,3.923,1116,3.923,1117,3.923,1118,4.833,1119,2.522]],["title/classes/ODataBaseService.html",[183,0.344,1120,2.983]],["body/classes/ODataBaseService.html",[3,0.064,4,0.055,5,0.064,6,0.108,9,2.842,10,0.046,12,0.209,19,2.048,24,0.112,25,0.01,31,0.385,34,3.85,35,1.707,36,0.055,46,4.427,57,2.161,60,0.824,78,0.148,86,0.748,123,0.129,124,2.052,143,3.996,172,2.419,177,0.197,181,0.006,182,0.006,183,0.293,185,0.167,187,0.835,192,0.296,194,1.218,237,2.328,244,0.24,245,2.842,422,1.195,489,1.451,511,3.857,890,2.024,1120,3.653,1121,3.662,1122,6.28,1123,6.28,1124,5.91,1125,3.645,1126,3.222,1127,4.993,1128,5.419,1129,3.662,1130,4.931,1131,5.288,1132,4.664,1133,6.317,1134,5.917,1135,6.246,1136,3.662,1137,4.788,1138,3.662,1139,3.662,1140,3.662,1141,3.662,1142,5.288,1143,6.317,1144,3.662,1145,3.662,1146,3.662,1147,3.662,1148,3.662,1149,4.567,1150,5.999,1151,3.662,1152,3.645,1153,3.662,1154,3.662,1155,3.222,1156,3.662,1157,2.715,1158,2.542,1159,2.932,1160,1.985,1161,3.662,1162,6.16,1163,6.16,1164,5.263,1165,3.662]],["title/classes/ODataBatchRequest.html",[183,0.344,1166,3.781]],["body/classes/ODataBatchRequest.html",[3,0.066,4,0.057,5,0.066,6,0.095,8,0.629,9,2.432,10,0.091,11,0.485,12,0.155,13,2.794,18,3.674,19,0.889,22,1.959,23,1.786,24,0.1,25,0.01,27,1.538,31,0.52,34,2.97,35,1.754,36,0.081,48,0.876,49,1.187,50,1.695,52,1.754,53,4.349,77,1.838,78,0.172,85,0.807,86,0.857,102,3.623,103,3.359,107,3.292,111,1.578,116,1.521,118,0.861,119,1.695,123,0.094,128,4.062,157,1.22,168,3.907,170,1.15,171,1.817,175,3.035,177,0.14,180,1.754,181,0.006,182,0.006,183,0.43,185,0.172,187,0.852,192,0.252,194,0.995,207,2.545,216,0.844,217,2.268,218,1.405,237,2.262,244,0.172,350,1.405,428,2.338,435,3.013,729,2.556,736,1.012,738,4.297,739,1.754,855,3.39,871,3.334,961,2.227,981,3.701,998,3.133,1050,2.129,1065,4.733,1068,2.613,1125,3.701,1132,3.256,1134,2.465,1166,6.342,1167,3.764,1168,5.503,1169,5.367,1170,5.367,1171,3.764,1172,4.362,1173,3.764,1174,3.764,1175,5.367,1176,5.949,1177,3.764,1178,5.367,1179,5.367,1180,3.764,1181,3.764,1182,5.503,1183,5.459,1184,3.312,1185,2.613,1186,3.979,1187,5.367,1188,4.722,1189,3.764,1190,4.722,1191,3.764,1192,3.764,1193,3.764,1194,3.764,1195,5.007,1196,5.367,1197,5.367,1198,5.367,1199,3.764,1200,3.764,1201,5.367,1202,3.764,1203,3.312,1204,2.465,1205,3.764,1206,3.726,1207,3.979,1208,3.176,1209,3.764,1210,3.979,1211,2.791,1212,3.013,1213,2.791,1214,3.764,1215,3.764,1216,4.238,1217,6.819,1218,3.764,1219,4.722,1220,2.465,1221,5.367,1222,5.367,1223,3.764,1224,3.764,1225,5.367,1226,6.819,1227,6.255,1228,1.886,1229,3.764,1230,6.819,1231,4.637,1232,5.367,1233,6.255,1234,3.764,1235,3.764,1236,3.764,1237,3.764,1238,3.764,1239,3.764,1240,3.764,1241,4.722,1242,3.764,1243,3.764,1244,3.764,1245,3.764,1246,3.764,1247,3.312,1248,3.764,1249,3.013,1250,3.764,1251,3.764,1252,6,1253,3.764,1254,3.764,1255,3.764,1256,3.515,1257,3.764,1258,3.764,1259,6.255,1260,5.367,1261,3.312,1262,3.312,1263,5.367,1264,6.255,1265,5.367,1266,6.255,1267,3.312,1268,3.515,1269,3.312,1270,3.979,1271,3.764,1272,3.764,1273,3.764,1274,4.722,1275,3.764,1276,3.764,1277,4.722,1278,3.764,1279,3.764,1280,3.764,1281,5.367,1282,3.764,1283,3.013,1284,3.764,1285,5.367,1286,5.367,1287,3.312,1288,3.764,1289,3.764,1290,3.764,1291,3.764,1292,3.764,1293,3.764,1294,3.764,1295,3.764,1296,5.367,1297,8.024,1298,5.367,1299,6.819,1300,7.209,1301,3.764,1302,7.209,1303,6.819,1304,5.367,1305,3.764,1306,3.764,1307,3.764,1308,6.255,1309,3.764,1310,3.764,1311,3.764,1312,3.764,1313,2.613,1314,3.764,1315,3.764,1316,3.764,1317,3.764,1318,3.764,1319,3.312,1320,3.764,1321,3.764,1322,3.764,1323,3.764,1324,3.764,1325,3.764,1326,3.764,1327,3.764,1328,3.764,1329,3.764,1330,3.764,1331,3.764,1332,3.764]],["title/classes/ODataCache.html",[183,0.344,1333,2.814]],["body/classes/ODataCache.html",[0,0.838,3,0.064,4,0.055,5,0.064,6,0.109,10,0.046,11,0.474,12,0.208,23,2.117,24,0.112,25,0.01,30,0.283,31,0.445,34,3.708,35,1.698,36,0.079,41,3.202,42,1.759,43,3.497,49,2.338,50,1.641,52,1.698,60,0.821,78,0.174,85,0.904,86,0.927,102,1.587,104,1.312,111,1.544,114,3.826,116,2.017,118,1.127,123,0.131,124,2.046,157,2.402,170,0.765,177,0.191,181,0.006,182,0.006,183,0.292,185,0.166,187,0.832,192,0.299,194,1.226,214,1.567,244,0.239,247,0.86,428,3.815,489,3.027,729,1.489,736,0.98,739,1.698,743,5.257,855,2.841,957,3.13,981,2.156,1056,5.796,1137,2.156,1152,2.156,1160,1.975,1172,4.919,1208,4.782,1216,4.949,1228,1.825,1249,4.197,1252,4.917,1256,2.386,1268,5.292,1333,3.433,1334,3.205,1335,5.277,1336,5.836,1337,4.554,1338,4.197,1339,4.663,1340,4.554,1341,4.197,1342,4.554,1343,4.554,1344,4.197,1345,4.197,1346,4.197,1347,5.61,1348,2.529,1349,5.243,1350,3.643,1351,2.917,1352,3.643,1353,4.854,1354,3.887,1355,3.643,1356,1.897,1357,3.643,1358,2.917,1359,3.643,1360,3.639,1361,3.643,1362,3.639,1363,3.643,1364,2.917,1365,3.643,1366,2.917,1367,3.643,1368,2.917,1369,3.643,1370,3.887,1371,3.643,1372,5.277,1373,2.917,1374,3.643,1375,3.639,1376,3.643,1377,3.887,1378,3.643,1379,3.887,1380,3.643,1381,2.917,1382,3.205,1383,3.205,1384,2.917,1385,3.205,1386,4.612,1387,4.612,1388,4.612,1389,3.887,1390,3.205,1391,3.205,1392,3.205,1393,3.641,1394,2.917,1395,2.917,1396,2.917,1397,3.205,1398,4.612,1399,3.205,1400,3.205,1401,3.205,1402,3.205,1403,3.205,1404,3.205,1405,3.205,1406,3.205,1407,4.612,1408,3.205,1409,4.612,1410,3.205,1411,4.612,1412,3.205,1413,3.639,1414,4.612,1415,3.205,1416,3.205,1417,3.205,1418,3.205,1419,2.386,1420,3.205,1421,3.205,1422,3.205,1423,3.205,1424,3.205,1425,3.205,1426,3.205,1427,3.205,1428,3.205,1429,3.205,1430,3.205,1431,5.91,1432,3.205,1433,4.612,1434,3.205,1435,3.205,1436,3.205,1437,3.205,1438,3.205,1439,3.205,1440,3.205,1441,2.917,1442,3.205,1443,3.205,1444,3.205]],["title/interfaces/ODataCacheEntry.html",[0,0.989,1353,2.814]],["body/interfaces/ODataCacheEntry.html",[0,1.02,2,2.308,3,0.077,4,0.067,5,0.077,6,0.056,10,0.056,11,0.544,24,0.093,25,0.01,31,0.478,34,3.515,35,2.066,36,0.09,41,3.298,42,2.141,43,3.81,49,1.897,50,1.996,52,2.066,78,0.174,85,0.996,86,0.957,102,1.931,104,1.252,111,1.598,114,4.042,116,1.256,118,1.111,123,0.119,157,2.557,170,0.877,181,0.007,182,0.007,183,0.355,214,1.325,244,0.202,247,1.047,428,2.754,489,2.705,729,1.812,736,1.192,739,2.066,743,5.43,855,3.26,957,3.181,981,2.623,1056,6.087,1137,2.623,1152,2.623,1160,2.403,1172,4.563,1208,4.527,1216,4.871,1228,2.221,1249,4.815,1252,5.464,1256,2.903,1268,4.47,1333,2.903,1334,3.9,1335,5.06,1336,6.042,1337,3.287,1339,3.078,1340,3.287,1342,3.287,1343,3.287,1347,5.699,1353,4.793,1354,3.287,1360,3.078,1362,3.078,1370,3.287,1372,5.426,1375,3.078,1377,3.287,1379,3.287,1381,3.549,1382,3.9,1383,3.9,1384,3.549,1385,3.9,1386,5.291,1387,6.731,1388,5.291,1389,4.459,1390,3.9,1391,3.9,1392,3.9,1393,3.967,1394,3.549,1395,3.549,1396,3.549,1397,3.9,1398,5.291,1399,3.9,1400,3.9,1401,3.9,1402,3.9,1403,3.9,1404,3.9,1405,3.9,1406,3.9,1407,5.291,1408,3.9,1409,5.291,1410,3.9,1411,5.291,1412,3.9,1413,4.175,1414,5.291,1415,3.9,1416,3.9,1417,3.9,1418,3.9,1419,2.903,1420,3.9,1421,3.9,1422,3.9,1423,3.9,1424,3.9,1425,3.9,1426,3.9,1427,3.9,1428,3.9,1429,3.9,1430,3.9,1431,6.439,1432,3.9,1433,5.291,1434,3.9,1435,3.9,1436,3.9,1437,3.9,1438,3.9,1439,3.9,1440,3.9,1441,3.549,1442,3.9,1443,3.9,1444,3.9]],["title/classes/ODataCallable.html",[183,0.344,1445,3.441]],["body/classes/ODataCallable.html",[3,0.072,4,0.062,5,0.072,6,0.107,8,0.574,9,2.835,10,0.052,11,0.516,12,0.216,23,1.857,24,0.115,25,0.01,27,3.346,30,0.626,31,0.443,36,0.062,45,1.915,60,1.193,62,0.906,77,2.641,78,0.173,86,0.856,87,2.66,99,3.044,100,3.192,104,0.906,105,3.471,106,3.471,108,3.422,110,2.571,116,1.618,118,0.566,123,0.128,124,1.369,130,2.324,134,2.428,140,1.902,146,3.69,170,0.599,174,2.954,175,3.71,176,3.881,177,0.189,181,0.006,182,0.006,183,0.329,185,0.187,187,0.906,192,0.307,194,1.289,244,0.187,247,1.549,250,1.752,420,2.691,422,1.034,483,2.804,486,2.681,535,5.28,567,3.231,735,3.893,736,1.105,852,2.852,930,3.167,932,3.228,933,3.228,934,2.571,936,2.571,937,2.972,938,2.227,939,3.551,941,3.422,942,3.094,943,3.094,944,3.561,945,2.227,946,1.915,948,2.756,949,1.79,950,2.227,1445,4.57,1446,4.109,1447,5.485,1448,3.71,1449,3.963,1450,3.546,1451,3.71,1452,4.627,1453,5.709,1454,4.109,1455,4.109,1456,4.109,1457,5.255,1458,3.047,1459,3.047,1460,2.431,1461,4.109,1462,5.533,1463,2.852,1464,4.109,1465,3.228,1466,4.109,1467,5.022,1468,5.755,1469,5.022,1470,5.022,1471,4.109,1472,5.022,1473,5.022,1474,4.109,1475,3.228,1476,4.109,1477,5.022,1478,4.232,1479,2.852,1480,3.047,1481,3.963,1482,2.139,1483,3.047,1484,2.324,1485,3.047,1486,2.058,1487,2.324,1488,2.324,1489,2.227,1490,2.324,1491,2.227,1492,2.324,1493,2.324,1494,2.324,1495,2.852,1496,3.047,1497,2.691,1498,2.852,1499,2.431,1500,2.431,1501,2.227,1502,6.56,1503,4.109,1504,5.709,1505,4.109,1506,4.109,1507,4.109,1508,2.691,1509,3.615,1510,3.615,1511,3.615,1512,4.109,1513,4.109,1514,4.296,1515,3.615,1516,3.615,1517,2.691,1518,2.691,1519,2.691,1520,4.109]],["title/classes/ODataCallableParser.html",[183,0.344,1457,3.186]],["body/classes/ODataCallableParser.html",[3,0.073,4,0.063,5,0.073,6,0.109,9,2.849,10,0.053,11,0.522,12,0.21,19,1.685,23,1.733,24,0.112,25,0.01,30,0.554,31,0.468,36,0.087,49,1.317,51,2.155,60,0.558,78,0.176,86,0.959,92,3.623,99,3.462,100,2.979,104,0.663,105,2.979,106,3.214,108,3.446,110,1.88,111,1.483,112,3.715,116,1.183,118,1.093,123,0.127,138,3.053,139,1.563,146,3.715,158,3.005,159,1.317,170,1.181,172,1.919,177,0.188,181,0.006,182,0.006,183,0.462,185,0.19,187,0.916,192,0.3,194,1.13,214,1.725,244,0.19,250,1.772,399,1.923,422,1.041,442,1.353,486,2.359,535,4.674,729,1.706,736,1.123,739,1.946,760,2.898,871,3.585,934,2.599,936,1.88,957,1.946,961,3.415,1119,2.361,1137,3.415,1228,2.091,1356,2.173,1393,3.868,1448,4.036,1450,3.585,1457,4.279,1463,2.898,1465,3.264,1475,2.361,1482,3.005,1508,5.3,1514,4.906,1517,2.734,1518,2.734,1519,2.734,1521,3.673,1522,5.772,1523,4.175,1524,4.175,1525,4.175,1526,5.296,1527,4.175,1528,4.175,1529,4.175,1530,4.175,1531,4.175,1532,4.175,1533,5.078,1534,4.175,1535,4.175,1536,5.078,1537,4.175,1538,6.279,1539,3.914,1540,4.905,1541,3.095,1542,3.673,1543,3.095,1544,3.673,1545,3.095,1546,3.673,1547,5.548,1548,4.906,1549,5.201,1550,4.279,1551,4.279,1552,3.673,1553,3.673,1554,3.095,1555,3.095,1556,3.095,1557,3.095,1558,3.095,1559,4.279,1560,3.095,1561,3.095,1562,3.095,1563,2.593,1564,2.593,1565,5.078,1566,3.673,1567,5.82,1568,3.673,1569,3.673,1570,2.734,1571,2.734,1572,2.593,1573,6.279,1574,6.987,1575,5.078,1576,5.078,1577,3.673,1578,3.673,1579,3.673,1580,3.673,1581,3.673,1582,3.673]],["title/classes/ODataEntitiesAnnotations.html",[183,0.344,1031,2.814]],["body/classes/ODataEntitiesAnnotations.html",[3,0.079,4,0.068,5,0.079,6,0.108,8,0.741,10,0.057,11,0.622,12,0.191,16,1.9,23,2.015,24,0.109,25,0.01,28,2.028,29,3.317,31,0.38,32,3.582,33,3.317,36,0.111,48,1.123,49,2.426,54,3.107,55,1.633,61,3.098,62,0.965,71,3.098,72,3.098,73,3.206,78,0.173,86,1.003,104,1.169,118,1.091,123,0.13,140,1.5,170,1.004,177,0.164,181,0.007,182,0.007,183,0.59,185,0.205,187,0.965,192,0.304,194,1.075,237,1.803,244,0.205,245,1.917,412,2.596,483,2.523,489,2.727,736,1.211,787,3.776,890,2.337,946,2.099,949,3.453,955,4.274,976,5.858,977,3.339,978,4.794,979,4.576,981,2.665,982,3.981,985,4.507,988,5.703,994,3.339,995,3.339,996,3.339,997,3.339,998,2.256,999,4.506,1000,5.101,1001,4.776,1002,3.339,1003,4.506,1004,3.339,1005,3.339,1006,3.339,1007,3.339,1008,3.339,1009,3.339,1010,3.339,1011,5.462,1012,4.507,1013,3.339,1014,3.339,1015,3.339,1016,3.339,1017,3.339,1018,3.339,1019,3.339,1020,3.339,1021,3.339,1022,5.101,1023,3.339,1024,3.339,1025,3.339,1026,5.462,1027,5.877,1028,4.507,1029,5.101,1030,4.507,1031,5.037,1032,3.339,1033,3.339,1034,5.101,1035,3.339,1036,5.101,1037,3.339,1038,5.101,1039,3.339,1040,4.507,1041,3.339,1042,3.339,1043,3.339,1583,4.504,1584,3.606,1585,4.504,1586,4.504,1587,4.504,1588,3.606,1589,3.962,1590,4.504,1591,4.504,1592,4.504,1593,4.504,1594,4.504,1595,4.504,1596,4.504,1597,4.504,1598,4.504,1599,4.504,1600,4.504,1601,4.504,1602,4.504,1603,3.962,1604,4.504]],["title/classes/ODataEntityAnnotations.html",[183,0.344,1003,2.814]],["body/classes/ODataEntityAnnotations.html",[3,0.076,4,0.066,5,0.076,6,0.11,8,0.73,10,0.055,11,0.688,12,0.203,16,2.853,23,2.056,24,0.11,25,0.01,28,3.046,29,3.272,31,0.372,32,3.521,33,3.272,36,0.109,48,1.104,49,2.533,54,3.064,55,1.579,57,1.64,61,1.962,62,0.943,71,1.962,72,1.962,73,2.03,78,0.174,86,1.001,104,1.153,118,1.081,123,0.131,140,1.451,170,0.987,177,0.17,181,0.007,182,0.007,183,0.582,185,0.199,187,0.943,192,0.308,194,1.109,237,1.772,244,0.199,245,1.874,412,2.56,483,2.489,489,2.68,736,1.171,787,3.691,890,2.285,946,2.03,949,3.419,955,4.201,976,5.821,977,3.23,978,4.753,979,4.513,981,2.578,982,3.892,985,4.406,988,5.638,994,3.23,995,3.23,996,3.23,997,3.23,998,2.182,999,4.429,1000,5.015,1001,4.695,1002,3.23,1003,4.98,1004,3.23,1005,3.23,1006,3.23,1007,5.015,1008,3.23,1009,5.015,1010,3.23,1011,5.387,1012,4.406,1013,5.015,1014,3.23,1015,5.015,1016,3.23,1017,5.015,1018,3.23,1019,5.015,1020,3.23,1021,5.015,1022,5.015,1023,3.23,1024,4.406,1025,3.23,1026,5.387,1027,5.819,1028,4.406,1029,5.015,1030,4.406,1031,4.429,1032,3.23,1033,3.23,1034,3.23,1035,3.23,1036,3.23,1037,3.23,1038,5.015,1039,3.23,1040,4.406,1041,3.23,1042,3.23,1043,3.23,1584,3.487,1588,3.487,1589,3.832,1603,3.832,1605,4.356,1606,4.356,1607,4.356,1608,4.356,1609,4.356,1610,4.356,1611,4.356,1612,4.356,1613,4.356,1614,4.356,1615,4.356,1616,4.356,1617,4.356,1618,4.356,1619,4.356,1620,4.356,1621,4.356,1622,4.356,1623,4.356,1624,4.356,1625,4.356,1626,4.356,1627,4.356,1628,4.356,1629,4.356,1630,4.356]],["title/classes/ODataEntityContainer.html",[183,0.344,1631,3.441]],["body/classes/ODataEntityContainer.html",[3,0.091,4,0.078,5,0.091,6,0.093,8,0.671,10,0.066,11,0.604,12,0.208,23,1.749,24,0.115,25,0.01,30,0.605,31,0.487,36,0.078,45,2.421,60,0.987,62,1.06,78,0.174,86,0.577,87,3.112,104,1.06,116,1.472,118,0.715,123,0.129,124,1.73,134,2.668,140,2.225,148,4.406,149,4,170,0.758,177,0.19,181,0.008,182,0.008,183,0.416,185,0.237,187,1.06,192,0.305,194,1.262,244,0.237,247,1.743,420,3.402,422,0.758,483,2.94,486,3.016,511,2.421,512,4.57,524,5.875,526,3.074,567,3.428,735,4.145,736,1.397,852,3.606,930,3.563,932,3.777,933,3.777,934,3.007,936,3.007,937,3.476,938,2.815,939,3.902,941,3.761,942,3.619,943,3.619,944,3.508,945,2.815,946,2.421,948,3.224,949,2.263,950,2.815,957,2.421,1447,5.706,1449,4.636,1450,4.148,1451,4.174,1452,5.006,1458,3.851,1459,3.851,1460,3.074,1462,4.373,1468,5.408,1479,3.606,1480,3.851,1481,4.636,1482,2.704,1483,3.851,1484,2.938,1485,3.851,1486,2.602,1487,2.938,1488,2.938,1489,2.815,1490,2.938,1491,2.815,1492,2.938,1493,2.938,1494,2.938,1495,3.606,1496,3.851,1497,3.402,1498,3.606,1499,3.074,1500,3.074,1501,2.815,1631,5.346,1632,6.493,1633,5.472,1634,5.195,1635,5.195,1636,5.195]],["title/classes/ODataEntityService.html",[183,0.344,1637,3.186]],["body/classes/ODataEntityService.html",[3,0.098,4,0.085,5,0.098,6,0.102,8,0.707,9,2.657,10,0.071,12,0.205,19,1.662,24,0.112,25,0.01,31,0.48,34,3.34,36,0.085,48,1.374,60,0.754,86,0.627,116,1.994,118,0.969,123,0.124,157,1.828,167,3.057,172,2.265,177,0.194,181,0.008,182,0.008,183,0.452,185,0.257,187,1.117,192,0.295,194,1.205,237,2.103,245,2.657,422,1.171,483,2.627,486,2.875,489,3.386,511,3.279,735,3.397,890,2.705,1120,5.848,1122,5.216,1123,5.216,1124,5.216,1131,4.182,1132,4.301,1133,5.216,1134,5.517,1135,5.848,1137,4.163,1142,4.182,1143,5.216,1149,4.182,1150,5.216,1152,3.338,1160,3.057,1207,5.685,1637,5.216,1638,5.641,1639,5.216,1640,7.668,1641,5.641,1642,6.427,1643,5.641,1644,6.19,1645,5.257,1646,5.641,1647,4.516,1648,4.516,1649,4.516,1650,5.641,1651,5.641,1652,4.516,1653,4.516,1654,5.641,1655,4.516,1656,5.641]],["title/classes/ODataEntitySet.html",[183,0.344,1633,3.186]],["body/classes/ODataEntitySet.html",[3,0.09,4,0.078,5,0.09,6,0.099,8,0.67,10,0.066,11,0.603,12,0.208,19,1.223,23,1.93,24,0.115,25,0.01,30,0.604,31,0.461,36,0.078,45,2.413,60,0.985,62,1.058,78,0.176,86,0.575,87,3.105,104,1.058,116,1.467,118,0.713,123,0.129,124,1.725,134,2.665,140,2.22,150,4.4,170,0.755,177,0.19,178,3.994,179,3.691,181,0.007,182,0.007,183,0.414,185,0.236,187,1.058,192,0.306,194,1.262,244,0.236,247,1.74,420,3.39,422,0.755,483,2.939,486,3.011,527,4.145,531,4.555,534,5.862,567,3.426,735,4.1,736,1.392,852,3.594,930,3.558,932,3.768,933,3.768,934,3.001,936,2.331,937,3.469,938,2.806,939,3.897,941,3.757,942,3.611,943,3.611,944,3.504,945,2.806,946,2.413,948,3.217,949,2.255,950,2.806,1447,5.703,1449,4.626,1450,4.139,1451,4.167,1452,5.001,1458,3.839,1459,3.839,1460,3.063,1462,4.364,1468,5.401,1479,3.594,1480,3.839,1481,4.626,1482,2.695,1483,3.839,1484,2.928,1485,3.839,1486,2.594,1487,2.928,1488,2.928,1489,2.806,1490,2.928,1491,2.806,1492,2.928,1493,2.928,1494,2.928,1495,3.594,1496,3.839,1497,3.39,1498,3.594,1499,3.063,1500,3.063,1501,2.806,1632,6.845,1633,4.94,1657,5.177,1658,5.177,1659,5.177,1660,5.177]],["title/classes/ODataEntitySetService.html",[183,0.344,1661,3.441]],["body/classes/ODataEntitySetService.html",[3,0.054,4,0.046,5,0.054,6,0.103,8,0.465,9,2.849,10,0.039,12,0.206,16,3.621,19,1.092,24,0.107,25,0.01,30,0.239,31,0.453,34,3.657,35,1.432,36,0.046,48,1.454,60,0.618,61,1.384,77,2.991,78,0.139,86,0.938,102,3.611,111,1.039,116,1.976,118,0.996,119,1.384,123,0.125,124,1.541,143,3.679,157,2.871,169,4.39,172,1.875,177,0.19,179,3.494,180,1.432,181,0.005,182,0.005,183,0.246,185,0.14,187,0.734,192,0.294,194,1.217,237,1.621,245,2.199,422,1.15,483,2.274,511,4.232,526,5.061,527,2.461,735,3.205,787,4.822,890,1.779,944,3.55,961,2.737,998,4.002,1120,3.861,1122,3.43,1123,3.43,1124,3.43,1131,2.279,1132,3.966,1133,3.43,1134,4.567,1135,4.841,1137,2.737,1142,2.279,1143,3.43,1149,2.279,1150,3.43,1152,1.819,1157,2.279,1158,2.134,1160,1.666,1182,4.07,1185,2.134,1210,6.048,1216,3.146,1220,3.029,1313,3.211,1381,3.703,1384,2.461,1486,3.889,1637,4.921,1639,5.755,1642,4.955,1644,4.07,1645,5.527,1647,2.461,1648,2.461,1649,2.461,1652,3.703,1653,2.461,1655,2.461,1661,3.703,1662,8.158,1663,4.894,1664,4.07,1665,5.563,1666,5.563,1667,5.563,1668,4.567,1669,6.637,1670,4.626,1671,5.563,1672,5.445,1673,3.074,1674,4.07,1675,5.445,1676,3.074,1677,3.074,1678,3.074,1679,7.238,1680,3.074,1681,6.288,1682,3.074,1683,3.074,1684,3.074,1685,4.894,1686,3.074,1687,5.563,1688,4.626,1689,3.074,1690,3.074,1691,3.074,1692,3.074,1693,3.074,1694,3.074,1695,3.074,1696,3.074,1697,3.074,1698,3.074,1699,3.074,1700,3.074,1701,3.074,1702,3.074,1703,3.074,1704,3.074,1705,4.626,1706,3.074,1707,3.074,1708,3.074,1709,2.704,1710,3.074,1711,3.074,1712,3.074,1713,2.704,1714,3.074,1715,4.07,1716,3.074,1717,3.074,1718,3.074,1719,5.563,1720,5.563,1721,5.563,1722,4.589,1723,2.704,1724,2.704,1725,3.074,1726,3.074,1727,3.074,1728,2.704,1729,3.074,1730,3.074,1731,3.074,1732,4.626,1733,3.074,1734,3.43,1735,3.074,1736,3.074,1737,3.074,1738,3.074,1739,3.074,1740,3.074,1741,3.074,1742,3.074,1743,3.074,1744,3.074,1745,3.074]],["title/classes/ODataEntityTypeKey.html",[183,0.344,1746,3.441]],["body/classes/ODataEntityTypeKey.html",[3,0.043,4,0.037,5,0.043,6,0.07,8,0.394,9,2.725,10,0.031,11,0.439,12,0.12,23,1.025,24,0.105,25,0.01,28,1.115,30,0.589,31,0.419,36,0.09,49,1.74,51,1.461,57,1.523,60,1.137,64,1.115,65,1.763,77,0.848,78,0.173,85,0.711,86,0.964,92,3.112,96,2.991,97,2.041,98,2.631,99,3.188,100,1.763,104,1.222,105,1.763,106,1.763,110,1.763,111,1.523,112,2.527,118,1.201,119,2.485,123,0.124,124,0.825,126,2.038,134,1.663,138,1.867,139,1.406,144,2.121,154,3.579,156,0.802,157,0.802,158,1.289,159,0.781,160,2.007,161,0.802,162,0.802,163,1.4,164,2.485,165,1.4,167,1.342,168,1.342,170,1.089,171,1.195,172,1.718,173,2.111,177,0.055,180,2.571,181,0.004,182,0.004,183,0.442,185,0.113,192,0.17,194,0.361,208,0.848,214,1.17,237,1.674,238,2.001,240,1.867,244,0.274,247,0.924,248,1.895,250,1.845,399,1.617,486,2.255,487,1.195,567,1.6,707,3.134,729,2.612,735,3.846,736,1.053,739,1.154,760,1.718,855,3.627,871,2.432,873,1.982,886,1.621,887,1.982,930,2.344,936,2.186,939,1.24,941,1.195,944,1.763,948,1.89,949,2.404,957,1.824,961,3.96,998,3.739,1079,2.631,1119,1.4,1204,1.621,1213,1.835,1220,1.621,1228,2.432,1348,1.718,1356,1.289,1393,3.463,1419,1.621,1448,2.214,1451,1.4,1465,2.746,1475,2.746,1482,1.289,1484,1.4,1486,3.201,1487,1.4,1488,1.4,1489,2.631,1490,1.4,1491,1.342,1492,1.4,1493,1.4,1494,1.4,1501,1.342,1508,5.044,1514,3.936,1517,1.621,1518,1.621,1519,1.621,1539,3.265,1540,6.085,1541,5.145,1543,3.6,1545,3.6,1547,5.303,1548,4.185,1549,4.544,1550,3.6,1551,2.902,1554,1.835,1555,2.902,1556,1.835,1557,1.835,1558,2.902,1559,2.902,1560,1.835,1561,2.902,1562,1.835,1563,1.538,1564,1.538,1570,2.563,1571,1.621,1572,1.538,1668,3.179,1670,2.432,1681,1.835,1722,1.835,1746,3.887,1747,4.417,1748,3.134,1749,2.178,1750,4.854,1751,2.178,1752,1.621,1753,1.835,1754,1.289,1755,3.134,1756,2.902,1757,3.134,1758,5.622,1759,3.134,1760,4.417,1761,3.134,1762,2.178,1763,3.444,1764,3.134,1765,2.178,1766,2.178,1767,4.271,1768,1.835,1769,2.178,1770,2.178,1771,2.178,1772,2.178,1773,2.178,1774,5.288,1775,2.178,1776,5.288,1777,2.178,1778,3.444,1779,2.178,1780,3.444,1781,2.178,1782,2.178,1783,2.178,1784,2.178,1785,2.178,1786,2.902,1787,6.105,1788,2.178,1789,2.178,1790,2.178,1791,2.178,1792,2.178,1793,2.178,1794,2.178,1795,3.444,1796,3.444,1797,3.444,1798,3.444,1799,3.134,1800,2.178,1801,3.444,1802,4.544,1803,2.178,1804,2.178,1805,3.444,1806,2.178,1807,2.178,1808,2.178,1809,3.444,1810,2.178,1811,3.444,1812,3.444,1813,3.444,1814,3.444,1815,3.444,1816,3.444,1817,2.178,1818,5.622,1819,4.271,1820,2.178,1821,4.812,1822,4.812,1823,1.982,1824,3.887,1825,2.178,1826,2.178,1827,2.178,1828,2.178,1829,2.178,1830,2.178,1831,2.178,1832,2.178,1833,2.178,1834,2.178,1835,2.178,1836,2.178,1837,2.178,1838,2.178,1839,2.178,1840,2.178,1841,2.178,1842,2.178,1843,2.178,1844,2.178,1845,2.178,1846,2.178,1847,4.271,1848,3.444,1849,2.178,1850,2.178,1851,2.178,1852,2.178,1853,3.444,1854,2.178,1855,2.178,1856,1.835,1857,2.178,1858,2.178,1859,2.178,1860,1.718,1861,1.718,1862,2.178,1863,2.178,1864,4.854,1865,2.178,1866,2.178,1867,2.178,1868,2.178,1869,2.178,1870,2.178,1871,3.134,1872,2.178,1873,2.178,1874,2.178,1875,4.854,1876,4.817,1877,5.269,1878,3.444,1879,3.444,1880,2.178,1881,2.178,1882,4.854,1883,2.178,1884,2.178,1885,2.178,1886,2.178,1887,2.178,1888,2.178,1889,2.178,1890,2.178,1891,2.178,1892,2.178,1893,2.178,1894,2.178,1895,1.982,1896,2.178,1897,2.178,1898,2.178,1899,2.178,1900,2.178,1901,2.178,1902,2.178,1903,2.178,1904,2.178,1905,2.178,1906,3.444,1907,3.444,1908,2.178,1909,2.178,1910,1.982,1911,2.178,1912,2.178,1913,2.178,1914,2.178,1915,2.178,1916,2.178,1917,3.444,1918,5.288,1919,2.178,1920,2.178,1921,3.444,1922,2.178,1923,3.444,1924,2.178,1925,3.444,1926,2.178,1927,1.835,1928,1.835,1929,3.444,1930,2.178,1931,3.444,1932,2.178,1933,2.178,1934,2.178,1935,2.178,1936,2.178,1937,4.271,1938,2.178,1939,2.178]],["title/classes/ODataEnumType.html",[183,0.344,1940,3.441]],["body/classes/ODataEnumType.html",[3,0.066,4,0.057,5,0.066,6,0.106,8,0.543,9,2.819,10,0.048,11,0.488,12,0.208,23,1.793,24,0.115,25,0.01,30,0.531,31,0.428,36,0.057,45,1.769,51,3.11,60,1.207,62,1.148,77,2.754,78,0.171,85,0.856,86,0.878,87,2.516,97,2.276,99,2.568,100,3.082,104,1.086,105,3.384,106,3.384,110,2.431,116,1.781,118,0.523,123,0.133,124,1.265,130,2.147,134,2.345,140,1.799,142,3.563,153,3.148,154,4.174,170,0.917,177,0.19,181,0.006,182,0.006,183,0.304,185,0.173,187,0.857,192,0.305,194,1.293,244,0.173,247,1.484,420,2.486,422,0.998,483,2.754,486,2.568,487,1.833,567,3.16,580,3.039,675,4.75,735,3.815,736,1.021,852,2.635,930,3.034,932,3.054,933,3.054,934,2.431,936,2.431,937,2.811,938,2.057,939,3.429,941,3.815,942,2.926,943,2.926,944,3.672,945,2.057,946,1.769,948,2.607,949,1.654,950,2.057,957,2.516,1447,5.403,1448,3.871,1449,3.748,1450,3.354,1451,3.554,1452,4.492,1458,2.815,1459,2.815,1460,2.246,1462,3.536,1465,3.054,1467,4.75,1468,5.875,1469,4.75,1470,4.75,1472,4.75,1473,4.75,1475,3.054,1477,4.75,1478,4.003,1479,2.635,1480,2.815,1481,3.748,1482,1.976,1483,2.815,1484,2.147,1485,2.815,1486,1.902,1487,2.147,1488,2.147,1489,2.057,1490,2.147,1491,2.057,1492,2.147,1493,2.147,1494,2.147,1495,2.635,1496,2.815,1497,2.486,1498,2.635,1499,2.246,1500,2.246,1501,2.057,1508,2.486,1509,3.34,1510,3.34,1515,3.34,1516,3.34,1517,2.486,1518,2.486,1519,2.486,1539,4.05,1748,3.039,1877,2.635,1940,4.323,1941,8.332,1942,5.399,1943,5.399,1944,5.399,1945,3.796,1946,3.796,1947,3.796,1948,6.326,1949,3.796,1950,3.796,1951,5.362,1952,5.399,1953,5.399,1954,5.399,1955,3.796,1956,6.845,1957,5.399,1958,5.399,1959,3.796,1960,3.039,1961,3.039,1962,3.796,1963,5.399,1964,3.796,1965,3.796]],["title/classes/ODataEnumTypeFieldParser.html",[183,0.344,1951,3.186]],["body/classes/ODataEnumTypeFieldParser.html",[3,0.076,4,0.065,5,0.076,6,0.096,8,0.68,9,2.724,10,0.055,11,0.537,12,0.18,24,0.105,25,0.01,30,0.461,31,0.475,36,0.089,51,1.625,57,1.64,60,1.108,62,0.943,77,1.491,78,0.179,85,0.968,86,0.948,92,3.164,97,1.818,99,2.427,100,1.96,104,1.207,105,1.96,106,1.96,110,1.96,111,1.465,116,1.234,118,1.106,123,0.13,134,2.751,138,2.6,139,1.331,140,1.979,141,2.359,142,3.092,151,3.937,152,2.462,153,2.975,154,2.181,155,3.937,160,1.597,170,1.06,177,0.17,181,0.007,182,0.007,183,0.475,185,0.199,187,0.943,192,0.281,194,1.109,214,1.301,244,0.199,247,1.028,248,1.373,250,2.23,393,1.674,399,1.979,422,0.635,442,1.925,483,2.316,487,2.102,567,3.341,729,1.779,735,2.102,736,1.171,855,2.359,930,3.877,932,3.359,933,3.359,934,1.96,937,3.092,938,2.359,939,3.931,941,3.507,942,3.219,943,3.219,944,2.675,945,2.359,946,2.029,948,2.868,949,1.896,950,2.359,998,2.975,1079,2.359,1119,2.462,1204,2.851,1228,2.181,1356,3.092,1393,3.219,1448,2.462,1451,3.824,1460,2.576,1465,2.462,1475,2.462,1478,3.227,1482,2.266,1484,3.359,1486,2.975,1487,2.462,1488,2.462,1489,3.219,1490,2.462,1491,2.359,1492,2.462,1493,2.462,1494,2.462,1499,2.576,1500,2.576,1501,2.359,1539,2.576,1547,4.757,1548,4.428,1549,4.757,1563,2.704,1564,2.704,1570,2.851,1571,2.851,1572,2.704,1668,2.851,1670,2.704,1752,2.851,1753,3.227,1754,2.266,1768,3.227,1786,3.227,1802,3.89,1856,3.227,1860,4.123,1861,3.022,1876,4.123,1877,3.022,1951,5.013,1960,5.413,1961,3.485,1966,6.688,1967,5.94,1968,4.353,1969,4.353,1970,3.83,1971,6.39,1972,3.83,1973,3.83,1974,3.83,1975,3.83,1976,5.226,1977,3.83,1978,3.83,1979,3.83,1980,5.948,1981,3.83,1982,3.83,1983,3.83,1984,3.83,1985,3.83,1986,3.83,1987,3.83,1988,3.83,1989,3.83,1990,3.83,1991,3.83,1992,5.226]],["title/classes/ODataEnumTypeParser.html",[183,0.344,1539,2.543]],["body/classes/ODataEnumTypeParser.html",[3,0.066,4,0.057,5,0.066,6,0.109,8,0.629,9,2.789,10,0.048,11,0.486,12,0.212,23,1.964,24,0.112,25,0.01,30,0.529,31,0.451,36,0.081,51,1.406,57,1.482,60,1.101,62,0.852,77,1.29,78,0.18,85,0.95,86,0.924,92,3.36,97,1.013,99,2.557,100,2.817,104,1.292,105,2.817,106,2.817,110,2.418,111,1.4,116,1.522,118,1.105,123,0.13,124,1.255,134,2.701,138,2.966,139,1.518,140,1.789,141,2.041,142,3.55,151,2.91,152,3.538,153,3.417,154,3.134,155,3.908,160,1.444,170,0.995,177,0.184,181,0.006,182,0.006,183,0.43,185,0.172,187,0.852,192,0.303,194,1.214,214,1.604,244,0.172,247,0.889,248,1.188,250,2.094,393,1.448,399,1.789,422,1.052,442,1.221,483,2.143,487,1.819,538,3.314,567,3.28,729,1.539,735,1.819,736,1.013,855,2.041,930,3.724,932,3.036,933,3.036,934,2.418,936,1.696,937,2.795,938,2.041,939,3.755,941,3.481,942,2.91,943,2.91,944,2.817,945,2.041,946,1.755,948,2.592,949,1.641,950,2.041,998,2.69,1079,2.041,1119,2.13,1204,2.466,1228,1.887,1356,2.795,1393,2.91,1448,3.538,1450,3.335,1451,3.036,1460,2.229,1463,2.615,1465,3.036,1475,3.036,1478,2.792,1482,2.795,1484,2.13,1486,3.134,1487,3.036,1488,3.036,1489,3.391,1490,3.036,1491,2.91,1492,3.036,1493,3.036,1494,3.036,1499,2.229,1500,2.229,1501,2.041,1539,3.177,1547,4.466,1548,4.097,1549,4.466,1563,2.34,1564,2.34,1570,2.466,1571,2.466,1572,2.34,1668,2.466,1670,2.34,1748,3.015,1749,3.314,1752,2.466,1753,2.792,1754,1.961,1768,2.792,1786,4.639,1802,3.516,1856,2.792,1860,3.727,1861,2.615,1876,3.727,1877,2.615,1951,4.639,1960,5.009,1961,3.015,1966,7.564,1970,3.314,1971,6,1972,3.314,1973,3.314,1974,3.314,1975,4.724,1976,4.724,1977,3.314,1978,3.314,1979,3.314,1980,5.504,1981,3.314,1982,3.314,1983,3.314,1984,3.314,1985,3.314,1986,3.314,1987,3.314,1988,6,1989,3.314,1990,3.314,1991,3.314,1992,4.724,1993,5.369,1994,5.369,1995,3.766,1996,3.766,1997,3.766,1998,3.766,1999,3.766,2000,3.766,2001,3.766,2002,3.766,2003,3.766,2004,3.766,2005,3.766,2006,3.766]],["title/classes/ODataInMemoryCache.html",[183,0.344,2007,3.781]],["body/classes/ODataInMemoryCache.html",[3,0.084,4,0.072,5,0.084,6,0.08,8,0.637,10,0.061,11,0.573,12,0.217,23,2.236,24,0.115,25,0.01,30,0.372,31,0.396,34,3.683,36,0.072,41,1.9,49,2.382,60,0.949,78,0.168,85,0.75,86,0.533,104,1.326,114,3.557,116,2.141,118,1.082,123,0.133,124,2.365,177,0.198,181,0.007,182,0.007,183,0.384,185,0.219,187,1.006,192,0.31,194,1.277,244,0.289,428,3.937,483,3.022,743,4.692,957,2.234,1160,2.599,1172,5.006,1208,4.944,1211,3.555,1216,4.926,1228,3.557,1268,5.39,1333,5.829,1335,4.699,1336,5.602,1337,4.699,1338,5.074,1339,4.929,1340,4.699,1341,5.074,1342,4.699,1343,4.699,1344,5.074,1345,5.074,1346,5.074,1347,5.602,1348,3.329,1351,3.839,1353,4.65,1354,3.555,1356,2.496,1358,3.839,1360,3.329,1362,4.4,1364,3.839,1366,3.839,1368,3.839,1370,3.555,1372,3.555,1373,3.839,1375,4.4,1377,3.555,1379,3.555,2007,5.576,2008,4.795,2009,4.795,2010,4.218,2011,4.218,2012,4.795,2013,4.795,2014,4.218,2015,4.218,2016,4.795,2017,4.218,2018,4.218,2019,4.218,2020,4.218,2021,4.218,2022,4.218,2023,4.218,2024,4.218,2025,4.218,2026,5.074,2027,3.839,2028,3.839,2029,3.839,2030,3.839]],["title/classes/ODataInStorageCache.html",[183,0.344,2031,3.441]],["body/classes/ODataInStorageCache.html",[0,1.015,3,0.077,4,0.066,5,0.077,6,0.1,8,0.603,10,0.056,11,0.542,12,0.215,18,2.056,23,2.202,24,0.114,25,0.01,30,0.342,31,0.375,34,3.621,36,0.066,41,1.748,49,2.303,50,3.289,60,0.91,78,0.174,85,0.806,86,0.49,103,2.056,104,1.301,107,2.13,111,1.364,114,3.41,116,2.232,118,1.11,123,0.134,124,2.268,170,0.644,177,0.196,181,0.007,182,0.007,183,0.353,185,0.201,187,0.951,192,0.31,194,1.274,237,1.57,244,0.273,250,1.84,428,3.723,483,2.992,743,4.537,957,2.793,979,4.229,1160,2.391,1172,4.96,1176,3.271,1208,4.852,1211,3.271,1212,3.532,1216,4.835,1231,3.271,1268,5.277,1283,5.847,1333,5.78,1335,4.444,1336,5.469,1337,4.444,1338,4.799,1339,5.07,1340,4.444,1341,4.799,1342,4.444,1343,4.444,1344,4.799,1345,4.799,1346,4.799,1347,5.469,1348,3.062,1351,3.532,1353,4.783,1354,3.271,1356,2.296,1358,3.532,1360,3.062,1362,4.161,1364,3.532,1366,3.532,1368,3.532,1370,3.271,1372,3.271,1373,3.532,1375,4.161,1377,3.271,1379,3.271,1389,3.271,2010,3.881,2011,3.881,2014,5.273,2015,3.881,2017,3.881,2018,3.881,2019,3.881,2020,3.881,2021,3.881,2022,3.881,2023,3.881,2024,3.881,2025,3.881,2026,4.799,2027,3.532,2028,3.532,2029,3.532,2030,3.532,2031,4.799,2032,3.881,2033,7.314,2034,5.994,2035,4.412,2036,4.412,2037,4.412,2038,4.412,2039,4.412,2040,3.532,2041,3.881,2042,3.881,2043,3.881,2044,3.881,2045,5.273,2046,3.881,2047,3.881,2048,3.881,2049,3.881,2050,3.881,2051,3.881]],["title/modules/ODataModule.html",[2052,3.441,2053,3.186]],["body/modules/ODataModule.html",[3,0.11,4,0.095,5,0.11,6,0.095,12,0.156,24,0.08,25,0.01,31,0.547,36,0.113,48,1.026,62,0.998,86,0.835,120,4.76,121,4.818,123,0.095,170,0.918,177,0.14,181,0.008,182,0.008,183,0.504,187,0.998,192,0.22,194,0.918,217,2.727,736,1.691,1127,6.179,1130,5.036,1185,4.366,2053,5.964,2054,5.036,2055,6.29,2056,8.044,2057,6.179,2058,7.52,2059,6.29,2060,6.29,2061,8.044,2062,7.52,2063,7.077,2064,4.664,2065,6.29,2066,7.52,2067,6.29,2068,8.044,2069,6.29,2070,6.29,2071,6.29,2072,5.534,2073,7.52,2074,6.29,2075,6.29,2076,6.29,2077,6.29]],["title/classes/ODataParameterParser.html",[183,0.344,1526,3.441]],["body/classes/ODataParameterParser.html",[3,0.073,4,0.063,5,0.073,6,0.11,9,2.839,10,0.053,11,0.525,12,0.207,19,1.371,23,1.521,24,0.112,25,0.01,30,0.618,31,0.47,36,0.087,49,2.095,51,2.804,60,0.776,78,0.174,86,0.949,92,3.628,99,3.438,100,1.895,104,1.054,105,2.992,106,3.225,108,3.915,110,2.614,111,1.486,112,3.728,116,1.193,118,1.096,123,0.127,138,2.554,139,1.308,146,3.021,158,3.728,159,2.095,170,1.183,172,1.926,177,0.178,181,0.007,182,0.007,183,0.465,185,0.192,187,0.921,192,0.302,194,1.183,214,1.258,244,0.192,250,1.782,399,1.934,422,0.847,442,1.881,486,3.07,535,2.756,729,1.72,736,1.132,739,1.961,760,2.922,871,3.605,934,1.895,957,1.961,961,3.434,1119,2.38,1137,2.491,1228,2.108,1356,2.191,1393,3.881,1448,4.05,1457,3.121,1463,2.922,1465,2.38,1475,3.282,1482,2.191,1508,5.31,1514,4.92,1517,2.756,1518,2.756,1519,2.756,1521,3.703,1526,5.319,1533,3.703,1536,3.703,1538,6.3,1539,4.237,1540,5.309,1541,3.121,1542,3.703,1543,3.121,1544,3.703,1545,3.121,1546,3.703,1547,5.556,1548,4.92,1549,5.212,1550,4.303,1551,4.303,1552,3.703,1553,3.703,1554,3.121,1555,5.309,1556,3.121,1557,5.309,1558,3.121,1559,4.303,1560,5.309,1561,3.121,1562,3.121,1563,2.615,1564,2.615,1565,5.106,1566,3.703,1567,5.845,1568,3.703,1569,3.703,1570,2.756,1571,2.756,1572,2.615,1573,6.3,1574,7.002,1575,5.106,1576,5.106,1577,3.703,1578,3.703,1579,3.703,1580,3.703,1581,3.703,1582,3.703,2078,5.804,2079,4.209,2080,4.209,2081,4.209,2082,4.209,2083,4.209,2084,4.209,2085,4.209,2086,4.209,2087,4.209,2088,4.209,2089,4.209,2090,4.209,2091,4.209]],["title/classes/ODataParserOptions.html",[183,0.344,1119,2.431]],["body/classes/ODataParserOptions.html",[1,3.906,3,0.086,4,0.074,5,0.086,6,0.1,9,2.566,10,0.063,11,0.585,12,0.179,13,3.366,14,2.679,15,2.796,16,2.085,17,3.61,18,3.013,19,1.527,20,2.679,21,2.796,22,2.573,24,0.091,25,0.01,26,3.122,27,2.643,28,2.226,29,3.245,30,0.666,31,0.451,33,3.572,36,0.097,37,3.829,41,1.959,44,2.679,51,1.845,54,2.727,74,2.573,75,3.83,76,4.143,77,2.215,78,0.167,79,2.679,80,2.679,81,2.573,82,3.657,83,3.657,84,2.679,85,0.585,86,0.801,87,2.304,88,2.796,89,2.476,92,3.33,102,3.456,103,2.304,109,2.387,123,0.074,124,1.647,177,0.11,181,0.007,182,0.007,183,0.518,185,0.226,192,0.267,214,2.154,244,0.226,247,1.167,248,1.559,736,1.329,739,2.304,837,4.794,890,2.486,934,3.245,936,2.226,1044,3.957,1045,4.349,1048,4.349,1049,3.665,1050,3.657,1052,5.689,1055,3.957,1056,3.665,1058,5.689,1059,5.689,1064,4.349,1065,3.432,1068,3.432,1069,4.349,1070,3.957,1072,5.689,1073,5.689,1074,5.77,1075,3.957,1076,6.638,1077,7.295,1078,4.349,1079,3.505,1080,4.349,1081,4.349,1082,7.16,1083,7.16,1084,7.16,1085,7.16,1086,7.16,1087,7.16,1088,7.16,1089,4.349,1090,4.349,1091,4.349,1092,4.349,1093,4.349,1094,4.349,1095,5.177,1096,5.177,1097,5.177,1098,4.349,1099,4.349,1100,3.957,1101,4.349,1102,3.957,1103,4.349,1104,4.349,1105,4.349,1106,3.957,1107,4.349,1108,3.957,1109,4.349,1110,4.349,1111,4.349,1112,4.349,1113,4.349,1114,4.349,1115,4.349,1116,4.349,1117,4.349,1118,5.177,1119,3.657,2092,6.467,2093,4.943,2094,4.943]],["title/classes/ODataPathSegments.html",[183,0.344,1206,2.983]],["body/classes/ODataPathSegments.html",[3,0.068,4,0.058,5,0.068,6,0.108,10,0.069,11,0.495,12,0.203,19,1.876,23,2.081,24,0.111,25,0.01,27,3.469,30,0.627,31,0.473,36,0.082,42,3.067,49,2.003,52,2.552,60,1.062,62,0.869,67,1.804,78,0.176,86,0.954,104,0.614,109,1.869,111,1.508,116,1.097,118,1.161,123,0.132,124,2.427,157,2.846,170,1.007,171,2.644,177,0.185,181,0.006,182,0.006,183,0.31,185,0.177,187,0.869,192,0.297,194,1.208,205,2.908,207,2.578,208,2.365,238,1.404,244,0.177,246,2.044,247,0.914,248,2.452,350,1.445,415,4.059,422,0.799,729,2.238,736,1.857,739,1.804,855,4.214,871,2.405,875,3.1,886,2.535,941,3.067,948,1.869,978,4.086,1079,2.968,1132,2.015,1152,2.291,1206,4.41,1256,5.424,1261,3.406,1360,3.801,1393,2.968,1394,4.383,1395,3.1,1396,3.1,1645,4.771,1752,2.535,1754,2.015,1821,5.833,1822,5.833,1823,3.1,1824,5.086,2095,3.406,2096,6.352,2097,6.352,2098,4.817,2099,4.817,2100,6.071,2101,5.475,2102,5.475,2103,3.872,2104,3.872,2105,5.475,2106,6.359,2107,3.872,2108,3.872,2109,3.872,2110,3.872,2111,4.383,2112,3.872,2113,3.872,2114,3.872,2115,4.817,2116,3.872,2117,3.872,2118,3.872,2119,3.872,2120,3.872,2121,3.872,2122,3.872,2123,3.872,2124,6.075,2125,2.871,2126,3.406,2127,3.872,2128,3.872,2129,3.872,2130,5.475,2131,5.475,2132,6.352,2133,3.872,2134,3.872,2135,3.872,2136,3.872,2137,3.872,2138,3.872,2139,3.872,2140,5.475,2141,3.872,2142,3.872,2143,3.872,2144,3.872,2145,3.872,2146,3.872,2147,3.872,2148,3.872,2149,6.905,2150,3.872,2151,6.352,2152,3.872,2153,3.872,2154,3.872,2155,3.872,2156,3.872,2157,5.475,2158,6.352,2159,3.406,2160,3.406,2161,3.406,2162,3.406,2163,3.872,2164,3.872,2165,3.872,2166,5.475,2167,3.872,2168,3.872,2169,3.872,2170,3.872,2171,3.872,2172,3.872,2173,3.872,2174,3.872,2175,3.872,2176,3.872,2177,5.475,2178,3.872,2179,3.872,2180,3.872,2181,5.475,2182,3.872,2183,3.872,2184,3.872]],["title/classes/ODataPathSegmentsHandler.html",[183,0.344,2185,3.441]],["body/classes/ODataPathSegmentsHandler.html",[3,0.097,4,0.084,5,0.097,6,0.11,10,0.071,12,0.173,24,0.097,25,0.01,31,0.5,36,0.105,52,2.598,55,2.899,56,3.726,57,2.207,58,4.162,60,1.152,62,1.269,63,2.663,78,0.139,86,0.99,104,1.109,118,1.173,123,0.115,171,3.372,177,0.156,181,0.008,182,0.008,183,0.559,185,0.254,187,1.109,192,0.301,194,1.243,244,0.254,246,2.081,388,2.022,422,0.813,736,1.878,1132,2.902,1206,5.55,1256,4.995,1313,4.849,1645,5.501,1754,2.902,2099,4.905,2100,5.178,2106,4.464,2111,5.592,2125,4.134,2185,5.592,2186,4.905,2187,5.576,2188,5.576,2189,5.576,2190,5.576,2191,5.576,2192,5.576,2193,5.576,2194,5.576,2195,4.464,2196,4.905,2197,4.905,2198,6.145,2199,4.905,2200,6.145,2201,4.905,2202,6.71,2203,4.905,2204,4.905,2205,4.905,2206,4.905,2207,6.71,2208,4.905,2209,4.905,2210,4.905,2211,4.905,2212,4.905,2213,4.905,2214,4.905,2215,4.905,2216,4.905,2217,4.905]],["title/classes/ODataPropertyAnnotations.html",[183,0.344,999,2.814]],["body/classes/ODataPropertyAnnotations.html",[3,0.083,4,0.072,5,0.083,6,0.06,8,0.758,10,0.06,11,0.641,12,0.157,16,2.014,23,1.976,24,0.107,25,0.01,28,2.151,29,3.396,31,0.395,32,3.689,33,3.396,36,0.113,48,1.156,49,2.235,54,3.181,55,1.732,61,2.151,71,2.151,72,2.151,73,2.226,78,0.173,86,1.007,104,1.197,118,1.11,123,0.129,140,1.591,170,1.034,177,0.158,181,0.007,182,0.007,183,0.604,185,0.218,187,1.003,192,0.264,194,1.034,237,1.857,244,0.218,245,1.994,412,2.228,483,2.584,489,2.808,736,1.284,787,3.927,946,2.226,949,3.511,955,4.402,976,5.922,977,3.541,978,4.866,979,4.685,981,2.826,982,4.14,985,4.687,988,5.817,994,3.541,995,3.541,996,3.541,997,3.541,998,2.393,999,5.138,1000,5.254,1001,4.919,1002,3.541,1003,4.641,1004,3.541,1005,3.541,1006,3.541,1007,3.541,1008,3.541,1009,3.541,1010,3.541,1011,4.687,1012,4.687,1013,3.541,1014,3.541,1015,3.541,1016,3.541,1017,3.541,1018,3.541,1019,3.541,1020,3.541,1021,3.541,1022,5.254,1023,3.541,1024,3.541,1025,3.541,1026,4.687,1027,5.977,1028,4.687,1029,4.687,1030,4.687,1031,4.641,1032,3.541,1033,3.541,1034,3.541,1035,3.541,1036,3.541,1037,3.541,1038,5.254,1039,3.541,1040,4.687,1041,3.541,1042,3.541,1043,3.541,1584,3.824,1588,3.824,2218,4.777,2219,4.777]],["title/classes/ODataQueryOptionHandler.html",[183,0.344,2220,3.441]],["body/classes/ODataQueryOptionHandler.html",[3,0.063,4,0.054,5,0.063,6,0.108,9,1.641,10,0.066,12,0.202,23,1.857,24,0.108,25,0.01,26,3.228,27,3.185,30,0.474,31,0.462,36,0.078,49,2.458,60,1.13,64,3.01,65,3.01,66,1.954,67,3.115,68,1.954,69,3.48,70,3.349,71,3.01,72,3.01,73,3.115,74,1.877,77,1.782,78,0.174,85,0.94,86,0.978,104,0.826,107,2.948,108,1.741,115,4.807,116,2.009,118,1.124,119,2.749,123,0.13,139,1.395,170,0.526,177,0.182,180,2.845,181,0.006,182,0.006,183,0.417,185,0.164,187,0.826,192,0.297,194,1.233,200,1.346,208,2.29,244,0.237,246,1.942,388,1.307,407,2.062,410,2.062,414,1.429,422,0.759,526,3.079,729,2.126,736,1.399,879,3.172,886,2.361,890,2.001,1050,2.039,1076,4.888,1152,3.079,1313,2.503,1413,3.612,1486,3.059,1754,1.877,1756,2.673,1802,4.378,1876,3.612,1895,2.886,1948,6.455,2220,7.017,2221,3.605,2222,6.685,2223,5.203,2224,5.203,2225,5.881,2226,6.685,2227,5.203,2228,5.203,2229,3.605,2230,6.106,2231,3.605,2232,5.881,2233,3.605,2234,5.203,2235,3.605,2236,5.203,2237,3.605,2238,5.203,2239,3.605,2240,3.605,2241,3.605,2242,5.203,2243,6.685,2244,3.605,2245,5.203,2246,3.605,2247,5.203,2248,3.605,2249,5.203,2250,3.605,2251,5.203,2252,3.605,2253,3.605,2254,5.203,2255,3.605,2256,5.203,2257,3.605,2258,3.172,2259,3.605,2260,5.371,2261,7.434,2262,2.886,2263,4.166,2264,4.166,2265,3.605,2266,8.327,2267,3.605,2268,3.605,2269,6.106,2270,3.605,2271,3.605,2272,3.605,2273,3.605,2274,5.203,2275,5.203,2276,3.605,2277,3.605,2278,3.605,2279,3.605,2280,3.605,2281,7.941,2282,3.605,2283,3.605,2284,6.106,2285,3.605,2286,5.203,2287,3.605,2288,3.605,2289,3.605,2290,3.605,2291,3.605,2292,3.605,2293,3.605,2294,6.106,2295,6.106,2296,6.106,2297,6.106,2298,3.605,2299,5.203,2300,5.203,2301,3.605,2302,5.203,2303,3.605,2304,3.605,2305,6.106,2306,6.106,2307,6.106,2308,3.172,2309,6.106,2310,3.605,2311,3.605,2312,5.203,2313,3.605,2314,5.203,2315,3.605,2316,5.203,2317,3.605,2318,5.203,2319,3.172,2320,3.605,2321,3.605,2322,3.605,2323,3.605,2324,5.203,2325,3.172,2326,3.605,2327,5.203,2328,3.605,2329,5.203,2330,3.605,2331,5.203,2332,3.605,2333,3.605,2334,3.605,2335,3.605,2336,3.605,2337,3.605,2338,3.605,2339,3.605,2340,3.605,2341,3.605,2342,3.605,2343,3.605,2344,3.605,2345,3.605,2346,3.605,2347,3.605,2348,3.605,2349,3.605,2350,3.605,2351,3.605,2352,3.605,2353,3.605,2354,3.605]],["title/classes/ODataQueryOptions.html",[183,0.344,2264,3.441]],["body/classes/ODataQueryOptions.html",[3,0.077,4,0.067,5,0.077,6,0.11,9,2.624,10,0.056,11,0.543,12,0.2,19,1.419,23,1.787,24,0.11,25,0.01,26,4.236,27,2.455,30,0.568,31,0.478,36,0.09,60,1.144,64,3.071,65,3.071,66,2.399,67,3.409,68,2.399,69,3.55,70,3.417,71,1.994,72,1.994,73,2.063,78,0.167,85,0.711,86,0.943,109,2.138,111,1.122,115,4.325,116,1.933,118,0.827,123,0.13,124,1.475,157,2.556,170,0.876,177,0.186,181,0.007,182,0.007,183,0.354,185,0.202,187,0.954,192,0.301,194,1.227,199,2.31,200,1.653,204,2.31,205,2.31,207,2.73,208,2.506,244,0.202,248,1.895,350,1.653,422,0.876,526,2.62,729,1.809,736,1.616,886,2.899,978,4.328,1356,3.128,1413,4.171,1419,3.935,1754,2.305,1910,3.544,1927,4.455,1928,5.423,2098,5.286,2115,5.286,2124,5.286,2126,3.895,2159,3.895,2160,3.895,2161,3.895,2162,3.895,2220,3.544,2225,6.728,2232,6.728,2261,7.468,2262,3.544,2263,5.856,2264,5.46,2308,5.286,2319,5.286,2325,5.286,2355,3.895,2356,6.008,2357,6.82,2358,7.315,2359,6.008,2360,6.008,2361,4.427,2362,4.427,2363,6.008,2364,7.315,2365,4.427,2366,6.008,2367,4.427,2368,4.427,2369,4.427,2370,6.008,2371,4.427,2372,4.427,2373,4.427,2374,4.427,2375,4.427,2376,4.427,2377,4.427,2378,6.008,2379,6.008,2380,6.008,2381,6.008,2382,6.008,2383,6.008,2384,6.008,2385,6.008,2386,6,2387,4.427,2388,4.427,2389,6.82,2390,6.82,2391,4.427,2392,6.008,2393,4.427,2394,4.427,2395,4.427,2396,4.427,2397,4.427,2398,4.427,2399,4.427,2400,4.427,2401,4.427,2402,4.427,2403,4.427,2404,4.427,2405,4.427,2406,6.82,2407,4.427,2408,4.427,2409,4.427,2410,4.427,2411,4.427,2412,4.427,2413,4.427,2414,4.427,2415,4.427,2416,4.427,2417,4.427]],["title/classes/ODataReferential.html",[183,0.344,1764,3.441]],["body/classes/ODataReferential.html",[3,0.043,4,0.037,5,0.043,6,0.07,8,0.394,9,2.725,10,0.031,11,0.439,12,0.061,23,1.026,24,0.105,25,0.01,28,1.116,30,0.589,31,0.419,36,0.09,49,1.741,51,1.462,57,1.765,60,1.137,64,1.116,65,1.764,77,0.849,78,0.173,85,0.712,86,0.964,92,3.112,96,2.992,97,2.042,98,2.633,99,3.188,100,1.764,104,1.223,105,1.764,106,1.764,110,1.764,111,1.523,112,2.529,118,1.201,119,2.486,123,0.123,124,0.825,126,2.039,134,1.664,138,1.868,139,1.318,144,2.123,154,3.579,156,0.803,157,0.803,158,1.29,159,0.781,160,2.007,161,0.803,162,0.803,163,1.401,164,2.879,165,1.401,167,1.343,168,1.343,170,1.089,171,1.196,172,1.719,173,2.111,177,0.055,180,2.572,181,0.004,182,0.004,183,0.442,185,0.113,192,0.17,194,0.361,208,0.849,214,1.17,237,1.675,238,2.002,240,1.868,244,0.274,247,0.925,248,1.896,250,1.846,399,1.618,486,2.256,487,1.196,567,1.601,580,3.136,707,3.136,729,2.612,735,3.846,736,1.053,739,1.155,760,1.72,855,3.628,871,2.433,873,1.983,886,1.622,887,1.983,930,2.345,936,2.187,939,1.241,941,1.196,944,1.764,948,1.891,949,2.405,957,1.825,961,3.961,998,3.74,1079,2.633,1119,1.401,1204,1.622,1213,1.837,1220,1.622,1228,2.433,1348,1.72,1356,1.29,1393,3.465,1419,1.622,1448,2.215,1451,1.401,1465,2.747,1475,2.747,1482,1.29,1484,1.401,1486,3.202,1487,1.401,1488,1.401,1489,2.633,1490,1.401,1491,1.343,1492,1.401,1493,1.401,1494,1.401,1501,1.343,1508,5.045,1514,3.937,1517,1.622,1518,1.622,1519,1.622,1539,3.266,1540,6.086,1541,5.146,1543,3.601,1545,3.601,1547,5.304,1548,4.186,1549,4.545,1550,3.601,1551,2.904,1554,1.837,1555,2.904,1556,1.837,1557,1.837,1558,2.904,1559,2.904,1560,1.837,1561,2.904,1562,1.837,1563,1.539,1564,1.539,1570,2.565,1571,1.622,1572,1.539,1668,3.181,1670,2.433,1681,1.837,1722,1.837,1746,3.136,1747,4.419,1750,4.857,1751,2.18,1752,1.622,1753,1.837,1754,1.29,1755,3.136,1756,2.904,1757,3.136,1758,5.624,1759,3.136,1760,4.419,1761,3.136,1762,2.18,1763,3.446,1764,3.889,1765,2.18,1766,2.18,1767,4.273,1768,1.837,1769,2.18,1770,2.18,1771,2.18,1772,2.18,1773,2.18,1774,5.29,1775,2.18,1776,5.29,1777,2.18,1778,3.446,1779,2.18,1780,3.446,1781,2.18,1782,2.18,1783,2.18,1784,2.18,1785,2.18,1786,2.904,1787,6.107,1788,2.18,1789,2.18,1790,2.18,1791,2.18,1792,2.18,1793,2.18,1794,2.18,1795,3.446,1796,3.446,1797,3.446,1798,3.446,1799,3.136,1800,2.18,1801,3.446,1802,4.545,1803,2.18,1804,2.18,1805,3.446,1806,2.18,1807,2.18,1808,2.18,1809,3.446,1810,2.18,1811,3.446,1812,3.446,1813,3.446,1814,3.446,1815,3.446,1816,3.446,1817,2.18,1818,5.624,1819,4.273,1820,2.18,1821,4.813,1822,4.813,1823,1.983,1824,3.889,1825,2.18,1826,2.18,1827,2.18,1828,2.18,1829,2.18,1830,2.18,1831,2.18,1832,2.18,1833,2.18,1834,2.18,1835,2.18,1836,2.18,1837,2.18,1838,2.18,1839,2.18,1840,2.18,1841,2.18,1842,2.18,1843,2.18,1844,2.18,1845,2.18,1846,2.18,1847,4.273,1848,3.446,1849,2.18,1850,2.18,1851,2.18,1852,2.18,1853,3.446,1854,2.18,1855,2.18,1856,1.837,1857,2.18,1858,2.18,1859,2.18,1860,1.72,1861,1.72,1862,2.18,1863,2.18,1864,4.857,1865,2.18,1866,2.18,1867,2.18,1868,2.18,1869,2.18,1870,2.18,1871,3.136,1872,2.18,1873,2.18,1874,2.18,1875,4.857,1876,4.818,1877,5.271,1878,3.446,1879,3.446,1880,2.18,1881,2.18,1882,4.857,1883,2.18,1884,2.18,1885,2.18,1886,2.18,1887,2.18,1888,2.18,1889,2.18,1890,2.18,1891,2.18,1892,2.18,1893,2.18,1894,2.18,1895,1.983,1896,2.18,1897,2.18,1898,2.18,1899,2.18,1900,2.18,1901,2.18,1902,2.18,1903,2.18,1904,2.18,1905,2.18,1906,3.446,1907,3.446,1908,2.18,1909,2.18,1910,1.983,1911,2.18,1912,2.18,1913,2.18,1914,2.18,1915,2.18,1916,2.18,1917,3.446,1918,5.29,1919,2.18,1920,2.18,1921,3.446,1922,2.18,1923,3.446,1924,2.18,1925,3.446,1926,2.18,1927,1.837,1928,1.837,1929,3.446,1930,2.18,1931,3.446,1932,2.18,1933,2.18,1934,2.18,1935,2.18,1936,2.18,1937,4.273,1938,2.18,1939,2.18,2418,2.478]],["title/classes/ODataRequest.html",[183,0.344,1172,2.431]],["body/classes/ODataRequest.html",[3,0.06,4,0.051,5,0.06,6,0.111,10,0.043,11,0.453,12,0.186,13,2.606,14,3.534,16,1.442,17,3.267,18,3.234,19,1.814,20,3.211,22,3.394,23,1.312,24,0.108,25,0.01,26,3.148,27,3.061,30,0.618,31,0.454,36,0.051,41,3.236,42,2.86,43,3.775,49,2.723,53,1.853,54,1.442,57,1.8,60,0.872,61,1.54,64,1.54,65,1.54,67,1.593,70,1.713,71,1.54,72,1.54,77,1.171,78,0.17,79,1.853,81,1.78,84,1.853,86,0.937,103,3.234,107,2.86,109,1.651,111,1.354,118,1.079,119,2.255,123,0.104,128,1.853,140,1.139,143,2.86,177,0.076,180,2.333,181,0.006,182,0.006,183,0.274,185,0.156,187,0.795,192,0.307,194,0.864,237,1.708,238,1.24,244,0.156,247,0.807,428,4.051,511,3.234,729,3.337,736,0.919,739,1.593,744,7.186,855,3.534,890,1.925,998,3.267,1049,2.535,1065,4.527,1068,2.374,1079,3.762,1102,2.737,1106,2.737,1108,2.737,1125,4.107,1132,3.775,1134,4.27,1172,2.832,1183,5.22,1185,2.374,1186,4.835,1195,2.737,1207,4.835,1219,5.737,1220,3.279,1241,6.106,1270,2.535,1274,5.212,1277,5.737,1287,3.008,1754,1.78,2419,3.419,2420,5.924,2421,5.924,2422,5.924,2423,5.924,2424,5.924,2425,5.924,2426,5.924,2427,6.521,2428,6.521,2429,6.521,2430,6.521,2431,5.924,2432,5.924,2433,4.405,2434,5.007,2435,3.008,2436,3.419,2437,3.419,2438,3.419,2439,6.521,2440,3.419,2441,3.419,2442,6.521,2443,6.521,2444,3.419,2445,3.419,2446,3.419,2447,3.419,2448,3.419,2449,3.419,2450,3.419,2451,3.419,2452,3.419,2453,3.419,2454,3.419,2455,3.419,2456,3.419,2457,3.419,2458,3.419,2459,3.419,2460,3.419,2461,3.419,2462,3.419,2463,3.419,2464,3.419,2465,3.419,2466,3.419,2467,3.419,2468,3.419,2469,3.419,2470,3.419,2471,3.419,2472,3.419,2473,3.419,2474,3.419,2475,5.007,2476,5.924,2477,3.419,2478,3.008,2479,3.008,2480,3.008,2481,3.419,2482,3.419,2483,3.419,2484,3.419,2485,6.94,2486,3.419,2487,6.521,2488,5.007,2489,3.419,2490,5.007,2491,3.419,2492,3.419,2493,3.419,2494,3.419,2495,3.419,2496,5.007,2497,6.521,2498,3.419,2499,5.924,2500,5.007,2501,5.924,2502,3.419,2503,5.007,2504,3.419,2505,3.419,2506,6.94,2507,3.419,2508,3.419,2509,3.419,2510,3.419,2511,3.419,2512,5.007,2513,3.419,2514,3.419,2515,3.419,2516,3.419,2517,3.419,2518,3.419,2519,3.419,2520,3.419,2521,3.419,2522,3.419,2523,5.007,2524,3.419,2525,3.419,2526,3.419,2527,3.419,2528,3.419,2529,3.419,2530,3.419,2531,3.419,2532,5.007,2533,3.419,2534,3.419,2535,3.419,2536,5.007,2537,3.419,2538,3.419,2539,5.007,2540,3.419,2541,3.419,2542,3.419,2543,3.419,2544,3.419,2545,3.419,2546,3.419,2547,3.419,2548,6.521,2549,3.419,2550,7.252,2551,3.419,2552,3.419,2553,3.419,2554,3.419,2555,3.419,2556,3.419,2557,5.007,2558,5.007,2559,3.419,2560,5.007,2561,3.419,2562,3.419,2563,3.419,2564,3.419,2565,3.419,2566,3.419]],["title/classes/ODataResponse.html",[183,0.344,1208,2.543]],["body/classes/ODataResponse.html",[3,0.062,4,0.053,5,0.062,6,0.109,8,0.518,9,2.619,10,0.045,11,0.466,12,0.202,16,2.554,18,3.425,23,1.74,24,0.107,25,0.01,31,0.509,33,1.6,36,0.053,38,2.912,39,2.01,40,2.01,49,2.595,57,2.218,60,1.074,75,1.716,78,0.157,85,0.61,86,0.904,102,1.548,103,3.901,104,1.329,107,3.549,111,1.625,114,4.122,118,1.012,123,0.111,140,2.212,143,3.88,157,2.152,170,1.106,171,1.716,177,0.157,181,0.006,182,0.006,183,0.284,185,0.162,187,0.817,192,0.3,194,1.187,208,2.275,217,2.665,237,2.245,244,0.162,511,3.745,729,1.452,736,1.385,737,3.127,739,1.656,744,5.884,890,1.98,944,1.6,955,3.762,979,4.566,981,3.584,982,3.372,999,3.372,1001,4.204,1003,3.372,1031,3.372,1049,4.923,1050,2.912,1065,5.579,1068,2.467,1079,3.282,1100,2.845,1125,4.486,1132,3.947,1157,4.49,1158,4.204,1159,4.848,1172,4.287,1176,5.449,1183,4.123,1184,6.466,1185,2.467,1186,4.923,1188,3.127,1195,2.845,1203,3.127,1207,4.923,1208,4.349,1216,3.425,1231,5.449,1268,3.966,1269,4.53,1270,2.635,1319,5.328,1441,4.123,1927,2.635,1928,2.635,2386,6.201,2433,4.53,2435,3.127,2478,3.127,2479,3.127,2480,3.127,2567,3.554,2568,6.056,2569,6.056,2570,6.056,2571,6.056,2572,5.15,2573,6.056,2574,5.15,2575,3.554,2576,3.554,2577,5.316,2578,3.554,2579,3.554,2580,3.554,2581,3.554,2582,7.765,2583,3.554,2584,5.15,2585,3.554,2586,3.554,2587,3.554,2588,3.554,2589,3.554,2590,3.554,2591,3.554,2592,3.554,2593,3.554,2594,3.554,2595,3.554,2596,3.554,2597,3.554,2598,3.554,2599,5.15,2600,3.554,2601,3.554,2602,5.15,2603,5.15,2604,3.554,2605,3.554,2606,3.554,2607,3.554,2608,3.554,2609,3.554,2610,3.554,2611,3.554,2612,3.554,2613,3.554,2614,3.554,2615,6.056,2616,3.554,2617,3.554,2618,3.554,2619,3.554,2620,3.554,2621,6.056,2622,3.554,2623,3.554,2624,3.554,2625,3.127,2626,3.554,2627,3.554,2628,3.554,2629,3.554,2630,6.056,2631,3.554,2632,3.554,2633,3.554,2634,4.123,2635,3.554,2636,3.554,2637,4.53,2638,3.554,2639,3.554,2640,6.056,2641,3.554,2642,3.554,2643,6.056,2644,3.554,2645,3.554,2646,7.049,2647,6.056,2648,3.554,2649,5.15,2650,3.554,2651,6.056,2652,3.554,2653,6.466,2654,6.056,2655,6.056,2656,5.15,2657,5.15,2658,6.056,2659,3.554,2660,3.554,2661,3.554,2662,3.554,2663,3.554,2664,3.554]],["title/classes/ODataResponseOptions.html",[183,0.344,2577,3.441]],["body/classes/ODataResponseOptions.html",[3,0.087,4,0.075,5,0.087,6,0.112,9,2.419,10,0.063,11,0.588,12,0.222,24,0.111,25,0.01,29,3.454,30,0.633,31,0.453,33,3.454,36,0.075,37,3.842,41,3.039,47,3.678,48,1.181,49,2.282,50,2.929,54,3.052,60,0.869,75,3.703,76,3.923,78,0.175,80,4.157,81,3.768,85,0.77,86,0.722,93,4.093,94,4.283,95,4.707,111,0.931,116,2.174,123,0.12,170,0.727,177,0.178,181,0.007,182,0.007,183,0.399,185,0.227,187,1.032,192,0.309,194,1.16,214,1.943,244,0.227,247,1.536,435,5.794,729,2.658,736,1.341,738,3.992,739,2.324,837,4.822,890,2.501,934,2.929,936,2.246,978,4.539,1050,2.82,1070,3.992,1074,5.207,1075,3.992,1095,3.992,1096,3.992,1097,3.992,1118,3.992,1213,3.697,1267,4.387,1419,3.266,1802,5.023,1871,5.794,2577,5.794,2625,4.387,2634,6.652,2637,4.387,2665,4.987,2666,6.504,2667,6.504,2668,6.504,2669,6.504,2670,6.504,2671,4.987,2672,4.987,2673,4.987,2674,4.987,2675,4.987,2676,4.987,2677,4.987,2678,4.987,2679,6.504,2680,4.987,2681,6.504,2682,4.987,2683,6.504,2684,4.987,2685,6.504,2686,4.987,2687,4.987,2688,4.987,2689,6.504,2690,6.504,2691,4.987,2692,4.987,2693,4.987,2694,4.987,2695,4.987,2696,4.987,2697,4.987,2698,4.987,2699,4.987,2700,4.987,2701,4.387,2702,4.987,2703,4.987,2704,4.987,2705,4.987,2706,4.987,2707,4.987,2708,4.987,2709,4.987,2710,4.987,2711,4.987,2712,4.987]],["title/classes/ODataSchema.html",[183,0.344,1452,2.67]],["body/classes/ODataSchema.html",[3,0.074,4,0.064,5,0.074,6,0.11,8,0.589,10,0.054,11,0.53,12,0.209,23,1.536,24,0.114,25,0.01,31,0.516,36,0.064,48,1.387,51,1.594,60,0.784,62,0.93,78,0.178,86,0.904,99,2.395,104,1.198,111,1.345,116,1.661,118,1.12,119,1.923,123,0.124,132,4.075,134,2.008,138,2.574,139,1.318,140,1.953,141,3.905,143,3.479,145,4.263,147,3.961,149,3.628,170,1.051,177,0.191,180,1.99,181,0.007,182,0.007,183,0.342,185,0.195,187,0.93,192,0.307,194,1.204,244,0.195,247,1.008,399,1.953,422,0.623,483,2.293,486,1.745,511,2.731,526,2.526,567,3.265,663,4.693,736,1.148,890,2.254,930,3.766,932,3.315,933,3.315,934,2.639,936,3.4,937,3.051,938,2.314,939,2.936,941,3.479,942,3.177,943,3.177,944,2.639,945,2.314,946,1.99,948,2.83,949,1.86,950,2.314,957,3.357,1050,2.415,1125,4.815,1186,5.783,1270,3.165,1393,3.177,1445,5.768,1448,4.412,1452,3.641,1460,2.526,1462,2.796,1463,2.964,1499,2.526,1500,2.526,1501,2.314,1514,4.718,1564,2.652,1631,5.359,1633,4.346,1799,3.418,1940,5.768,2713,4.27,2714,5.862,2715,5.862,2716,5.862,2717,5.862,2718,5.862,2719,5.862,2720,4.27,2721,4.27,2722,4.27,2723,7.205,2724,4.27,2725,4.27,2726,4.27,2727,4.27,2728,5.862,2729,7.205,2730,4.27,2731,5.862,2732,4.27,2733,5.862,2734,4.27,2735,5.862,2736,4.27,2737,5.862,2738,4.27,2739,4.27,2740,4.27,2741,4.27,2742,4.27,2743,4.27,2744,4.27,2745,4.27,2746,4.27,2747,4.27,2748,4.27,2749,4.27,2750,4.27,2751,4.27,2752,4.27,2753,4.27,2754,4.27,2755,4.27,2756,4.27,2757,4.27,2758,4.27,2759,4.27,2760,4.27,2761,6.693,2762,4.27,2763,5.862,2764,4.27,2765,4.27,2766,5.862,2767,5.862,2768,4.27,2769,5.862,2770,4.27,2771,4.27,2772,4.27,2773,6.693,2774,4.27,2775,4.27,2776,4.27,2777,4.27,2778,4.27,2779,4.27]],["title/classes/ODataSchemaElement.html",[183,0.344,1447,2.814]],["body/classes/ODataSchemaElement.html",[3,0.08,4,0.069,5,0.08,6,0.106,8,0.621,10,0.058,11,0.559,12,0.202,23,1.949,24,0.116,25,0.01,30,0.651,31,0.465,36,0.069,45,2.879,60,0.931,62,0.981,77,2.548,78,0.177,86,0.906,87,3.614,104,0.981,116,1.308,118,0.635,123,0.129,124,1.537,133,3.216,134,2.792,138,2.375,139,1.527,140,2.32,177,0.185,181,0.007,182,0.007,183,0.369,185,0.21,187,0.981,192,0.299,194,1.286,244,0.282,247,1.885,248,1.948,250,1.416,420,4.046,422,0.673,483,2.386,486,3.262,567,3.429,729,1.886,735,4.051,736,1.241,890,2.375,930,3.854,932,3.494,933,3.494,934,2.078,936,2.782,937,3.216,938,2.501,939,3.885,941,3.745,942,3.348,943,3.348,944,3.35,945,2.501,946,2.15,948,2.983,949,2.01,950,2.501,1125,4.121,1155,4.059,1204,3.021,1228,2.311,1356,2.402,1447,5.079,1449,4.289,1450,3.838,1451,4.207,1452,4.958,1460,2.73,1462,4.872,1468,5.751,1479,4.289,1481,5.164,1482,3.216,1484,3.494,1486,3.095,1487,3.494,1488,3.494,1489,3.348,1490,3.494,1491,3.348,1492,3.494,1493,3.494,1494,3.494,1495,3.203,1497,4.046,1498,4.289,1499,2.73,1500,2.73,1501,2.501,1511,5.435,1563,2.866,1572,2.866,1734,3.421,1754,2.402,1860,3.203,1861,3.203,2780,4.614,2781,6.178,2782,4.614,2783,4.614,2784,4.614,2785,4.614,2786,4.614,2787,4.614,2788,4.614,2789,4.614,2790,4.614,2791,6.178,2792,4.614,2793,4.614]],["title/injectables/ODataServiceFactory.html",[2057,3.186,2794,3.781]],["body/injectables/ODataServiceFactory.html",[3,0.1,4,0.086,5,0.1,6,0.102,8,0.716,10,0.073,12,0.192,24,0.111,25,0.01,31,0.506,36,0.086,55,2.804,56,4.04,77,2.769,78,0.177,86,0.791,104,1.13,123,0.133,170,1.039,177,0.185,179,4.049,181,0.008,182,0.008,183,0.619,187,1.13,192,0.271,194,1.039,218,3.017,244,0.262,388,2.085,422,1.039,511,4.073,526,4.916,944,3.206,998,4.049,1125,4.783,1126,5.059,1127,5.993,1128,7.739,1130,6.192,1486,4.049,1661,6.471,2057,5.279,2064,4.263,2794,6.264,2795,5.059,2796,5.75,2797,5.75,2798,5.75,2799,5.75,2800,8.083,2801,5.75,2802,5.75,2803,8.083,2804,6.471,2805,7.12]],["title/classes/ODataSingletonService.html",[183,0.344,2804,3.441]],["body/classes/ODataSingletonService.html",[3,0.084,4,0.073,5,0.084,6,0.096,8,0.64,9,2.815,10,0.061,12,0.2,16,3.409,19,1.502,24,0.11,25,0.01,31,0.473,34,3.644,35,2.247,36,0.073,48,1.414,56,3.898,77,2.865,78,0.126,86,0.841,102,3.297,111,1.188,116,1.366,123,0.122,157,2.061,169,4.571,172,2.173,177,0.191,179,4.049,181,0.007,182,0.007,183,0.386,185,0.22,187,1.01,192,0.293,194,1.202,237,1.983,245,2.549,422,1.148,483,2.696,511,4.14,735,3.071,787,4.702,890,2.446,944,3.409,1050,3.597,1120,4.942,1122,4.716,1123,4.716,1124,4.716,1131,3.574,1132,4.29,1133,4.716,1134,5.293,1135,5.61,1137,3.764,1142,3.574,1143,4.716,1149,3.574,1150,4.716,1152,2.853,1158,3.347,1160,2.613,1210,5.278,1216,3.597,1220,5.153,1247,5.596,1637,5.834,1639,5.992,1642,6.06,1647,3.859,1648,3.859,1649,3.859,1652,3.859,1653,3.859,1655,3.859,1670,4.888,1672,4.241,1674,5.596,1679,7.11,1681,5.992,1709,4.241,1713,4.241,1723,4.241,1724,4.241,2804,5.092,2806,4.821,2807,6.361,2808,6.361,2809,7.119,2810,4.821,2811,4.821,2812,7.119,2813,4.821,2814,4.821,2815,4.821,2816,4.821,2817,4.821,2818,4.821,2819,4.821,2820,4.821,2821,6.361]],["title/classes/Operator.html",[183,0.344,212,1.703]],["body/classes/Operator.html",[0,1.338,3,0.048,4,0.041,5,0.048,6,0.08,8,0.519,10,0.034,12,0.105,19,0.643,23,1.105,24,0.097,25,0.01,30,0.685,31,0.264,36,0.13,60,1.194,62,1.056,78,0.175,85,0.611,86,1.007,97,2.214,104,1.336,111,1.085,118,0.866,123,0.117,139,1.411,160,1.134,170,1.313,172,1.388,173,0.859,177,0.094,181,0.005,182,0.005,183,0.671,184,2.045,185,0.124,186,1.079,187,0.669,191,1.113,192,0.203,194,0.615,195,1.113,197,1.113,199,2.756,200,1.574,201,1.113,202,2.84,203,3.072,204,3.297,205,3.297,206,3.524,207,1.017,208,2.52,209,1.671,210,1.113,211,2.57,212,2.492,213,2.045,214,2.073,215,1.113,216,0.611,217,0.987,218,1.017,219,1.724,220,1.724,221,1.724,222,1.113,223,1.113,224,0.933,225,1.113,226,1.113,227,1.113,228,1.113,229,1.113,230,1.113,231,1.113,232,1.113,233,1.113,234,1.113,235,1.113,236,3.686,237,1.105,238,1.529,239,1.113,240,1.047,241,1.113,242,1.113,243,1.113,244,0.265,245,2.414,246,2.901,247,0.996,248,0.859,249,2.57,250,0.836,251,2.718,252,2.57,253,1.113,254,1.113,255,1.724,256,1.113,257,2.045,258,1.113,259,1.113,260,1.113,261,1.113,262,1.113,263,1.113,264,1.113,265,1.113,266,1.113,267,1.113,268,1.113,269,1.113,270,1.113,271,1.724,272,1.724,273,1.113,274,1.113,275,2.045,276,1.113,277,2.375,278,1.113,279,1.724,280,1.113,281,1.113,282,2.045,283,1.113,284,1.724,285,1.113,286,1.113,287,1.113,288,1.113,289,1.113,290,1.113,291,1.113,292,2.045,293,1.113,294,1.113,295,1.113,296,1.113,297,1.113,298,1.113,299,1.113,300,1.113,301,1.113,302,1.113,303,1.113,304,1.113,305,1.113,306,1.113,307,1.113,308,1.113,309,1.113,310,1.113,311,1.113,312,1.113,313,1.113,314,1.113,315,1.113,316,1.113,317,1.113,318,1.113,319,1.113,320,1.113,321,1.113,322,1.113,323,1.113,324,2.045,325,1.113,326,1.113,327,1.113,328,1.113,329,2.045,330,1.113,331,1.724,332,1.113,333,1.113,334,1.724,335,1.113,336,1.113,337,1.113,338,1.113,339,2.045,340,1.113,341,1.113,342,1.113,343,2.718,344,2.109,345,3.405,346,3.578,347,1.724,348,1.113,349,1.113,350,1.017,351,1.113,352,1.113,353,2.045,354,1.113,355,1.113,356,1.113,357,1.113,358,1.113,359,1.113,360,1.113,361,1.113,362,1.113,363,1.113,364,1.113,365,1.113,366,1.113,367,1.113,368,1.113,369,1.113,370,1.113,371,1.113,372,1.113,373,1.113,374,1.113,375,1.113,376,2.045,377,1.113,378,1.113,379,1.113,380,1.113,381,1.113,382,1.113,383,1.113,384,1.113,385,1.113,386,1.113,387,1.113,388,1.529,389,1.724,390,1.113,391,1.113,392,1.113,393,1.047,394,1.113,395,2.045,396,1.724,397,1.724,398,1.671,399,1.405,400,1.113,401,1.113,402,2.045,403,1.113,404,1.113,405,1.113,406,1.113,407,2.635,408,1.113,409,1.113,410,2.635,411,1.113,412,0.96,413,1.113,414,1.079,890,1.622,892,1.89,908,2.396,2822,2.723,2823,2.723,2824,2.723,2825,2.723]],["title/interfaces/Options.html",[0,0.989,9,1.355]],["body/interfaces/Options.html",[0,1.829,1,3.137,2,2.182,3,0.073,4,0.063,5,0.073,6,0.053,7,2.371,8,0.719,9,2.555,10,0.053,11,0.6,12,0.177,13,2.182,14,2.272,15,2.371,16,1.768,17,3.321,18,2.697,19,1.688,20,2.272,21,2.371,22,2.182,24,0.112,25,0.01,26,2.795,27,1.713,28,1.888,29,3.219,30,0.693,31,0.362,32,3.013,33,2.606,34,2.888,35,1.953,36,0.134,37,3.758,38,2.371,39,2.371,40,2.371,41,3.21,42,2.024,43,3.013,44,3.137,45,1.953,46,2.371,47,3.273,48,0.684,49,1.322,50,1.888,51,2.161,52,1.953,53,3.137,54,3.015,55,2.099,56,2.697,57,1.83,58,3.013,59,3.273,60,1.133,61,3.219,62,0.919,63,1.928,64,2.606,65,2.606,66,3.137,67,2.697,68,3.137,69,3.013,70,2.899,71,2.606,72,2.606,73,2.697,74,3.013,75,3.622,76,3.875,77,1.983,78,0.18,79,3.137,80,3.137,81,3.013,82,2.371,83,2.371,84,2.272,85,0.973,86,0.643,87,1.953,88,2.371,89,2.1,90,2.604,91,2.604,92,3.379,93,2.371,94,2.48,95,2.48,96,3.875,97,1.127,98,3.593,99,2.709,100,2.985,101,4.118,102,2.521,103,2.697,104,1.135,105,2.985,106,2.606,107,2.024,108,3.201,109,2.024,110,1.888,111,0.783,112,2.182,113,2.604,114,2.1,115,3.273,116,1.188,117,2.604,118,0.577,119,1.888,120,2.48,121,2.371,122,2.48,123,0.124,124,1.928,125,2.604,126,2.182,127,2.604,128,2.272,129,2.604,130,2.371,131,2.48,132,3.273,133,4.217,134,1.436,135,2.371,136,2.371,137,2.371,138,1.612,139,1.139,140,2.648,141,2.272,142,3.013,143,2.024,144,3.137,145,2.48,146,3.013,147,2.48,148,3.273,149,2.272,150,3.273,151,3.137,152,2.371,153,2.1,154,2.899,155,2.272,156,1.359,157,1.359,158,3.722,159,1.825,160,1.127,161,1.359,162,1.359,163,2.371,164,1.888,165,2.371,166,2.604,167,2.272,168,2.272,169,2.371,170,0.967,171,2.024,172,1.127,173,1.322,174,1.888,175,2.371,176,2.48,177,0.094,178,2.272,179,2.1,180,1.953,181,0.007,182,0.007]],["title/interfaces/OptionsHelper.html",[0,0.989,92,1.872]],["body/interfaces/OptionsHelper.html",[0,1.821,1,3.098,2,2.143,3,0.072,4,0.062,5,0.072,6,0.052,7,2.328,8,0.749,9,2.544,10,0.052,11,0.594,12,0.2,13,2.143,14,2.231,15,2.328,16,1.736,17,3.289,18,2.664,19,1.675,20,2.231,21,2.328,22,2.143,24,0.113,25,0.01,26,2.76,27,1.683,28,1.854,29,3.474,30,0.696,31,0.358,32,3.693,33,3.356,34,2.86,35,1.919,36,0.134,37,3.289,38,2.328,39,2.328,40,2.328,41,3.196,42,1.988,43,2.976,44,3.098,45,1.919,46,2.328,47,3.233,48,0.672,49,1.298,50,1.854,51,2.134,52,1.919,53,3.098,54,3.336,55,2.073,56,2.664,57,1.813,58,2.976,59,3.233,60,1.13,61,3.194,62,0.907,63,1.904,64,2.574,65,2.574,66,3.098,67,2.664,68,3.098,69,2.976,70,2.864,71,2.574,72,2.574,73,2.664,74,2.976,75,2.76,76,2.231,77,1.958,78,0.18,79,4.04,80,4.04,81,3.88,82,2.328,83,2.328,84,2.231,85,0.97,86,0.635,87,1.919,88,2.328,89,2.062,90,2.558,91,2.558,92,3.446,93,2.328,94,2.436,95,2.436,96,3.845,97,1.107,98,3.559,99,2.683,100,2.957,101,4.079,102,2.49,103,2.664,104,1.126,105,2.957,106,2.574,107,1.988,108,3.17,109,1.988,110,1.854,111,0.769,112,2.143,113,2.558,114,2.062,115,3.233,116,1.167,117,2.558,118,0.567,119,1.854,120,2.436,121,2.328,122,2.436,123,0.123,124,1.904,125,2.558,126,2.143,127,2.558,128,2.231,129,2.558,130,2.328,131,2.436,132,3.233,133,4.199,134,1.41,135,2.328,136,2.328,137,2.328,138,1.583,139,1.125,140,2.635,141,2.231,142,2.976,143,1.988,144,3.098,145,2.436,146,2.976,147,2.436,148,3.233,149,2.231,150,3.233,151,3.098,152,2.328,153,2.062,154,2.864,155,2.231,156,1.334,157,1.334,158,3.693,159,1.803,160,1.107,161,1.334,162,1.334,163,2.328,164,1.854,165,2.328,166,2.558,167,2.231,168,2.231,169,2.328,170,0.958,171,1.988,172,1.107,173,1.298,174,1.854,175,2.328,176,2.436,177,0.092,178,2.231,179,2.062,180,1.919,181,0.006,182,0.006]],["title/interfaces/Parser.html",[0,0.989,99,1.756]],["body/interfaces/Parser.html",[0,1.812,1,3.063,2,2.108,3,0.071,4,0.061,5,0.071,6,0.089,7,2.291,8,0.708,9,2.678,10,0.051,11,0.366,12,0.161,13,2.108,14,2.195,15,2.291,16,1.708,17,3.261,18,2.634,19,1.663,20,2.195,21,2.291,22,2.108,24,0.112,25,0.01,26,2.729,27,1.655,28,1.824,29,3.172,30,0.688,31,0.353,32,2.942,33,2.545,34,2.835,35,1.887,36,0.134,37,3.261,38,2.291,39,2.291,40,2.291,41,3.183,42,1.956,43,2.942,44,3.063,45,1.887,46,2.291,47,3.196,48,0.661,49,1.277,50,1.824,51,2.11,52,1.887,53,3.063,54,2.971,55,2.049,56,2.634,57,1.797,58,2.942,59,3.196,60,1.149,61,3.172,62,0.897,63,1.883,64,2.545,65,2.545,66,3.063,67,2.634,68,3.063,69,2.942,70,2.831,71,2.545,72,2.545,73,2.634,74,2.942,75,2.729,76,2.195,77,1.936,78,0.18,79,3.063,80,3.063,81,2.942,82,2.291,83,2.291,84,2.195,85,0.966,86,0.628,87,1.887,88,2.291,89,2.029,90,2.516,91,2.516,92,3.671,93,2.291,94,2.397,95,2.397,96,4.48,97,1.089,98,3.528,99,2.879,100,3.336,101,4.043,102,2.462,103,2.634,104,1.176,105,3.336,106,3.172,107,1.956,108,3.143,109,1.956,110,2.545,111,0.756,112,2.108,113,2.516,114,2.029,115,3.196,116,1.148,117,2.516,118,0.558,119,1.824,120,2.397,121,2.291,122,2.397,123,0.127,124,1.883,125,2.516,126,2.108,127,2.516,128,2.195,129,2.516,130,2.291,131,2.397,132,3.196,133,4.182,134,1.387,135,2.291,136,2.291,137,2.291,138,1.557,139,1.112,140,2.624,141,2.195,142,2.942,143,1.956,144,3.063,145,2.397,146,2.942,147,2.397,148,3.196,149,2.195,150,3.196,151,3.063,152,2.291,153,2.029,154,2.831,155,2.195,156,1.313,157,1.313,158,3.667,159,1.782,160,1.089,161,1.313,162,1.313,163,2.291,164,1.824,165,2.291,166,2.516,167,2.195,168,2.195,169,2.291,170,0.95,171,1.956,172,1.089,173,1.277,174,1.824,175,2.291,176,2.397,177,0.157,178,2.195,179,2.029,180,1.887,181,0.006,182,0.006,187,0.897,192,0.228,194,0.95,422,0.95,1465,2.291,1475,2.291,2826,4.05,2827,4.05,2828,4.05]],["title/interfaces/Renderable.html",[0,0.989,202,1.703]],["body/interfaces/Renderable.html",[0,1.346,2,1.435,3,0.048,4,0.041,5,0.048,6,0.074,8,0.523,10,0.035,12,0.068,19,0.651,23,1.115,24,0.096,25,0.01,30,0.683,31,0.266,36,0.13,60,1.195,62,1.061,78,0.175,85,0.616,86,1.008,97,2.219,104,1.338,111,1.092,118,0.716,123,0.115,139,1.416,160,1.145,170,1.314,172,1.398,173,0.869,177,0.062,181,0.005,182,0.005,183,0.672,184,2.061,186,1.092,187,0.676,191,1.126,192,0.182,194,0.759,195,1.126,197,1.126,199,2.767,200,1.589,201,1.126,202,2.851,203,3.082,204,3.301,205,3.301,206,3.529,207,2.183,208,2.529,209,1.687,210,1.126,211,2.584,212,2.318,213,2.061,214,1.997,215,1.126,216,0.618,217,0.999,218,1.029,219,1.739,220,1.739,221,1.739,222,1.126,223,1.126,224,0.944,225,1.126,226,1.126,227,1.126,228,1.126,229,1.126,230,1.126,231,1.126,232,1.126,233,1.126,234,1.126,235,1.126,236,3.682,237,1.115,238,1.543,239,1.126,240,1.06,241,1.126,242,1.126,243,1.126,244,0.237,245,2.421,246,2.756,247,1.005,248,0.869,249,2.584,250,0.846,251,2.731,252,2.584,253,1.126,254,1.126,255,1.739,256,1.126,257,2.061,258,1.126,259,1.126,260,1.126,261,1.126,262,1.126,263,1.126,264,1.126,265,1.126,266,1.126,267,1.126,268,1.126,269,1.126,270,1.126,271,1.739,272,1.739,273,1.126,274,1.126,275,2.061,276,1.126,277,2.39,278,1.126,279,1.739,280,1.126,281,1.126,282,2.061,283,1.126,284,1.739,285,1.126,286,1.126,287,1.126,288,1.126,289,1.126,290,1.126,291,1.126,292,2.061,293,1.126,294,1.126,295,1.126,296,1.126,297,1.126,298,1.126,299,1.126,300,1.126,301,1.126,302,1.126,303,1.126,304,1.126,305,1.126,306,1.126,307,1.126,308,1.126,309,1.126,310,1.126,311,1.126,312,1.126,313,1.126,314,1.126,315,1.126,316,1.126,317,1.126,318,1.126,319,1.126,320,1.126,321,1.126,322,1.126,323,1.126,324,2.061,325,1.126,326,1.126,327,1.126,328,1.126,329,2.061,330,1.126,331,1.739,332,1.126,333,1.126,334,1.739,335,1.126,336,1.126,337,1.126,338,1.126,339,2.061,340,1.126,341,1.126,342,1.126,343,2.39,344,2.125,345,3.412,346,3.582,347,1.739,348,1.126,349,1.126,350,1.029,351,1.126,352,1.126,353,2.061,354,1.126,355,1.126,356,1.126,357,1.126,358,1.126,359,1.126,360,1.126,361,1.126,362,1.126,363,1.126,364,1.126,365,1.126,366,1.126,367,1.126,368,1.126,369,1.126,370,1.126,371,1.126,372,1.126,373,1.126,374,1.126,375,1.126,376,2.061,377,1.126,378,1.126,379,1.126,380,1.126,381,1.126,382,1.126,383,1.126,384,1.126,385,1.126,386,1.126,387,1.126,388,1.543,389,1.739,390,1.126,391,1.126,392,1.126,393,1.06,394,1.126,395,2.061,396,1.739,397,1.739,398,1.687,399,1.418,400,1.126,401,1.126,402,2.061,403,1.126,404,1.126,405,1.126,406,1.126,407,2.648,408,1.126,409,1.126,410,2.648,411,1.126,412,0.971,413,1.126,414,1.092,892,1.913,2829,2.756,2830,2.756,2831,2.756]],["title/interfaces/ResponseJson.html",[0,0.989,2040,3.441]],["body/interfaces/ResponseJson.html",[0,1.332,2,3.013,3,0.101,4,0.087,5,0.101,6,0.073,8,0.582,10,0.073,11,0.647,18,3.775,23,1.873,24,0.109,25,0.01,31,0.447,36,0.087,41,2.294,50,2.606,78,0.176,85,0.959,86,0.643,103,3.775,107,3.912,111,1.513,118,1.068,123,0.125,170,0.844,181,0.008,182,0.008,183,0.463,237,2.221,244,0.264,250,2.194,743,4.441,957,2.697,979,4.818,1160,3.137,1172,4.387,1176,6.006,1208,4.59,1211,4.291,1212,4.634,1216,4.043,1231,6.006,1283,4.634,1333,4.681,1336,5.624,1339,4.018,1347,5.624,1353,3.79,1362,4.018,1375,4.018,1389,4.291,2026,5.723,2027,4.634,2028,4.634,2029,4.634,2030,4.634,2031,4.634,2032,5.092,2033,7.459,2040,5.723,2041,5.092,2042,5.092,2043,5.092,2044,5.092,2045,6.289,2046,5.092,2047,5.092,2048,5.092,2049,5.092,2050,5.092,2051,5.092]],["title/interfaces/ResponseOptions.html",[0,0.989,93,2.431]],["body/interfaces/ResponseOptions.html",[0,1.829,1,3.134,2,2.179,3,0.073,4,0.063,5,0.073,6,0.053,7,2.368,8,0.754,9,2.506,10,0.053,11,0.599,12,0.177,13,2.179,14,2.269,15,2.368,16,1.766,17,3.319,18,2.695,19,1.687,20,2.269,21,2.368,22,2.179,24,0.112,25,0.01,26,2.792,27,1.711,28,1.885,29,3.217,30,0.69,31,0.362,32,3.01,33,2.604,34,2.886,35,1.951,36,0.134,37,3.319,38,2.368,39,2.368,40,2.368,41,3.209,42,2.021,43,3.01,44,3.134,45,1.951,46,2.368,47,4.041,48,0.683,49,1.32,50,1.885,51,2.159,52,1.951,53,3.134,54,3.013,55,2.097,56,2.695,57,1.829,58,3.01,59,3.27,60,1.133,61,3.217,62,0.918,63,1.926,64,2.604,65,2.604,66,3.134,67,2.695,68,3.134,69,3.01,70,2.897,71,2.604,72,2.604,73,2.695,74,3.01,75,2.792,76,2.269,77,1.981,78,0.18,79,3.134,80,3.134,81,3.01,82,2.368,83,2.368,84,2.269,85,0.995,86,0.642,87,1.951,88,2.368,89,2.097,90,2.6,91,2.6,92,3.462,93,3.27,94,4.228,95,4.228,96,3.872,97,1.126,98,3.59,99,2.707,100,2.983,101,4.115,102,2.519,103,2.695,104,1.134,105,2.983,106,2.604,107,2.021,108,3.199,109,2.021,110,1.885,111,0.782,112,2.179,113,2.6,114,2.097,115,3.27,116,1.186,117,2.6,118,0.576,119,1.885,120,2.477,121,2.368,122,2.477,123,0.124,124,1.926,125,2.6,126,2.179,127,2.6,128,2.269,129,2.6,130,2.368,131,2.477,132,3.27,133,4.216,134,1.434,135,2.368,136,2.368,137,2.368,138,1.61,139,1.138,140,2.647,141,2.269,142,3.01,143,2.021,144,3.134,145,2.477,146,3.01,147,2.477,148,3.27,149,2.269,150,3.27,151,3.134,152,2.368,153,2.097,154,2.897,155,2.269,156,1.357,157,1.357,158,3.719,159,1.824,160,1.126,161,1.357,162,1.357,163,2.368,164,1.885,165,2.368,166,2.6,167,2.269,168,2.269,169,2.368,170,0.966,171,2.021,172,1.126,173,1.32,174,1.885,175,2.368,176,2.477,177,0.093,178,2.269,179,2.097,180,1.951,181,0.006,182,0.006]],["title/classes/SegmentHandler.html",[183,0.344,2125,3.186]],["body/classes/SegmentHandler.html",[3,0.093,4,0.08,5,0.093,6,0.111,10,0.067,12,0.201,24,0.11,25,0.01,27,2.772,30,0.527,31,0.492,36,0.102,52,2.481,55,1.93,56,2.481,57,1.469,58,2.771,60,1.176,62,0.845,63,1.773,78,0.165,86,0.985,104,1.339,116,1.922,118,1.118,123,0.128,157,2.198,177,0.192,181,0.008,182,0.008,183,0.543,185,0.243,187,1.077,192,0.304,194,1.246,244,0.243,388,1.93,422,1.147,736,1.824,890,2.608,1132,2.771,1206,4.709,1256,4.442,1313,4.709,1645,5.524,1754,2.771,2100,5.828,2106,5.43,2111,4.262,2125,5.029,2185,4.262,2186,4.683,2195,4.262,2196,4.683,2197,5.968,2198,5.968,2199,5.968,2200,5.968,2201,5.968,2202,6.568,2203,6.916,2204,4.683,2205,6.916,2206,5.968,2207,6.568,2208,6.916,2209,4.683,2210,6.916,2211,4.683,2212,4.683,2213,4.683,2214,4.683,2215,4.683,2216,4.683,2217,4.683,2258,4.683,2832,5.323,2833,5.323,2834,5.323,2835,5.323,2836,5.323,2837,5.323,2838,5.323,2839,5.323,2840,5.323,2841,5.323,2842,5.323]],["title/classes/StringAndCollectionFunctions.html",[183,0.344,257,1.703]],["body/classes/StringAndCollectionFunctions.html",[0,1.309,3,0.046,4,0.039,5,0.046,6,0.09,8,0.506,10,0.033,12,0.17,19,0.618,24,0.1,25,0.01,30,0.69,31,0.256,36,0.129,60,1.201,62,1.239,78,0.174,85,0.809,86,1.005,97,2.27,104,1.328,111,1.062,118,0.693,123,0.122,139,1.392,160,1.1,170,1.31,172,1.354,173,0.826,177,0.153,181,0.005,182,0.005,183,0.667,184,1.995,185,0.119,186,1.037,187,0.649,191,1.07,192,0.239,194,0.997,195,1.07,197,1.07,199,2.72,200,1.527,201,1.07,202,2.709,203,2.891,204,3.281,205,3.281,206,3.509,207,0.977,208,2.241,209,1.621,210,1.07,211,2.523,212,2.255,213,1.995,214,1.955,215,1.07,216,0.587,217,0.949,218,0.977,219,1.672,220,1.672,221,1.672,222,1.07,223,1.07,224,0.897,225,1.07,226,1.07,227,1.07,228,1.07,229,1.07,230,1.07,231,1.07,232,1.07,233,1.07,234,1.07,235,1.07,236,3.695,237,1.072,238,1.483,239,1.07,240,1.007,241,1.07,242,1.07,243,1.07,244,0.23,245,2.389,246,2.714,247,0.966,248,0.826,249,2.523,250,0.804,251,2.674,252,2.523,253,1.07,254,1.07,255,1.672,256,1.07,257,2.255,258,1.672,259,1.07,260,1.672,261,1.07,262,1.672,263,1.07,264,1.672,265,1.07,266,1.672,267,1.07,268,1.672,269,1.07,270,1.672,271,2.325,272,2.674,273,1.07,274,1.07,275,1.995,276,1.07,277,2.325,278,1.07,279,1.672,280,1.07,281,1.07,282,1.995,283,1.07,284,1.672,285,1.07,286,1.07,287,1.07,288,1.07,289,1.07,290,1.07,291,1.07,292,1.995,293,1.07,294,1.07,295,1.07,296,1.07,297,1.07,298,1.07,299,1.07,300,1.07,301,1.07,302,1.07,303,1.07,304,1.07,305,1.07,306,1.07,307,1.07,308,1.07,309,1.07,310,1.07,311,1.07,312,1.07,313,1.07,314,1.07,315,1.07,316,1.07,317,1.07,318,1.07,319,1.07,320,1.07,321,1.07,322,1.07,323,1.07,324,1.995,325,1.07,326,1.07,327,1.07,328,1.07,329,1.995,330,1.07,331,1.672,332,1.07,333,1.07,334,1.672,335,1.07,336,1.07,337,1.07,338,1.07,339,1.995,340,1.07,341,1.07,342,1.07,343,2.325,344,2.057,345,3.385,346,3.565,347,1.672,348,1.07,349,1.07,350,0.977,351,1.07,352,1.07,353,1.995,354,1.07,355,1.07,356,1.07,357,1.07,358,1.07,359,1.07,360,1.07,361,1.07,362,1.07,363,1.07,364,1.07,365,1.07,366,1.07,367,1.07,368,1.07,369,1.07,370,1.07,371,1.07,372,1.07,373,1.07,374,1.07,375,1.07,376,1.995,377,1.07,378,1.07,379,1.07,380,1.07,381,1.07,382,1.07,383,1.07,384,1.07,385,1.07,386,1.07,387,1.07,388,1.483,389,1.672,390,1.07,391,1.07,392,1.07,393,1.007,394,1.07,395,1.995,396,1.672,397,1.672,398,1.621,399,1.363,400,1.07,401,1.07,402,1.995,403,1.07,404,1.07,405,1.07,406,1.07,407,2.593,408,1.07,409,1.07,410,2.593,411,1.07,412,0.922,413,1.07,414,1.037,422,0.997,2843,4.09,2844,4.09,2845,4.09,2846,4.09,2847,4.09,2848,4.09,2849,2.618,2850,2.618,2851,2.618,2852,2.618,2853,2.618,2854,2.618,2855,2.618]],["title/classes/StringFunctions.html",[183,0.344,282,1.703]],["body/classes/StringFunctions.html",[0,1.333,3,0.047,4,0.041,5,0.047,6,0.079,8,0.517,10,0.034,12,0.144,19,0.639,24,0.097,25,0.01,30,0.682,31,0.263,36,0.13,60,1.197,62,1.191,78,0.175,85,0.609,86,1.007,97,2.212,104,1.371,111,1.082,118,0.708,123,0.12,139,1.408,160,1.129,170,1.312,172,1.383,173,0.854,177,0.129,181,0.005,182,0.005,183,0.67,184,2.038,185,0.123,186,1.073,187,0.666,191,1.106,192,0.203,194,0.845,195,1.106,197,1.106,199,2.75,200,1.567,201,1.106,202,2.743,203,2.923,204,3.294,205,3.294,206,3.522,207,1.01,208,2.272,209,1.663,210,1.106,211,2.562,212,2.296,213,2.038,214,1.982,215,1.106,216,0.607,217,0.981,218,1.01,219,1.715,220,1.715,221,1.715,222,1.106,223,1.106,224,0.927,225,1.106,226,1.106,227,1.106,228,1.106,229,1.106,230,1.106,231,1.106,232,1.106,233,1.106,234,1.106,235,1.106,236,3.679,237,1.1,238,1.522,239,1.106,240,1.041,241,1.106,242,1.106,243,1.106,244,0.235,245,2.41,246,2.742,247,0.991,248,0.854,249,2.562,250,0.831,251,2.711,252,2.562,253,1.106,254,1.106,255,1.715,256,1.106,257,2.038,258,1.106,259,1.106,260,1.106,261,1.106,262,1.106,263,1.106,264,1.106,265,1.106,266,1.106,267,1.106,268,1.106,269,1.106,270,1.106,271,1.715,272,1.715,273,1.106,274,1.106,275,2.038,276,1.106,277,2.368,278,1.106,279,1.715,280,1.106,281,1.106,282,2.296,283,1.715,284,2.368,285,1.106,286,1.715,287,1.106,288,1.715,289,1.106,290,1.715,291,1.106,292,2.038,293,1.106,294,1.106,295,1.106,296,1.106,297,1.106,298,1.106,299,1.106,300,1.106,301,1.106,302,1.106,303,1.106,304,1.106,305,1.106,306,1.106,307,1.106,308,1.106,309,1.106,310,1.106,311,1.106,312,1.106,313,1.106,314,1.106,315,1.106,316,1.106,317,1.106,318,1.106,319,1.106,320,1.106,321,1.106,322,1.106,323,1.106,324,2.038,325,1.106,326,1.106,327,1.106,328,1.106,329,2.038,330,1.106,331,1.715,332,1.106,333,1.106,334,1.715,335,1.106,336,1.106,337,1.106,338,1.106,339,2.038,340,1.106,341,1.106,342,1.106,343,2.368,344,2.101,345,3.402,346,3.576,347,1.715,348,1.106,349,1.106,350,1.01,351,1.106,352,1.106,353,2.038,354,1.106,355,1.106,356,1.106,357,1.106,358,1.106,359,1.106,360,1.106,361,1.106,362,1.106,363,1.106,364,1.106,365,1.106,366,1.106,367,1.106,368,1.106,369,1.106,370,1.106,371,1.106,372,1.106,373,1.106,374,1.106,375,1.106,376,2.038,377,1.106,378,1.106,379,1.106,380,1.106,381,1.106,382,1.106,383,1.106,384,1.106,385,1.106,386,1.106,387,1.106,388,1.522,389,1.715,390,1.106,391,1.106,392,1.106,393,1.041,394,1.106,395,2.038,396,1.715,397,1.715,398,1.663,399,1.398,400,1.106,401,1.106,402,2.038,403,1.106,404,1.106,405,1.106,406,1.106,407,2.629,408,1.106,409,1.106,410,2.629,411,1.106,412,0.954,413,1.106,414,1.073,2701,3.693,2856,4.198,2857,4.198,2858,4.198,2859,2.707,2860,2.707,2861,2.707,2862,2.707]],["title/interfaces/StructuredTypeFieldOptions.html",[0,0.989,96,2.329]],["body/interfaces/StructuredTypeFieldOptions.html",[0,1.832,1,3.15,2,2.195,3,0.074,4,0.063,5,0.074,6,0.053,7,2.385,8,0.756,9,2.511,10,0.053,11,0.602,13,2.195,14,2.286,15,2.385,16,1.779,17,3.332,18,2.709,19,1.693,20,2.286,21,2.385,22,2.195,24,0.112,25,0.01,26,2.806,27,1.724,28,1.899,29,3.228,30,0.691,31,0.364,32,3.026,33,2.617,34,2.897,35,1.965,36,0.134,37,3.332,38,2.385,39,2.385,40,2.385,41,3.215,42,2.036,43,3.026,44,3.15,45,1.965,46,2.385,47,3.287,48,0.688,49,1.33,50,1.899,51,2.17,52,1.965,53,3.15,54,3.023,55,2.107,56,2.709,57,1.836,58,3.026,59,3.287,60,1.135,61,3.228,62,0.922,63,1.936,64,2.617,65,2.617,66,3.15,67,2.709,68,3.15,69,3.026,70,2.912,71,2.617,72,2.617,73,2.709,74,3.026,75,2.806,76,2.286,77,1.991,78,0.18,79,3.15,80,3.15,81,3.026,82,2.385,83,2.385,84,2.286,85,0.975,86,0.646,87,1.965,88,2.385,89,2.113,90,2.62,91,2.62,92,3.469,93,2.385,94,2.496,95,2.496,96,4.075,97,1.927,98,4.075,99,2.718,100,2.995,101,4.131,102,2.532,103,2.709,104,1.138,105,2.995,106,2.617,107,2.036,108,3.211,109,2.036,110,1.899,111,0.787,112,2.195,113,2.62,114,2.113,115,3.287,116,1.195,117,2.62,118,0.581,119,1.899,120,2.496,121,2.385,122,2.496,123,0.124,124,1.936,125,2.62,126,2.195,127,2.62,128,2.286,129,2.62,130,2.385,131,2.496,132,3.287,133,4.223,134,1.445,135,2.385,136,2.385,137,2.385,138,1.622,139,1.144,140,2.653,141,2.286,142,3.026,143,2.036,144,3.15,145,2.496,146,3.026,147,2.496,148,3.287,149,2.286,150,3.287,151,3.15,152,2.385,153,2.113,154,2.912,155,2.286,156,1.367,157,1.367,158,3.731,159,1.833,160,1.134,161,1.367,162,1.367,163,2.385,164,1.899,165,2.385,166,2.62,167,2.286,168,2.286,169,2.385,170,0.97,171,2.036,172,1.134,173,1.33,174,1.899,175,2.385,176,2.496,177,0.094,178,2.286,179,2.113,180,1.965,181,0.007,182,0.007]],["title/classes/TypeFunctions.html",[183,0.344,324,1.703]],["body/classes/TypeFunctions.html",[0,1.341,3,0.048,4,0.041,5,0.048,6,0.066,8,0.52,10,0.035,12,0.105,19,0.646,24,0.1,25,0.01,30,0.682,31,0.265,36,0.13,60,1.196,62,1.139,78,0.176,85,0.613,86,1.007,97,2.216,104,1.357,111,1.088,118,0.713,123,0.117,139,1.413,160,1.138,170,1.313,172,1.392,173,0.863,177,0.094,181,0.005,182,0.005,183,0.671,184,2.051,185,0.125,186,1.084,187,0.672,191,1.118,192,0.148,194,0.617,195,1.118,197,1.118,199,2.76,200,1.58,201,1.118,202,2.753,203,2.933,204,3.298,205,3.298,206,3.526,207,1.021,208,2.282,209,1.677,210,1.118,211,2.575,212,2.309,213,2.051,214,1.991,215,1.118,216,0.613,217,0.992,218,1.021,219,1.729,220,1.729,221,1.729,222,1.118,223,1.118,224,0.937,225,1.118,226,1.118,227,1.118,228,1.118,229,1.118,230,1.118,231,1.118,232,1.118,233,1.118,234,1.118,235,1.118,236,3.681,237,1.109,238,1.534,239,1.118,240,1.052,241,1.118,242,1.118,243,1.118,244,0.236,245,2.416,246,2.75,247,0.999,248,0.863,249,2.575,250,0.84,251,2.723,252,2.575,253,1.118,254,1.118,255,1.729,256,1.118,257,2.051,258,1.118,259,1.118,260,1.118,261,1.118,262,1.118,263,1.118,264,1.118,265,1.118,266,1.118,267,1.118,268,1.118,269,1.118,270,1.118,271,1.729,272,1.729,273,1.118,274,1.118,275,2.051,276,1.118,277,2.381,278,1.118,279,1.729,280,1.118,281,1.118,282,2.051,283,1.118,284,1.729,285,1.118,286,1.118,287,1.118,288,1.118,289,1.118,290,1.118,291,1.118,292,2.051,293,1.118,294,1.118,295,1.118,296,1.118,297,1.118,298,1.118,299,1.118,300,1.118,301,1.118,302,1.118,303,1.118,304,1.118,305,1.118,306,1.118,307,1.118,308,1.118,309,1.118,310,1.118,311,1.118,312,1.118,313,1.118,314,1.118,315,1.118,316,1.118,317,1.118,318,1.118,319,1.118,320,1.118,321,1.118,322,1.118,323,1.118,324,2.309,325,1.729,326,1.118,327,1.729,328,1.118,329,2.051,330,1.118,331,1.729,332,1.118,333,1.118,334,1.729,335,1.118,336,1.118,337,1.118,338,1.118,339,2.051,340,1.118,341,1.118,342,1.118,343,2.381,344,2.115,345,3.408,346,3.579,347,1.729,348,1.118,349,1.118,350,1.021,351,1.118,352,1.118,353,2.051,354,1.118,355,1.118,356,1.118,357,1.118,358,1.118,359,1.118,360,1.118,361,1.118,362,1.118,363,1.118,364,1.118,365,1.118,366,1.118,367,1.118,368,1.118,369,1.118,370,1.118,371,1.118,372,1.118,373,1.118,374,1.118,375,1.118,376,2.051,377,1.118,378,1.118,379,1.118,380,1.118,381,1.118,382,1.118,383,1.118,384,1.118,385,1.118,386,1.118,387,1.118,388,1.534,389,1.729,390,1.118,391,1.118,392,1.118,393,1.052,394,1.118,395,2.051,396,1.729,397,1.729,398,1.677,399,1.41,400,1.118,401,1.118,402,2.051,403,1.118,404,1.118,405,1.118,406,1.118,407,2.64,408,1.118,409,1.118,410,2.64,411,1.118,412,0.964,413,1.118,414,1.084,422,0.617,2863,4.232,2864,4.232,2865,2.735,2866,2.735]],["title/dependencies.html",[2867,3.578,2868,4.553]],["body/dependencies.html",[25,0.01,35,3.192,181,0.009,182,0.009,2064,5.079,2868,6.026,2869,6.85,2870,8.939,2871,6.85,2872,6.85,2873,6.85,2874,7.906,2875,7.906,2876,6.85,2877,6.85,2878,6.85,2879,6.85,2880,6.85,2881,6.85,2882,6.85]],["title/miscellaneous/enumerations.html",[2883,2.653,2884,4.553]],["body/miscellaneous/enumerations.html",[6,0.104,7,3.429,10,0.077,24,0.093,25,0.01,26,3.551,52,3.428,53,3.987,54,3.102,55,2.667,56,3.428,57,2.03,58,3.829,59,4.16,60,1.228,61,3.707,62,1.167,63,2.45,64,3.312,65,3.312,66,3.987,67,3.428,68,3.987,69,3.829,70,3.685,71,3.312,72,3.312,73,3.428,74,3.829,139,1.194,181,0.008,182,0.008,730,5.335,731,6.471,740,5.335,741,5.335,1190,5.335,1752,3.971,2883,4.496,2884,5.335,2885,6.064,2886,7.356,2887,5.335,2888,6.471,2889,7.356,2890,6.471,2891,7.356,2892,5.335,2893,6.064,2894,6.064,2895,6.064,2896,6.064,2897,5.335,2898,5.335,2899,7.356,2900,7.356,2901,7.356,2902,7.356,2903,7.356]],["title/index.html",[10,0.045,2904,3.148,2905,3.148]],["body/index.html",[4,0.067,17,2.238,25,0.01,31,0.514,36,0.103,41,2.716,42,2.157,45,2.082,50,2.012,61,2.012,64,2.723,65,2.723,67,3.422,75,3.309,109,3.904,119,2.012,122,2.644,123,0.067,140,2.694,143,4.186,157,1.448,170,0.652,179,3.029,181,0.007,182,0.007,183,0.549,200,2.864,218,2.257,247,1.618,415,3.313,511,2.818,662,4.84,743,2.776,875,3.577,936,2.012,978,4.679,1050,4.948,1055,6.975,1079,2.422,1125,3.578,1127,3.313,1132,4.281,1160,2.422,1228,2.238,1262,3.931,1489,2.422,1491,2.422,1664,3.931,1685,3.931,1715,6.029,1728,3.931,1734,5.444,1948,3.577,2052,4.84,2053,4.483,2057,4.483,2063,6.46,2064,5.081,2072,5.319,2195,3.577,2262,3.577,2634,4.84,2653,7.628,2906,8.336,2907,4.468,2908,4.468,2909,4.468,2910,4.468,2911,4.468,2912,4.468,2913,6.046,2914,7.343,2915,4.468,2916,4.468,2917,7.343,2918,4.468,2919,4.468,2920,4.468,2921,6.046,2922,4.468,2923,6.46,2924,4.468,2925,6.046,2926,4.468,2927,4.468,2928,4.468,2929,6.046,2930,4.468,2931,6.046,2932,4.468,2933,4.468,2934,4.468,2935,4.468,2936,4.468,2937,4.468,2938,4.468,2939,4.468,2940,4.468,2941,6.046,2942,4.468,2943,4.468,2944,4.468,2945,6.046,2946,8.905,2947,4.468,2948,4.468,2949,4.468,2950,6.853,2951,8.224,2952,4.468,2953,4.468,2954,4.468,2955,6.853,2956,4.468,2957,4.468,2958,4.468,2959,4.468,2960,6.853,2961,6.046,2962,6.046,2963,4.468,2964,6.046,2965,6.046,2966,7.343,2967,5.319,2968,6.046,2969,4.468,2970,6.046,2971,4.468,2972,4.468,2973,4.468,2974,4.468,2975,4.468,2976,8.336,2977,4.468,2978,4.468,2979,4.468,2980,7.343,2981,4.468,2982,6.853,2983,4.468,2984,4.468,2985,4.468,2986,4.468,2987,4.468,2988,4.468,2989,4.468,2990,4.468,2991,6.046,2992,4.468,2993,6.046,2994,4.468,2995,4.468,2996,4.468,2997,4.468,2998,4.468,2999,4.468,3000,4.468,3001,4.468,3002,4.468,3003,3.931,3004,4.468,3005,4.468,3006,4.468,3007,4.468,3008,4.468,3009,4.468,3010,6.046,3011,6.046,3012,4.468,3013,4.468,3014,4.468,3015,4.468,3016,4.468]],["title/license.html",[2904,3.148,2905,3.148,3017,3.148]],["body/license.html",[25,0.009,63,2.147,181,0.009,182,0.009,1168,5.671,1497,4.997,1668,4.221,1675,5.671,1722,6.026,1734,5.657,2923,5.671,3017,5.671,3018,6.446,3019,8.128,3020,6.446,3021,6.446,3022,6.446,3023,6.446,3024,7.63,3025,6.446,3026,6.446,3027,6.446,3028,6.446,3029,6.446,3030,6.446,3031,7.63,3032,8.902,3033,6.446,3034,6.446,3035,6.446,3036,6.446,3037,6.446,3038,6.446,3039,6.446,3040,6.446,3041,6.446,3042,6.446,3043,6.446,3044,6.446,3045,7.63,3046,6.446,3047,6.446,3048,6.446,3049,6.446,3050,6.446,3051,6.446,3052,7.63,3053,7.63,3054,6.446,3055,6.446,3056,6.446,3057,6.446,3058,6.446,3059,6.446,3060,6.446,3061,6.446,3062,6.446,3063,6.446,3064,6.446,3065,6.446,3066,6.446,3067,6.446,3068,6.446,3069,6.446,3070,6.446,3071,6.446,3072,6.446,3073,6.446,3074,6.446,3075,6.446,3076,6.446,3077,6.446,3078,6.446,3079,6.446,3080,6.446,3081,6.446,3082,6.446,3083,6.446]],["title/modules.html",[2054,4.714]],["body/modules.html",[25,0.009,181,0.009,182,0.009,2053,5.276,2054,5.697,3084,7.116]],["title/overview.html",[3085,5.18]],["body/overview.html",[2,3.679,25,0.009,181,0.009,182,0.009,185,0.322,729,2.888,2052,5.658,2795,6.218,3003,6.218,3085,6.218,3086,7.067,3087,7.067]],["title/miscellaneous/typealiases.html",[2883,2.653,3088,5.175]],["body/miscellaneous/typealiases.html",[6,0.111,7,2.834,10,0.063,17,3.268,23,2.38,24,0.115,25,0.01,29,2.938,30,0.389,37,3.268,38,2.834,39,2.834,40,2.834,41,3.157,42,2.419,43,3.396,44,2.716,45,2.335,46,2.834,47,3.69,48,0.818,49,1.58,50,2.256,60,0.872,62,0.795,64,2.938,65,2.938,67,3.04,69,3.396,70,3.268,78,0.165,85,0.772,98,3.536,102,2.183,108,3.15,121,3.69,126,2.608,132,3.69,133,3.396,142,3.396,144,3.536,146,3.396,148,3.69,150,3.69,151,3.536,181,0.007,182,0.007,186,1.986,199,2.955,204,1.927,209,2.585,415,3.715,487,3.944,982,4.272,1135,4.529,1157,4.837,1158,4.529,1159,5.223,1210,4.837,1413,3.478,1639,3.715,1645,4.272,1663,4.408,1670,3.113,1747,4.012,1755,5.223,1756,3.715,1757,5.223,1759,5.223,1760,5.223,1761,5.223,2095,4.408,2100,4.837,2260,5.74,2263,5.223,2355,4.408,2883,3.715,2887,7.71,2888,7.846,2890,7.865,2892,4.408,2897,4.408,2898,5.74,2967,4.408,3089,6.524,3090,5.011,3091,5.011,3092,5.011,3093,7.254,3094,6.524,3095,7.684,3096,7.684,3097,5.011,3098,6.524,3099,7.968,3100,6.524,3101,6.524,3102,7.254,3103,5.011,3104,6.524,3105,6.524,3106,6.524,3107,6.524,3108,6.524,3109,6.524,3110,6.524,3111,6.524,3112,5.011,3113,7.254,3114,7.684,3115,6.524,3116,7.684,3117,6.524,3118,5.011,3119,5.011,3120,5.011,3121,5.011,3122,5.011,3123,5.011,3124,5.011,3125,5.011,3126,5.011]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":855,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{}}}],["0.11.4",{"_index":2882,"title":{},"body":{"dependencies.html":{}}}],["07/schema",{"_index":1914,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["1",{"_index":729,"title":{"classes/Field-1.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"overview.html":{}}}],["11",{"_index":3087,"title":{},"body":{"overview.html":{}}}],["112",{"_index":3086,"title":{},"body":{"overview.html":{}}}],["13.1.0",{"_index":2870,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":3003,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0",{"_index":38,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["2.3.0",{"_index":2880,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1229,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["2019",{"_index":3020,"title":{},"body":{"license.html":{}}}],["3",{"_index":3002,"title":{},"body":{"index.html":{}}}],["3.0",{"_index":39,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["4",{"_index":2997,"title":{},"body":{"index.html":{}}}],["4.0",{"_index":40,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["404",{"_index":1731,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["7.4.0",{"_index":2878,"title":{},"body":{"dependencies.html":{}}}],["9a",{"_index":1821,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["_annotations",{"_index":2568,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_body",{"_index":2420,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_context",{"_index":2569,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_functions",{"_index":1026,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_headers",{"_index":2421,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_method",{"_index":2422,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_name",{"_index":221,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["_options",{"_index":2570,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_params",{"_index":2423,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_path",{"_index":2424,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_payload",{"_index":2571,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_properties",{"_index":1021,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_querybody",{"_index":2425,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_requests",{"_index":1251,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responsetype",{"_index":2426,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_segments",{"_index":2096,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["above",{"_index":3051,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1215,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["abstract",{"_index":489,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["acc",{"_index":1393,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["acc.params",{"_index":2144,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc.paths.push(path",{"_index":2143,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["accept",{"_index":13,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["accept.length",{"_index":2518,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push",{"_index":2512,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`odata.metadata=${this.api.options.accept?.metadata",{"_index":2509,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`streaming=${this.api.options.accept?.streaming",{"_index":2515,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accessors",{"_index":890,"title":{},"body":{"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/SegmentHandler.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field-1.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["action.ts",{"_index":439,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["action.ts:1",{"_index":550,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:12",{"_index":445,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:14",{"_index":448,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:15",{"_index":450,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:16",{"_index":447,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:17",{"_index":446,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:18",{"_index":449,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:22",{"_index":557,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:24",{"_index":561,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:25",{"_index":559,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:26",{"_index":558,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:27",{"_index":560,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:3",{"_index":554,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:31",{"_index":458,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:33",{"_index":461,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:34",{"_index":459,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:35",{"_index":460,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:39",{"_index":606,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:4",{"_index":556,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:41",{"_index":608,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:42",{"_index":613,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:43",{"_index":609,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:44",{"_index":607,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:45",{"_index":610,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:46",{"_index":611,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:47",{"_index":612,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:5",{"_index":552,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:51",{"_index":632,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:53",{"_index":638,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:54",{"_index":634,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:55",{"_index":633,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:56",{"_index":635,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:57",{"_index":636,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:58",{"_index":637,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:6",{"_index":551,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:7",{"_index":553,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:8",{"_index":555,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["actionimport",{"_index":783,"title":{},"body":{"classes/Field-1.html":{}}}],["actionimports",{"_index":513,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["actions",{"_index":641,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["add",{"_index":415,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataPathSegments.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["add(left",{"_index":377,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["add(name",{"_index":2102,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["added",{"_index":2893,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["additionalitems",{"_index":1841,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["addressinfo",{"_index":2981,"title":{},"body":{"index.html":{}}}],["again",{"_index":2955,"title":{},"body":{"index.html":{}}}],["aggregate",{"_index":3089,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["airport",{"_index":2954,"title":{},"body":{"index.html":{}}}],["airports",{"_index":2946,"title":{},"body":{"index.html":{}}}],["airports.entity(\"cyyz\").fetch",{"_index":2958,"title":{},"body":{"index.html":{}}}],["airports.fetch",{"_index":2989,"title":{},"body":{"index.html":{}}}],["airports.fetch().subscribe",{"_index":2949,"title":{},"body":{"index.html":{}}}],["airports.query((q",{"_index":2968,"title":{},"body":{"index.html":{}}}],["airports.tojson",{"_index":2971,"title":{},"body":{"index.html":{}}}],["airportsservice",{"_index":2944,"title":{},"body":{"index.html":{}}}],["airportsservice.entities",{"_index":2948,"title":{},"body":{"index.html":{}}}],["alias",{"_index":139,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["alias(value",{"_index":2299,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["aliases",{"_index":204,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["all(field",{"_index":405,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["allows",{"_index":1276,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["and(left",{"_index":366,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["and/or",{"_index":3043,"title":{},"body":{"license.html":{}}}],["angular",{"_index":2906,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":2869,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2871,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":1185,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["angular/compiler",{"_index":2872,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2064,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":2873,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":2874,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":2877,"title":{},"body":{"dependencies.html":{}}}],["angularodataentity",{"_index":2918,"title":{},"body":{"index.html":{}}}],["annot",{"_index":946,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annot.bool",{"_index":966,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.int",{"_index":967,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.permissions",{"_index":968,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.properties",{"_index":969,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.string",{"_index":965,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.term",{"_index":953,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annotatable",{"_index":943,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue",{"_index":932,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue(term",{"_index":938,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation",{"_index":567,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field-1.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation.ts",{"_index":463,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{}}}],["annotation.ts:1",{"_index":467,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:15",{"_index":477,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:16",{"_index":478,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:19",{"_index":678,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:2",{"_index":468,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:21",{"_index":683,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:22",{"_index":688,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:23",{"_index":680,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:24",{"_index":681,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:25",{"_index":679,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:26",{"_index":684,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:27",{"_index":682,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:28",{"_index":685,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:29",{"_index":686,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:30",{"_index":687,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:5",{"_index":480,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:7",{"_index":482,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:9",{"_index":481,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotationconfig",{"_index":133,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["annotationlist",{"_index":464,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["annotations",{"_index":140,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["annotations=${this.api.options.prefer?.includeannotations",{"_index":2530,"title":{},"body":{"classes/ODataRequest.html":{}}}],["annotationslist",{"_index":642,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["annots",{"_index":2653,"title":{},"body":{"classes/ODataResponse.html":{},"index.html":{}}}],["annots.data(payload",{"_index":2655,"title":{},"body":{"classes/ODataResponse.html":{}}}],["any(field",{"_index":403,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)['_name",{"_index":225,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)[f.name",{"_index":1882,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["any[]).map((v",{"_index":1804,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["api",{"_index":1125,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["apiconfig",{"_index":121,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"modules/ODataModule.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apinameorentitytype",{"_index":1128,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["apioptions",{"_index":1,"title":{"interfaces/ApiOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["app",{"_index":2934,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":2939,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":2937,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":2940,"title":{},"body":{"index.html":{}}}],["application/json;${accept.join",{"_index":2520,"title":{},"body":{"classes/ODataRequest.html":{}}}],["application_http",{"_index":1187,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["application_json",{"_index":1188,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["appliesto",{"_index":475,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field-1.html":{}}}],["apply(query",{"_index":2341,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["applymixins(derivedctor",{"_index":228,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatafunctions",{"_index":411,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odataoperators",{"_index":408,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatasyntax",{"_index":413,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["appmodule",{"_index":2929,"title":{},"body":{"index.html":{}}}],["arising",{"_index":3080,"title":{},"body":{"license.html":{}}}],["arithmeticfunctions",{"_index":184,"title":{"classes/ArithmeticFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arithmeticoperators",{"_index":376,"title":{"classes/ArithmeticOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arr",{"_index":2279,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.find((v",{"_index":2282,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.push(obj",{"_index":2283,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["array",{"_index":1756,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["array.isarray(config.keys",{"_index":1852,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["array.isarray(right",{"_index":348,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["array.isarray(this.keys",{"_index":1891,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["array.isarray(value",{"_index":1550,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["arraybuffer",{"_index":2442,"title":{},"body":{"classes/ODataRequest.html":{}}}],["assertarray",{"_index":2222,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject",{"_index":2223,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject(create",{"_index":2234,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign",{"_index":2224,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign(values",{"_index":2236,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["associated",{"_index":3033,"title":{},"body":{"license.html":{}}}],["at(index",{"_index":2238,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["attach",{"_index":1639,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["attach(model",{"_index":1672,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach(value",{"_index":1641,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>(model",{"_index":1709,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach>(value",{"_index":1654,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>>(model",{"_index":1710,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["attr",{"_index":879,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["attr?.nodevalue",{"_index":881,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute",{"_index":740,"title":{},"body":{"classes/Field-1.html":{},"miscellaneous/enumerations.html":{}}}],["attribute_abstract",{"_index":823,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_action",{"_index":820,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_alias",{"_index":790,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_applies_to",{"_index":828,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_base_term",{"_index":827,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_base_type",{"_index":798,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_contains_target",{"_index":812,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_default_value",{"_index":807,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_entity_set",{"_index":821,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_entity_set_path",{"_index":814,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_entity_type",{"_index":816,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_extends",{"_index":826,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_function",{"_index":819,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_has_stream",{"_index":811,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_include_in_service_document",{"_index":822,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_is_bound",{"_index":813,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_is_composable",{"_index":815,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_is_flags",{"_index":825,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_max_length",{"_index":802,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_name",{"_index":796,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_namespace",{"_index":791,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_nullable",{"_index":801,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_open_type",{"_index":799,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_partner",{"_index":808,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_path",{"_index":817,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_precision",{"_index":803,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_property",{"_index":809,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_qualifier",{"_index":793,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_referenced_property",{"_index":810,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_scale",{"_index":804,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_srid",{"_index":806,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_target",{"_index":818,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_target_namespace",{"_index":794,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_term",{"_index":795,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_term_namespace",{"_index":792,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_type",{"_index":800,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_underlying_type",{"_index":824,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_unicode",{"_index":805,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_uri",{"_index":789,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_value",{"_index":797,"title":{},"body":{"classes/Field-1.html":{}}}],["attribute_version",{"_index":788,"title":{},"body":{"classes/Field-1.html":{}}}],["attributes",{"_index":787,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{}}}],["attributes(data",{"_index":985,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["attributes.getnameditem('version",{"_index":880,"title":{},"body":{"classes/Field-1.html":{}}}],["attrs",{"_index":1681,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attrs[field.name",{"_index":1936,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["authors",{"_index":3070,"title":{},"body":{"license.html":{}}}],["average",{"_index":2902,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["backward",{"_index":2170,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["base",{"_index":167,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["base64",{"_index":1827,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["baseterm",{"_index":473,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field-1.html":{}}}],["basetype",{"_index":490,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["basic",{"_index":2999,"title":{},"body":{"index.html":{}}}],["batch",{"_index":53,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["batch(\"trippin",{"_index":2987,"title":{},"body":{"index.html":{}}}],["batch.request.method",{"_index":1302,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch_prefix",{"_index":1189,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batchboundary",{"_index":1296,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["binary",{"_index":1190,"title":{},"body":{"classes/ODataBatchRequest.html":{},"miscellaneous/enumerations.html":{}}}],["binding",{"_index":535,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlSingleton.html":{},"classes/Field-1.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["binding.ts",{"_index":599,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:1",{"_index":601,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:2",{"_index":602,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["bindingstructuredtype",{"_index":2763,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingstructuredtype.issubtypeof(callablebindingstructuredtype",{"_index":2771,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingtype",{"_index":2729,"title":{},"body":{"classes/ODataSchema.html":{}}}],["blob",{"_index":2443,"title":{},"body":{"classes/ODataRequest.html":{}}}],["body",{"_index":103,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bodyparams",{"_index":2556,"title":{},"body":{"classes/ODataRequest.html":{}}}],["bodyparams.tostring",{"_index":2559,"title":{},"body":{"classes/ODataRequest.html":{}}}],["bodyqueryoptions",{"_index":14,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bool",{"_index":135,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boolean",{"_index":30,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["boolean(field.collection",{"_index":1779,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["boolean(field.navigation",{"_index":1781,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["bound",{"_index":175,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boundary",{"_index":1300,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix",{"_index":1191,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${batchboundary}${boundary_prefix_suffix",{"_index":1316,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${changesetboundary}${boundary_prefix_suffix",{"_index":1304,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["break",{"_index":1871,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["browse",{"_index":3084,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2875,"title":{},"body":{"dependencies.html":{}}}],["buildbody",{"_index":1295,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildentry",{"_index":1337,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry(payload",{"_index":1351,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["builder",{"_index":200,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["builders",{"_index":3006,"title":{},"body":{"index.html":{}}}],["buildkey",{"_index":1338,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildkey(names",{"_index":1354,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildpathandquery",{"_index":2124,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["c",{"_index":1675,"title":{},"body":{"classes/ODataEntitySetService.html":{},"license.html":{}}}],["c.binding()?.type",{"_index":2768,"title":{},"body":{"classes/ODataSchema.html":{}}}],["c.istypeof(type",{"_index":1799,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["cache",{"_index":41,"title":{"interfaces/Cache.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cache_control",{"_index":2600,"title":{},"body":{"classes/ODataResponse.html":{}}}],["cache_key_separator",{"_index":1385,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cacheability",{"_index":94,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["cachecacheability",{"_index":47,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["cachecontrol",{"_index":2637,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["cachecontrol.split(',').foreach((directive",{"_index":2705,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["cached",{"_index":1431,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["california",{"_index":2970,"title":{},"body":{"index.html":{}}}],["callable",{"_index":1462,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["callable.configure",{"_index":2779,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callable_binding_parameter",{"_index":1538,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["callablebindingstructuredtype",{"_index":2769,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callablebindingtype",{"_index":2767,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callableconfig",{"_index":146,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["callables",{"_index":145,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["callaction",{"_index":1122,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callaction(params",{"_index":1131,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction",{"_index":1123,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction(params",{"_index":1142,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["case",{"_index":435,"title":{},"body":{"classes/ConditionalFunctions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["case(condition",{"_index":340,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["cast",{"_index":2863,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["cast(value",{"_index":325,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["catch",{"_index":870,"title":{},"body":{"classes/Field-1.html":{}}}],["catcherror",{"_index":1704,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["catcherror((error",{"_index":1729,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["caught",{"_index":129,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ceiling",{"_index":188,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["ceiling(value",{"_index":191,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["ch",{"_index":1868,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ch.findchildparser(predicate",{"_index":1870,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["change",{"_index":2967,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["changed",{"_index":2895,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["changeset",{"_index":1299,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changeset_prefix",{"_index":1192,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetboundary",{"_index":1297,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetendline",{"_index":1328,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetid",{"_index":1298,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetresponses",{"_index":1326,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["channel",{"_index":1238,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["charge",{"_index":3028,"title":{},"body":{"license.html":{}}}],["check",{"_index":875,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataPathSegments.html":{},"index.html":{}}}],["checkversion(document",{"_index":874,"title":{},"body":{"classes/Field-1.html":{}}}],["childparser",{"_index":1872,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["childparser((c",{"_index":1798,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["children",{"_index":887,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["chunks",{"_index":1318,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["city",{"_index":2962,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3073,"title":{},"body":{"license.html":{}}}],["class",{"_index":183,"title":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["classes",{"_index":185,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["clear",{"_index":2225,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["clearkey",{"_index":2205,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["clearpaging",{"_index":2337,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["clearparameters",{"_index":2210,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["client",{"_index":1130,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{}}}],["clone",{"_index":978,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["close",{"_index":1301,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["code",{"_index":1226,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["collection",{"_index":158,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["collectionfunctions",{"_index":275,"title":{"classes/CollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["complete.html#_toc406398229",{"_index":1089,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398230",{"_index":1090,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398236",{"_index":1093,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398237",{"_index":1094,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398238",{"_index":1091,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398240",{"_index":1092,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complextype",{"_index":763,"title":{},"body":{"classes/Field-1.html":{}}}],["complextypes",{"_index":643,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["compodoc",{"_index":3009,"title":{},"body":{"index.html":{}}}],["component",{"_index":2931,"title":{},"body":{"index.html":{}}}],["composable",{"_index":176,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["composite",{"_index":1737,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["compute",{"_index":66,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["compute(opts",{"_index":2305,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["computed",{"_index":1750,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["concat",{"_index":2843,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["concat(field",{"_index":258,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["condition",{"_index":342,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditionalfunctions",{"_index":339,"title":{"classes/ConditionalFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditions",{"_index":3050,"title":{},"body":{"license.html":{}}}],["config",{"_index":936,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["config.accept",{"_index":1111,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.alias",{"_index":2743,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.annotations",{"_index":956,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["config.base",{"_index":1849,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.bodyqueryoptions",{"_index":1109,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.bound",{"_index":1505,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.composable",{"_index":1507,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.configure",{"_index":2777,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.containers",{"_index":2754,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.deleterefby",{"_index":1117,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.entities",{"_index":2748,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entitysetpath",{"_index":1503,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.entitysets",{"_index":1635,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["config.entitytype",{"_index":1658,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.enums",{"_index":2745,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.etag",{"_index":1113,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.fetchpolicy",{"_index":1107,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.fields",{"_index":1858,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.flags",{"_index":1972,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.headers",{"_index":1101,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.keys.map((key",{"_index":1854,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.members",{"_index":1961,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.name",{"_index":1563,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["config.namespace",{"_index":2742,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.open",{"_index":1851,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.params",{"_index":1099,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.prefer",{"_index":1115,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.return",{"_index":1566,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["config.service",{"_index":1660,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.stringasenum",{"_index":1097,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.stripmetadata",{"_index":1105,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.version",{"_index":1095,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.withcredentials",{"_index":1103,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["configs",{"_index":120,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"modules/ODataModule.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["configure",{"_index":1448,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["configure(undefined",{"_index":1463,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSchema.html":{}}}],["connection",{"_index":3082,"title":{},"body":{"license.html":{}}}],["connector",{"_index":2260,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["console.log",{"_index":2966,"title":{},"body":{"index.html":{}}}],["console.log(\"airport",{"_index":2959,"title":{},"body":{"index.html":{}}}],["console.log(\"airports",{"_index":2950,"title":{},"body":{"index.html":{}}}],["console.log(\"all",{"_index":2953,"title":{},"body":{"index.html":{}}}],["const",{"_index":111,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["constants",{"_index":739,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["constructor",{"_index":244,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(action",{"_index":603,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["constructor(annot",{"_index":951,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["constructor(annotationlist",{"_index":465,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["constructor(client",{"_index":1126,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["constructor(config",{"_index":934,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["constructor(group",{"_index":902,"title":{},"body":{"classes/Grouping.html":{}}}],["constructor(helper",{"_index":980,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["constructor(init",{"_index":2433,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["constructor(name",{"_index":442,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{}}}],["constructor(namespace",{"_index":564,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlSchema.html":{}}}],["constructor(o",{"_index":2229,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["constructor(op",{"_index":908,"title":{},"body":{"classes/Lambda.html":{},"classes/Operator.html":{}}}],["constructor(options",{"_index":2359,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["constructor(path",{"_index":600,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["constructor(private",{"_index":2195,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["constructor(property",{"_index":628,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["constructor(propertyrefs",{"_index":579,"title":{},"body":{"classes/CsdlKey.html":{}}}],["constructor(protected",{"_index":388,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(public",{"_index":216,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(request",{"_index":1171,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["constructor(segment",{"_index":2832,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["constructor(segments",{"_index":2099,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{}}}],["constructor(target",{"_index":479,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["constructor(term",{"_index":476,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["constructor(termnamespace",{"_index":574,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["constructor(type",{"_index":631,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["constructor(undefined",{"_index":1348,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{}}}],["constructor(uri",{"_index":623,"title":{},"body":{"classes/CsdlReference.html":{}}}],["constructor(xml",{"_index":830,"title":{},"body":{"classes/Field-1.html":{}}}],["constructors",{"_index":229,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructors.foreach((basector",{"_index":230,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["container",{"_index":663,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field-1.html":{},"classes/ODataSchema.html":{}}}],["container.entitysets",{"_index":2759,"title":{},"body":{"classes/ODataSchema.html":{}}}],["container.ts",{"_index":512,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:10",{"_index":525,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:11",{"_index":523,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:12",{"_index":520,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:5",{"_index":519,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:7",{"_index":524,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:8",{"_index":522,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:9",{"_index":521,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["containers",{"_index":147,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contains",{"_index":2844,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["contains(field",{"_index":260,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["containstarget",{"_index":584,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field-1.html":{}}}],["content",{"_index":1178,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content.join(newline",{"_index":1242,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_id",{"_index":1193,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_transfer_encoding",{"_index":1194,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_type",{"_index":1195,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["contentid",{"_index":1327,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["contents",{"_index":2920,"title":{},"body":{"index.html":{}}}],["contenttype",{"_index":1319,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["contenttype.indexof(application_json",{"_index":2624,"title":{},"body":{"classes/ODataResponse.html":{}}}],["context",{"_index":981,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["context.entityset",{"_index":1398,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.entityset}(${context.key",{"_index":1401,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.key",{"_index":1400,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.type",{"_index":1402,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["continueonerror",{"_index":88,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contract",{"_index":3077,"title":{},"body":{"license.html":{}}}],["conventions.html#sec_parameteraliases",{"_index":2298,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptioncompute",{"_index":2304,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptionformat",{"_index":2311,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["copies",{"_index":3045,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3031,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3019,"title":{},"body":{"license.html":{}}}],["count",{"_index":61,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["countdistinct",{"_index":2903,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["countryregion",{"_index":2963,"title":{},"body":{"index.html":{}}}],["create",{"_index":1486,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{}}}],["create(attrs",{"_index":1678,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["create/update/patch",{"_index":1740,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["createsettings",{"_index":2076,"title":{},"body":{"modules/ODataModule.html":{}}}],["createsettings(configs",{"_index":2070,"title":{},"body":{"modules/ODataModule.html":{}}}],["creating",{"_index":1491,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["creation",{"_index":125,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["credentials",{"_index":1069,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["csdl",{"_index":502,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdl/csdl",{"_index":734,"title":{},"body":{"classes/Field-1.html":{}}}],["csdlaction",{"_index":437,"title":{"classes/CsdlAction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field-1.html":{}}}],["csdlactionimport",{"_index":456,"title":{"classes/CsdlActionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{}}}],["csdlannotable",{"_index":462,"title":{"classes/CsdlAnnotable.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotable:2",{"_index":484,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotation",{"_index":466,"title":{"classes/CsdlAnnotation.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field-1.html":{}}}],["csdlannotations",{"_index":469,"title":{"classes/CsdlAnnotations.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field-1.html":{}}}],["csdlcomplextype",{"_index":485,"title":{"classes/CsdlComplexType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["csdlentitycontainer",{"_index":510,"title":{"classes/CsdlEntityContainer.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSchema.html":{},"classes/Field-1.html":{}}}],["csdlentityset",{"_index":517,"title":{"classes/CsdlEntitySet.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/Field-1.html":{}}}],["csdlentitytype",{"_index":505,"title":{"classes/CsdlEntityType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["csdlenummember",{"_index":539,"title":{"classes/CsdlEnumMember.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field-1.html":{}}}],["csdlenumtype",{"_index":542,"title":{"classes/CsdlEnumType.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field-1.html":{}}}],["csdlfunction",{"_index":451,"title":{"classes/CsdlFunction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field-1.html":{}}}],["csdlfunctionimport",{"_index":453,"title":{"classes/CsdlFunctionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{}}}],["csdlinclude",{"_index":562,"title":{"classes/CsdlInclude.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field-1.html":{}}}],["csdlincludeannotations",{"_index":571,"title":{"classes/CsdlIncludeAnnotations.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field-1.html":{}}}],["csdlkey",{"_index":506,"title":{"classes/CsdlKey.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["csdlnavigationproperty",{"_index":494,"title":{"classes/CsdlNavigationProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["csdlnavigationpropertybinding",{"_index":529,"title":{"classes/CsdlNavigationPropertyBinding.html":{}},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field-1.html":{}}}],["csdlondelete",{"_index":589,"title":{"classes/CsdlOnDelete.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field-1.html":{}}}],["csdlparameter",{"_index":444,"title":{"classes/CsdlParameter.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{}}}],["csdlproperty",{"_index":493,"title":{"classes/CsdlProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["csdlpropertyref",{"_index":509,"title":{"classes/CsdlPropertyRef.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["csdlreference",{"_index":568,"title":{"classes/CsdlReference.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field-1.html":{}}}],["csdlreferentialconstraint",{"_index":588,"title":{"classes/CsdlReferentialConstraint.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field-1.html":{}}}],["csdlreturntype",{"_index":443,"title":{"classes/CsdlReturnType.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{}}}],["csdlschema",{"_index":639,"title":{"classes/CsdlSchema.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/Field-1.html":{}}}],["csdlsingleton",{"_index":518,"title":{"classes/CsdlSingleton.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSingleton.html":{},"classes/Field-1.html":{}}}],["csdlstructuralproperty",{"_index":583,"title":{"classes/CsdlStructuralProperty.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["csdlstructuralproperty:3",{"_index":595,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:4",{"_index":597,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:5",{"_index":596,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuredtype",{"_index":488,"title":{"classes/CsdlStructuredType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["csdlstructuredtype:10",{"_index":499,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:11",{"_index":497,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:12",{"_index":500,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:13",{"_index":496,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:8",{"_index":498,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:9",{"_index":501,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlterm",{"_index":472,"title":{"classes/CsdlTerm.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field-1.html":{}}}],["csdltypedefinition",{"_index":649,"title":{"classes/CsdlTypeDefinition.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field-1.html":{}}}],["ctx",{"_index":1260,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ctx(this",{"_index":1282,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["current",{"_index":1265,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["custom",{"_index":1762,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["customheaders",{"_index":2500,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[accept",{"_index":2519,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_match_header",{"_index":2504,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_none_match_header",{"_index":2507,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[prefer",{"_index":2535,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customizations",{"_index":3005,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1048,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["customparams",{"_index":2539,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$expand",{"_index":2542,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$select",{"_index":2540,"title":{},"body":{"classes/ODataRequest.html":{}}}],["damages",{"_index":3074,"title":{},"body":{"license.html":{}}}],["data",{"_index":979,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["data(data",{"_index":988,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["dataservices",{"_index":851,"title":{},"body":{"classes/Field-1.html":{}}}],["date",{"_index":126,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["date(value",{"_index":293,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["date.now",{"_index":1404,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["dateandtimefunctions",{"_index":292,"title":{"classes/DateAndTimeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["day",{"_index":699,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["day(value",{"_index":295,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["deal",{"_index":3035,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3083,"title":{},"body":{"license.html":{}}}],["deep",{"_index":3004,"title":{},"body":{"index.html":{}}}],["def",{"_index":2243,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["default",{"_index":124,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["default_fetch_policy",{"_index":1072,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["default_strip_metadata",{"_index":1073,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["default_timeout",{"_index":1386,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["default_version",{"_index":1074,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["defaults",{"_index":1904,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaultvalue",{"_index":474,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field-1.html":{}}}],["defined",{"_index":192,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["definition",{"_index":662,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field-1.html":{},"index.html":{}}}],["definition.ts",{"_index":689,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:10",{"_index":698,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:11",{"_index":696,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:3",{"_index":691,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:5",{"_index":693,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:6",{"_index":697,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:7",{"_index":692,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:8",{"_index":694,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:9",{"_index":695,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["delete",{"_index":1313,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["delete'].indexof(this._method",{"_index":2503,"title":{},"body":{"classes/ODataRequest.html":{}}}],["deleterefby",{"_index":15,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deleting",{"_index":2910,"title":{},"body":{"index.html":{}}}],["delivered",{"_index":1237,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deltalink",{"_index":1036,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["demo",{"_index":2915,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":2868,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deps",{"_index":2077,"title":{},"body":{"modules/ODataModule.html":{}}}],["derivedctor.prototype",{"_index":233,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["description",{"_index":944,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["deseialize",{"_index":1467,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialization",{"_index":1469,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialize",{"_index":100,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deserialize(value",{"_index":1465,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["deserialized",{"_index":1470,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["destroy",{"_index":1663,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/typealiases.html":{}}}],["destroy(key",{"_index":1682,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["diego",{"_index":3021,"title":{},"body":{"license.html":{}}}],["directive",{"_index":2712,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["directive.startswith(max_age",{"_index":2706,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["distribute",{"_index":3041,"title":{},"body":{"license.html":{}}}],["div",{"_index":416,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["div(left",{"_index":383,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["document",{"_index":833,"title":{},"body":{"classes/Field-1.html":{}}}],["document.documentelement",{"_index":844,"title":{},"body":{"classes/Field-1.html":{}}}],["document.documentelement.attributes",{"_index":841,"title":{},"body":{"classes/Field-1.html":{}}}],["document.documentelement.getelementsbytagname",{"_index":853,"title":{},"body":{"classes/Field-1.html":{}}}],["documentation",{"_index":2923,"title":{},"body":{"index.html":{},"license.html":{}}}],["domparser",{"_index":832,"title":{},"body":{"classes/Field-1.html":{}}}],["down",{"_index":2273,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["duration",{"_index":2898,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["dynamic",{"_index":2876,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":1948,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataQueryOptionHandler.html":{},"index.html":{}}}],["e().eq(\"emails",{"_index":2983,"title":{},"body":{"index.html":{}}}],["e.istypeof(type",{"_index":2761,"title":{},"body":{"classes/ODataSchema.html":{}}}],["editlink",{"_index":1013,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["edm.binary",{"_index":1816,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.boolean'].indexof(this.type",{"_index":1838,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.byte",{"_index":1832,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.date",{"_index":1812,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.datetimeoffset",{"_index":1814,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.decimal",{"_index":1836,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.double'].indexof(this.type",{"_index":1837,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.guid",{"_index":1815,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.int16",{"_index":1831,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.int32",{"_index":1830,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.int64",{"_index":1829,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.sbyte'].indexof",{"_index":1833,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.string",{"_index":1811,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.timeofday",{"_index":1813,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmx:dataservices",{"_index":748,"title":{},"body":{"classes/Field-1.html":{}}}],["edmx:edmx",{"_index":746,"title":{},"body":{"classes/Field-1.html":{}}}],["edmx:include",{"_index":752,"title":{},"body":{"classes/Field-1.html":{}}}],["edmx:includeannotations",{"_index":754,"title":{},"body":{"classes/Field-1.html":{}}}],["edmx:reference",{"_index":750,"title":{},"body":{"classes/Field-1.html":{}}}],["element",{"_index":852,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["empty",{"_index":2226,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["encode",{"_index":106,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encode(params",{"_index":1533,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["encode(value",{"_index":110,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encoded",{"_index":1473,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["encoding",{"_index":1472,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["endline",{"_index":1322,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["endregion",{"_index":180,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["endswith",{"_index":2845,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["endswith(field",{"_index":262,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["entities",{"_index":143,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["entities'].indexof(this._responsetype",{"_index":2554,"title":{},"body":{"classes/ODataRequest.html":{}}}],["entity",{"_index":511,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlSchema.html":{},"classes/Field-1.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["entity(\"cyyz",{"_index":2956,"title":{},"body":{"index.html":{}}}],["entity(key",{"_index":1644,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{}}}],["entitycontainer",{"_index":644,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field-1.html":{}}}],["entitycontainerconfig",{"_index":148,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityContainer.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entityid",{"_index":2651,"title":{},"body":{"classes/ODataResponse.html":{}}}],["entitykey",{"_index":1645,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["entityset",{"_index":55,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["entityset(entitysetname",{"_index":2798,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetconfig",{"_index":150,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entitysetname",{"_index":2800,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetpath",{"_index":174,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysets",{"_index":149,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysetschema",{"_index":1671,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["entitytype",{"_index":178,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/Field-1.html":{},"classes/ODataEntitySet.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytypes",{"_index":645,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["entries",{"_index":1335,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry",{"_index":1372,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry.lastread",{"_index":1425,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.payload",{"_index":1412,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.tags.indexof(t",{"_index":1423,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["enu.configure",{"_index":2775,"title":{},"body":{"classes/ODataSchema.html":{}}}],["enum",{"_index":51,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field-1.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enumerations",{"_index":2884,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":141,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enums.toname(this.members",{"_index":1983,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tonames(this.members",{"_index":1979,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalue(this.members",{"_index":1978,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalues(this.members",{"_index":1976,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enumtype",{"_index":760,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["enumtypeconfig",{"_index":142,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypefieldconfig",{"_index":151,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypes",{"_index":646,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["eq",{"_index":915,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["eq(left",{"_index":354,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["errata02",{"_index":1085,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["error",{"_index":128,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["error(\"batch",{"_index":1275,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('batch",{"_index":1271,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('field",{"_index":1559,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["error('odata",{"_index":877,"title":{},"body":{"classes/Field-1.html":{}}}],["error('unable",{"_index":872,"title":{},"body":{"classes/Field-1.html":{}}}],["error(`no",{"_index":2183,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["error.status",{"_index":1730,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["errorhandler",{"_index":127,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["errors",{"_index":1787,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`maxlength",{"_index":1794,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`required",{"_index":1792,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors[field.name",{"_index":1939,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errs",{"_index":1937,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["escape",{"_index":205,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["etag",{"_index":16,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["etag_headers",{"_index":2602,"title":{},"body":{"classes/ODataResponse.html":{}}}],["event",{"_index":3069,"title":{},"body":{"license.html":{}}}],["events",{"_index":1274,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["examples",{"_index":2916,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1262,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["execute",{"_index":1259,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["existing",{"_index":1674,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["exp",{"_index":2364,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expand",{"_index":65,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expand(opts",{"_index":2302,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expandobject",{"_index":3093,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandoptions",{"_index":3094,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandtype",{"_index":3095,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expired",{"_index":1414,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["exponentialdecimals",{"_index":79,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["exponentialdecimals=${this.api.options.accept?.exponentialdecimals",{"_index":2517,"title":{},"body":{"classes/ODataRequest.html":{}}}],["export",{"_index":36,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["express",{"_index":3060,"title":{},"body":{"license.html":{}}}],["expression",{"_index":2261,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["expression(name",{"_index":2363,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expression.e",{"_index":2309,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.f",{"_index":2322,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.o",{"_index":2321,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.s",{"_index":2320,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expressions",{"_index":2262,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"index.html":{}}}],["extend",{"_index":514,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["extends",{"_index":8,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["extra",{"_index":1058,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["f",{"_index":1876,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["f.configure",{"_index":1888,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.default",{"_index":1906,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.deserialize(value[f.name",{"_index":1880,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.isstructuredtype",{"_index":1907,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.name",{"_index":1877,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["f.navigation",{"_index":1917,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.nullable",{"_index":1933,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.serialize((value",{"_index":1883,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.structured().defaults",{"_index":1909,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.tojsonschema(expand",{"_index":1924,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.value",{"_index":1964,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["f]{12",{"_index":1825,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f]{12}$/.test",{"_index":2138,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["f]{4",{"_index":1824,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["f]{8",{"_index":1823,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["fa",{"_index":1822,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["factory",{"_index":218,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["factory(api",{"_index":1255,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["false",{"_index":248,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["features",{"_index":2625,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["features.split(';').foreach((o",{"_index":2692,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["fetch",{"_index":1055,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"index.html":{}}}],["fetchall",{"_index":1664,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["fetchall(options",{"_index":1688,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany",{"_index":1665,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany(options",{"_index":1690,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchnavigationproperty",{"_index":1124,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchnavigationproperty(resource",{"_index":1149,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchone",{"_index":1666,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchone(key",{"_index":1692,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate",{"_index":1667,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate(key",{"_index":1694,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchpolicy",{"_index":17,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["field",{"_index":97,"title":{"classes/Field.html":{},"classes/Field-1.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["field(odatametadata.attribute_alias",{"_index":860,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.attribute_namespace",{"_index":859,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.attribute_uri",{"_index":846,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.attribute_version",{"_index":839,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_action",{"_index":865,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_annotation",{"_index":850,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_annotations",{"_index":869,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_complex_type",{"_index":862,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_entity_container",{"_index":866,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_entity_type",{"_index":863,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_enum_type",{"_index":861,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_function",{"_index":864,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_include",{"_index":847,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_include_annotations",{"_index":849,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_term",{"_index":868,"title":{},"body":{"classes/Field-1.html":{}}}],["field(odatametadata.tag_type_definition",{"_index":867,"title":{},"body":{"classes/Field-1.html":{}}}],["field.default",{"_index":1775,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.encode(v",{"_index":1901,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.isstructuredtype",{"_index":1897,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.maxlength",{"_index":1777,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.name",{"_index":1900,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.nullable",{"_index":1778,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.precision",{"_index":1783,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.referentials",{"_index":1772,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.scale",{"_index":1785,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.structured",{"_index":1898,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.type",{"_index":1770,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.validate(value",{"_index":1938,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.value",{"_index":1970,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fieldnames",{"_index":885,"title":{},"body":{"classes/Field-1.html":{}}}],["fields",{"_index":154,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields.reduce",{"_index":1879,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields.reduce((acc",{"_index":1908,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fieldtype",{"_index":731,"title":{},"body":{"classes/Field-1.html":{},"miscellaneous/enumerations.html":{}}}],["fieldtype.attribute",{"_index":840,"title":{},"body":{"classes/Field-1.html":{}}}],["fieldtype.tag",{"_index":848,"title":{},"body":{"classes/Field-1.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["files",{"_index":3034,"title":{},"body":{"license.html":{}}}],["filter",{"_index":67,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["filter((f",{"_index":1930,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["filter((k",{"_index":2415,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((key",{"_index":2387,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((p",{"_index":1573,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["filter((r",{"_index":1442,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["filter((t",{"_index":2152,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["filter(opts",{"_index":2318,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["filtertype",{"_index":3096,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["find",{"_index":941,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["find((p",{"_index":2627,"title":{},"body":{"classes/ODataResponse.html":{}}}],["find(predicate",{"_index":2105,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["findannotation",{"_index":933,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findannotation(predicate",{"_index":945,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findcallablefortype",{"_index":2714,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findcallablefortype(type",{"_index":2728,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findchildparser",{"_index":1866,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["findentitysetfortype",{"_index":2715,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findentitysetfortype(type",{"_index":2731,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype",{"_index":2716,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype(type",{"_index":2733,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findfieldbyname",{"_index":1942,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyname(name",{"_index":1952,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyvalue",{"_index":1943,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyvalue(value",{"_index":1953,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findoptionsfortype",{"_index":2773,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype",{"_index":2717,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype(type",{"_index":2735,"title":{},"body":{"classes/ODataSchema.html":{}}}],["first",{"_index":42,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["first(undefined",{"_index":2108,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fitness",{"_index":3065,"title":{},"body":{"license.html":{}}}],["flags",{"_index":152,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floor",{"_index":189,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["floor(value",{"_index":195,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fluent",{"_index":2907,"title":{},"body":{"index.html":{}}}],["flush",{"_index":1339,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["following",{"_index":3049,"title":{},"body":{"license.html":{}}}],["forget",{"_index":1340,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forget(undefined",{"_index":1358,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forkjoin",{"_index":2988,"title":{},"body":{"index.html":{}}}],["format",{"_index":74,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["format(opts",{"_index":2312,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["format/v4.01/odata",{"_index":1080,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["forroot",{"_index":2058,"title":{},"body":{"modules/ODataModule.html":{}}}],["forroot(configs",{"_index":2059,"title":{},"body":{"modules/ODataModule.html":{}}}],["found",{"_index":2184,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fractionalseconds",{"_index":700,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["fractionalseconds(value",{"_index":297,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["free",{"_index":3027,"title":{},"body":{"license.html":{}}}],["friends",{"_index":2980,"title":{},"body":{"index.html":{}}}],["fromhttpresponse",{"_index":2572,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromhttpresponse(req",{"_index":2584,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson",{"_index":2573,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson(req",{"_index":2586,"title":{},"body":{"classes/ODataResponse.html":{}}}],["full",{"_index":45,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2131,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["funcs",{"_index":209,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["function",{"_index":62,"title":{"classes/Function.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["function('case",{"_index":341,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('cast",{"_index":326,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('ceiling",{"_index":321,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('concat",{"_index":259,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('contains",{"_index":261,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('date",{"_index":294,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('day",{"_index":296,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('endswith",{"_index":263,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('floor",{"_index":322,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('fractionalseconds",{"_index":298,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.distance",{"_index":332,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.intersects",{"_index":335,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.length",{"_index":337,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubsequence",{"_index":281,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubset",{"_index":278,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hour",{"_index":300,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('indexof",{"_index":265,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('isof",{"_index":328,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('length",{"_index":267,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('matchespattern",{"_index":285,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('maxdatetime",{"_index":302,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('mindatetime",{"_index":304,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('minute",{"_index":306,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('month",{"_index":308,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('now",{"_index":310,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('round",{"_index":323,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('second",{"_index":312,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('startswith",{"_index":269,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('substring",{"_index":274,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('time",{"_index":314,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('tolower",{"_index":287,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totaloffsetminutes",{"_index":316,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totalseconds",{"_index":318,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('toupper",{"_index":289,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('trim",{"_index":291,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('year",{"_index":320,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function(name",{"_index":1029,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["functionimport",{"_index":781,"title":{},"body":{"classes/Field-1.html":{}}}],["functionimports",{"_index":515,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["functionname",{"_index":454,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["functions",{"_index":412,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["furnished",{"_index":3048,"title":{},"body":{"license.html":{}}}],["ge",{"_index":916,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ge(left",{"_index":360,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["generated",{"_index":2991,"title":{},"body":{"index.html":{}}}],["generator",{"_index":2914,"title":{},"body":{"index.html":{}}}],["geodistance",{"_index":896,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geodistance(value",{"_index":330,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geofunctions",{"_index":329,"title":{"classes/GeoFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geointersects",{"_index":897,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geointersects(value",{"_index":333,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geolength",{"_index":898,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geolength(line",{"_index":336,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["get'].indexof(this._method",{"_index":2506,"title":{},"body":{"classes/ODataRequest.html":{}}}],["get(key",{"_index":117,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["get(name",{"_index":1360,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{}}}],["get(path",{"_index":2242,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["get(target",{"_index":222,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["getannotations",{"_index":2597,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getapi",{"_index":1155,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataSchemaElement.html":{}}}],["getbody",{"_index":2461,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcontext",{"_index":2595,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getcount",{"_index":1591,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getdeltalink",{"_index":1595,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["geteditlink",{"_index":1620,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getentityset",{"_index":990,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["getentitysets",{"_index":2739,"title":{},"body":{"classes/ODataSchema.html":{}}}],["getentitysetschema",{"_index":1702,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["getetag",{"_index":1613,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getfunctions",{"_index":1603,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getheaders",{"_index":2465,"title":{},"body":{"classes/ODataRequest.html":{}}}],["gethelper",{"_index":1070,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["getid",{"_index":1611,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediacontenttype",{"_index":1626,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaeditlink",{"_index":1624,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaetag",{"_index":1615,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediareadlink",{"_index":1622,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmetadataetag",{"_index":1617,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmethod",{"_index":2459,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getname",{"_index":2258,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["getnextlink",{"_index":1593,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getobjects",{"_index":883,"title":{},"body":{"classes/Field-1.html":{}}}],["getoptions",{"_index":2591,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getparams",{"_index":2463,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpath",{"_index":2457,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpathwithparams",{"_index":2467,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpayload",{"_index":2593,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getproperties",{"_index":1628,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getreadlink",{"_index":1589,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getresponse",{"_index":1341,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["getresponse(req",{"_index":1362,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["getresponsetype",{"_index":2455,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getsingletonschema",{"_index":2817,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["getskip",{"_index":1599,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getskiptoken",{"_index":1601,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getstructuredtypeschema",{"_index":1650,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["getting",{"_index":2904,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettop",{"_index":1597,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["gettype",{"_index":992,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["geturl",{"_index":2469,"title":{},"body":{"classes/ODataRequest.html":{}}}],["geturlwithparams",{"_index":2471,"title":{},"body":{"classes/ODataRequest.html":{}}}],["given",{"_index":1468,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["granted",{"_index":3026,"title":{},"body":{"license.html":{}}}],["group",{"_index":389,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupby",{"_index":3098,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grouping",{"_index":213,"title":{"classes/Grouping.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["grouping(value",{"_index":396,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupingoperators",{"_index":395,"title":{"classes/GroupingOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["gt",{"_index":917,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["gt(left",{"_index":358,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["guid",{"_index":2137,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["h",{"_index":219,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["haaster",{"_index":3023,"title":{},"body":{"license.html":{}}}],["hack",{"_index":2136,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["handle",{"_index":2582,"title":{},"body":{"classes/ODataResponse.html":{}}}],["handlefetch",{"_index":1342,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlefetch(req",{"_index":1364,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate",{"_index":1343,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate(req",{"_index":1366,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handler",{"_index":2407,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["handlerequest",{"_index":1344,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlerequest(req",{"_index":1368,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handleresponse",{"_index":1317,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["handlers",{"_index":2126,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["has(left",{"_index":372,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["has(name",{"_index":2366,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["has(path",{"_index":2245,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["hashmap",{"_index":2277,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["haskey",{"_index":2203,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasparameters",{"_index":2208,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasreferentials",{"_index":1845,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["hasstream",{"_index":507,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["hassubsequence",{"_index":431,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubsequence(s1",{"_index":280,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hassubset",{"_index":432,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubset(s1",{"_index":276,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["header",{"_index":1049,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["headers",{"_index":18,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["headers.getall(key",{"_index":1224,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["helper",{"_index":33,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["here",{"_index":3011,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":3025,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3071,"title":{},"body":{"license.html":{}}}],["hour",{"_index":701,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["hour(value",{"_index":299,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["htmlcollection",{"_index":888,"title":{},"body":{"classes/Field-1.html":{}}}],["http",{"_index":1068,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["http.boundarydelimiter(contenttype",{"_index":1321,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.boundaryend(batchboundary",{"_index":1323,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders",{"_index":1287,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["http.mergehttpheaders(this._headers",{"_index":2561,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams",{"_index":2545,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.parseresponsestatus(chunk[0",{"_index":1331,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.resolveheaderkey(this.headers",{"_index":2630,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.splithttpparams",{"_index":2557,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.withouthttpparams(params",{"_index":2549,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http11",{"_index":1196,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http://docs.oasis",{"_index":1077,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["http://json",{"_index":1912,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["httpclientmodule",{"_index":2062,"title":{},"body":{"modules/ODataModule.html":{}}}],["httperrorresponse",{"_index":1182,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{}}}],["httpheaders",{"_index":1183,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["httpheaders(json.headers",{"_index":2611,"title":{},"body":{"classes/ODataResponse.html":{}}}],["httpparams",{"_index":2439,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httpresponse",{"_index":1184,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["https://diegomvh.github.io/angular",{"_index":3012,"title":{},"body":{"index.html":{}}}],["https://docs.oasis",{"_index":2294,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["https://github.com/diegomvh/angular",{"_index":3015,"title":{},"body":{"index.html":{}}}],["https://github.com/odata/webapi/issues/1647",{"_index":91,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1974",{"_index":90,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://json",{"_index":1807,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["https://services.odata.org/v4/(s(4m0tuxtnhcfctl4gzem3gr10))/trippinservicerw",{"_index":2928,"title":{},"body":{"index.html":{}}}],["https://www.odata.org/getting",{"_index":1246,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["id",{"_index":28,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754",{"_index":2510,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ieee754compatible",{"_index":80,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754compatible=${this.api.options.accept?.ieee754compatible",{"_index":2513,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_match_header",{"_index":2473,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_none_match_header",{"_index":2474,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ifmatch",{"_index":82,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ifnonematch",{"_index":83,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["implements",{"_index":214,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["implied",{"_index":3061,"title":{},"body":{"license.html":{}}}],["import",{"_index":31,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["imports",{"_index":2072,"title":{},"body":{"modules/ODataModule.html":{},"index.html":{}}}],["in(left",{"_index":374,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["includeannotations",{"_index":89,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["included",{"_index":3054,"title":{},"body":{"license.html":{}}}],["includeinservicedocument",{"_index":455,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{}}}],["includes",{"_index":570,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["including",{"_index":1497,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"license.html":{}}}],["incorporates",{"_index":2998,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexof",{"_index":2846,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["indexof(field",{"_index":264,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["indexof(s.name",{"_index":2175,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["indexof(this.type",{"_index":1817,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["indicating",{"_index":1481,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["inherited",{"_index":483,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{}}}],["init",{"_index":2435,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.api",{"_index":2480,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.body",{"_index":2488,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.bodyqueryoptions",{"_index":2494,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.etag",{"_index":2501,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.fetchpolicy",{"_index":2492,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.headers",{"_index":2538,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.method",{"_index":2477,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.observe",{"_index":2484,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.params",{"_index":2547,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.reportprogress",{"_index":2482,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.resource",{"_index":2479,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.responsetype",{"_index":2486,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.withcredentials",{"_index":2490,"title":{},"body":{"classes/ODataRequest.html":{}}}],["inject",{"_index":2930,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":2794,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"injectables/ODataServiceFactory.html":{}}}],["injectables",{"_index":2795,"title":{},"body":{"injectables/ODataServiceFactory.html":{},"overview.html":{}}}],["inside",{"_index":942,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["install",{"_index":2924,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2921,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":961,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["instead",{"_index":2790,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["int",{"_index":136,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["integer",{"_index":1835,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"overview.html":{}}}],["invalid",{"_index":3122,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["isbatch",{"_index":2428,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isbound",{"_index":440,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{}}}],["iscallabletype",{"_index":2766,"title":{},"body":{"classes/ODataSchema.html":{}}}],["iscomposable",{"_index":452,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{}}}],["isedmtype",{"_index":1555,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isenumtype",{"_index":1557,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isexpired",{"_index":1345,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isexpired(entry",{"_index":1370,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isfetch",{"_index":2429,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isflags",{"_index":544,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field-1.html":{}}}],["iskey",{"_index":1842,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ismutate",{"_index":2430,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isnamespaceof",{"_index":2718,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isnamespaceof(type",{"_index":2737,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isof",{"_index":2864,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["isof(value",{"_index":327,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["isstructuredtype",{"_index":1560,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["issubtypeof",{"_index":1449,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(schema",{"_index":1479,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(type",{"_index":1862,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["istypeof",{"_index":1450,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof(type",{"_index":1482,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["items",{"_index":1840,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["john",{"_index":2985,"title":{},"body":{"index.html":{}}}],["john@example.com\").or(e().eq(\"username",{"_index":2984,"title":{},"body":{"index.html":{}}}],["join",{"_index":350,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["json",{"_index":1079,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"index.html":{}}}],["json.body",{"_index":2610,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.key",{"_index":2165,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parameters",{"_index":2167,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parse(this.storage.getitem(this.name",{"_index":2048,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.status",{"_index":2612,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.statustext",{"_index":2613,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.stringify(array.from(this.entries.entries",{"_index":2047,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.type",{"_index":2164,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.url",{"_index":2614,"title":{},"body":{"classes/ODataResponse.html":{}}}],["jsonschemacustom",{"_index":1757,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaexpand",{"_index":1759,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaoptions",{"_index":1760,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemarequired",{"_index":1761,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaselect",{"_index":1755,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["k",{"_index":1419,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["k.name",{"_index":1844,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["k.name.split",{"_index":1893,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["k.startswith(key",{"_index":1420,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["k.trim",{"_index":2694,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["keep",{"_index":2356,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(...names",{"_index":2413,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(names",{"_index":2368,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["key",{"_index":157,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["key(value",{"_index":2201,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key[k.alias",{"_index":1899,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keyof",{"_index":173,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["keys",{"_index":171,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys(values",{"_index":2111,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key}=${value",{"_index":2162,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["kind",{"_index":3059,"title":{},"body":{"license.html":{}}}],["lambda",{"_index":398,"title":{"classes/Lambda.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('all",{"_index":406,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('any",{"_index":404,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambdaoperators",{"_index":402,"title":{"classes/LambdaOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["last",{"_index":2097,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["last(undefined",{"_index":2113,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["lastread",{"_index":1387,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["le",{"_index":918,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["le(left",{"_index":364,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left",{"_index":345,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left.split('/').pop().tolowercase()[0",{"_index":400,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op}(${alias}:${render(right",{"_index":401,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length",{"_index":272,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length(value",{"_index":266,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["liability",{"_index":3075,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3072,"title":{},"body":{"license.html":{}}}],["library",{"_index":2917,"title":{},"body":{"index.html":{}}}],["license",{"_index":3017,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":3037,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3062,"title":{},"body":{"license.html":{}}}],["line",{"_index":338,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lines",{"_index":1324,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["link",{"_index":1076,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["literal",{"_index":23,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":2972,"title":{},"body":{"index.html":{}}}],["location",{"_index":2634,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["location_header",{"_index":2601,"title":{},"body":{"classes/ODataResponse.html":{}}}],["logicaloperators",{"_index":353,"title":{"classes/LogicalOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["long_description",{"_index":1751,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["looking",{"_index":1488,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["lt",{"_index":919,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["lt(left",{"_index":362,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["m",{"_index":1642,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["mainly",{"_index":2996,"title":{},"body":{"index.html":{}}}],["map",{"_index":957,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/ResponseJson.html":{}}}],["map(([key",{"_index":2161,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["map((f",{"_index":1923,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["map((key",{"_index":1223,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["map((name",{"_index":2616,"title":{},"body":{"classes/ODataResponse.html":{}}}],["map((s",{"_index":2150,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["map((v",{"_index":349,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["mapfields",{"_index":1944,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapfields(mapper",{"_index":1954,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapped",{"_index":1958,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapper",{"_index":1956,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["maps",{"_index":1957,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["match",{"_index":949,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["match(/[&?]{1}\\$skip=(\\d",{"_index":1041,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$skiptoken=([\\d\\w\\s",{"_index":1042,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$top=(\\d",{"_index":1039,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match[1",{"_index":1043,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["matches",{"_index":950,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["matchespattern",{"_index":2856,"title":{},"body":{"classes/StringFunctions.html":{}}}],["matchespattern(value",{"_index":283,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["matching",{"_index":182,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":2901,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["max_age",{"_index":2688,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["maxage",{"_index":95,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxdatetime",{"_index":702,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["maxdatetime(value",{"_index":301,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["maxlength",{"_index":156,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field-1.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxpagesize",{"_index":84,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["meant",{"_index":1490,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["mediacontenttype",{"_index":1019,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaeditlink",{"_index":1017,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaetag",{"_index":1007,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediareadlink",{"_index":1015,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["member",{"_index":155,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members",{"_index":153,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members.some((member",{"_index":1991,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["merchantability",{"_index":3064,"title":{},"body":{"license.html":{}}}],["merge",{"_index":3039,"title":{},"body":{"license.html":{}}}],["message",{"_index":1227,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["metadata",{"_index":54,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["metadataetag",{"_index":1009,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["method",{"_index":998,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{}}}],["methods",{"_index":187,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["microsoft.odata.sampleservice.models.trippin.airport",{"_index":2947,"title":{},"body":{"index.html":{}}}],["microsoft.odata.sampleservice.models.trippin.person",{"_index":2977,"title":{},"body":{"index.html":{}}}],["min",{"_index":2900,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mindatetime",{"_index":703,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["mindatetime(value",{"_index":303,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["minimal",{"_index":44,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["minute",{"_index":704,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["minute(value",{"_index":305,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["miscellaneous",{"_index":2883,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":1992,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mit",{"_index":3018,"title":{},"body":{"license.html":{}}}],["mod",{"_index":417,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mod(left",{"_index":385,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["model",{"_index":169,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["model.attach(this.entities",{"_index":1712,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entities().entity",{"_index":1711,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entity",{"_index":2820,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["modelfieldoptions",{"_index":3100,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":3101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["models/collection",{"_index":1706,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["models/model",{"_index":1653,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["modify",{"_index":1668,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"license.html":{}}}],["modify(key",{"_index":1696,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["module",{"_index":2052,"title":{"modules/ODataModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":2054,"title":{"modules.html":{}},"body":{"modules/ODataModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2061,"title":{},"body":{"modules/ODataModule.html":{}}}],["month",{"_index":705,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["month(value",{"_index":307,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["mul",{"_index":418,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mul(left",{"_index":381,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["multipart_mixed",{"_index":1197,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary",{"_index":1198,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary}${changesetboundary",{"_index":1307,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["n",{"_index":2230,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["name",{"_index":123,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["namednodemap",{"_index":876,"title":{},"body":{"classes/Field-1.html":{}}}],["names",{"_index":1356,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.foreach((name",{"_index":2411,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["names.indexof(k",{"_index":2416,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["names.indexof(type",{"_index":1572,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.join",{"_index":1982,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.join(cache_key_separator",{"_index":1405,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["names.push(`${this.alias}.${this.name",{"_index":1571,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["names.push(`${this.schema.alias}.${this.name",{"_index":2792,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["namespace",{"_index":138,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/Field-1.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["namespace/alias",{"_index":1498,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["name}/${p",{"_index":227,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["navigation",{"_index":160,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["navigation(field",{"_index":397,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["navigationproperties",{"_index":491,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["navigationproperty",{"_index":58,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["navigationpropertybinding",{"_index":528,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/Field-1.html":{}}}],["navigationpropertybindings",{"_index":665,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["ne",{"_index":920,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ne(left",{"_index":356,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["neg",{"_index":419,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["neg(value",{"_index":387,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["nestedexpandoptions",{"_index":3102,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["network",{"_index":43,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":170,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["newline",{"_index":1199,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["newline_regexp",{"_index":1200,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["nextlink",{"_index":1034,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["ngmodule",{"_index":2063,"title":{},"body":{"modules/ODataModule.html":{},"index.html":{}}}],["nicer",{"_index":1487,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["none",{"_index":46,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["none_parser",{"_index":112,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["noninfringement",{"_index":3068,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":236,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["normalizevalue",{"_index":201,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["normalizevalue(value",{"_index":243,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["not(value",{"_index":370,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["notice",{"_index":3052,"title":{},"body":{"license.html":{}}}],["now",{"_index":309,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["npm",{"_index":2925,"title":{},"body":{"index.html":{}}}],["null",{"_index":237,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["nullable",{"_index":159,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field-1.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["number",{"_index":85,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["number(directive.split('=')[1",{"_index":2707,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["number(match[1",{"_index":1040,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["number.isnan(maxage",{"_index":2708,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["o",{"_index":2232,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["o.split",{"_index":2693,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["obj",{"_index":2281,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["object",{"_index":240,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.assign",{"_index":1922,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.assign(acc",{"_index":1928,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["object.assign(acc.params",{"_index":2145,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["object.assign(customparams",{"_index":2544,"title":{},"body":{"classes/ODataRequest.html":{}}}],["object.assign(this",{"_index":954,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["object.assign(this.etag",{"_index":1112,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["object.create(null",{"_index":235,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.defineproperty",{"_index":232,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.entries",{"_index":1857,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.entries(config.fields).map",{"_index":1973,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["object.entries(config.parameters",{"_index":1568,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["object.entries(params",{"_index":2160,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["object.getownpropertydescriptor(basector.prototype",{"_index":234,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.getownpropertynames(basector.prototype).foreach((name",{"_index":231,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.keys(this.options",{"_index":2414,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["object.keys(this.options).reduce((acc",{"_index":2392,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["objects",{"_index":886,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["objects.clone(this._segments",{"_index":2168,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["objects.clone(value",{"_index":2404,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["objects.get(obj",{"_index":2287,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.has(obj",{"_index":2291,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.merge(obj",{"_index":2292,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.resolvekey(key",{"_index":1903,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["objects.set(obj",{"_index":2285,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.unset(obj",{"_index":2288,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["obs",{"_index":1281,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["observable",{"_index":34,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["observe",{"_index":1277,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["obtaining",{"_index":3030,"title":{},"body":{"license.html":{}}}],["odata",{"_index":1050,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["odata.include",{"_index":2529,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata.mergecallableparameters(config.callables",{"_index":2751,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata.metadata",{"_index":2695,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata.streaming",{"_index":2697,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/docs",{"_index":3013,"title":{},"body":{"index.html":{}}}],["odata/src/lib/cache/cache.ts",{"_index":1334,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odata/src/lib/cache/cache.ts:108",{"_index":1357,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:113",{"_index":1371,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:117",{"_index":1369,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:128",{"_index":1365,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:15",{"_index":1350,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:16",{"_index":1349,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:163",{"_index":1367,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:23",{"_index":1363,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:24",{"_index":1376,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:26",{"_index":1378,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:38",{"_index":1380,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:50",{"_index":1352,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:62",{"_index":1355,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:66",{"_index":1374,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:81",{"_index":1361,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:89",{"_index":1359,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/memory.ts",{"_index":2008,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/memory.ts:4",{"_index":2009,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/storage.ts",{"_index":2032,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odata/src/lib/cache/storage.ts:13",{"_index":2035,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:14",{"_index":2034,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:32",{"_index":2039,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:39",{"_index":2038,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/helper.ts",{"_index":3124,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/models/options.ts",{"_index":2892,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/module.ts",{"_index":2055,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/module.ts:18",{"_index":2060,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/options.ts",{"_index":1045,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:106",{"_index":1071,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:112",{"_index":2093,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:113",{"_index":2092,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:120",{"_index":2094,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:22",{"_index":1066,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:26",{"_index":1062,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:30",{"_index":1063,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:34",{"_index":1054,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:38",{"_index":1060,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:42",{"_index":1057,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:46",{"_index":1067,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:50",{"_index":1051,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:55",{"_index":1047,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:61",{"_index":1053,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:71",{"_index":1061,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:89",{"_index":1046,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/resources/path/handlers.ts",{"_index":2186,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:11",{"_index":2841,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:15",{"_index":2840,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:19",{"_index":2838,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:23",{"_index":2836,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:26",{"_index":2834,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:29",{"_index":2839,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:33",{"_index":2837,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:36",{"_index":2835,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:41",{"_index":2187,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:43",{"_index":2189,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:46",{"_index":2194,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:49",{"_index":2188,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:52",{"_index":2190,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:55",{"_index":2191,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:58",{"_index":2193,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:6",{"_index":2833,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:61",{"_index":2192,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:8",{"_index":2842,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/segments.ts",{"_index":2095,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/segments.ts:112",{"_index":2104,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:117",{"_index":2107,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:122",{"_index":2118,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:136",{"_index":2109,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:141",{"_index":2114,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:146",{"_index":2103,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:152",{"_index":2110,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:48",{"_index":2101,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:54",{"_index":2116,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:67",{"_index":2122,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:73",{"_index":2112,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:88",{"_index":2120,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:99",{"_index":2119,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/query/builder.ts",{"_index":2897,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions.ts",{"_index":3118,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/handlers.ts",{"_index":2221,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:14",{"_index":2259,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:18",{"_index":2253,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:22",{"_index":2241,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:27",{"_index":2257,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:33",{"_index":2233,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:39",{"_index":2248,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:43",{"_index":2250,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:49",{"_index":2239,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:55",{"_index":2235,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:68",{"_index":2252,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:73",{"_index":2244,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:78",{"_index":2255,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:8",{"_index":2231,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:88",{"_index":2246,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:93",{"_index":2237,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:99",{"_index":2240,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/options.ts",{"_index":2355,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/options.ts:100",{"_index":2362,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:112",{"_index":2365,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:117",{"_index":2371,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:123",{"_index":2367,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:127",{"_index":2374,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:131",{"_index":2369,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:138",{"_index":2361,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:30",{"_index":2360,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:37",{"_index":2372,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:64",{"_index":2377,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:75",{"_index":2375,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:85",{"_index":2376,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/syntax.ts",{"_index":186,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/syntax.ts:107",{"_index":893,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:130",{"_index":2849,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:134",{"_index":2850,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:138",{"_index":2851,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:14",{"_index":2831,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/syntax.ts:142",{"_index":2852,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:146",{"_index":2853,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:15",{"_index":2830,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/syntax.ts:150",{"_index":2854,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:154",{"_index":2855,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:164",{"_index":434,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:167",{"_index":433,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:173",{"_index":2859,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:176",{"_index":2860,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:179",{"_index":2861,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:182",{"_index":2862,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:188",{"_index":711,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:191",{"_index":712,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:194",{"_index":713,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:197",{"_index":714,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:200",{"_index":715,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:203",{"_index":716,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:206",{"_index":717,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:209",{"_index":718,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:212",{"_index":719,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:215",{"_index":720,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:218",{"_index":721,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:221",{"_index":722,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:224",{"_index":723,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:227",{"_index":724,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:23",{"_index":725,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/query/syntax.ts:233",{"_index":193,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:236",{"_index":196,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:239",{"_index":198,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:24",{"_index":726,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/query/syntax.ts:245",{"_index":2865,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:249",{"_index":2866,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:255",{"_index":899,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:258",{"_index":900,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:26",{"_index":727,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/query/syntax.ts:261",{"_index":901,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:267",{"_index":436,"title":{},"body":{"classes/ConditionalFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:272",{"_index":2822,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:279",{"_index":2825,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:283",{"_index":2824,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:291",{"_index":2823,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:31",{"_index":728,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/query/syntax.ts:328",{"_index":921,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:331",{"_index":928,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:334",{"_index":923,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:337",{"_index":922,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:340",{"_index":927,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:343",{"_index":926,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:354",{"_index":929,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:357",{"_index":924,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:360",{"_index":925,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:366",{"_index":421,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:369",{"_index":427,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:372",{"_index":425,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:375",{"_index":423,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:378",{"_index":424,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:381",{"_index":426,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:386",{"_index":903,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:389",{"_index":906,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:393",{"_index":905,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:399",{"_index":904,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:442",{"_index":907,"title":{},"body":{"classes/GroupingOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:453",{"_index":909,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/syntax.ts:460",{"_index":912,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/syntax.ts:464",{"_index":911,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/syntax.ts:472",{"_index":910,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/syntax.ts:494",{"_index":914,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:498",{"_index":913,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:5",{"_index":2829,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/syntax.ts:87",{"_index":891,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:95",{"_index":895,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:99",{"_index":894,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/request.ts",{"_index":2419,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:17",{"_index":2445,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:18",{"_index":2448,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:19",{"_index":2449,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:20",{"_index":2451,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:21",{"_index":2446,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:211",{"_index":2456,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:22",{"_index":2447,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:220",{"_index":2458,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:224",{"_index":2460,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:228",{"_index":2462,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:240",{"_index":2464,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:252",{"_index":2466,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:260",{"_index":2468,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:268",{"_index":2470,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:272",{"_index":2472,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:276",{"_index":2452,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:28",{"_index":2450,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:280",{"_index":2453,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:284",{"_index":2454,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:29",{"_index":2444,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:38",{"_index":2438,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:39",{"_index":2436,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:40",{"_index":2437,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:41",{"_index":2440,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:42",{"_index":2441,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:43",{"_index":2434,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/resource.ts",{"_index":3120,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/responses/annotations.ts",{"_index":977,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:100",{"_index":1610,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:104",{"_index":1605,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:105",{"_index":1630,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:112",{"_index":1609,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:12",{"_index":986,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:130",{"_index":1590,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:134",{"_index":1592,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:138",{"_index":1594,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:142",{"_index":1596,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:146",{"_index":1598,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:151",{"_index":1600,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:156",{"_index":1602,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:16",{"_index":991,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:161",{"_index":1583,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:162",{"_index":1604,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:168",{"_index":1587,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:20",{"_index":993,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:25",{"_index":987,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:26",{"_index":989,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:5",{"_index":983,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:56",{"_index":1612,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:60",{"_index":1614,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:64",{"_index":1616,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:68",{"_index":1618,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:7",{"_index":984,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:72",{"_index":1619,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:76",{"_index":1621,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:80",{"_index":1623,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:84",{"_index":1625,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:88",{"_index":1627,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:92",{"_index":1606,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:93",{"_index":1629,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/csdl/csdl",{"_index":438,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["odata/src/lib/resources/responses/metadata.ts",{"_index":730,"title":{},"body":{"classes/Field-1.html":{},"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:47",{"_index":732,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:48",{"_index":733,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/responses/options.ts",{"_index":2665,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:19",{"_index":2677,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:20",{"_index":2675,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:22",{"_index":2674,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:23",{"_index":2676,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:24",{"_index":2672,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:26",{"_index":2673,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:28",{"_index":2671,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:29",{"_index":2670,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:36",{"_index":2687,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:40",{"_index":2678,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:44",{"_index":2682,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:61",{"_index":2686,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:67",{"_index":2684,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:72",{"_index":2680,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/response.ts",{"_index":2567,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:125",{"_index":2579,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:126",{"_index":2594,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:136",{"_index":2576,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:137",{"_index":2596,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:146",{"_index":2575,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:147",{"_index":2598,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:169",{"_index":2583,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:193",{"_index":2581,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:212",{"_index":2588,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:236",{"_index":2590,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:29",{"_index":2580,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:30",{"_index":2574,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:46",{"_index":2585,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:58",{"_index":2587,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:79",{"_index":2589,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:92",{"_index":2578,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:93",{"_index":2592,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/types.ts",{"_index":3125,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/types/batch.ts",{"_index":1167,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:136",{"_index":1177,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:38",{"_index":1173,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:39",{"_index":1174,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:43",{"_index":1181,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:69",{"_index":1180,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/options.ts",{"_index":3126,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/annotation.ts",{"_index":931,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:18",{"_index":935,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:30",{"_index":947,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:39",{"_index":940,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:4",{"_index":975,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:5",{"_index":974,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:6",{"_index":971,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:7",{"_index":972,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:8",{"_index":973,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:9",{"_index":970,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/callable.ts",{"_index":1446,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:10",{"_index":1453,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:24",{"_index":1474,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:36",{"_index":1464,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:50",{"_index":1466,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:60",{"_index":1476,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:7",{"_index":1456,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:70",{"_index":1471,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:78",{"_index":1461,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:8",{"_index":1454,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:9",{"_index":1455,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/element.ts",{"_index":2780,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:19",{"_index":2787,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:29",{"_index":2785,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:38",{"_index":2786,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:47",{"_index":2784,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:58",{"_index":2783,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:7",{"_index":2782,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:8",{"_index":2781,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/entity",{"_index":1632,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{}}}],["odata/src/lib/schema/enum",{"_index":1941,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["odata/src/lib/schema/parsers/callable.ts",{"_index":1521,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:106",{"_index":1535,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:113",{"_index":1532,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:122",{"_index":1537,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:140",{"_index":1534,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:15",{"_index":2080,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:157",{"_index":1531,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:16",{"_index":2083,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:17",{"_index":2082,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:170",{"_index":1530,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:18",{"_index":2079,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:19",{"_index":2081,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:20",{"_index":2078,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:30",{"_index":2090,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:41",{"_index":2085,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:51",{"_index":2084,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:62",{"_index":2087,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:66",{"_index":2088,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:70",{"_index":2086,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:75",{"_index":2089,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:79",{"_index":2091,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:87",{"_index":1524,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:88",{"_index":1525,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:89",{"_index":1523,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:90",{"_index":1529,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:91",{"_index":1528,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:92",{"_index":1527,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:93",{"_index":1522,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/enum",{"_index":1966,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odata/src/lib/schema/parsers/structured",{"_index":1747,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/schema.ts",{"_index":2713,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:12",{"_index":2721,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:13",{"_index":2726,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:14",{"_index":2720,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:15",{"_index":2725,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:16",{"_index":2724,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:17",{"_index":2722,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:18",{"_index":2719,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:39",{"_index":2738,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:46",{"_index":2740,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:54",{"_index":2734,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:60",{"_index":2736,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:66",{"_index":2730,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:87",{"_index":2732,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:92",{"_index":2727,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/services/base.ts",{"_index":1121,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:103",{"_index":1153,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:108",{"_index":1154,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:13",{"_index":1129,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:20",{"_index":1156,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:24",{"_index":1144,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:30",{"_index":1145,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:36",{"_index":1146,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:42",{"_index":1147,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:48",{"_index":1148,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:61",{"_index":1136,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:67",{"_index":1138,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:73",{"_index":1139,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:79",{"_index":1140,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:85",{"_index":1141,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:98",{"_index":1151,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/entity",{"_index":1662,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odata/src/lib/services/entity.ts",{"_index":1638,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:12",{"_index":1651,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:6",{"_index":1646,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:7",{"_index":1643,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/factory.ts",{"_index":2796,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:15",{"_index":2799,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:30",{"_index":2802,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:7",{"_index":2797,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/singleton.ts",{"_index":2806,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:34",{"_index":2818,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:44",{"_index":2816,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:58",{"_index":2814,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/types.ts",{"_index":7,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/types.ts:102",{"_index":2828,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:107",{"_index":2827,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:117",{"_index":430,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:118",{"_index":429,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:97",{"_index":2826,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/utils/durations.ts",{"_index":3119,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/wiki",{"_index":3016,"title":{},"body":{"index.html":{}}}],["odata_configurations",{"_index":2068,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata_entityid_headers",{"_index":2603,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata_etag",{"_index":2932,"title":{},"body":{"index.html":{}}}],["odata_version",{"_index":1201,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata_version_headers",{"_index":2599,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataactionresource",{"_index":1133,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataannotatable",{"_index":930,"title":{"classes/ODataAnnotatable.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:18",{"_index":1460,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:30",{"_index":1500,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:39",{"_index":1499,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation",{"_index":937,"title":{"classes/ODataAnnotation.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation(annot",{"_index":958,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odataannotations",{"_index":976,"title":{"classes/ODataAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:118",{"_index":1585,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:12",{"_index":1588,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:126",{"_index":1586,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:30",{"_index":2218,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:38",{"_index":2219,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:44",{"_index":1607,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:52",{"_index":1608,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:7",{"_index":1584,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataapi",{"_index":1186,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["odataapioptions",{"_index":1044,"title":{"classes/ODataApiOptions.html":{}},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["odatabaseservice",{"_index":1120,"title":{"classes/ODataBaseService.html":{}},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:24",{"_index":1648,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:61",{"_index":1647,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:98",{"_index":1649,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabatchrequest",{"_index":1166,"title":{"classes/ODataBatchRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchrequest(req",{"_index":1279,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource",{"_index":1249,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odatabatchresource(api",{"_index":1258,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildbody",{"_index":1294,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildbody(bound",{"_index":1289,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.handleresponse(requests",{"_index":1293,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatacache",{"_index":1333,"title":{"classes/ODataCache.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacache:108",{"_index":2016,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:113",{"_index":2022,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:117",{"_index":2021,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:128",{"_index":2019,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:15",{"_index":2011,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:16",{"_index":2010,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:163",{"_index":2020,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:19",{"_index":2012,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:26",{"_index":2024,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:38",{"_index":2025,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:45",{"_index":2036,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:50",{"_index":2014,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:60",{"_index":2037,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:62",{"_index":2015,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:66",{"_index":2023,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:81",{"_index":2018,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:89",{"_index":2017,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:9",{"_index":2013,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacacheentry",{"_index":1353,"title":{"interfaces/ODataCacheEntry.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacallable",{"_index":1445,"title":{"classes/ODataCallable.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataSchema.html":{}}}],["odatacallable(config",{"_index":2752,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatacallableparser",{"_index":1457,"title":{"classes/ODataCallableParser.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataclient",{"_index":1127,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["odatacollection",{"_index":1705,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odatacontext",{"_index":982,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentities",{"_index":1157,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitiesannotations",{"_index":1031,"title":{"classes/ODataEntitiesAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitiesoptions",{"_index":3104,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentity",{"_index":1158,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityannotations",{"_index":1003,"title":{"classes/ODataEntityAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitycontainer",{"_index":1631,"title":{"classes/ODataEntityContainer.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["odataentitycontainer(config",{"_index":2755,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataentityoptions",{"_index":3105,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentityresource",{"_index":1687,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityservice",{"_index":1637,"title":{"classes/ODataEntityService.html":{}},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:19",{"_index":2811,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:27",{"_index":2810,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:28",{"_index":1686,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityservice:36",{"_index":1673,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityset",{"_index":1633,"title":{"classes/ODataEntitySet.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataSchema.html":{}}}],["odataentityset(config",{"_index":1636,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["odataentitysetresource",{"_index":1685,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["odataentitysetservice",{"_index":1661,"title":{"classes/ODataEntitySetService.html":{}},"body":{"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{}}}],["odataentitytypekey",{"_index":1746,"title":{"classes/ODataEntityTypeKey.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataentitytypekey(key",{"_index":1855,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataenumtype",{"_index":1940,"title":{"classes/ODataEnumType.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odataenumtype(config",{"_index":2746,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataenumtypefieldparser",{"_index":1951,"title":{"classes/ODataEnumTypeFieldParser.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypefieldparser(name",{"_index":1974,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypeparser",{"_index":1539,"title":{"classes/ODataEnumTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatafunctionresource",{"_index":1143,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatafunctions",{"_index":410,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatahelper",{"_index":1075,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatahelper[this.version",{"_index":1118,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatainmemorycache",{"_index":2007,"title":{"classes/ODataInMemoryCache.html":{}},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatainstoragecache",{"_index":2031,"title":{"classes/ODataInStorageCache.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatametadata",{"_index":742,"title":{},"body":{"classes/Field-1.html":{}}}],["odatametadata.tag_data_services",{"_index":854,"title":{},"body":{"classes/Field-1.html":{}}}],["odatametadata.tag_reference",{"_index":845,"title":{},"body":{"classes/Field-1.html":{}}}],["odatametadata.tag_schema",{"_index":858,"title":{},"body":{"classes/Field-1.html":{}}}],["odatametadatatype",{"_index":29,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odatamodel",{"_index":1652,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatamodelentry",{"_index":3106,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodeleventtype",{"_index":3107,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelfieldoptions",{"_index":3108,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelrelation",{"_index":3109,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelstate",{"_index":2886,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodule",{"_index":2053,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"index.html":{},"modules.html":{}}}],["odatamodule.forroot",{"_index":2927,"title":{},"body":{"index.html":{}}}],["odatamodule.forroot(trippinconfig",{"_index":2994,"title":{},"body":{"index.html":{}}}],["odatanavigationpropertyresource",{"_index":1150,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatanoneoptions",{"_index":3110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataoperators",{"_index":407,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataoptions",{"_index":1210,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataparameterparser",{"_index":1526,"title":{"classes/ODataParameterParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparameterparser(name",{"_index":1569,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparseroptions",{"_index":1119,"title":{"classes/ODataParserOptions.html":{}},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{}}}],["odataparseroptions(options",{"_index":1548,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatapathsegments",{"_index":1206,"title":{"classes/ODataPathSegments.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odatapathsegments(segments",{"_index":2169,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odatapathsegmentshandler",{"_index":2185,"title":{"classes/ODataPathSegmentsHandler.html":{}},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odataproperty",{"_index":1159,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odatapropertyannotations",{"_index":999,"title":{"classes/ODataPropertyAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odatapropertyoptions",{"_index":3111,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataqueryarguments",{"_index":2263,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryargumentsoptions",{"_index":1135,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryoptionhandler",{"_index":2220,"title":{"classes/ODataQueryOptionHandler.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionhandler(this.options",{"_index":2408,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions",{"_index":2264,"title":{"classes/ODataQueryOptions.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(options",{"_index":2405,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionshandler",{"_index":2293,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odatareferential",{"_index":1764,"title":{"classes/ODataReferential.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatareferential(referential",{"_index":1773,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatarequest",{"_index":1172,"title":{"classes/ODataRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresource",{"_index":1207,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["odataresponse",{"_index":1208,"title":{"classes/ODataResponse.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponse.fromjson(req",{"_index":2051,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponseoptions",{"_index":2577,"title":{"classes/ODataResponseOptions.html":{}},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this",{"_index":2691,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this.api.options",{"_index":2622,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataschema",{"_index":1452,"title":{"classes/ODataSchema.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement",{"_index":1447,"title":{"classes/ODataSchemaElement.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement:29",{"_index":1485,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:38",{"_index":1496,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:47",{"_index":1483,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:58",{"_index":1480,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:7",{"_index":1458,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:8",{"_index":1459,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odatasegment",{"_index":2100,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["odataservicefactory",{"_index":2057,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["odatasettings",{"_index":2066,"title":{},"body":{"modules/ODataModule.html":{}}}],["odatasettings(...configs",{"_index":2071,"title":{},"body":{"modules/ODataModule.html":{}}}],["odatasingletonresource",{"_index":2812,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odatasingletonservice",{"_index":2804,"title":{"classes/ODataSingletonService.html":{}},"body":{"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["odatastructuredtype",{"_index":2723,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtype(config",{"_index":2749,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtypefieldparser",{"_index":1758,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypefieldparser(name",{"_index":1859,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser",{"_index":1540,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatasyntax",{"_index":211,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatausage",{"_index":2926,"title":{},"body":{"index.html":{}}}],["odataversion",{"_index":37,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataversionhelper",{"_index":32,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["of(cached",{"_index":1433,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["ondelete",{"_index":585,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field-1.html":{}}}],["one",{"_index":2272,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["onerror",{"_index":1169,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onerror(content",{"_index":1175,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload",{"_index":1170,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload(content",{"_index":1179,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["op",{"_index":343,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["open",{"_index":168,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["open.org/odata/odata",{"_index":1078,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["open.org/odata/odata/v4.0/errata02/os/complete/part1",{"_index":1082,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["open.org/odata/odata/v4.01/odata",{"_index":2295,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["opentype",{"_index":492,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["operator",{"_index":212,"title":{"classes/Operator.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('add",{"_index":378,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('and",{"_index":367,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('div",{"_index":384,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('eq",{"_index":355,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ge",{"_index":361,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('gt",{"_index":359,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('has",{"_index":373,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('in",{"_index":375,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('le",{"_index":365,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('lt",{"_index":363,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mod",{"_index":386,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mul",{"_index":382,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ne",{"_index":357,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('not",{"_index":371,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('or",{"_index":369,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('sub",{"_index":380,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operators",{"_index":409,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["option",{"_index":2357,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["option(name",{"_index":2370,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["optional",{"_index":12,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["options",{"_index":9,"title":{"interfaces/Options.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["options.custom",{"_index":1925,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.custom[f.name",{"_index":1926,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.expand",{"_index":1918,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.headers",{"_index":1288,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options.helper",{"_index":2654,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.annotations(this.payload",{"_index":2648,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(data",{"_index":2657,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(payload",{"_index":2663,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.etag(this._annotations",{"_index":2650,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.id(this._annotations",{"_index":2652,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.params",{"_index":1290,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options.required",{"_index":1931,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.required[f.name",{"_index":1932,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.select",{"_index":1919,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.select).indexof(f.name",{"_index":1920,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.withcredentials",{"_index":1291,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options?.helper.type(value",{"_index":1797,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["optionshelper",{"_index":92,"title":{"interfaces/OptionsHelper.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts",{"_index":115,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["or(left",{"_index":368,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["orderby",{"_index":70,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["orderby(opts",{"_index":2324,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["orderbyobject",{"_index":3113,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["orderbytype",{"_index":3114,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1263,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["os",{"_index":1086,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["otherwise",{"_index":3079,"title":{},"body":{"license.html":{}}}],["out",{"_index":3081,"title":{},"body":{"license.html":{}}}],["output",{"_index":1493,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["override",{"_index":1212,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["overview",{"_index":3085,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":172,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["p.configure",{"_index":1581,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.encode(params[p.name",{"_index":1578,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.name",{"_index":1574,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.serialize(params[p.name",{"_index":1577,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.startswith(application_json",{"_index":2628,"title":{},"body":{"classes/ODataResponse.html":{}}}],["package",{"_index":2867,"title":{"dependencies.html":{}},"body":{}}],["paging",{"_index":2333,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["param",{"_index":77,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parameter",{"_index":108,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["parameter.collection",{"_index":1546,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.nullable",{"_index":1544,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.type",{"_index":1542,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameters",{"_index":177,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["parameters(value",{"_index":2206,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["parameters.reduce",{"_index":1576,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["params",{"_index":19,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["params[p.name",{"_index":1575,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parent",{"_index":1847,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parent.children.push(this",{"_index":1886,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parentelement",{"_index":884,"title":{},"body":{"classes/Field-1.html":{}}}],["parentelement.children",{"_index":889,"title":{},"body":{"classes/Field-1.html":{}}}],["parse",{"_index":873,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser",{"_index":99,"title":{"interfaces/Parser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parser.deserialize(value",{"_index":1800,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser.parsefromstring(xml",{"_index":834,"title":{},"body":{"classes/Field-1.html":{}}}],["parser.serialize(value",{"_index":1803,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype",{"_index":1514,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["parserfortype(this.base",{"_index":1885,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype(this.return.type",{"_index":1579,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parserfortype(this.type",{"_index":1554,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["parseroptions",{"_index":1547,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["parseroptions?.stringasenum",{"_index":1980,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["parsers",{"_index":130,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["part1",{"_index":1087,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["part2",{"_index":2297,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["partial",{"_index":1679,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["particular",{"_index":3066,"title":{},"body":{"license.html":{}}}],["partner",{"_index":586,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field-1.html":{}}}],["patch",{"_index":1220,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["patch'].indexof(this._method",{"_index":2523,"title":{},"body":{"classes/ODataRequest.html":{}}}],["patch(attrs",{"_index":2813,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["path",{"_index":27,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/Field-1.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["path(value",{"_index":2199,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["path.slice(1",{"_index":2134,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.startswith(path_separator",{"_index":2133,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path_separator",{"_index":2123,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparams",{"_index":2098,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["pathandparams(escape",{"_index":2115,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["paths",{"_index":2146,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames",{"_index":52,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["pathsegmentnames.entityset",{"_index":1395,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.function",{"_index":2129,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.navigationproperty",{"_index":2173,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.property",{"_index":2174,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder",{"_index":2127,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder(segment",{"_index":2142,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathwithparams",{"_index":2431,"title":{},"body":{"classes/ODataRequest.html":{}}}],["path}?${this._params",{"_index":2563,"title":{},"body":{"classes/ODataRequest.html":{}}}],["pattern",{"_index":284,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["payload",{"_index":114,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["people",{"_index":2976,"title":{},"body":{"index.html":{}}}],["people.fetch",{"_index":2990,"title":{},"body":{"index.html":{}}}],["peopleservice",{"_index":2975,"title":{},"body":{"index.html":{}}}],["peopleservice.entities",{"_index":2978,"title":{},"body":{"index.html":{}}}],["permission",{"_index":3024,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":137,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["permit",{"_index":3046,"title":{},"body":{"license.html":{}}}],["person",{"_index":3029,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3047,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":1728,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["please",{"_index":2911,"title":{},"body":{"index.html":{}}}],["point",{"_index":331,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["policy",{"_index":1056,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataParserOptions.html":{}}}],["polygon",{"_index":334,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["portions",{"_index":3056,"title":{},"body":{"license.html":{}}}],["post",{"_index":1219,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["post'].indexof(this._method",{"_index":2532,"title":{},"body":{"classes/ODataRequest.html":{}}}],["precision",{"_index":161,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field-1.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["predicate",{"_index":948,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["predicate(this",{"_index":1867,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["prefer",{"_index":20,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["prefer.length",{"_index":2534,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push",{"_index":2528,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.continue",{"_index":2533,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxpagesize",{"_index":2526,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`return=${this.api.options.prefer?.return",{"_index":2524,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefix",{"_index":206,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["prefix}/${name",{"_index":226,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["pretty",{"_index":1492,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["primitive",{"_index":2268,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["private",{"_index":49,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":2913,"title":{},"body":{"index.html":{}}}],["projects/.../builder.ts",{"_index":2890,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../durations.ts",{"_index":3091,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../expressions.ts",{"_index":3090,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../helper.ts",{"_index":3103,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../metadata.ts",{"_index":2885,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../options.ts",{"_index":2887,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../resource.ts",{"_index":3092,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../segments.ts",{"_index":3112,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../structured",{"_index":3099,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../syntax.ts",{"_index":3097,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":2888,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":11,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["property",{"_index":57,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["property(name",{"_index":1024,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["property.enum",{"_index":1989,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["property.ts",{"_index":582,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["property.ts:1",{"_index":670,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:14",{"_index":616,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:15",{"_index":617,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:16",{"_index":618,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:17",{"_index":620,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:18",{"_index":619,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:19",{"_index":615,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:25",{"_index":590,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:3",{"_index":671,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:30",{"_index":593,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:31",{"_index":591,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:32",{"_index":594,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:33",{"_index":592,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:39",{"_index":629,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:4",{"_index":673,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:40",{"_index":630,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:43",{"_index":604,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:44",{"_index":605,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:5",{"_index":672,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:9",{"_index":614,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["propertyref",{"_index":768,"title":{},"body":{"classes/Field-1.html":{}}}],["propertyrefs",{"_index":508,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["protected",{"_index":245,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["protocol",{"_index":1088,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["protocol/odata",{"_index":1083,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["provide",{"_index":2073,"title":{},"body":{"modules/ODataModule.html":{}}}],["provided",{"_index":3057,"title":{},"body":{"license.html":{}}}],["providers",{"_index":2056,"title":{},"body":{"modules/ODataModule.html":{}}}],["proxy",{"_index":220,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["proxyhandler",{"_index":215,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["public",{"_index":48,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":3040,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":3067,"title":{},"body":{"license.html":{}}}],["push",{"_index":2227,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["push(value",{"_index":2247,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["put",{"_index":428,"title":{},"body":{"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{}}}],["put(key",{"_index":113,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["put(name",{"_index":1373,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse",{"_index":1346,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse(req",{"_index":1375,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["q.apply(options",{"_index":1163,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["q.expand",{"_index":2979,"title":{},"body":{"index.html":{}}}],["q.filter",{"_index":2961,"title":{},"body":{"index.html":{}}}],["q.filter().clear",{"_index":2974,"title":{},"body":{"index.html":{}}}],["q.filter().push",{"_index":2969,"title":{},"body":{"index.html":{}}}],["qualifier",{"_index":470,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlTerm.html":{},"classes/Field-1.html":{}}}],["queries",{"_index":2943,"title":{},"body":{"index.html":{}}}],["query",{"_index":109,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["query((q",{"_index":2960,"title":{},"body":{"index.html":{}}}],["query.expand",{"_index":2344,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.filter",{"_index":2350,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.orderby",{"_index":2352,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.search",{"_index":2348,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.select",{"_index":2342,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.transform",{"_index":2346,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["querycustomtype",{"_index":199,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["querycustomtypes",{"_index":2889,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["querying",{"_index":2908,"title":{},"body":{"index.html":{}}}],["queryoptionnames",{"_index":26,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["queryoptionnames.compute",{"_index":2308,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.expand",{"_index":2384,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.filter",{"_index":2319,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.format",{"_index":2385,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.orderby",{"_index":2325,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.search",{"_index":2379,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.select",{"_index":2378,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skip",{"_index":2382,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skiptoken",{"_index":2383,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.top",{"_index":2381,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.transform",{"_index":2380,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptions",{"_index":3115,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["queryparams",{"_index":2560,"title":{},"body":{"classes/ODataRequest.html":{}}}],["r",{"_index":1137,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSingletonService.html":{}}}],["r.ismutate",{"_index":1443,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["r.request",{"_index":1254,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["range",{"_index":1834,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw",{"_index":1752,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"miscellaneous/enumerations.html":{}}}],["raw(`'${serialized",{"_index":1986,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(json.stringify(this.serialize(value",{"_index":1884,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw(key",{"_index":2139,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["raw(serialized",{"_index":1987,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["readlink",{"_index":1011,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["readonly",{"_index":744,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["reduce",{"_index":1392,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["reduce((acc",{"_index":1927,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["reference",{"_index":59,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["reference.ts",{"_index":563,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["reference.ts:14",{"_index":565,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:15",{"_index":566,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:18",{"_index":575,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:20",{"_index":578,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:21",{"_index":576,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:22",{"_index":577,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:3",{"_index":624,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:5",{"_index":627,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:6",{"_index":626,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:7",{"_index":625,"title":{},"body":{"classes/CsdlReference.html":{}}}],["referenced",{"_index":166,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referencedproperty",{"_index":164,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field-1.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["references",{"_index":829,"title":{},"body":{"classes/Field-1.html":{}}}],["referential",{"_index":165,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referentialconstraint",{"_index":771,"title":{},"body":{"classes/Field-1.html":{}}}],["referentialconstraints",{"_index":587,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["referentials",{"_index":163,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["reg",{"_index":960,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["reg.test(a.term",{"_index":964,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["regexp",{"_index":939,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["regexp(`^${term",{"_index":962,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["region",{"_index":119,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["related",{"_index":2912,"title":{},"body":{"index.html":{}}}],["relative",{"_index":1214,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["remove",{"_index":1413,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["remove(...names",{"_index":2410,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(names",{"_index":2373,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(value",{"_index":2249,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["removed",{"_index":2894,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["render",{"_index":203,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(field",{"_index":253,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(left",{"_index":347,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(right",{"_index":351,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.group",{"_index":391,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(undefined",{"_index":892,"title":{},"body":{"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{}}}],["render(v",{"_index":255,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value(syntax",{"_index":239,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value.render",{"_index":242,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["renderable",{"_index":202,"title":{"interfaces/Renderable.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["replace(/\\;/g",{"_index":2632,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reportprogress",{"_index":2427,"title":{},"body":{"classes/ODataRequest.html":{}}}],["representation",{"_index":87,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataParserOptions.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["req",{"_index":1268,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{}}}],["req.api",{"_index":1269,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["req.fetchpolicy",{"_index":1430,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isbatch",{"_index":1440,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isfetch",{"_index":1426,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.ismutate",{"_index":1428,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.observe",{"_index":1273,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.onload(chunk.slice(1",{"_index":1332,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.resource",{"_index":1441,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponse.html":{}}}],["req.resource.clonesegments",{"_index":1390,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["request",{"_index":102,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["requester",{"_index":1264,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests",{"_index":1252,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["requests[index",{"_index":1330,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["require",{"_index":1738,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["required",{"_index":1763,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["res",{"_index":1216,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{}}}],["res$.pipe",{"_index":1435,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res$.pipe(startwith(cached",{"_index":1439,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.body",{"_index":2605,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.context",{"_index":1397,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.destroy(options",{"_index":1725,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.haskey",{"_index":1720,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.headers",{"_index":2606,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.join(newline",{"_index":1225,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.length",{"_index":1315,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.modify(attrs",{"_index":1724,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.options.cacheability",{"_index":1437,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.options.maxage",{"_index":2029,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.push",{"_index":1303,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${batch",{"_index":1312,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${batchboundary",{"_index":1305,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${changesetboundary",{"_index":1309,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_id",{"_index":1311,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_transfer_encoding",{"_index":1310,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_type",{"_index":1221,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${newline}${json.stringify(batch.request.body",{"_index":1314,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(newline",{"_index":1308,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.status",{"_index":2607,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.statustext",{"_index":2608,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.tojson",{"_index":2050,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.update(attrs",{"_index":1723,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.url",{"_index":2609,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reset",{"_index":3121,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resolve",{"_index":2703,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["resolvekey(value",{"_index":1889,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["resource",{"_index":1132,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["resource.call(params",{"_index":1164,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.fetch",{"_index":1165,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.query((q",{"_index":1162,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resourceparams",{"_index":2497,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$expand",{"_index":2543,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$select",{"_index":2541,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourcepath",{"_index":2496,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resources",{"_index":1160,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["resources/query",{"_index":1753,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["response",{"_index":1065,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["response.body.split(newline_regexp",{"_index":1325,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.headers.get(content_type",{"_index":1320,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsejson",{"_index":2040,"title":{"interfaces/ResponseJson.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["responseoptions",{"_index":93,"title":{"interfaces/ResponseOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["responses",{"_index":1209,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsetype",{"_index":1134,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["restore",{"_index":1283,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["restriction",{"_index":3036,"title":{},"body":{"license.html":{}}}],["result",{"_index":1261,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{}}}],["result.params",{"_index":2148,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["result.paths.join(path_separator",{"_index":2147,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["results",{"_index":181,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":86,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["returns",{"_index":194,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["returntype",{"_index":441,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field-1.html":{}}}],["right",{"_index":346,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rights",{"_index":3038,"title":{},"body":{"license.html":{}}}],["root",{"_index":2935,"title":{},"body":{"index.html":{}}}],["round",{"_index":190,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["round(value",{"_index":197,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rxjs",{"_index":35,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1384,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["s",{"_index":1152,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataSingletonService.html":{}}}],["s.key",{"_index":2158,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.name",{"_index":1394,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.parameters",{"_index":2166,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.path",{"_index":1396,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.type",{"_index":2151,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s1",{"_index":279,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["s2",{"_index":277,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["same",{"_index":1272,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["save",{"_index":1669,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["save(attrs",{"_index":1698,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["scale",{"_index":162,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field-1.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["schema",{"_index":735,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{}}}],["schema.alias",{"_index":1510,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.contentencoding",{"_index":1826,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.default",{"_index":1839,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.format",{"_index":1819,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.iscompoundkey",{"_index":1736,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.maxlength",{"_index":1828,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.namespace",{"_index":1509,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.org",{"_index":1808,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.org/draft",{"_index":1913,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.pattern",{"_index":1820,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.properties",{"_index":1921,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.required",{"_index":1929,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.resolvekey(attrs",{"_index":1741,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.ts",{"_index":640,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:13",{"_index":650,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:15",{"_index":659,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:16",{"_index":652,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:17",{"_index":657,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:18",{"_index":654,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:19",{"_index":656,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:20",{"_index":658,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:21",{"_index":651,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:22",{"_index":655,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:23",{"_index":661,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:24",{"_index":660,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:25",{"_index":653,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.type",{"_index":1818,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schemaconfig",{"_index":132,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":131,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["scope",{"_index":1347,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["scope(req",{"_index":1377,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["scope.length",{"_index":1416,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["scope.push(name",{"_index":1415,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["search",{"_index":68,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["search(opts",{"_index":2316,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["second",{"_index":706,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["second(value",{"_index":311,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["segment",{"_index":2106,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segment.clearkey",{"_index":2155,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key",{"_index":2135,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key(key",{"_index":2156,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.name",{"_index":2128,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.parameters",{"_index":2130,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.path",{"_index":2132,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler",{"_index":2125,"title":{"classes/SegmentHandler.html":{}},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segmenthandler(s",{"_index":2176,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler(segment",{"_index":2181,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments",{"_index":1256,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segments(undefined",{"_index":2117,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.add(pathsegmentnames.batch",{"_index":1257,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["segments.filter",{"_index":2172,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.foreach((segment",{"_index":2153,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.length",{"_index":2177,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.map((s",{"_index":2157,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.segments",{"_index":1391,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["segments[0",{"_index":2178,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments[segments.length",{"_index":2179,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["select",{"_index":64,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["select(opts",{"_index":2300,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["selector",{"_index":2933,"title":{},"body":{"index.html":{}}}],["selecttype",{"_index":3116,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sell",{"_index":3044,"title":{},"body":{"license.html":{}}}],["send",{"_index":1052,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["sent",{"_index":1059,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["serialization",{"_index":1477,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["serialize",{"_index":105,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialize(params",{"_index":1536,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["serialize(value",{"_index":1475,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["serialized",{"_index":1478,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["server",{"_index":1240,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["service",{"_index":179,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["servicerooturl",{"_index":122,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["services/index",{"_index":2065,"title":{},"body":{"modules/ODataModule.html":{}}}],["sessionstorage",{"_index":2041,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["set",{"_index":526,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/Field-1.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{}}}],["set(path",{"_index":2251,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["set.ts",{"_index":527,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{}}}],["set.ts:104",{"_index":1701,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:121",{"_index":1697,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:137",{"_index":1683,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:154",{"_index":1695,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:174",{"_index":1699,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:20",{"_index":1684,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:3",{"_index":530,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:37",{"_index":1676,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:38",{"_index":1677,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:49",{"_index":1703,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:5",{"_index":533,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:57",{"_index":1689,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:6",{"_index":531,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:66",{"_index":1691,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:7",{"_index":534,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:78",{"_index":1693,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:8",{"_index":532,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:90",{"_index":1680,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["setcache",{"_index":2666,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setcache(cachecontrol",{"_index":2679,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures",{"_index":2667,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures(features",{"_index":2681,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation",{"_index":2668,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation(location",{"_index":2683,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["settings",{"_index":2067,"title":{},"body":{"modules/ODataModule.html":{}}}],["setversion",{"_index":2669,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setversion(version",{"_index":2685,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["shall",{"_index":3053,"title":{},"body":{"license.html":{}}}],["shortcuts",{"_index":1726,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["singleton",{"_index":56,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/Field-1.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleton(singletonname",{"_index":2801,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singleton.ts",{"_index":664,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:3",{"_index":666,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:5",{"_index":667,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:6",{"_index":669,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:7",{"_index":668,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singletonname",{"_index":2803,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singletons",{"_index":516,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["singletonschema",{"_index":2809,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["skip",{"_index":72,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skip(opts",{"_index":2329,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["skiptoken",{"_index":73,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skiptoken(opts",{"_index":2331,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["software",{"_index":3032,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["specific",{"_index":1739,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["specified",{"_index":878,"title":{},"body":{"classes/Field-1.html":{}}}],["split",{"_index":2626,"title":{},"body":{"classes/ODataResponse.html":{}}}],["srid",{"_index":457,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field-1.html":{}}}],["standardaggregatemethods",{"_index":2891,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":271,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["started",{"_index":2905,"title":{"index.html":{},"license.html":{}},"body":{}}],["started/advanced",{"_index":1247,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataSingletonService.html":{}}}],["startindex",{"_index":1329,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["startswith",{"_index":2847,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["startswith(field",{"_index":268,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["startwith",{"_index":1382,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["states",{"_index":2965,"title":{},"body":{"index.html":{}}}],["static",{"_index":217,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["status",{"_index":1176,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["status.code",{"_index":1230,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["status.message",{"_index":1232,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["status.text",{"_index":1243,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["statustext",{"_index":1231,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["storage",{"_index":2033,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["store",{"_index":50,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store'].indexof(directive",{"_index":2710,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["streaming",{"_index":81,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["string",{"_index":78,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["stringandcollectionfunctions",{"_index":257,"title":{"classes/StringAndCollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["stringasenum",{"_index":76,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["stringfunctions",{"_index":282,"title":{"classes/StringFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["strings",{"_index":1204,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.titlecase(this.name",{"_index":1861,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.uniqueid(batch_prefix",{"_index":1285,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strings.uniqueid(changeset_prefix",{"_index":1306,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strip",{"_index":1064,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["stripmetadata",{"_index":21,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structural",{"_index":503,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{}}}],["structured",{"_index":486,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field-1.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["structured.fields.find((f",{"_index":1894,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["structuredtype",{"_index":1767,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["structuredtypeconfig",{"_index":144,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldconfig",{"_index":98,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldoptions",{"_index":96,"title":{"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structuredtypeschema",{"_index":1640,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["strucuturedtype",{"_index":1562,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["styleurls",{"_index":2938,"title":{},"body":{"index.html":{}}}],["sub",{"_index":420,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["sub(left",{"_index":379,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["subject",{"_index":1168,"title":{},"body":{"classes/ODataBatchRequest.html":{},"license.html":{}}}],["sublicense",{"_index":3042,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":2951,"title":{},"body":{"index.html":{}}}],["subscribe((airports",{"_index":2952,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":3055,"title":{},"body":{"license.html":{}}}],["substring",{"_index":2848,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["substring(field",{"_index":270,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sum",{"_index":2899,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["super",{"_index":1211,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["super(annotationlist",{"_index":471,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["super(config",{"_index":1501,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["super(field",{"_index":1768,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["super(init",{"_index":2604,"title":{},"body":{"classes/ODataResponse.html":{}}}],["super(name",{"_index":504,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{}}}],["super.flush",{"_index":2049,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["support",{"_index":3000,"title":{},"body":{"index.html":{}}}],["supported",{"_index":882,"title":{},"body":{"classes/Field-1.html":{}}}],["switch",{"_index":1267,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["switchmap",{"_index":2957,"title":{},"body":{"index.html":{}}}],["symbol",{"_index":223,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["symbol.tostringtag",{"_index":249,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sync",{"_index":3123,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["syntax",{"_index":414,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["t",{"_index":104,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["table",{"_index":2919,"title":{},"body":{"index.html":{}}}],["tag",{"_index":741,"title":{},"body":{"classes/Field-1.html":{},"miscellaneous/enumerations.html":{}}}],["tag_action",{"_index":776,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_action_import",{"_index":782,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_annotation",{"_index":757,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_annotations",{"_index":756,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_complex_type",{"_index":762,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_data_services",{"_index":747,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_edmx",{"_index":745,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_entity_container",{"_index":777,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_entity_set",{"_index":778,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_entity_type",{"_index":764,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_enum_type",{"_index":759,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_function",{"_index":773,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_function_import",{"_index":780,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_include",{"_index":751,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_include_annotations",{"_index":753,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_key",{"_index":766,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_member",{"_index":761,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_navigation_property",{"_index":769,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_navigation_property_binding",{"_index":784,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_on_delete",{"_index":772,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_parameter",{"_index":775,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_property",{"_index":765,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_property_ref",{"_index":767,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_reference",{"_index":749,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_referential_constraint",{"_index":770,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_return_type",{"_index":774,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_schema",{"_index":758,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_singleton",{"_index":779,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_term",{"_index":755,"title":{},"body":{"classes/Field-1.html":{}}}],["tag_type_definition",{"_index":785,"title":{},"body":{"classes/Field-1.html":{}}}],["tags",{"_index":743,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["tags(req",{"_index":1379,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["tags.length",{"_index":1421,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push",{"_index":1399,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push(context.type",{"_index":1403,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.some((t",{"_index":1422,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap",{"_index":1383,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap((res",{"_index":1436,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["target",{"_index":224,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlTerm.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["targetnamespace",{"_index":573,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field-1.html":{}}}],["templateurl",{"_index":2936,"title":{},"body":{"index.html":{}}}],["term",{"_index":134,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field-1.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["termnamespace",{"_index":572,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field-1.html":{}}}],["terms",{"_index":647,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["text",{"_index":1241,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["text/plain",{"_index":2521,"title":{},"body":{"classes/ODataRequest.html":{}}}],["text/xml",{"_index":835,"title":{},"body":{"classes/Field-1.html":{}}}],["text_plain",{"_index":2475,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._annotations",{"_index":2647,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._body",{"_index":2487,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._context",{"_index":2643,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._functions",{"_index":1027,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._headers",{"_index":2536,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._method",{"_index":2476,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._options",{"_index":2621,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setcache(cachecontrol",{"_index":2639,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setfeatures(features",{"_index":2629,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setlocation(location",{"_index":2636,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setversion(version",{"_index":2633,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._params",{"_index":2548,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.has(`$${name",{"_index":2553,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.keys().length",{"_index":2562,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path",{"_index":2499,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path.endswith($batch",{"_index":2566,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}/${$query",{"_index":2555,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._payload",{"_index":2640,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._properties",{"_index":1022,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._querybody",{"_index":2550,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._requests",{"_index":1286,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.length",{"_index":1284,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.map((r",{"_index":1253,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.push(new",{"_index":1278,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests[this._requests.length",{"_index":1280,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responsetype",{"_index":2485,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._segments",{"_index":2140,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.map((s",{"_index":2163,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.push(segment",{"_index":2180,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.reduce",{"_index":2141,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments].reverse().find(predicate",{"_index":2171,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.accept",{"_index":1110,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.alias",{"_index":399,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.annotatedvalue(computed",{"_index":1791,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(long_description",{"_index":1916,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(term",{"_index":1860,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["this.annotations",{"_index":955,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.annotations.find(predicate",{"_index":959,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.api",{"_index":1270,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["this.api.findentitysetbyname(this.name",{"_index":1713,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.api.findentitysetfortype(this.parser.return.type)?.name",{"_index":1513,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.api.findstructuredtypefortype(bindingtype",{"_index":2764,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(callablebindingtype",{"_index":2770,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(this.apinameorentitytype",{"_index":1656,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["this.api.options",{"_index":1516,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.api.options.accept?.exponentialdecimals",{"_index":2516,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.ieee754compatible",{"_index":2511,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.metadata",{"_index":2508,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.streaming",{"_index":2514,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.bodyqueryoptions",{"_index":2495,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifmatch",{"_index":2502,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifnonematch",{"_index":2505,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.fetchpolicy",{"_index":2493,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.headers",{"_index":2537,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.params",{"_index":2546,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.continueonerror",{"_index":2531,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.includeannotations",{"_index":2527,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.maxpagesize",{"_index":2525,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.return",{"_index":2522,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.stripmetadata",{"_index":2658,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.api.options.withcredentials",{"_index":2491,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.request",{"_index":1266,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.request(request).subscribe((response",{"_index":1292,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.servicerooturl}${this._path",{"_index":2564,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.servicerooturl}${this.pathwithparams",{"_index":2565,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.apinameorentitytype",{"_index":1655,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.assertarray",{"_index":2280,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().filter((v",{"_index":2271,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().push(value",{"_index":2270,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray()[index",{"_index":2276,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(false",{"_index":2286,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(true",{"_index":2284,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.base",{"_index":1848,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.body",{"_index":2615,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.body)['d",{"_index":2642,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.bodyqueryoptions",{"_index":1108,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.length",{"_index":2551,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.map((name",{"_index":2558,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.some((name",{"_index":2552,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bound",{"_index":1504,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.buildentry(payload",{"_index":1406,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey([...(scope",{"_index":1407,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey(scope",{"_index":1417,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.cacheability",{"_index":2711,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.callables",{"_index":2750,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.find((c",{"_index":2765,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.foreach((callable",{"_index":2778,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.checkversion(document",{"_index":836,"title":{},"body":{"classes/Field-1.html":{}}}],["this.children",{"_index":1869,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.client",{"_index":2805,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["this.client.apifor(this.apinameorentitytype",{"_index":1161,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["this.client.entityset(this.name",{"_index":1707,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.client.singleton(this.name",{"_index":2819,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.collection",{"_index":1545,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.complete",{"_index":1235,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.composable",{"_index":1506,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.containers",{"_index":2753,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.containers.reduce",{"_index":2758,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.context",{"_index":1001,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.context?.entityset",{"_index":995,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.context?.type",{"_index":997,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.create(attrs",{"_index":1732,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.default",{"_index":1774,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.deleterefby",{"_index":1116,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.deserialize(this.default",{"_index":1806,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.entities",{"_index":2747,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities().create(attrs",{"_index":1718,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().entity(key",{"_index":1708,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetch(options",{"_index":1716,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchall(options",{"_index":1714,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities.find((e",{"_index":2762,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.foreach((config",{"_index":2776,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entity",{"_index":2821,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.entity(key",{"_index":1719,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entity(key).fetch(options",{"_index":1717,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entitysetpath",{"_index":1502,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.entitysets",{"_index":1634,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["this.entitysets.find((e",{"_index":2772,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entitytype",{"_index":1657,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.entries",{"_index":1389,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.entries.delete(k",{"_index":1424,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.foreach((entry",{"_index":1418,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.get(key",{"_index":1410,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.set(key",{"_index":1408,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.enum().validate(value",{"_index":1790,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.enums",{"_index":2744,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.find((e",{"_index":2760,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.foreach((enu",{"_index":2774,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.error",{"_index":1239,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.error(res",{"_index":1245,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.expand(query.expand",{"_index":2345,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.factory.entityset",{"_index":2945,"title":{},"body":{"index.html":{}}}],["this.fetchone(key",{"_index":1727,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.fetchpolicy",{"_index":1106,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["this.field",{"_index":392,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.fields",{"_index":1856,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["this.fields().find((f",{"_index":1963,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.fields().map(mapper",{"_index":1965,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.fields.filter",{"_index":1875,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields.filter((f",{"_index":1935,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields.foreach((f",{"_index":1887,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields.map((f",{"_index":1990,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.field}/${render(this.value",{"_index":394,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.filter(query.filter",{"_index":2351,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.find((s",{"_index":2182,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.findannotation((a",{"_index":963,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.findchildparser(predicate",{"_index":1873,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.flags",{"_index":1971,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.forget",{"_index":1409,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.functions[name",{"_index":1030,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.get(req.pathwithparams",{"_index":2030,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.getfieldvaluebyattribute",{"_index":838,"title":{},"body":{"classes/Field-1.html":{}}}],["this.getobjects",{"_index":843,"title":{},"body":{"classes/Field-1.html":{}}}],["this.getobjects(dataservices",{"_index":857,"title":{},"body":{"classes/Field-1.html":{}}}],["this.getresponse(req",{"_index":1432,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.group.tojson",{"_index":390,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.handlefetch(req",{"_index":1427,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.handlemutate(req",{"_index":1429,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.headers",{"_index":1100,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{}}}],["this.headers.get(cache_control",{"_index":2638,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(content_type",{"_index":2623,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(header",{"_index":2631,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(key",{"_index":2649,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(location_header",{"_index":2635,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.getall(name",{"_index":2617,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.helper",{"_index":1000,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.attributes(data",{"_index":994,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.count(this.annotations",{"_index":1033,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.deltalink(this.annotations",{"_index":1037,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.editlink(this.annotations",{"_index":1014,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entities(data",{"_index":1032,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entity(data",{"_index":1004,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.etag(this.annotations",{"_index":1006,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.functions(this.annotations",{"_index":1028,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.id(this.annotations",{"_index":1005,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediacontenttype(this.annotations",{"_index":1020,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaeditlink(this.annotations",{"_index":1018,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaetag(this.annotations",{"_index":1008,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediareadlink(this.annotations",{"_index":1016,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.metadataetag(this.annotations",{"_index":1010,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.nextlink(this.annotations",{"_index":1035,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.properties(this.annotations",{"_index":1023,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.property(data",{"_index":1002,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.readlink(this.annotations",{"_index":1012,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.type(this.annotations",{"_index":996,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.ieee754compatible",{"_index":2699,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.isenumtype",{"_index":1558,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.isexpired(entry",{"_index":1411,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.isstructuredtype",{"_index":1561,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.istypeof(schema.type",{"_index":2793,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.istypeof(type",{"_index":1863,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.keys",{"_index":1853,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.keys.length",{"_index":1892,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.location",{"_index":2704,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxage",{"_index":2709,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxlength",{"_index":1776,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.members",{"_index":1960,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.metadata",{"_index":2696,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.modify(key",{"_index":1744,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.n",{"_index":2265,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.name",{"_index":250,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.namespace",{"_index":1564,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["this.namespace}.${this.name",{"_index":1570,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.namespace}.${this.name}'${name",{"_index":1984,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.namespace}.${this.name}'${names.join",{"_index":1981,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.name}(${params.join",{"_index":256,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.navigation",{"_index":1780,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.next(odataresponse.fromhttpresponse(this.request",{"_index":1234,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.nextlink",{"_index":1038,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.normalize",{"_index":252,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.nullable",{"_index":1543,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.o[this.n",{"_index":2266,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n].filter((v",{"_index":2289,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n].length",{"_index":2274,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n][0",{"_index":2275,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.observe",{"_index":2483,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.odata",{"_index":2986,"title":{},"body":{"index.html":{}}}],["this.odata.fromjson(json",{"_index":2973,"title":{},"body":{"index.html":{}}}],["this.op",{"_index":344,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.open",{"_index":1850,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.option(name).clear",{"_index":2412,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options",{"_index":2386,"title":{},"body":{"classes/ODataQueryOptions.html":{},"classes/ODataResponse.html":{}}}],["this.options.expression",{"_index":2307,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.helper.context",{"_index":2644,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.option(queryoptionnames.compute",{"_index":2310,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.format",{"_index":2313,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.search",{"_index":2317,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skip",{"_index":2330,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skiptoken",{"_index":2332,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.top",{"_index":2328,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.expand",{"_index":2303,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.filter",{"_index":2323,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.orderby",{"_index":2326,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.select",{"_index":2301,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.transform",{"_index":2315,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.version",{"_index":2641,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options[k",{"_index":2417,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[key",{"_index":2389,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[name",{"_index":2406,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.compute",{"_index":2397,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.expand",{"_index":2395,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.filter",{"_index":2399,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.orderby",{"_index":2400,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.search",{"_index":2398,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.select",{"_index":2394,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.skip",{"_index":2402,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.skiptoken",{"_index":2403,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.top",{"_index":2401,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.transform",{"_index":2396,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.optionshelper",{"_index":1549,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.op}(${left",{"_index":352,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.orderby(query.orderby",{"_index":2353,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.paging(query",{"_index":2354,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.parameters",{"_index":1567,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.find((p",{"_index":1582,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.foreach((p",{"_index":1580,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.params",{"_index":1098,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.parent",{"_index":1864,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.deserialize(value",{"_index":1874,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.issubtypeof(type",{"_index":1865,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.serialize(value",{"_index":1881,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent?.defaults",{"_index":1905,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent?.resolvekey(value",{"_index":1890,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent?.tojsonschema(options",{"_index":1911,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent?.validate(attrs",{"_index":1934,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parse(parser",{"_index":1801,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser",{"_index":1508,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.binding",{"_index":1520,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.configure",{"_index":1515,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.deserialize(value",{"_index":1517,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.encode(v",{"_index":1553,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.encode(value",{"_index":1519,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.fields",{"_index":1962,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.return",{"_index":1512,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.serialize(v",{"_index":1552,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.serialize(value",{"_index":1518,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.tojsonschema(options",{"_index":1810,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.pathandparams",{"_index":2159,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["this.payload",{"_index":2646,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.precision",{"_index":1782,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.prefer",{"_index":1114,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.properties[name",{"_index":1025,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.property",{"_index":1765,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.put(req.pathwithparams",{"_index":2028,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.putresponse(req",{"_index":1438,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.queries",{"_index":2942,"title":{},"body":{"index.html":{}}}],["this.referencedproperty",{"_index":1766,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.references",{"_index":842,"title":{},"body":{"classes/Field-1.html":{}}}],["this.referentials",{"_index":1771,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.referentials.length",{"_index":1846,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.reportprogress",{"_index":2481,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.request.headers",{"_index":1222,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.method",{"_index":1217,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.pathwithparams",{"_index":1218,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.urlwithparams",{"_index":1233,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.resource",{"_index":2478,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entities",{"_index":2660,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entity",{"_index":2659,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(property",{"_index":2661,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(value",{"_index":2664,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.pathandparams",{"_index":2498,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.resource.serialize(this._body",{"_index":2489,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.restore",{"_index":2043,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.return",{"_index":1565,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.scale",{"_index":1784,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.schema",{"_index":2788,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.alias",{"_index":2791,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.api",{"_index":2789,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.namespace}.${this.name",{"_index":1511,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataSchemaElement.html":{}}}],["this.schemas",{"_index":856,"title":{},"body":{"classes/Field-1.html":{}}}],["this.scope(r",{"_index":1444,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.scope(req",{"_index":2026,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.search(query.search",{"_index":2349,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.segment.key",{"_index":2202,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.name",{"_index":2196,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.parameters",{"_index":2207,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.path",{"_index":2200,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.type",{"_index":2198,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments",{"_index":2149,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.segments.get(pathsegmentnames.action",{"_index":2213,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.entityset",{"_index":2211,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.function",{"_index":2214,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.navigationproperty",{"_index":2217,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.property",{"_index":2216,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.singleton",{"_index":2212,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.keys(values",{"_index":2215,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.select(query.select",{"_index":2343,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.serialize(value",{"_index":1985,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.service",{"_index":1659,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.skip().clear",{"_index":2338,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skip(skip",{"_index":2335,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken().clear",{"_index":2340,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken(skiptoken",{"_index":2334,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.status",{"_index":2618,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.statustext",{"_index":2619,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.storage",{"_index":2042,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storage.setitem",{"_index":2046,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.store",{"_index":2045,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.streaming",{"_index":2698,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.stringasenum",{"_index":1096,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.stripmetadata",{"_index":1104,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.structured().validate(value",{"_index":1789,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtype",{"_index":1769,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtype.keys?.find((k",{"_index":1843,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtypeschema",{"_index":1735,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.tags(req",{"_index":2027,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.term",{"_index":952,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.timeout",{"_index":1388,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.titleize(description",{"_index":1915,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tojson(parser",{"_index":1805,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.top().clear",{"_index":2339,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.top(top",{"_index":2336,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.transform(query.transform",{"_index":2347,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.type",{"_index":1541,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.type.startswith('edm",{"_index":1556,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.update(key",{"_index":1745,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.url",{"_index":2620,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.validate(v",{"_index":1788,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.value",{"_index":393,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values",{"_index":251,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.version",{"_index":837,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.withcredentials",{"_index":1102,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["throw",{"_index":871,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["throwerror",{"_index":1381,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["throwerror(\"can't",{"_index":1742,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["throwerror('no",{"_index":1434,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["throwerror('resource",{"_index":1721,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["throwerror(error",{"_index":1733,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["time",{"_index":707,"title":{},"body":{"classes/DateAndTimeFunctions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["time(value",{"_index":313,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["timeout",{"_index":1336,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["title",{"_index":1489,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["titleize",{"_index":1451,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleize(term",{"_index":1484,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleized",{"_index":1494,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["todo",{"_index":1213,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["tojson",{"_index":208,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tojsonschema",{"_index":1988,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["tojsonschema(options",{"_index":1809,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["tokens",{"_index":2069,"title":{},"body":{"modules/ODataModule.html":{}}}],["tolower",{"_index":2857,"title":{},"body":{"classes/StringFunctions.html":{}}}],["tolower(value",{"_index":286,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tools",{"_index":2409,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["top",{"_index":71,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["top(opts",{"_index":2327,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["toqueryarguments",{"_index":2358,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tort",{"_index":3078,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":207,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totaloffsetminutes",{"_index":708,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totaloffsetminutes(value",{"_index":315,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totalseconds",{"_index":709,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totalseconds(value",{"_index":317,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["toupper",{"_index":2858,"title":{},"body":{"classes/StringFunctions.html":{}}}],["toupper(value",{"_index":288,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["transform",{"_index":69,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["transform(opts",{"_index":2314,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["trim",{"_index":2701,"title":{},"body":{"classes/ODataResponseOptions.html":{},"classes/StringFunctions.html":{}}}],["trim(value",{"_index":290,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["trippin",{"_index":2941,"title":{},"body":{"index.html":{}}}],["trippinconfig",{"_index":2992,"title":{},"body":{"index.html":{}}}],["trippinmodule",{"_index":2993,"title":{},"body":{"index.html":{}}}],["trips",{"_index":2982,"title":{},"body":{"index.html":{}}}],["true",{"_index":247,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["try",{"_index":831,"title":{},"body":{"classes/Field-1.html":{}}}],["tslib",{"_index":2879,"title":{},"body":{"dependencies.html":{}}}],["ttitelize",{"_index":1993,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["ttitelize(term",{"_index":1975,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["tutorial/#batch",{"_index":1248,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#singleton",{"_index":2808,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["type",{"_index":24,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined",{"_index":1495,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["type(value",{"_index":2197,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["type.startswith(this.alias",{"_index":2757,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.startswith(this.namespace",{"_index":2756,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.ts",{"_index":487,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts:1",{"_index":545,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:10",{"_index":540,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:11",{"_index":541,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:111",{"_index":2000,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:12",{"_index":676,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:123",{"_index":2003,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:13",{"_index":674,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:132",{"_index":2006,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:14",{"_index":1968,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:15",{"_index":1967,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:17",{"_index":495,"title":{},"body":{"classes/CsdlComplexType.html":{}}}],["type.ts:19",{"_index":1946,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:23",{"_index":1969,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:27",{"_index":1950,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:3",{"_index":548,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:30",{"_index":536,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:32",{"_index":1997,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:33",{"_index":538,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:34",{"_index":1995,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:35",{"_index":1749,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:36",{"_index":1748,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:37",{"_index":1996,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:38",{"_index":1994,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:39",{"_index":537,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:4",{"_index":547,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:44",{"_index":2418,"title":{},"body":{"classes/ODataReferential.html":{}}}],["type.ts:45",{"_index":580,"title":{},"body":{"classes/CsdlKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{}}}],["type.ts:46",{"_index":581,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:49",{"_index":621,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:5",{"_index":549,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:50",{"_index":622,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:54",{"_index":1955,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:58",{"_index":2004,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:6",{"_index":546,"title":{},"body":{"classes/CsdlEnumType.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:62",{"_index":1998,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:64",{"_index":1947,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:66",{"_index":2001,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:7",{"_index":1945,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:73",{"_index":1999,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:74",{"_index":1959,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:8",{"_index":675,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:84",{"_index":1949,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:9",{"_index":677,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:90",{"_index":2002,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["typealiases",{"_index":3088,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedefinition",{"_index":786,"title":{},"body":{"classes/Field-1.html":{}}}],["typedefinitions",{"_index":648,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["typefunctions",{"_index":324,"title":{"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["typeof",{"_index":238,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types",{"_index":736,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/SegmentHandler.html":{}}}],["types(undefined",{"_index":2121,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["types.isarray(this.o[this.n",{"_index":2269,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(errors",{"_index":1795,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(key",{"_index":1902,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(this.o[this.n",{"_index":2267,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(this.options[key",{"_index":2388,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(this.segment.key",{"_index":2204,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.segment.parameters",{"_index":2209,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(v",{"_index":2290,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(value",{"_index":1910,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["types.isfunction(opts",{"_index":2306,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(data",{"_index":2656,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(payload",{"_index":2662,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(this.o[this.n",{"_index":2278,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(this.payload",{"_index":2645,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(v",{"_index":1895,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["types.isplainobject(value",{"_index":1796,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.rawtype(value",{"_index":2390,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["unchanged",{"_index":2896,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":118,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["underlayingtype",{"_index":690,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["underlyingtype",{"_index":543,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field-1.html":{}}}],["unicode",{"_index":598,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field-1.html":{}}}],["united",{"_index":2964,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1244,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["unpacked",{"_index":3117,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unset",{"_index":2228,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unset(path",{"_index":2254,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unsuccessful",{"_index":1236,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["update",{"_index":1670,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["update(attrs",{"_index":2815,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["update(key",{"_index":1700,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["update/patch",{"_index":1743,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["updating",{"_index":2909,"title":{},"body":{"index.html":{}}}],["uri",{"_index":569,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field-1.html":{}}}],["url",{"_index":107,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["urlwithparams",{"_index":2432,"title":{},"body":{"classes/ODataRequest.html":{}}}],["usage",{"_index":2922,"title":{},"body":{"index.html":{}}}],["use",{"_index":1734,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSchemaElement.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":2075,"title":{},"body":{"modules/ODataModule.html":{}}}],["usevalue",{"_index":2074,"title":{},"body":{"modules/ODataModule.html":{}}}],["using",{"_index":3008,"title":{},"body":{"index.html":{}}}],["utils",{"_index":1754,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"classes/SegmentHandler.html":{}}}],["utils/http",{"_index":1203,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["utils/odata",{"_index":2741,"title":{},"body":{"classes/ODataSchema.html":{}}}],["utils/strings",{"_index":1205,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/types",{"_index":737,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataResponse.html":{}}}],["v",{"_index":1802,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["v4",{"_index":3007,"title":{},"body":{"index.html":{}}}],["v4.0",{"_index":1084,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["v4.01",{"_index":2296,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["v4.01.html#sec_requestingthejsonformat",{"_index":1081,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["v[field.name",{"_index":1896,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["validate",{"_index":1786,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["validate(member",{"_index":2005,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["value",{"_index":60,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["value(v",{"_index":2256,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["value).reduce",{"_index":1977,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["value.length",{"_index":1793,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["value.map((v",{"_index":1551,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["value.render",{"_index":241,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["value.render(aliases",{"_index":2391,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value.tojson",{"_index":2393,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value/s",{"_index":101,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["value[f.name",{"_index":1878,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["values",{"_index":246,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.map((v",{"_index":254,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.push(length",{"_index":273,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values[index",{"_index":2154,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["van",{"_index":3022,"title":{},"body":{"license.html":{}}}],["var",{"_index":1228,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["variables",{"_index":1250,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["version",{"_index":75,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field-1.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["version.replace(/\\;/g",{"_index":2700,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_2_0",{"_index":2689,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_3_0",{"_index":2690,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_4_0",{"_index":738,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["version_4_0].indexof(value",{"_index":2702,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["versions",{"_index":3001,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":3010,"title":{},"body":{"index.html":{}}}],["void",{"_index":116,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["warranties",{"_index":3063,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3058,"title":{},"body":{"license.html":{}}}],["whether",{"_index":3076,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":3014,"title":{},"body":{"index.html":{}}}],["window.addeventlistener('beforeunload",{"_index":2044,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["withcount",{"_index":1715,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["withcredentials",{"_index":22,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["without",{"_index":1722,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"license.html":{}}}],["works",{"_index":2995,"title":{},"body":{"index.html":{}}}],["www.odata.org/getting",{"_index":2807,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["x",{"_index":210,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["xssi_prefix",{"_index":1202,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["year",{"_index":710,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["year(value",{"_index":319,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["yes",{"_index":422,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/GeoFunctions.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/TypeFunctions.html":{}}}],["zone.js",{"_index":2881,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiOptions.html":{"url":"interfaces/ApiOptions.html","title":"interface - ApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Options\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accept\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodyQueryOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            etag\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetchPolicy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stripMetadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accept:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodyQueryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodyQueryOptions:         QueryOptionNames[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueryOptionNames[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etag\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etag:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetchPolicy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetchPolicy:         FetchPolicy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FetchPolicy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefer:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stripMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stripMetadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticFunctions.html":{"url":"classes/ArithmeticFunctions.html","title":"class - ArithmeticFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ceiling\n                            \n                            \n                                floor\n                            \n                            \n                                round\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ceiling\n                        \n                    \n                \n            \n            \n                \nceiling(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:233\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n            \n                \nfloor(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:236\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        round\n                        \n                    \n                \n            \n            \n                \nround(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticOperators.html":{"url":"classes/ArithmeticOperators.html","title":"class - ArithmeticOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                div\n                            \n                            \n                                mod\n                            \n                            \n                                mul\n                            \n                            \n                                neg\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:366\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n            \n                \ndiv(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:375\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mod\n                        \n                    \n                \n            \n            \n                \nmod(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:378\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mul\n                        \n                    \n                \n            \n            \n                \nmul(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:372\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neg\n                        \n                    \n                \n            \n            \n                \nneg(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:381\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n            \n                \nsub(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:369\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cache.html":{"url":"interfaces/Cache.html","title":"interface - Cache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:118\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, payload: T, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:117\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionFunctions.html":{"url":"classes/CollectionFunctions.html","title":"class - CollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasSubsequence\n                            \n                            \n                                hasSubset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubsequence\n                        \n                    \n                \n            \n            \n                \nhasSubsequence(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubset\n                        \n                    \n                \n            \n            \n                \nhasSubset(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConditionalFunctions.html":{"url":"classes/ConditionalFunctions.html","title":"class - ConditionalFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConditionalFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                case\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        case\n                        \n                    \n                \n            \n            \n                \ncase(condition: T | string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:267\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAction.html":{"url":"classes/CsdlAction.html","title":"class - CsdlAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                    Optional\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType?: CsdlReturnType, isBound?: boolean, entitySetPath?: string, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlActionImport.html":{"url":"classes/CsdlActionImport.html","title":"class - CsdlActionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlActionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, action: string, entitySet?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotable.html":{"url":"classes/CsdlAnnotable.html","title":"class - CsdlAnnotable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotation.html":{"url":"classes/CsdlAnnotation.html","title":"class - CsdlAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(term: string, qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotations.html":{"url":"classes/CsdlAnnotations.html","title":"class - CsdlAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: string, annotationList: CsdlAnnotation[], qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlComplexType.html":{"url":"classes/CsdlComplexType.html","title":"class - CsdlComplexType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlComplexType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityContainer.html":{"url":"classes/CsdlEntityContainer.html","title":"class - CsdlEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actionImports\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySets\n                            \n                            \n                                    Public\n                                    Optional\n                                extend\n                            \n                            \n                                    Public\n                                    Optional\n                                functionImports\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                singletons\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, extend?: string, entitySets?: CsdlEntitySet[], singletons?: CsdlSingleton[], functionImports?: CsdlFunctionImport[], actionImports?: CsdlActionImport[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        extend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySets\n                                                  \n                                                        \n                                                                        CsdlEntitySet[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        singletons\n                                                  \n                                                        \n                                                                        CsdlSingleton[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionImports\n                                                  \n                                                        \n                                                                    CsdlFunctionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionImports\n                                                  \n                                                        \n                                                                    CsdlActionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlActionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        extend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunctionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        singletons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlSingleton[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n  constructor(\n    public name: string,\n    public extend?: string,\n    public entitySets?: CsdlEntitySet[],\n    public singletons?: CsdlSingleton[],\n    public functionImports?: CsdlFunctionImport[],\n    public actionImports?: CsdlActionImport[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntitySet.html":{"url":"classes/CsdlEntitySet.html","title":"class - CsdlEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                entityType\n                            \n                            \n                                    Public\n                                    Optional\n                                includeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBinding\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, entityType: string, navigationPropertyBinding?: CsdlNavigationPropertyBinding[], includeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBinding\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n  constructor(\n    public name: string,\n    public entityType: string,\n    public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n    public includeInServiceDocument?: boolean\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityType.html":{"url":"classes/CsdlEntityType.html","title":"class - CsdlEntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                hasStream\n                            \n                            \n                                    Public\n                                    Optional\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, key?: CsdlKey, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean, hasStream?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        CsdlKey\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        hasStream\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        hasStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlKey\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumMember.html":{"url":"classes/CsdlEnumMember.html","title":"class - CsdlEnumMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value?: number)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumType.html":{"url":"classes/CsdlEnumType.html","title":"class - CsdlEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                isFlags\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                underlyingType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, members: CsdlEnumMember[], underlyingType?: string, isFlags?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        members\n                                                  \n                                                        \n                                                                        CsdlEnumMember[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlyingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isFlags\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isFlags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumMember[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        underlyingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunction.html":{"url":"classes/CsdlFunction.html","title":"class - CsdlFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                    Optional\n                                isComposable\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType: CsdlReturnType, isBound?: boolean, entitySetPath?: string, isComposable?: boolean, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isComposable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isComposable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunctionImport.html":{"url":"classes/CsdlFunctionImport.html","title":"class - CsdlFunctionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunctionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                functionName\n                            \n                            \n                                    Public\n                                    Optional\n                                IncludeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, functionName: string, entitySet?: string, IncludeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        IncludeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        IncludeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlInclude.html":{"url":"classes/CsdlInclude.html","title":"class - CsdlInclude","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlInclude\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                namespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlIncludeAnnotations.html":{"url":"classes/CsdlIncludeAnnotations.html","title":"class - CsdlIncludeAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlIncludeAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                    Optional\n                                targetNamespace\n                            \n                            \n                                    Public\n                                termNamespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termNamespace: string, qualifier?: string, targetNamespace?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        targetNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        termNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlKey.html":{"url":"classes/CsdlKey.html","title":"class - CsdlKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                propertyRefs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyRefs: CsdlPropertyRef[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyRefs\n                                                  \n                                                        \n                                                                    CsdlPropertyRef[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        propertyRefs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlPropertyRef[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationProperty.html":{"url":"classes/CsdlNavigationProperty.html","title":"class - CsdlNavigationProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                containsTarget\n                            \n                            \n                                    Public\n                                    Optional\n                                onDelete\n                            \n                            \n                                    Public\n                                    Optional\n                                partner\n                            \n                            \n                                    Public\n                                    Optional\n                                referentialConstraints\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, partner?: string, containsTarget?: boolean, referentialConstraints?: CsdlReferentialConstraint[], onDelete?: CsdlOnDelete)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        partner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        containsTarget\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        referentialConstraints\n                                                  \n                                                        \n                                                                        CsdlReferentialConstraint[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        onDelete\n                                                  \n                                                        \n                                                                        CsdlOnDelete\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        containsTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlOnDelete\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        partner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        referentialConstraints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReferentialConstraint[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationPropertyBinding.html":{"url":"classes/CsdlNavigationPropertyBinding.html","title":"class - CsdlNavigationPropertyBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationPropertyBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                path\n                            \n                            \n                                    Public\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(path: string, target: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlNavigationPropertyBinding {\n  constructor(public path: string, public target: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlOnDelete.html":{"url":"classes/CsdlOnDelete.html","title":"class - CsdlOnDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlOnDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(action: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlParameter.html":{"url":"classes/CsdlParameter.html","title":"class - CsdlParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlProperty.html":{"url":"classes/CsdlProperty.html","title":"class - CsdlProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, defaultValue?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlPropertyRef.html":{"url":"classes/CsdlPropertyRef.html","title":"class - CsdlPropertyRef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlPropertyRef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReference.html":{"url":"classes/CsdlReference.html","title":"class - CsdlReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                includeAnnotations\n                            \n                            \n                                    Public\n                                    Optional\n                                includes\n                            \n                            \n                                    Public\n                                uri\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uri: string, includes?: CsdlInclude[], includeAnnotations?: CsdlIncludeAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        includes\n                                                  \n                                                        \n                                                                        CsdlInclude[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeAnnotations\n                                                  \n                                                        \n                                                                    CsdlIncludeAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeAnnotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlIncludeAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlInclude[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReferentialConstraint.html":{"url":"classes/CsdlReferentialConstraint.html","title":"class - CsdlReferentialConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReferentialConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                property\n                            \n                            \n                                    Public\n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(property: string, referencedProperty: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        referencedProperty\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReturnType.html":{"url":"classes/CsdlReturnType.html","title":"class - CsdlReturnType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReturnType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSchema.html":{"url":"classes/CsdlSchema.html","title":"class - CsdlSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actions\n                            \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationsList\n                            \n                            \n                                    Public\n                                    Optional\n                                complexTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                entityContainer\n                            \n                            \n                                    Public\n                                    Optional\n                                entityTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                enumTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                functions\n                            \n                            \n                                    Public\n                                namespace\n                            \n                            \n                                    Public\n                                    Optional\n                                terms\n                            \n                            \n                                    Public\n                                    Optional\n                                typeDefinitions\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string, enumTypes?: CsdlEnumType[], complexTypes?: CsdlComplexType[], entityTypes?: CsdlEntityType[], functions?: CsdlFunction[], actions?: CsdlAction[], entityContainer?: CsdlEntityContainer, typeDefinitions?: CsdlTypeDefinition[], terms?: CsdlTerm[], annotationsList?: CsdlAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        enumTypes\n                                                  \n                                                        \n                                                                        CsdlEnumType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        complexTypes\n                                                  \n                                                        \n                                                                        CsdlComplexType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityTypes\n                                                  \n                                                        \n                                                                        CsdlEntityType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functions\n                                                  \n                                                        \n                                                                    CsdlFunction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        CsdlAction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityContainer\n                                                  \n                                                        \n                                                                        CsdlEntityContainer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        typeDefinitions\n                                                  \n                                                        \n                                                                        CsdlTypeDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        terms\n                                                  \n                                                        \n                                                                        CsdlTerm[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationsList\n                                                  \n                                                        \n                                                                    CsdlAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        complexTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlComplexType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityContainer\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        enumTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTerm[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        typeDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTypeDefinition[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAnnotation,\n  CsdlAnnotable,\n  CsdlTerm,\n  CsdlAnnotations,\n} from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n    public enumTypes?: CsdlEnumType[],\n    public complexTypes?: CsdlComplexType[],\n    public entityTypes?: CsdlEntityType[],\n    public functions?: CsdlFunction[],\n    public actions?: CsdlAction[],\n    public entityContainer?: CsdlEntityContainer,\n    public typeDefinitions?: CsdlTypeDefinition[],\n    public terms?: CsdlTerm[],\n    public annotationsList?: CsdlAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSingleton.html":{"url":"classes/CsdlSingleton.html","title":"class - CsdlSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBindings\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, navigationPropertyBindings?: CsdlNavigationPropertyBinding[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBindings\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n  constructor(\n    public name: string,\n    public type: string,\n    public navigationPropertyBindings?: CsdlNavigationPropertyBinding[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuralProperty.html":{"url":"classes/CsdlStructuralProperty.html","title":"class - CsdlStructuralProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuralProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuredType.html":{"url":"classes/CsdlStructuredType.html","title":"class - CsdlStructuredType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuredType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTerm.html":{"url":"classes/CsdlTerm.html","title":"class - CsdlTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appliesTo\n                            \n                            \n                                    Public\n                                    Optional\n                                baseTerm\n                            \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, baseTerm?: string, defaultValue?: string, appliesTo?: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseTerm\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        appliesTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appliesTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTypeDefinition.html":{"url":"classes/CsdlTypeDefinition.html","title":"class - CsdlTypeDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTypeDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                underlayingType\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, underlayingType: string, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlayingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        underlayingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n  constructor(\n    public name: string,\n    public underlayingType: string,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateAndTimeFunctions.html":{"url":"classes/DateAndTimeFunctions.html","title":"class - DateAndTimeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateAndTimeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                day\n                            \n                            \n                                fractionalseconds\n                            \n                            \n                                hour\n                            \n                            \n                                maxdatetime\n                            \n                            \n                                mindatetime\n                            \n                            \n                                minute\n                            \n                            \n                                month\n                            \n                            \n                                now\n                            \n                            \n                                second\n                            \n                            \n                                time\n                            \n                            \n                                totaloffsetminutes\n                            \n                            \n                                totalseconds\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n            \n                \ndate(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        day\n                        \n                    \n                \n            \n            \n                \nday(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fractionalseconds\n                        \n                    \n                \n            \n            \n                \nfractionalseconds(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hour\n                        \n                    \n                \n            \n            \n                \nhour(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxdatetime\n                        \n                    \n                \n            \n            \n                \nmaxdatetime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mindatetime\n                        \n                    \n                \n            \n            \n                \nmindatetime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        minute\n                        \n                    \n                \n            \n            \n                \nminute(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        month\n                        \n                    \n                \n            \n            \n                \nmonth(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n            \n                \nnow()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        second\n                        \n                    \n                \n            \n            \n                \nsecond(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n            \n                \ntime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totaloffsetminutes\n                        \n                    \n                \n            \n            \n                \ntotaloffsetminutes(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalseconds\n                        \n                    \n                \n            \n            \n                \ntotalseconds(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n            \n                \nyear(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:227\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ProxyHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                factory\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:24\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                    \n                    factory()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(target: T, p: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field-1.html":{"url":"classes/Field-1.html","title":"class - Field-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/metadata.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fieldType\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, fieldType: FieldType)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fieldType\n                                                  \n                                                        \n                                                                        FieldType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fieldType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FieldType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAction,\n  CsdlActionImport,\n  CsdlFunction,\n  CsdlFunctionImport,\n  CsdlParameter,\n  CsdlReturnType,\n} from './csdl/csdl-function-action';\nimport {\n  CsdlAnnotation,\n  CsdlAnnotations,\n  CsdlTerm,\n} from './csdl/csdl-annotation';\nimport {\n  CsdlComplexType,\n  CsdlEntityType,\n  CsdlKey,\n  CsdlPropertyRef,\n} from './csdl/csdl-structured-type';\nimport { CsdlEnumMember, CsdlEnumType } from './csdl/csdl-enum-type';\nimport {\n  CsdlInclude,\n  CsdlIncludeAnnotations,\n  CsdlReference,\n} from './csdl/csdl-reference';\nimport {\n  CsdlNavigationProperty,\n  CsdlOnDelete,\n  CsdlProperty,\n  CsdlReferentialConstraint,\n} from './csdl/csdl-structural-property';\n\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { Types } from '../../utils/types';\nimport { VERSION_4_0 } from '../../constants';\n\nenum FieldType {\n  ATTRIBUTE,\n  TAG,\n}\n\nclass Field {\n  constructor(public name: string, public fieldType: FieldType) {}\n}\n\nexport class ODataMetadata {\n  // TAGS\n  private static readonly TAG_EDMX = 'edmx:Edmx';\n  private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n  private static readonly TAG_REFERENCE = 'edmx:Reference';\n  private static readonly TAG_INCLUDE = 'edmx:Include';\n  private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n  private static readonly TAG_TERM = 'Term';\n  private static readonly TAG_ANNOTATIONS = 'Annotations';\n  private static readonly TAG_ANNOTATION = 'Annotation';\n  private static readonly TAG_SCHEMA = 'Schema';\n  private static readonly TAG_ENUM_TYPE = 'EnumType';\n  private static readonly TAG_MEMBER = 'Member';\n  private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n  private static readonly TAG_ENTITY_TYPE = 'EntityType';\n  private static readonly TAG_PROPERTY = 'Property';\n  private static readonly TAG_KEY = 'Key';\n  private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n  private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n  private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n  private static readonly TAG_ON_DELETE = 'OnDelete';\n  private static readonly TAG_FUNCTION = 'Function';\n  private static readonly TAG_RETURN_TYPE = 'ReturnType';\n  private static readonly TAG_PARAMETER = 'Parameter';\n  private static readonly TAG_ACTION = 'Action';\n  private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n  private static readonly TAG_ENTITY_SET = 'EntitySet';\n  private static readonly TAG_SINGLETON = 'Singleton';\n  private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n  private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n  private static readonly TAG_NAVIGATION_PROPERTY_BINDING =\n    'NavigationPropertyBinding';\n  private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n  // ATTRIBUTES\n  private static readonly ATTRIBUTE_VERSION = 'Version';\n  private static readonly ATTRIBUTE_URI = 'Uri';\n  private static readonly ATTRIBUTE_ALIAS = 'Alias';\n  private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n  private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n  private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n  private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n  private static readonly ATTRIBUTE_TERM = 'Term';\n  private static readonly ATTRIBUTE_NAME = 'Name';\n  private static readonly ATTRIBUTE_VALUE = 'Value';\n  private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n  private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n  private static readonly ATTRIBUTE_TYPE = 'Type';\n  private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n  private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n  private static readonly ATTRIBUTE_PRECISION = 'Precision';\n  private static readonly ATTRIBUTE_SCALE = 'Scale';\n  private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n  private static readonly ATTRIBUTE_SRID = 'SRID';\n  private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n  private static readonly ATTRIBUTE_PARTNER = 'Partner';\n  private static readonly ATTRIBUTE_PROPERTY = 'Property';\n  private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n  private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n  private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n  private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n  private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n  private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n  private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n  private static readonly ATTRIBUTE_PATH = 'Path';\n  private static readonly ATTRIBUTE_TARGET = 'Target';\n  private static readonly ATTRIBUTE_FUNCTION = 'Function';\n  private static readonly ATTRIBUTE_ACTION = 'Action';\n  private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n  private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT =\n    'IncludeInServiceDocument';\n  private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n  private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n  private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n  private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n  private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n  private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n  public readonly version: string;\n  public readonly references: CsdlReference[];\n  public readonly schemas: CsdlSchema[];\n\n  constructor(xml: string) {\n    try {\n      const parser: DOMParser = new DOMParser();\n      const document: Document = parser.parseFromString(xml, 'text/xml');\n\n      this.checkVersion(document);\n\n      this.version = this.getFieldValueByAttribute(\n        new Field(ODataMetadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n        document.documentElement.attributes\n      );\n\n      this.references = this.getObjects(\n        document.documentElement,\n        ODataMetadata.TAG_REFERENCE,\n        [\n          new Field(ODataMetadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n          new Field(ODataMetadata.TAG_INCLUDE, FieldType.TAG),\n          new Field(ODataMetadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n          new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n        ]\n      );\n\n      const dataServices: Element =\n        document.documentElement.getElementsByTagName(\n          ODataMetadata.TAG_DATA_SERVICES\n        )[0];\n      this.schemas = this.getObjects(dataServices, ODataMetadata.TAG_SCHEMA, [\n        new Field(ODataMetadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.TAG_ENUM_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_FUNCTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ACTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TERM, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATIONS, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n      ]);\n    } catch (error) {\n      throw new Error('Unable to parse metadata, ' + error);\n    }\n  }\n\n  protected checkVersion(document: Document) {\n    // check version\n    const attributes: NamedNodeMap = document.documentElement.attributes;\n    if (!attributes) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const attr: Attr | null = attributes.getNamedItem('Version');\n    if (attr === null) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const odataVersion = attr?.nodeValue;\n    if (odataVersion !== VERSION_4_0) {\n      throw new Error('OData version \"' + odataVersion + '\" is not supported');\n    }\n  }\n\n  protected getObjects(\n    parentElement: Element,\n    tag: string,\n    fieldNames: Field[]\n  ): any[] {\n    let objects: any[] = [];\n\n    const children: HTMLCollection = parentElement.children;\n    for (let index = 0; index \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Function.html":{"url":"classes/Function.html","title":"class - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, values: any[], normalize: boolean, escape: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        escape\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { name: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:95\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeoFunctions.html":{"url":"classes/GeoFunctions.html","title":"class - GeoFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeoFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                geoDistance\n                            \n                            \n                                geoIntersects\n                            \n                            \n                                geoLength\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        geoDistance\n                        \n                    \n                \n            \n            \n                \ngeoDistance(value: T, point: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    point\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoIntersects\n                        \n                    \n                \n            \n            \n                \ngeoIntersects(value: T, polygon: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:258\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    polygon\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoLength\n                        \n                    \n                \n            \n            \n                \ngeoLength(line: T, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    line\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grouping.html":{"url":"classes/Grouping.html","title":"class - Grouping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grouping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(group: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:386\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:399\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:393\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { group: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:389\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupingOperators.html":{"url":"classes/GroupingOperators.html","title":"class - GroupingOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupingOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                grouping\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        grouping\n                        \n                    \n                \n            \n            \n                \ngrouping(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:442\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Grouping\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Lambda.html":{"url":"classes/Lambda.html","title":"class - Lambda","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Lambda\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:453\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:472\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:464\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { op: string; values: {}; alias: string; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:460\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaOperators.html":{"url":"classes/LambdaOperators.html","title":"class - LambdaOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                all\n                            \n                            \n                                any\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n            \n                \nall(field: T, value: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:498\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        any\n                        \n                    \n                \n            \n            \n                \nany(field: T, value: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:494\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogicalOperators.html":{"url":"classes/LogicalOperators.html","title":"class - LogicalOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogicalOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                eq\n                            \n                            \n                                ge\n                            \n                            \n                                gt\n                            \n                            \n                                has\n                            \n                            \n                                in\n                            \n                            \n                                le\n                            \n                            \n                                lt\n                            \n                            \n                                ne\n                            \n                            \n                                not\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        eq\n                        \n                    \n                \n            \n            \n                \neq(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:328\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ge\n                        \n                    \n                \n            \n            \n                \nge(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:337\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gt\n                        \n                    \n                \n            \n            \n                \ngt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:334\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:357\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        in\n                        \n                    \n                \n            \n            \n                \nin(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:360\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        le\n                        \n                    \n                \n            \n            \n                \nle(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:343\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lt\n                        \n                    \n                \n            \n            \n                \nlt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:340\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ne\n                        \n                    \n                \n            \n            \n                \nne(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:354\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotatable.html":{"url":"classes/ODataAnnotatable.html","title":"class - ODataAnnotatable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotatable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:30\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotation.html":{"url":"classes/ODataAnnotation.html","title":"class - ODataAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bool\n                            \n                            \n                                    Optional\n                                int\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                properties\n                            \n                            \n                                    Optional\n                                string\n                            \n                            \n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annot: AnnotationConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annot\n                                                  \n                                                        \n                                                                        AnnotationConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        int\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        string\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotations.html":{"url":"classes/ODataAnnotations.html","title":"class - ODataAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                    Abstract\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySet\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(helper: ODataVersionHelper, annotations: literal type, context?: ODataContext)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        ODataVersionHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotations\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        ODataContext\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:12\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        data\n                        \n                    \n                \n            \n            \n                \n                    \n                    data(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySet\n                    \n                \n\n                \n                    \n                        getentitySet()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:20\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataApiOptions.html":{"url":"classes/ODataApiOptions.html","title":"class - ODataApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ApiOptions\n                            OptionsHelper\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accept\n                            \n                            \n                                bodyQueryOptions\n                            \n                            \n                                deleteRefBy\n                            \n                            \n                                etag\n                            \n                            \n                                fetchPolicy\n                            \n                            \n                                headers\n                            \n                            \n                                params\n                            \n                            \n                                    Optional\n                                prefer\n                            \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                stripMetadata\n                            \n                            \n                                version\n                            \n                            \n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:89\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accept\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:55\n                        \n                    \n\n            \n                \n                    Customize accept header with OData options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:50\n                        \n                    \n\n            \n                \n                    Send query options in the request body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRefBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"path\" | \"id\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        etag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { ifMatch: true, ifNoneMatch: false }\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FetchPolicy\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:34\n                        \n                    \n\n            \n                \n                    Cache fetch policy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:42\n                        \n                    \n\n            \n                \n                    Extra headers to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:38\n                        \n                    \n\n            \n                \n                    Extra params to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        prefer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:26\n                        \n                    \n\n            \n                \n                    Send enum as string in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:30\n                        \n                    \n\n            \n                \n                    Strip metadata from the response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:22\n                        \n                    \n\n            \n                \n                    Default OData version\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:46\n                        \n                    \n\n            \n                \n                    Http request with credentials\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:106\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  OptionsHelper,\n  QueryOptionNames,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions, OptionsHelper {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum?: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOptionNames[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n  };\n  deleteRefBy: 'path' | 'id';\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n    this.deleteRefBy = config.deleteRefBy || 'path';\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\nexport class ODataParserOptions implements OptionsHelper {\n  version: ODataVersion;\n  stringAsEnum?: boolean;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBaseService.html":{"url":"classes/ODataBaseService.html","title":"class - ODataBaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient, name: string, apiNameOrEntityType?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/base.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apiNameOrEntityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:61\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:67\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:73\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:85\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:36\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:42\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:48\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:98\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:103\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType: \"entity\" | \"entities\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:108\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"entity\" | \"entities\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/base.ts:20\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport { ODataClient } from '../client';\nimport {\n  ODataActionResource,\n  ODataEntities,\n  ODataEntity,\n  ODataFunctionResource,\n  ODataNavigationPropertyResource,\n  ODataProperty,\n  ODataQueryArgumentsOptions,\n} from '../resources';\n\nexport abstract class ODataBaseService {\n  constructor(\n    protected client: ODataClient,\n    protected name: string,\n    protected apiNameOrEntityType?: string\n  ) {}\n\n  get api() {\n    return this.client.apiFor(this.apiNameOrEntityType);\n  }\n\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'none',\n    options?: ODataQueryArgumentsOptions\n  ): Observable;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'none',\n    options?: ODataQueryArgumentsOptions\n  ): Observable;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity' | 'entities',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.fetch({ responseType: responseType as any, ...options });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBatchRequest.html":{"url":"classes/ODataBatchRequest.html","title":"class - ODataBatchRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBatchRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/types/batch.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Subject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onError\n                            \n                            \n                                onLoad\n                            \n                            \n                                    \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: ODataRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        ODataRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataRequest\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:39\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onError\n                        \n                    \n                \n            \n            \n                \nonError(content: string[], status: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLoad\n                        \n                    \n                \n            \n            \n                \nonLoad(content: string[], status: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  HttpErrorResponse,\n  HttpHeaders,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { ODataApi } from '../../api';\nimport {\n  $BATCH,\n  ACCEPT,\n  APPLICATION_HTTP,\n  APPLICATION_JSON,\n  BATCH_PREFIX,\n  BINARY,\n  BOUNDARY_PREFIX_SUFFIX,\n  CHANGESET_PREFIX,\n  CONTENT_ID,\n  CONTENT_TRANSFER_ENCODING,\n  CONTENT_TYPE,\n  HTTP11,\n  MULTIPART_MIXED,\n  MULTIPART_MIXED_BOUNDARY,\n  NEWLINE,\n  NEWLINE_REGEXP,\n  ODATA_VERSION,\n  VERSION_4_0,\n  XSSI_PREFIX,\n} from '../../constants';\nimport { PathSegmentNames } from '../../types';\nimport { Http } from '../../utils/http';\nimport { Strings } from '../../utils/strings';\nimport { ODataPathSegments } from '../path';\nimport { ODataRequest } from '../request';\nimport { ODataResource } from '../resource';\nimport { ODataResponse } from '../responses';\nimport { ODataOptions } from './options';\n\nexport class ODataBatchRequest extends Subject> {\n  constructor(public request: ODataRequest) {\n    super();\n  }\n\n  override toString() {\n    //TODO: Relative or Absolute url ?\n    let res = [\n      `${this.request.method} ${this.request.pathWithParams} ${HTTP11}`,\n    ];\n    if (\n      this.request.method === 'POST' ||\n      this.request.method === 'PATCH' ||\n      this.request.method === 'PUT'\n    ) {\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_JSON}`);\n    }\n\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res = [\n        ...res,\n        ...headers\n          .keys()\n          .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`),\n      ];\n    }\n\n    return res.join(NEWLINE);\n  }\n\n  onLoad(content: string[], status: { code: number; message: string }) {\n    let headers: HttpHeaders = new HttpHeaders();\n    var index = 1;\n    for (; index = 200 && status.code ({\n        body,\n        headers,\n        status: status.code,\n        statusText: status.message,\n        url: this.request.urlWithParams,\n      });\n      this.next(ODataResponse.fromHttpResponse(this.request, res));\n      this.complete();\n    } else {\n      // An unsuccessful request is delivered on the error channel.\n      this.error(\n        new HttpErrorResponse({\n          // The error in this case is the response body (error from the server).\n          error: body,\n          headers,\n          status: status.code,\n          statusText: status.message,\n          url: this.request.urlWithParams,\n        })\n      );\n    }\n  }\n\n  onError(content: string[], status: { code: number; text: string }) {\n    const res = new HttpErrorResponse({\n      error: content.join(NEWLINE),\n      status: status.code || 0,\n      statusText: status.text || 'Unknown Error',\n      url: this.request.urlWithParams || undefined,\n    });\n    this.error(res);\n  }\n}\n\n/**\n * OData Batch Resource\n * https://www.odata.org/getting-started/advanced-tutorial/#batch\n */\nexport class ODataBatchResource extends ODataResource {\n  // VARIABLES\n  private _requests: ODataBatchRequest[] = [];\n  requests() {\n    return this._requests.map((r) => r.request);\n  }\n\n  //#region Factory\n  static factory(api: ODataApi) {\n    let segments = new ODataPathSegments();\n    segments.add(PathSegmentNames.batch, $BATCH);\n    return new ODataBatchResource(api, { segments });\n  }\n  //#endregion\n\n  /**\n   * Execute the batch request\n   * @param ctx The context for the request\n   * @param options The options of the batch request\n   * @returns The result of execute the context\n   */\n  exec(\n    ctx: (batch: this) => Observable,\n    options?: ODataOptions\n  ): Observable {\n    // Store original requester\n    const current = this.api.request;\n    // Switch to the batch requester\n    this.api.request = (req: ODataRequest): Observable => {\n      if (req.api !== this.api)\n        throw new Error('Batch Request are for the same api.');\n      if (req.observe === 'events')\n        throw new Error(\"Batch Request does not allows observe == 'events'.\");\n      this._requests.push(new ODataBatchRequest(req));\n      return this._requests[this._requests.length - 1];\n    };\n    // Execute the context\n    const obs$ = ctx(this);\n    // Restore original requester\n    this.api.request = current;\n\n    if (this._requests.length >= 0) {\n      const bound = Strings.uniqueId(BATCH_PREFIX);\n      const requests = this._requests;\n      const headers = Http.mergeHttpHeaders(\n        (options && options.headers) || {},\n        {\n          [ODATA_VERSION]: VERSION_4_0,\n          [CONTENT_TYPE]: MULTIPART_MIXED_BOUNDARY + bound,\n          [ACCEPT]: MULTIPART_MIXED,\n        }\n      );\n      const request = new ODataRequest({\n        method: 'POST',\n        body: ODataBatchResource.buildBody(bound, requests),\n        api: this.api,\n        resource: this,\n        observe: 'response',\n        responseType: 'text',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      });\n      this.api.request(request).subscribe((response) => {\n        ODataBatchResource.handleResponse(requests, response);\n      });\n    }\n\n    return obs$;\n  }\n\n  body() {\n    return ODataBatchResource.buildBody(\n      Strings.uniqueId(BATCH_PREFIX),\n      this._requests\n    );\n  }\n\n  static buildBody(\n    batchBoundary: string,\n    requests: ODataBatchRequest[]\n  ): string {\n    let res = [];\n    let changesetBoundary: string | null = null;\n    let changesetId = 1;\n\n    for (const batch of requests) {\n      // if method is GET and there is a changeset boundary open then close it\n      if (batch.request.method === 'GET' && changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (changesetBoundary === null) {\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}`);\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (batch.request.method !== 'GET') {\n        if (changesetBoundary === null) {\n          changesetBoundary = Strings.uniqueId(CHANGESET_PREFIX);\n          res.push(\n            `${CONTENT_TYPE}: ${MULTIPART_MIXED_BOUNDARY}${changesetBoundary}`\n          );\n          res.push(NEWLINE);\n        }\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}`);\n      }\n\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_HTTP}`);\n      res.push(`${CONTENT_TRANSFER_ENCODING}: ${BINARY}`);\n\n      if (batch.request.method !== 'GET') {\n        res.push(`${CONTENT_ID}: ${changesetId++}`);\n      }\n\n      res.push(NEWLINE);\n      res.push(`${batch}`);\n\n      if (batch.request.method === 'GET' || batch.request.method === 'DELETE') {\n        res.push(NEWLINE);\n      } else {\n        res.push(`${NEWLINE}${JSON.stringify(batch.request.body)}`);\n      }\n    }\n\n    if (res.length) {\n      if (changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n      res.push(\n        `${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n      );\n    }\n    return res.join(NEWLINE);\n  }\n\n  static handleResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ) {\n    let chunks: string[][] = [];\n    const contentType: string = response.headers.get(CONTENT_TYPE) || '';\n    const batchBoundary: string = Http.boundaryDelimiter(contentType);\n    const endLine: string = Http.boundaryEnd(batchBoundary);\n\n    const lines: string[] = response.body.split(NEWLINE_REGEXP);\n\n    let changesetResponses: string[][] | null = null;\n    let contentId: number | null = null;\n    let changesetBoundary: string | null = null;\n    let changesetEndLine: string | null = null;\n    let startIndex: number | null = null;\n    for (let index = 0; index  {\n      const req = requests[index];\n      const { code, message } = Http.parseResponseStatus(chunk[0]);\n      req.onLoad(chunk.slice(1), { code, message });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCache.html":{"url":"classes/ODataCache.html","title":"class - ODataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Cache\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Abstract\n                                getResponse\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                    Abstract\n                                putResponse\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:81\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:66\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        putResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    putResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegmentNames } from '../types';\n\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  tags(req: ODataRequest, res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    // Remove expired cache entries\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  flush() {\n    // Remove all cache entries\n    this.entries = new Map>();\n  }\n\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError('No Cached');\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ODataCacheEntry.html":{"url":"interfaces/ODataCacheEntry.html","title":"interface - ODataCacheEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ODataCacheEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastRead\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegmentNames } from '../types';\n\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  tags(req: ODataRequest, res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    // Remove expired cache entries\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  flush() {\n    // Remove all cache entries\n    this.entries = new Map>();\n  }\n\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError('No Cached');\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallable.html":{"url":"classes/ODataCallable.html","title":"class - ODataCallable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/callable.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bound\n                            \n                            \n                                    Optional\n                                composable\n                            \n                            \n                                    Optional\n                                entitySetPath\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                path\n                            \n                            \n                                serialize\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        composable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallableParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:78\n                \n            \n\n\n            \n                \n                    Returns the binding parameter of the callable.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The binding parameter of the callable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:50\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:70\n                \n            \n\n\n            \n                \n                    Encode the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:60\n                \n            \n\n\n            \n                \n                    Serialize the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a sub type of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallableConfig, Options, Parser } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataCallableParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataCallable extends ODataSchemaElement {\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parser: ODataCallableParser;\n\n  constructor(config: CallableConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySetPath = config.entitySetPath;\n    this.bound = config.bound;\n    this.composable = config.composable;\n    this.parser = new ODataCallableParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  path() {\n    let path: string;\n    if (this.entitySetPath) path = this.entitySetPath;\n    else if (this.bound) path = `${this.schema.namespace}.${this.name}`;\n    else\n      path = this.parser.return\n        ? this.api.findEntitySetForType(this.parser.return.type)?.name ||\n          this.name\n        : this.name;\n    return path;\n  }\n\n  configure({\n    parserForType,\n  }: {\n    parserForType: (type: string) => Parser;\n  }) {\n    this.parser.configure({ options: this.api.options, parserForType });\n  }\n\n  /**\n   * Deseialize the given value from the callable.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: Options): any {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the callable.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: any, options?: Options): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the callable.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: any, options?: Options): any {\n    return this.parser.encode(value, options);\n  }\n\n  /**\n   * Returns the binding parameter of the callable.\n   * @returns The binding parameter of the callable.\n   */\n  binding() {\n    return this.parser.binding();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallableParser.html":{"url":"classes/ODataCallableParser.html","title":"class - ODataCallableParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallableParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                parameters\n                            \n                            \n                                parser\n                            \n                            \n                                    Optional\n                                return\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataParameterParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        return\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:90\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(params: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(params: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport { ODataParserOptions } from '../../options';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  optionsHelper?: OptionsHelper;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): R {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) => p.configure({ parserForType, options }));\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitiesAnnotations.html":{"url":"classes/ODataEntitiesAnnotations.html","title":"class - ODataEntitiesAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitiesAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readLink\n                                \n                                \n                                    count\n                                \n                                \n                                    nextLink\n                                \n                                \n                                    deltaLink\n                                \n                                \n                                    top\n                                \n                                \n                                    skip\n                                \n                                \n                                    skiptoken\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:118\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:130\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:134\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nextLink\n                    \n                \n\n                \n                    \n                        getnextLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:138\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        deltaLink\n                    \n                \n\n                \n                    \n                        getdeltaLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:142\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n\n                \n                    \n                        gettop()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:146\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:151\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skiptoken\n                    \n                \n\n                \n                    \n                        getskiptoken()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:156\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:162\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityAnnotations.html":{"url":"classes/ODataEntityAnnotations.html","title":"class - ODataEntityAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Private\n                                    Optional\n                                _properties\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                property\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                                \n                                    etag\n                                \n                                \n                                    mediaEtag\n                                \n                                \n                                    metadataEtag\n                                \n                                \n                                    readLink\n                                \n                                \n                                    editLink\n                                \n                                \n                                    mediaReadLink\n                                \n                                \n                                    mediaEditLink\n                                \n                                \n                                    mediaContentType\n                                \n                                \n                                    properties\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:52\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        etag\n                    \n                \n\n                \n                    \n                        getetag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:60\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEtag\n                    \n                \n\n                \n                    \n                        getmediaEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:64\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadataEtag\n                    \n                \n\n                \n                    \n                        getmetadataEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:68\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:72\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        editLink\n                    \n                \n\n                \n                    \n                        geteditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:76\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaReadLink\n                    \n                \n\n                \n                    \n                        getmediaReadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:80\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEditLink\n                    \n                \n\n                \n                    \n                        getmediaEditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:84\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaContentType\n                    \n                \n\n                \n                    \n                        getmediaContentType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:88\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        properties\n                    \n                \n\n                \n                    \n                        getproperties()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:93\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:105\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityContainer.html":{"url":"classes/ODataEntityContainer.html","title":"class - ODataEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-container.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entitySets\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntityContainerConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntityContainerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a sub type of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityContainerConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntityContainer extends ODataSchemaElement {\n  entitySets: ODataEntitySet[];\n\n  constructor(config: EntityContainerConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySets = (config.entitySets || []).map(\n      (config) => new ODataEntitySet(config, schema)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityService.html":{"url":"classes/ODataEntityService.html","title":"class - ODataEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataBaseService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                attach\n                            \n                            \n                                    Public\n                                    Abstract\n                                entity\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    structuredTypeSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(value: M)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:7\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:61\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:98\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        structuredTypeSchema\n                    \n                \n\n                \n                    \n                        getstructuredTypeSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity.ts:12\n                                \n                            \n                    \n                        \n                                The schema for the structured type.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ODataModel } from '../models/model';\nimport { EntityKey, ODataResource } from '../resources';\nimport { ODataBaseService } from './base';\n\nexport abstract class ODataEntityService extends ODataBaseService {\n  public abstract entity(key?: EntityKey): ODataResource;\n  public abstract attach>(value: M): void;\n\n  /**\n   * The schema for the structured type.\n   */\n  get structuredTypeSchema() {\n    return this.apiNameOrEntityType !== undefined\n      ? this.api.findStructuredTypeForType(this.apiNameOrEntityType)\n      : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySet.html":{"url":"classes/ODataEntitySet.html","title":"class - ODataEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entityType\n                            \n                            \n                                service\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntitySetConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntitySetConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a sub type of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntitySetConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntitySet extends ODataSchemaElement {\n  entityType: string;\n  service: { new (...params: any[]): any };\n  constructor(config: EntitySetConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entityType = config.entityType;\n    this.service = config.service;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySetService.html":{"url":"classes/ODataEntitySetService.html","title":"class - ODataEntitySetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                create\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                entities\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                fetchAll\n                            \n                            \n                                    Public\n                                fetchMany\n                            \n                            \n                                    Public\n                                fetchOne\n                            \n                            \n                                    Public\n                                fetchOrCreate\n                            \n                            \n                                    Public\n                                modify\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySetSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:36\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:37\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(attrs: Partial, options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:90\n                \n            \n\n\n            \n                \n                    Create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        destroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:137\n                \n            \n\n\n            \n                \n                    Delete an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entities\n                        \n                    \n                \n            \n            \n                \n                    \n                    entities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:20\n                \n            \n\n\n            \n                \n                    Get the entity set resource for this service.\n\n\n                    \n                        Returns :         ODataEntitySetResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:28\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAll(options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:57\n                \n            \n\n\n            \n                \n                    Get all entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMany(options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:66\n                \n            \n\n\n            \n                \n                    Get entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOne(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:78\n                \n            \n\n\n            \n                \n                    Get an entity from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOrCreate(key: EntityKey, attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:154\n                \n            \n\n\n            \n                \n                    Get or create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        modify\n                        \n                    \n                \n            \n            \n                \n                    \n                    modify(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:121\n                \n            \n\n\n            \n                \n                    Patch an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:174\n                \n            \n\n\n            \n                \n                    Save an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:104\n                \n            \n\n\n            \n                \n                    Update an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:61\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:98\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySetSchema\n                    \n                \n\n                \n                    \n                        getentitySetSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:49\n                                \n                            \n                    \n                        \n                                The schema for the entity set.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ODataCollection } from '../models/collection';\nimport { ODataModel } from '../models/model';\nimport {\n  EntityKey,\n  ODataEntities,\n  ODataEntity,\n  ODataEntityResource,\n  ODataEntitySetResource,\n  ODataOptions,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\nexport class ODataEntitySetService extends ODataEntityService {\n  /**\n   * Get the entity set resource for this service.\n   */\n  public entities(): ODataEntitySetResource {\n    return this.client.entitySet(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(key?: EntityKey): ODataEntityResource {\n    return this.entities().entity(key);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M): void;\n  public attach>>(model: C): void;\n  public attach(model: any): void {\n    if (model instanceof ODataModel) {\n      model.attach(this.entities().entity());\n    } else if (model instanceof ODataCollection) {\n      model.attach(this.entities());\n    }\n  }\n\n  /**\n   * The schema for the entity set.\n   */\n  get entitySetSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Get all entities from the entity set.\n   * @param options The options for the request.\n   */\n  public fetchAll(options?: ODataOptions): Observable {\n    return this.entities().fetchAll(options);\n  }\n\n  /**\n   * Get entities from the entity set.\n   * @param withCount Get the count of the entities.\n   * @param options The options for the request.\n   */\n  public fetchMany(\n    options?: ODataOptions & { withCount?: boolean }\n  ): Observable> {\n    return this.entities().fetch(options);\n  }\n\n  /**\n   * Get an entity from the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOne(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    return this.entity(key).fetch(options);\n  }\n\n  /**\n   * Create an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param options The options for the request.\n   */\n  public create(\n    attrs: Partial,\n    options?: ODataOptions\n  ): Observable> {\n    return this.entities().create(attrs, options);\n  }\n\n  /**\n   * Update an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey()) return throwError('Resource without key');\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public modify(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey()) return throwError('Resource without key');\n    return res.modify(attrs, options);\n  }\n\n  /**\n   * Delete an entity in the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public destroy(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ) {\n    const res = this.entity(key);\n    if (!res.hasKey()) return throwError('Resource without key');\n    return res.destroy(options);\n  }\n\n  //#region Shortcuts\n  /**\n   * Get or create an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOrCreate(\n    key: EntityKey,\n    attrs: Partial,\n    { etag, ...options }: { etag?: string } & ODataOptions = {}\n  ): Observable> {\n    return this.fetchOne(key, { etag, ...options }).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 404) return this.create(attrs, options);\n        else return throwError(error);\n      })\n    );\n  }\n\n  /**\n   * Save an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param method The method to use.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public save(\n    attrs: Partial,\n    {\n      etag,\n      method,\n      ...options\n    }: {\n      etag?: string;\n      method?: 'create' | 'update' | 'modify';\n    } & ODataOptions = {}\n  ) {\n    let schema = this.structuredTypeSchema;\n    if (method === undefined && schema !== undefined && schema.isCompoundKey())\n      return throwError(\n        'Composite key require a specific method, use create/update/patch'\n      );\n    let key = schema && schema.resolveKey(attrs);\n    if (method === undefined) method = key !== undefined ? 'update' : 'create';\n    if ((method === 'update' || method === 'modify') && key === undefined)\n      return throwError(\"Can't update/patch entity without key\");\n    return method === 'create'\n      ? this.create(attrs, options)\n      : method === 'modify'\n      ? this.modify(key, attrs, { etag, ...options })\n      : this.update(key, attrs, { etag, ...options });\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityTypeKey.html":{"url":"classes/ODataEntityTypeKey.html","title":"class - ODataEntityTypeKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityTypeKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { COMPUTED, DESCRIPTION, LONG_DESCRIPTION } from '../../constants';\nimport { ODataParserOptions } from '../../options';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumType.html":{"url":"classes/ODataEnumType.html","title":"class - ODataEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                fields\n                            \n                            \n                                findFieldByName\n                            \n                            \n                                findFieldByValue\n                            \n                            \n                                mapFields\n                            \n                            \n                                serialize\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:64\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:84\n                \n            \n\n\n            \n                \n                    Encode the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:27\n                \n            \n\n\n            \n                \n                    Returns the fields of the enum type.\n\n\n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        The fields of the enum type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFieldByName\n                        \n                    \n                \n            \n            \n                \nfindFieldByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:36\n                \n            \n\n\n            \n                \n                    Find a field by name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFieldByValue\n                        \n                    \n                \n            \n            \n                \nfindFieldByValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:45\n                \n            \n\n\n            \n                \n                    Find a field by value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:54\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:74\n                \n            \n\n\n            \n                \n                    Serialize the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a sub type of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EnumTypeConfig, Options } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEnumTypeFieldParser, ODataEnumTypeParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataEnumType extends ODataSchemaElement {\n  parser: ODataEnumTypeParser;\n  members: { [name: string]: number } | { [value: number]: string };\n  constructor(config: EnumTypeConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.members = config.members;\n    this.parser = new ODataEnumTypeParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  configure() {\n    this.parser.configure({ options: this.api.options });\n  }\n\n  /**\n   * Returns the fields of the enum type.\n   * @returns The fields of the enum type.\n   */\n  fields(): ODataEnumTypeFieldParser[] {\n    return this.parser.fields;\n  }\n\n  /**\n   * Find a field by name.\n   * @param name The name of the field\n   * @returns The field with the given name\n   */\n  findFieldByName(name: string) {\n    return this.fields().find((f) => f.name === name);\n  }\n\n  /**\n   * Find a field by value.\n   * @param value The value of the field\n   * @returns The field with the given value\n   */\n  findFieldByValue(value: number) {\n    return this.fields().find((f) => f.value === value);\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => T) {\n    return this.fields().map(mapper);\n  }\n\n  /**\n   * Deseialize the given value from the enum type.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: Options): E {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the enum type.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: E, options?: Options): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the enum type.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: E, options?: Options): any {\n    return this.parser.encode(value, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeFieldParser.html":{"url":"classes/ODataEnumTypeFieldParser.html","title":"class - ODataEnumTypeFieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeFieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                value\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                titleize\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, field: EnumTypeFieldConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        EnumTypeFieldConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataParserOptions } from '../../options';\nimport { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  Options,\n  OptionsHelper,\n  Parser,\n} from '../../types';\nimport { Enums, Strings } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: number;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: ODataEnumTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this.fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  ttitelize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  configure({ options }: { options: OptionsHelper }) {\n    this.optionsHelper = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: Options): T {\n    // string -> number\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): string {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      const names = Enums.toNames(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      const name = Enums.toName(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const serialized = this.serialize(value, parserOptions);\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this.fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeParser.html":{"url":"classes/ODataEnumTypeParser.html","title":"class - ODataEnumTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                fields\n                            \n                            \n                                    Optional\n                                flags\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                ttitelize\n                            \n                            \n                                validate\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: string, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ttitelize\n                        \n                    \n                \n            \n            \n                \nttitelize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:58\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(member: string | number, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    member\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [] | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataParserOptions } from '../../options';\nimport { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  Options,\n  OptionsHelper,\n  Parser,\n} from '../../types';\nimport { Enums, Strings } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: number;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: ODataEnumTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this.fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  ttitelize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  configure({ options }: { options: OptionsHelper }) {\n    this.optionsHelper = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: Options): T {\n    // string -> number\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): string {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      const names = Enums.toNames(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      const name = Enums.toName(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const serialized = this.serialize(value, parserOptions);\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this.fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInMemoryCache.html":{"url":"classes/ODataInMemoryCache.html","title":"class - ODataInMemoryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInMemoryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/memory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/memory.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:15\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:128\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:66\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache } from './cache';\n\nexport class ODataInMemoryCache extends ODataCache {\n  constructor({ timeout }: { timeout?: number } = {}) {\n    super({ timeout });\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    var scope = this.scope(req);\n    var tags = this.tags(req, res);\n    this.put(req.pathWithParams, res, {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    var scope = this.scope(req);\n    return this.get(req.pathWithParams, { scope });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInStorageCache.html":{"url":"classes/ODataInStorageCache.html","title":"class - ODataInStorageCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInStorageCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                storage\n                            \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                flush\n                            \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                restore\n                            \n                            \n                                store\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:15\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        flush\n                        \n                    \n                \n            \n            \n                \n                    \n                    flush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:128\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:66\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(req, res);\n    this.put(req.pathWithParams, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.pathWithParams, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ODataModule.html":{"url":"modules/ODataModule.html","title":"module - ODataModule","body":"\n                   \n\n\n\n\n    Modules\n    ODataModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ODataClient\n                        \n                        \n                            ODataServiceFactory\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(configs: ApiConfig[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/module.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n                                    \n                                                ApiConfig[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataServiceFactory } from './services/index';\nimport { ODataSettings } from './settings';\nimport { ODATA_CONFIGURATIONS } from './tokens';\nimport { ApiConfig } from './types';\n\nexport function createSettings(configs: ApiConfig[]) {\n  return new ODataSettings(...configs);\n}\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  public static forRoot(\n    ...configs: ApiConfig[]\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        { provide: ODATA_CONFIGURATIONS, useValue: configs },\n        {\n          provide: ODataSettings,\n          useFactory: createSettings,\n          deps: [ODATA_CONFIGURATIONS],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParameterParser.html":{"url":"classes/ODataParameterParser.html","title":"class - ODataParameterParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParameterParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                collection\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                nullable\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                    Private\n                                parser\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                encode\n                            \n                            \n                                enum\n                            \n                            \n                                isEdmType\n                            \n                            \n                                isEnumType\n                            \n                            \n                                isStructuredType\n                            \n                            \n                                serialize\n                            \n                            \n                                structured\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, parameter: Parameter)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameter\n                                                  \n                                                        \n                                                                        Parameter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enum\n                        \n                    \n                \n            \n            \n                \nenum()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEnumTypeParser\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEdmType\n                        \n                    \n                \n            \n            \n                \nisEdmType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnumType\n                        \n                    \n                \n            \n            \n                \nisEnumType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStructuredType\n                        \n                    \n                \n            \n            \n                \nisStructuredType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structured\n                        \n                    \n                \n            \n            \n                \nstructured()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataStructuredTypeParser\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport { ODataParserOptions } from '../../options';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  optionsHelper?: OptionsHelper;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): R {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) => p.configure({ parserForType, options }));\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParserOptions.html":{"url":"classes/ODataParserOptions.html","title":"class - ODataParserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OptionsHelper\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: Options)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:113\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        Options\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:112\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:120\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  OptionsHelper,\n  QueryOptionNames,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions, OptionsHelper {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum?: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOptionNames[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n  };\n  deleteRefBy: 'path' | 'id';\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n    this.deleteRefBy = config.deleteRefBy || 'path';\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\nexport class ODataParserOptions implements OptionsHelper {\n  version: ODataVersion;\n  stringAsEnum?: boolean;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegments.html":{"url":"classes/ODataPathSegments.html","title":"class - ODataPathSegments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/segments.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _segments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                find\n                            \n                            \n                                first\n                            \n                            \n                                get\n                            \n                            \n                                keys\n                            \n                            \n                                last\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                segments\n                            \n                            \n                                toJSON\n                            \n                            \n                                toString\n                            \n                            \n                                types\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments?: ODataSegment[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataSegment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _segments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSegment[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(name: string, path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPathSegments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (segment: ODataSegment) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first\n                        \n                    \n                \n            \n            \n                \nfirst(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last\n                        \n                    \n                \n            \n            \n                \nlast(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(escape: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    escape\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        types\n                        \n                    \n                \n            \n            \n                \ntypes(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PATH_SEPARATOR } from '../../constants';\nimport { PathSegmentNames } from '../../types';\nimport { Objects } from '../../utils';\nimport { buildPathAndQuery, raw } from '../query';\nimport { EntityKey } from '../resource';\nimport { SegmentHandler } from './handlers';\n\nexport type ODataSegment = {\n  name: PathSegmentNames;\n  path: string;\n  type?: string;\n  key?: any;\n  parameters?: any;\n};\n\nfunction pathSegmentsBuilder(\n  segment: ODataSegment,\n  escape: boolean = false\n): [string, { [name: string]: any }] {\n  if (segment.name === PathSegmentNames.function) {\n    let [path, params] = segment.parameters\n      ? buildPathAndQuery({\n          func: { [segment.path]: segment.parameters },\n          escape,\n        })\n      : buildPathAndQuery({ func: segment.path, escape });\n    if (path.startsWith(PATH_SEPARATOR)) {\n      path = path.slice(1);\n    }\n    return [path, params];\n  } else {\n    let key = segment.key;\n    // HACK: Check guid string\n    if (\n      typeof key === 'string' &&\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n        key\n      )\n    ) {\n      key = raw(key);\n    }\n    let [path, params] = key ? buildPathAndQuery({ key, escape }) : ['', {}];\n    return [segment.path + path, params];\n  }\n}\n\nexport class ODataPathSegments {\n  private _segments: ODataSegment[];\n\n  constructor(segments?: ODataSegment[]) {\n    this._segments = segments || [];\n  }\n\n  pathAndParams(escape: boolean = false): [string, { [name: string]: any }] {\n    const result = this._segments.reduce(\n      (acc, segment) => {\n        const [path, params] = pathSegmentsBuilder(segment, escape);\n        acc.paths.push(path);\n        acc.params = Object.assign(acc.params, params);\n        return acc;\n      },\n      { paths: [] as string[], params: {} as { [name: string]: any } }\n    );\n    return [result.paths.join(PATH_SEPARATOR), result.params];\n  }\n\n  types({ key = false }: { key?: boolean } = {}): string[] {\n    return this.segments({ key })\n      .map((s) => s.type())\n      .filter((t) => t !== undefined) as string[];\n  }\n\n  keys(values?: (EntityKey | undefined)[]) {\n    const segments = this.segments({ key: true });\n    if (values !== undefined) {\n      segments.forEach((segment, index) => {\n        const key = values[index];\n        if (key === undefined) {\n          segment.clearKey();\n        } else {\n          segment.key(key);\n        }\n      });\n    }\n    return segments.map((s) => s.key() as EntityKey | undefined);\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => value)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return this._segments.map((s) => {\n      let json = {\n        name: s.name as string,\n        path: s.path,\n      } as any;\n      if (s.type !== undefined) json.type = s.type;\n      if (s.key !== undefined) json.key = s.key;\n      if (s.parameters !== undefined) json.parameters = s.parameters;\n      return json;\n    });\n  }\n\n  clone() {\n    const segments = Objects.clone(this._segments);\n    return new ODataPathSegments(segments);\n  }\n\n  find(predicate: (segment: ODataSegment) => boolean) {\n    //Backward Find\n    return [...this._segments].reverse().find(predicate);\n  }\n\n  segments({ key = false }: { key?: boolean } = {}) {\n    let segments = [...this._segments];\n    if (key)\n      segments = segments.filter(\n        (s) =>\n          [\n            PathSegmentNames.entitySet,\n            PathSegmentNames.navigationProperty,\n            PathSegmentNames.property,\n          ].indexOf(s.name) !== -1\n      );\n    return segments.map((s) => new SegmentHandler(s));\n  }\n\n  first({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[0] : undefined;\n  }\n\n  last({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[segments.length - 1] : undefined;\n  }\n\n  add(name: string, path: string) {\n    const segment = { name, path } as ODataSegment;\n    this._segments.push(segment);\n    return new SegmentHandler(segment);\n  }\n\n  get(name: string) {\n    let segment = this.find((s) => s.name === name);\n    if (segment === undefined)\n      throw Error(`No Segment for name ${name} was found`);\n    return new SegmentHandler(segment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegmentsHandler.html":{"url":"classes/ODataPathSegmentsHandler.html","title":"class - ODataPathSegmentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegmentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                entitySet\n                            \n                            \n                                function\n                            \n                            \n                                keys\n                            \n                            \n                                navigationProperty\n                            \n                            \n                                property\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments: ODataPathSegments)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataPathSegments\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n            \n                \naction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigationProperty\n                        \n                    \n                \n            \n            \n                \nnavigationProperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPropertyAnnotations.html":{"url":"classes/ODataPropertyAnnotations.html","title":"class - ODataPropertyAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPropertyAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptionHandler.html":{"url":"classes/ODataQueryOptionHandler.html","title":"class - ODataQueryOptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assertArray\n                            \n                            \n                                    Private\n                                assertObject\n                            \n                            \n                                assign\n                            \n                            \n                                at\n                            \n                            \n                                clear\n                            \n                            \n                                empty\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                            \n                                push\n                            \n                            \n                                remove\n                            \n                            \n                                set\n                            \n                            \n                                toJSON\n                            \n                            \n                                unset\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(o: literal type, n: QueryOptionNames)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        n\n                                                  \n                                                        \n                                                                        QueryOptionNames\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertArray()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     any[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertObject(create: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    create\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        assign\n                        \n                    \n                \n            \n            \n                \nassign(values: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        at\n                        \n                    \n                \n            \n            \n                \nat(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        empty\n                        \n                    \n                \n            \n            \n                \nempty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(path: string, def?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    def\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(path: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unset\n                        \n                    \n                \n            \n            \n                \nunset(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue(v?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { QueryOptionNames } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport { alias, Expand, Filter, OrderBy, Select, Transform } from './builder';\nimport { Connector, Expression } from './expressions';\nimport type { ODataQueryArguments, ODataQueryOptions } from './options';\nimport { ODataFunctions, ODataOperators } from './syntax';\n\nexport class ODataQueryOptionHandler {\n  constructor(\n    private o: { [name: string]: any },\n    private n: QueryOptionNames\n  ) {}\n\n  get name() {\n    return this.n;\n  }\n\n  toJSON() {\n    return this.o[this.n];\n  }\n\n  empty() {\n    return Types.isEmpty(this.o[this.n]);\n  }\n\n  //#region Primitive Value\n  value(v?: any) {\n    return (v !== undefined && (this.o[this.n] = v)) || this.o[this.n];\n  }\n  //#endregion\n\n  //#region Array Value\n  private assertArray(): any[] {\n    if (!Types.isArray(this.o[this.n]))\n      this.o[this.n] = this.o[this.n] !== undefined ? [this.o[this.n]] : [];\n    return this.o[this.n];\n  }\n\n  push(value: any) {\n    this.assertArray().push(value);\n  }\n\n  remove(value: any) {\n    this.o[this.n] = this.assertArray().filter((v) => v !== value);\n    // If only one... down to value\n    if (this.o[this.n].length === 1) this.o[this.n] = this.o[this.n][0];\n  }\n\n  at(index: number) {\n    return this.assertArray()[index];\n  }\n  //#endregion\n\n  //#region HashMap Value\n  private assertObject(create: boolean): { [name: string]: any } {\n    if (!Types.isArray(this.o[this.n]) && Types.isPlainObject(this.o[this.n])) {\n      return this.o[this.n];\n    }\n    let arr = this.assertArray();\n    let obj = arr.find((v) => Types.isPlainObject(v));\n    if (!obj && create) {\n      obj = {};\n      arr.push(obj);\n    }\n    return obj;\n  }\n\n  set(path: string, value: any) {\n    let obj = this.assertObject(true);\n    Objects.set(obj, path, value);\n  }\n\n  get(path: string, def?: any): any {\n    let obj = this.assertObject(false) || {};\n    return Objects.get(obj, path, def);\n  }\n\n  unset(path: string) {\n    let obj = this.assertObject(true);\n    Objects.unset(obj, path);\n\n    if (Types.isArray(this.o[this.n])) {\n      this.o[this.n] = this.o[this.n].filter((v: any) => !Types.isEmpty(v));\n      if (this.o[this.n].length === 1) this.o[this.n] = this.o[this.n][0];\n    }\n  }\n\n  has(path: string) {\n    let obj = this.assertObject(false) || {};\n    return Objects.has(obj, path);\n  }\n\n  assign(values: { [attr: string]: any }) {\n    let obj = this.assertObject(true);\n    return Objects.merge(obj, values);\n  }\n  //#endregion\n\n  clear() {\n    delete this.o[this.n];\n  }\n}\n\nexport class ODataQueryOptionsHandler {\n  constructor(protected options: ODataQueryOptions) {}\n\n  /**\n   * Create a new odata alias parameter\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_ParameterAliases\n   * @param value The value of the alias\n   * @param name The name of the alias\n   * @returns The alias\n   */\n  alias(value: any, name?: string) {\n    return alias(value, name);\n  }\n\n  select(opts: Select): ODataQueryOptionHandler;\n  select(): ODataQueryOptionHandler;\n  select(opts?: Select): any {\n    return this.options.option>(QueryOptionNames.select, opts);\n  }\n\n  expand(opts: Expand): ODataQueryOptionHandler;\n  expand(): ODataQueryOptionHandler;\n  expand(opts?: Expand): any {\n    return this.options.option>(QueryOptionNames.expand, opts);\n  }\n\n  /**\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptioncompute\n   */\n  compute(opts: (e: { e: Expression }) => Expression): Expression;\n  compute(opts: string): ODataQueryOptionHandler;\n  compute(): ODataQueryOptionHandler;\n  compute(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.compute,\n        opts({\n          e: () => Expression.e(),\n        }) as Expression\n      );\n    }\n    return this.options.option(QueryOptionNames.compute, opts);\n  }\n\n  /**\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptionformat\n   */\n  format(opts: string): ODataQueryOptionHandler;\n  format(): ODataQueryOptionHandler;\n  format(opts?: string): any {\n    return this.options.option(QueryOptionNames.format, opts);\n  }\n\n  transform(opts: Transform): ODataQueryOptionHandler;\n  transform(): ODataQueryOptionHandler;\n  transform(opts?: Transform): any {\n    return this.options.option>(QueryOptionNames.transform, opts);\n  }\n\n  search(opts: string): ODataQueryOptionHandler;\n  search(): ODataQueryOptionHandler;\n  search(opts?: string): any {\n    return this.options.option(QueryOptionNames.search, opts);\n  }\n\n  filter(\n    opts: (e: {\n      s: T;\n      e: (connector?: Connector) => Expression;\n      o: ODataOperators;\n      f: ODataFunctions;\n    }) => Expression\n  ): Expression;\n  filter(opts: Filter): ODataQueryOptionHandler;\n  filter(): ODataQueryOptionHandler;\n  filter(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.filter,\n        opts({\n          s: Expression.s() as T,\n          e: Expression.e,\n          o: Expression.o(),\n          f: Expression.f(),\n        }) as Expression\n      );\n    }\n    return this.options.option>(QueryOptionNames.filter, opts);\n  }\n\n  orderBy(\n    opts: (e: {\n      e: () => Expression;\n      not: (e: Expression) => Expression;\n    }) => Expression\n  ): Expression;\n  orderBy(opts: OrderBy): ODataQueryOptionHandler;\n  orderBy(): ODataQueryOptionHandler;\n  orderBy(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.orderBy,\n        opts({\n          e: () => Expression.e(),\n        }) as Expression\n      );\n    }\n    return this.options.option>(QueryOptionNames.orderBy, opts);\n  }\n\n  top(opts: number): ODataQueryOptionHandler;\n  top(): ODataQueryOptionHandler;\n  top(opts?: number): any {\n    return this.options.option(QueryOptionNames.top, opts);\n  }\n\n  skip(opts: number): ODataQueryOptionHandler;\n  skip(): ODataQueryOptionHandler;\n  skip(opts?: number): any {\n    return this.options.option(QueryOptionNames.skip, opts);\n  }\n\n  skiptoken(opts: string): ODataQueryOptionHandler;\n  skiptoken(): ODataQueryOptionHandler;\n  skiptoken(opts?: string): any {\n    return this.options.option(QueryOptionNames.skiptoken, opts);\n  }\n\n  paging({\n    skip,\n    skiptoken,\n    top,\n  }: { skip?: number; skiptoken?: string; top?: number } = {}) {\n    if (skiptoken !== undefined) this.skiptoken(skiptoken);\n    else if (skip !== undefined) this.skip(skip);\n    if (top !== undefined) this.top(top);\n  }\n\n  clearPaging() {\n    this.skip().clear();\n    this.top().clear();\n    this.skiptoken().clear();\n  }\n\n  apply(query: ODataQueryArguments) {\n    if (query.select !== undefined) {\n      this.select(query.select);\n    }\n    if (query.expand !== undefined) {\n      this.expand(query.expand);\n    }\n    if (query.transform !== undefined) {\n      this.transform(query.transform);\n    }\n    if (query.search !== undefined) {\n      this.search(query.search);\n    }\n    if (query.filter !== undefined) {\n      this.filter(query.filter);\n    }\n    if (query.orderBy !== undefined) {\n      this.orderBy(query.orderBy);\n    }\n    this.paging(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptions.html":{"url":"classes/ODataQueryOptions.html","title":"class - ODataQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                clone\n                            \n                            \n                                expression\n                            \n                            \n                                has\n                            \n                            \n                                keep\n                            \n                            \n                                option\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                remove\n                            \n                            \n                                toJSON\n                            \n                            \n                                toQueryArguments\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:100\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         ODataQueryOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expression\n                        \n                    \n                \n            \n            \n                \nexpression(name: QueryOptionNames, exp: Expression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exp\n                                    \n                                                Expression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Expression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(name: QueryOptionNames)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keep\n                        \n                    \n                \n            \n            \n                \nkeep(names: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n            \n                \noption(name: QueryOptionNames, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:117\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(escape: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    escape\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(names: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toQueryArguments\n                        \n                    \n                \n            \n            \n                \ntoQueryArguments()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataQueryArguments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryOptionNames } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  buildPathAndQuery,\n  Expand,\n  Filter,\n  OrderBy,\n  QueryCustomType,\n  Select,\n  Transform,\n} from './builder';\nimport { Expression } from './expressions';\nimport { ODataQueryOptionHandler } from './handlers';\n\nexport type ODataQueryArguments = {\n  [QueryOptionNames.select]?: Select;\n  [QueryOptionNames.filter]?: Filter;\n  [QueryOptionNames.search]?: string;\n  [QueryOptionNames.compute]?: string;\n  [QueryOptionNames.transform]?: Transform;\n  [QueryOptionNames.orderBy]?: OrderBy;\n  [QueryOptionNames.top]?: number;\n  [QueryOptionNames.skip]?: number;\n  [QueryOptionNames.skiptoken]?: string;\n  [QueryOptionNames.expand]?: Expand;\n  [QueryOptionNames.format]?: string;\n};\n\nexport class ODataQueryOptions {\n  options: { [name: string]: any };\n\n  constructor(options?: { [name: string]: any }) {\n    this.options = options || {};\n  }\n\n  // Params\n  pathAndParams(escape: boolean = false): [string, { [name: string]: any }] {\n    let aliases: QueryCustomType[] = [];\n    let options = [\n      QueryOptionNames.select,\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n      QueryOptionNames.compute,\n      QueryOptionNames.transform,\n      QueryOptionNames.orderBy,\n      QueryOptionNames.top,\n      QueryOptionNames.skip,\n      QueryOptionNames.skiptoken,\n      QueryOptionNames.expand,\n      QueryOptionNames.format,\n    ]\n      .filter((key) => !Types.isEmpty(this.options[key]))\n      .reduce((acc, key) => {\n        let value = this.options[key];\n        if (Types.rawType(value) === 'Expression') {\n          value = value.render(aliases);\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n\n    return buildPathAndQuery({ ...options, aliases, escape });\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => !Types.isEmpty(value))\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return Object.keys(this.options).reduce((acc, key) => {\n      let value = this.options[key];\n      if (Types.rawType(value) === 'Expression') {\n        value = value.toJSON();\n      }\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  }\n\n  toQueryArguments(): ODataQueryArguments {\n    return {\n      select: this.options[QueryOptionNames.select],\n      expand: this.options[QueryOptionNames.expand],\n      transform: this.options[QueryOptionNames.transform],\n      compute: this.options[QueryOptionNames.compute],\n      search: this.options[QueryOptionNames.search],\n      filter: this.options[QueryOptionNames.filter],\n      orderBy: this.options[QueryOptionNames.orderBy],\n      top: this.options[QueryOptionNames.top],\n      skip: this.options[QueryOptionNames.skip],\n      skiptoken: this.options[QueryOptionNames.skiptoken],\n    } as ODataQueryArguments;\n  }\n\n  clone() {\n    const options = Object.keys(this.options).reduce((acc, key) => {\n      let value = this.options[key];\n      if (Types.rawType(value) !== 'Expression') {\n        value = Objects.clone(value);\n      }\n      return Object.assign(acc, { [key]: value });\n    }, {});\n    return new ODataQueryOptions(options);\n  }\n\n  // Set Expression\n  expression(name: QueryOptionNames, exp: Expression) {\n    return (this.options[name] = exp);\n  }\n\n  // Option Handler\n  option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.options[name] = opts;\n    return new ODataQueryOptionHandler(this.options, name);\n  }\n\n  // Query Options tools\n  has(name: QueryOptionNames) {\n    return this.options[name] !== undefined;\n  }\n\n  remove(...names: QueryOptionNames[]) {\n    names.forEach((name) => this.option(name).clear());\n  }\n\n  keep(...names: QueryOptionNames[]) {\n    this.options = Object.keys(this.options)\n      .filter((k) => names.indexOf(k as QueryOptionNames) !== -1)\n      .reduce((acc, k) => Object.assign(acc, { [k]: this.options[k] }), {});\n  }\n\n  // Clear\n  clear() {\n    this.options = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataReferential.html":{"url":"classes/ODataReferential.html","title":"class - ODataReferential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataReferential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                property\n                            \n                            \n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { COMPUTED, DESCRIPTION, LONG_DESCRIPTION } from '../../constants';\nimport { ODataParserOptions } from '../../options';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataRequest.html":{"url":"classes/ODataRequest.html","title":"class - ODataRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/request.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _body\n                            \n                            \n                                    Private\n                                    Readonly\n                                _headers\n                            \n                            \n                                    Private\n                                    Readonly\n                                _method\n                            \n                            \n                                    Private\n                                    Readonly\n                                _params\n                            \n                            \n                                    Private\n                                    Readonly\n                                _path\n                            \n                            \n                                    Private\n                                    Readonly\n                                _queryBody\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                _responseType\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                bodyQueryOptions\n                            \n                            \n                                    Readonly\n                                fetchPolicy\n                            \n                            \n                                    Readonly\n                                observe\n                            \n                            \n                                    Readonly\n                                    Optional\n                                reportProgress\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                            \n                                    Readonly\n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isBatch\n                            \n                            \n                                isFetch\n                            \n                            \n                                isMutate\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    responseType\n                                \n                                \n                                    path\n                                \n                                \n                                    method\n                                \n                                \n                                    body\n                                \n                                \n                                    params\n                                \n                                \n                                    headers\n                                \n                                \n                                    pathWithParams\n                                \n                                \n                                    url\n                                \n                                \n                                    urlWithParams\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | null\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpHeaders\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpParams\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _queryBody\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        _responseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"arraybuffer\" | \"blob\" | \"json\" | \"text\" | \"value\" | \"property\" | \"entity\" | \"entities\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        observe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"events\" | \"response\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reportProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isBatch\n                        \n                    \n                \n            \n            \n                \nisBatch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFetch\n                        \n                    \n                \n            \n            \n                \nisFetch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMutate\n                        \n                    \n                \n            \n            \n                \nisMutate()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:284\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        responseType\n                    \n                \n\n                \n                    \n                        getresponseType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:211\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n                \n                    \n                        getpath()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:220\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        method\n                    \n                \n\n                \n                    \n                        getmethod()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:224\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:228\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:240\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n                \n                    \n                        getheaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:252\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathWithParams\n                    \n                \n\n                \n                    \n                        getpathWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:260\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:268\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        urlWithParams\n                    \n                \n\n                \n                    \n                        geturlWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:272\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { ODataApi } from '../api';\nimport {\n  $BATCH,\n  $QUERY,\n  ACCEPT,\n  IF_MATCH_HEADER,\n  IF_NONE_MATCH_HEADER,\n  PREFER,\n  TEXT_PLAIN,\n} from '../constants';\nimport { QueryOptionNames } from '../types';\nimport { Http } from '../utils';\nimport { ODataResource } from './resource';\n\nexport class ODataRequest {\n  readonly api: ODataApi;\n  readonly observe: 'events' | 'response';\n  readonly reportProgress?: boolean;\n  readonly withCredentials?: boolean;\n  readonly bodyQueryOptions: QueryOptionNames[];\n  readonly fetchPolicy:\n    | 'cache-first'\n    | 'cache-and-network'\n    | 'network-only'\n    | 'no-cache'\n    | 'cache-only';\n  readonly resource: ODataResource;\n  private readonly _responseType?:\n    | 'arraybuffer'\n    | 'blob'\n    | 'json'\n    | 'text'\n    | 'value'\n    | 'property'\n    | 'entity'\n    | 'entities';\n  private readonly _method: string;\n  private readonly _body: any | null;\n  private readonly _headers: HttpHeaders;\n  private readonly _params: HttpParams;\n  private readonly _path: string;\n  private readonly _queryBody: boolean;\n\n  constructor(init: {\n    method: string;\n    api: ODataApi;\n    resource: ODataResource;\n    body: any;\n    observe: 'events' | 'response';\n    etag?: string;\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n    params?: HttpParams | { [param: string]: string | string[] };\n    responseType?:\n      | 'arraybuffer'\n      | 'blob'\n      | 'json'\n      | 'text'\n      | 'value'\n      | 'property'\n      | 'entity'\n      | 'entities';\n    fetchPolicy?:\n      | 'cache-first'\n      | 'cache-and-network'\n      | 'network-only'\n      | 'no-cache'\n      | 'cache-only';\n    withCredentials?: boolean;\n    bodyQueryOptions?: QueryOptionNames[];\n  }) {\n    this._method = init.method;\n    this.resource = init.resource;\n\n    this.api = init.api;\n    this.reportProgress = init.reportProgress;\n    this.observe = init.observe;\n\n    // Response Type\n    this._responseType = init.responseType;\n\n    // The Body\n    this._body = init.body !== undefined ? init.body : null;\n    if (this._body !== null) this._body = this.resource.serialize(this._body);\n\n    this.withCredentials =\n      init.withCredentials === undefined\n        ? this.api.options.withCredentials\n        : init.withCredentials;\n    this.fetchPolicy = init.fetchPolicy || this.api.options.fetchPolicy;\n    this.bodyQueryOptions =\n      init.bodyQueryOptions || this.api.options.bodyQueryOptions;\n\n    // The Path and Params from resource\n    const [resourcePath, resourceParams] = this.resource.pathAndParams();\n    this._path = resourcePath;\n\n    //#region Headers\n    const customHeaders: { [name: string]: string | string[] } = {};\n    if (typeof init.etag === 'string') {\n      if (\n        this.api.options.etag.ifMatch &&\n        ['PUT', 'PATCH', 'DELETE'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_MATCH_HEADER] = init.etag;\n      else if (\n        this.api.options.etag.ifNoneMatch &&\n        ['GET'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_NONE_MATCH_HEADER] = init.etag;\n    }\n\n    const accept = [];\n    // Metadata\n    if (this.api.options.accept?.metadata !== undefined)\n      accept.push(`odata.metadata=${this.api.options.accept?.metadata}`);\n    // IEEE754\n    if (this.api.options.accept?.ieee754Compatible !== undefined)\n      accept.push(\n        `IEEE754Compatible=${this.api.options.accept?.ieee754Compatible}`\n      );\n    // streaming\n    if (this.api.options.accept?.streaming !== undefined)\n      accept.push(`streaming=${this.api.options.accept?.streaming}`);\n    // ExponentialDecimals\n    if (this.api.options.accept?.exponentialDecimals !== undefined)\n      accept.push(\n        `ExponentialDecimals=${this.api.options.accept?.exponentialDecimals}`\n      );\n    if (accept.length > 0)\n      customHeaders[ACCEPT] = [\n        `application/json;${accept.join(';')}`,\n        'text/plain',\n        '*/*',\n      ];\n\n    const prefer = [];\n    // Return\n    if (\n      this.api.options.prefer?.return !== undefined &&\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1\n    )\n      prefer.push(`return=${this.api.options.prefer?.return}`);\n    // MaxPageSize\n    if (\n      this.api.options.prefer?.maxPageSize !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxPageSize}`);\n    // Annotations\n    if (\n      this.api.options.prefer?.includeAnnotations !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(\n        `odata.include-annotations=${this.api.options.prefer?.includeAnnotations}`\n      );\n    if (\n      this.api.options.prefer?.continueOnError === true &&\n      ['POST'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.continue-on-error`);\n    if (prefer.length > 0) customHeaders[PREFER] = prefer;\n    this._headers = Http.mergeHttpHeaders(\n      this.api.options.headers,\n      customHeaders,\n      init.headers || {}\n    );\n    //#endregion\n\n    //#region Params\n    const customParams: { [name: string]: string | string[] } = {};\n    if (\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1 &&\n      '$select' in resourceParams\n    ) {\n      customParams['$select'] = resourceParams['$select'];\n    }\n    if (['POST'].indexOf(this._method) !== -1 && '$expand' in resourceParams) {\n      customParams['$expand'] = resourceParams['$expand'];\n    }\n    if (['GET'].indexOf(this._method) !== -1) {\n      Object.assign(customParams, resourceParams);\n    }\n\n    const params = Http.mergeHttpParams(\n      this.api.options.params,\n      customParams,\n      init.params || {}\n    );\n\n    this._params =\n      this._responseType === 'entity'\n        ? Http.withoutHttpParams(params, [\n            '$filter',\n            '$orderby',\n            '$count',\n            '$skip',\n            '$top',\n          ])\n        : params;\n    //#endregion\n\n    this._queryBody =\n      this._method === 'GET' &&\n      this.bodyQueryOptions.length > 0 &&\n      this.bodyQueryOptions.some((name) => this._params.has(`$${name}`));\n  }\n\n  get responseType(): 'arraybuffer' | 'blob' | 'json' | 'text' {\n    return this._responseType &&\n      ['property', 'entity', 'entities'].indexOf(this._responseType) !== -1\n      ? 'json'\n      : this._responseType === 'value'\n      ? 'text'\n      : this._responseType;\n  }\n\n  get path() {\n    return this._queryBody ? `${this._path}/${$QUERY}` : this._path;\n  }\n\n  get method() {\n    return this._queryBody ? 'POST' : this._method;\n  }\n\n  get body() {\n    if (this._queryBody) {\n      let [, bodyParams] = Http.splitHttpParams(\n        this._params,\n        this.bodyQueryOptions.map((name) => `$${name}`)\n      );\n      return bodyParams.toString();\n    } else {\n      return this._body;\n    }\n  }\n\n  get params() {\n    if (this._queryBody) {\n      let [queryParams] = Http.splitHttpParams(\n        this._params,\n        this.bodyQueryOptions.map((name) => `$${name}`)\n      );\n      return queryParams;\n    } else {\n      return this._params;\n    }\n  }\n\n  get headers() {\n    if (this._queryBody) {\n      return Http.mergeHttpHeaders(this._headers, { CONTENT_TYPE: TEXT_PLAIN });\n    } else {\n      return this._headers;\n    }\n  }\n\n  get pathWithParams() {\n    let path = this._path;\n    if (this._params.keys().length > 0) {\n      path = `${path}?${this._params}`;\n    }\n    return path;\n  }\n\n  get url() {\n    return `${this.api.serviceRootUrl}${this._path}`;\n  }\n\n  get urlWithParams() {\n    return `${this.api.serviceRootUrl}${this.pathWithParams}`;\n  }\n\n  isBatch() {\n    return this._path.endsWith($BATCH);\n  }\n\n  isFetch() {\n    return ['GET'].indexOf(this._method) !== -1;\n  }\n\n  isMutate() {\n    return ['PUT', 'PATCH', 'POST', 'DELETE'].indexOf(this._method) !== -1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponse.html":{"url":"classes/ODataResponse.html","title":"class - ODataResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/response.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Response\n\n            \n\n            \n                Extends\n            \n            \n                        HttpResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _annotations\n                            \n                            \n                                    Private\n                                    Optional\n                                _context\n                            \n                            \n                                    Private\n                                    Optional\n                                _options\n                            \n                            \n                                    Private\n                                    Optional\n                                _payload\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entities\n                            \n                            \n                                entity\n                            \n                            \n                                    Static\n                                fromHttpResponse\n                            \n                            \n                                    Static\n                                fromJSON\n                            \n                            \n                                property\n                            \n                            \n                                toJSON\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    payload\n                                \n                                \n                                    context\n                                \n                                \n                                    annotations\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResponseOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n            \n                \nentities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:193\n                \n            \n\n\n            \n                \n                    Handle the response body as entities\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntities\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:169\n                \n            \n\n\n            \n                \n                    Handle the response body as an entity\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromHttpResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromHttpResponse(req: ODataRequest, res: HttpResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                HttpResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromJSON(req: ODataRequest, json: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:58\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    json\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:212\n                \n            \n\n\n            \n                \n                    Handle the response body as a property\n\n\n                    \n                    \n                    \n                        Returns :         ODataProperty\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { body: any; headers: any; status: any; statusText: any; url: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:236\n                \n            \n\n\n            \n                \n                    Handle the response body as a value\n\n\n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:93\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        payload\n                    \n                \n\n                \n                    \n                        getpayload()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:126\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:137\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        annotations\n                    \n                \n\n                \n                    \n                        getannotations()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:147\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  ODataEntityAnnotations,\n  ODataEntitiesAnnotations,\n  ODataPropertyAnnotations,\n} from './annotations';\nimport { Types } from '../../utils/types';\nimport { ODataResource } from '../resource';\nimport { ODataEntities, ODataEntity, ODataProperty } from './types';\nimport {\n  APPLICATION_JSON,\n  ODATA_VERSION_HEADERS,\n  CONTENT_TYPE,\n  CACHE_CONTROL,\n  LOCATION_HEADER,\n  ETAG_HEADERS,\n  ODATA_ENTITYID_HEADERS,\n} from '../../constants';\nimport { ODataApi } from '../../api';\nimport { ODataRequest } from '../request';\nimport { ODataResponseOptions } from './options';\nimport { Http } from '../../utils/http';\nimport { ODataContext } from '../../helper';\n\n/**\n * OData Response\n */\nexport class ODataResponse extends HttpResponse {\n  readonly api: ODataApi;\n  readonly resource: ODataResource;\n\n  constructor(init: {\n    api: ODataApi;\n    resource: ODataResource;\n    body: T | null;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n    url?: string;\n  }) {\n    super(init);\n    this.api = init.api;\n    this.resource = init.resource;\n  }\n\n  static fromHttpResponse(req: ODataRequest, res: HttpResponse) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: res.body,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n      url: res.url || undefined,\n    });\n  }\n\n  static fromJSON(\n    req: ODataRequest,\n    json: {\n      body: T | null;\n      headers: { [name: string]: string | string[] };\n      status: number;\n      statusText: string;\n      url: string | null;\n    }\n  ) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: json.body,\n      headers: new HttpHeaders(json.headers),\n      status: json.status,\n      statusText: json.statusText,\n      url: json.url || undefined,\n    });\n  }\n\n  toJSON() {\n    return {\n      body: this.body,\n      headers: this.headers\n        .keys()\n        .map((name) => ({ [name]: this.headers.getAll(name) || [] }))\n        .reduce((acc, header) => Object.assign(acc, header), {}),\n      status: this.status,\n      statusText: this.statusText,\n      url: this.url,\n    };\n  }\n\n  private _options?: ODataResponseOptions;\n  get options(): ODataResponseOptions {\n    if (this._options === undefined) {\n      this._options = new ODataResponseOptions(this.api.options);\n      const contentType = this.headers.get(CONTENT_TYPE);\n      if (contentType && contentType.indexOf(APPLICATION_JSON) !== -1) {\n        const features = contentType\n          .split(',')\n          .find((p) => p.startsWith(APPLICATION_JSON)) as string;\n        this._options.setFeatures(features);\n      }\n      const header = Http.resolveHeaderKey(this.headers, ODATA_VERSION_HEADERS);\n      if (header) {\n        const version = (this.headers.get(header) || '').replace(/\\;/g, '') as\n          | '2.0'\n          | '3.0'\n          | '4.0';\n        this._options.setVersion(version);\n      }\n\n      const location = this.headers.get(LOCATION_HEADER);\n      if (location) {\n        this._options.setLocation(location);\n      }\n\n      const cacheControl = this.headers.get(CACHE_CONTROL);\n      if (cacheControl) {\n        this._options.setCache(cacheControl);\n      }\n    }\n    return this._options;\n  }\n\n  private _payload?: any;\n  get payload() {\n    if (this._payload === undefined) {\n      this._payload =\n        this.body && this.options.version === '2.0'\n          ? (this.body)['d']\n          : this.body;\n    }\n    return this._payload;\n  }\n\n  private _context?: any;\n  get context(): ODataContext {\n    if (this._context === undefined) {\n      this._context = this.options.helper.context(\n        Types.isPlainObject(this.payload) ? this.payload : {}\n      );\n    }\n    return this._context;\n  }\n\n  private _annotations?: any;\n  get annotations(): { [name: string]: any } {\n    if (this._annotations === undefined) {\n      const options = this.options;\n      this._annotations = options.helper.annotations(this.payload || {});\n      let key = Http.resolveHeaderKey(this.headers, ETAG_HEADERS);\n      if (key) {\n        const etag = this.headers.get(key);\n        if (etag) options.helper.etag(this._annotations, etag);\n      }\n      key = Http.resolveHeaderKey(this.headers, ODATA_ENTITYID_HEADERS);\n      if (key) {\n        const entityId = this.headers.get(key);\n        if (entityId) options.helper.id(this._annotations, entityId);\n      }\n    }\n    return this._annotations;\n  }\n\n  /**\n   * Handle the response body as an entity\n   * @returns\n   */\n  entity(): ODataEntity {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntityAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? annots.data(payload) : null;\n    let entity = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (entity !== null)\n      entity = this.resource.deserialize(entity, options) as T;\n    return { entity, annots };\n  }\n\n  /**\n   * Handle the response body as entities\n   * @returns\n   */\n  entities(): ODataEntities {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntitiesAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    let entities = payload ? annots.data(payload) : null;\n\n    if (entities !== null)\n      entities = this.resource.deserialize(entities, options) as T[];\n    return { entities, annots };\n  }\n\n  /**\n   * Handle the response body as a property\n   * @returns\n   */\n  property(): ODataProperty {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataPropertyAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? (annots.data(payload) as T) : null;\n    let property = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (property !== null)\n      property = this.resource.deserialize(property, options) as T;\n    return { property, annots };\n  }\n\n  /**\n   * Handle the response body as a value\n   * @returns\n   */\n  value(): T | null {\n    const options = this.options;\n    const payload = this.payload;\n    let value = (\n      payload !== null && Types.isPlainObject(payload)\n        ? options.helper.attributes(payload, this.api.options.stripMetadata)\n        : payload\n    ) as T | null;\n\n    if (value !== null) value = this.resource.deserialize(value, options) as T;\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponseOptions.html":{"url":"classes/ODataResponseOptions.html","title":"class - ODataResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ResponseOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cacheability\n                            \n                            \n                                    Optional\n                                ieee754Compatible\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                maxAge\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                streaming\n                            \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                setCache\n                            \n                            \n                                setFeatures\n                            \n                            \n                                setLocation\n                            \n                            \n                                setVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: Options)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        Options\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cacheability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ieee754Compatible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        streaming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataResponseOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCache\n                        \n                    \n                \n            \n            \n                \nsetCache(cacheControl: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cacheControl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFeatures\n                        \n                    \n                \n            \n            \n                \nsetFeatures(features: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    features\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLocation\n                        \n                    \n                \n            \n            \n                \nsetLocation(location: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVersion\n                        \n                    \n                \n            \n            \n                \nsetVersion(version: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:36\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  CacheCacheability,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  ResponseOptions,\n} from '../../types';\nimport {\n  DEFAULT_VERSION,\n  MAX_AGE,\n  VERSION_2_0,\n  VERSION_3_0,\n  VERSION_4_0,\n} from '../../constants';\n\nimport { ODataHelper } from '../../helper';\n\nexport class ODataResponseOptions implements ResponseOptions {\n  version: ODataVersion;\n  streaming?: boolean;\n  // OData\n  metadata?: ODataMetadataType;\n  stringAsEnum?: boolean;\n  ieee754Compatible?: boolean;\n  // Location\n  location?: string;\n  // Cache\n  cacheability?: 'public' | 'private' | 'no-cache' | 'no-store';\n  maxAge?: number;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n\n  clone() {\n    return new ODataResponseOptions(this);\n  }\n\n  setFeatures(features: string) {\n    features.split(';').forEach((o) => {\n      let [k, v] = o.split('=');\n      switch (k.trim()) {\n        case 'odata.metadata':\n          this.metadata = v as ODataMetadataType;\n          break;\n        case 'odata.streaming':\n          this.streaming = v == 'true';\n          break;\n        case 'IEEE754Compatible':\n          this.ieee754Compatible = v == 'true';\n          break;\n      }\n    });\n  }\n\n  setVersion(version: string) {\n    const value = version.replace(/\\;/g, '').trim();\n    if ([VERSION_2_0, VERSION_3_0, VERSION_4_0].indexOf(value) !== -1)\n      this.version = value as ODataVersion;\n  }\n\n  setLocation(location: string) {\n    // TODO: resolve location?\n    this.location = location;\n  }\n\n  setCache(cacheControl: string) {\n    cacheControl.split(',').forEach((directive) => {\n      if (directive.startsWith(MAX_AGE)) {\n        let maxAge = Number(directive.split('=')[1]);\n        if (!Number.isNaN(maxAge)) this.maxAge = maxAge;\n      }\n      if (\n        ['public', 'private', 'no-cache', 'no-store'].indexOf(directive) !== -1\n      ) {\n        this.cacheability = directive as CacheCacheability;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchema.html":{"url":"classes/ODataSchema.html","title":"class - ODataSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                api\n                            \n                            \n                                callables\n                            \n                            \n                                containers\n                            \n                            \n                                entities\n                            \n                            \n                                enums\n                            \n                            \n                                namespace\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                    Public\n                                findCallableForType\n                            \n                            \n                                    Public\n                                findEntitySetForType\n                            \n                            \n                                    Public\n                                findEnumTypeForType\n                            \n                            \n                                    Public\n                                findStructuredTypeForType\n                            \n                            \n                                isNamespaceOf\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySets\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: SchemaConfig, api: ODataApi)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        ODataApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callables\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityContainer[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findCallableForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCallableForType(type: string, bindingType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:66\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bindingType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEntitySetForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEntitySetForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEnumTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEnumTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:54\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findStructuredTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findStructuredTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:60\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNamespaceOf\n                        \n                    \n                \n            \n            \n                \nisNamespaceOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySets\n                    \n                \n\n                \n                    \n                        getentitySets()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/schema.ts:46\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataApi } from '../api';\nimport { Parser, SchemaConfig } from '../types';\nimport { OData } from '../utils/odata';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataCallable } from './callable';\nimport { ODataEntityContainer } from './entity-container';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataEnumType } from './enum-type';\nimport { ODataStructuredType } from './structured-type';\n\nexport class ODataSchema extends ODataAnnotatable {\n  api: ODataApi;\n  namespace: string;\n  alias?: string;\n  enums: ODataEnumType[];\n  entities: ODataStructuredType[];\n  callables: ODataCallable[];\n  containers: ODataEntityContainer[];\n\n  constructor(config: SchemaConfig, api: ODataApi) {\n    super(config);\n    this.api = api;\n    this.namespace = config.namespace;\n    this.alias = config.alias;\n    this.enums = (config.enums || []).map(\n      (config) => new ODataEnumType(config, this)\n    );\n    this.entities = (config.entities || []).map(\n      (config) => new ODataStructuredType(config, this)\n    );\n    this.callables = OData.mergeCallableParameters(config.callables || []).map(\n      (config) => new ODataCallable(config, this)\n    );\n    this.containers = (config.containers || []).map(\n      (config) => new ODataEntityContainer(config, this)\n    );\n  }\n\n  isNamespaceOf(type: string) {\n    return (\n      type.startsWith(this.namespace) ||\n      (this.alias && type.startsWith(this.alias))\n    );\n  }\n\n  get entitySets() {\n    return this.containers.reduce(\n      (acc, container) => [...acc, ...container.entitySets],\n      [] as ODataEntitySet[]\n    );\n  }\n\n  //#region Find for Type\n  public findEnumTypeForType(type: string) {\n    return this.enums.find((e) => e.isTypeOf(type)) as\n      | ODataEnumType\n      | undefined;\n  }\n\n  public findStructuredTypeForType(type: string) {\n    return this.entities.find((e) => e.isTypeOf(type)) as\n      | ODataStructuredType\n      | undefined;\n  }\n\n  public findCallableForType(type: string, bindingType?: string) {\n    const bindingStructuredType =\n      bindingType !== undefined\n        ? this.api.findStructuredTypeForType(bindingType)\n        : undefined;\n    return this.callables.find((c) => {\n      const isCallableType = c.isTypeOf(type);\n      const callableBindingType = c.binding()?.type;\n      const callableBindingStructuredType =\n        callableBindingType !== undefined\n          ? this.api.findStructuredTypeForType(callableBindingType)\n          : undefined;\n      return (\n        isCallableType &&\n        (!bindingStructuredType ||\n          (callableBindingStructuredType &&\n            bindingStructuredType.isSubtypeOf(callableBindingStructuredType)))\n      );\n    }) as ODataCallable | undefined;\n  }\n\n  public findEntitySetForType(type: string) {\n    return this.entitySets.find((e) => e.isTypeOf(type));\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    findOptionsForType,\n  }: {\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    // Configure Enums\n    this.enums.forEach((enu) => enu.configure());\n    // Configure Entities\n    this.entities.forEach((config) =>\n      config.configure({ parserForType, findOptionsForType })\n    );\n    // Configure callables\n    this.callables.forEach((callable) => callable.configure({ parserForType }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchemaElement.html":{"url":"classes/ODataSchemaElement.html","title":"class - ODataSchemaElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchemaElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/element.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:58\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a sub type of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:47\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:29\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:38\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/element.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\nimport { Strings } from '../utils';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataSchemaElement extends ODataAnnotatable {\n  name: string;\n  schema: ODataSchema;\n\n  constructor(\n    config: { annotations?: AnnotationConfig[]; name: string },\n    schema: ODataSchema\n  ) {\n    super(config);\n    this.schema = schema;\n    this.name = config.name;\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  /**\n   * Returns a full type of the structured type including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string): boolean {\n    var names = [`${this.schema.namespace}.${this.name}`];\n    if (this.schema.alias) names.push(`${this.schema.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a sub type of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSubtypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ODataServiceFactory.html":{"url":"injectables/ODataServiceFactory.html","title":"injectable - ODataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ODataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entitySet\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet(entitySetName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:15\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create an entity set service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entitySetName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the entity set.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitySetService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton(singletonName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create a singleton service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    singletonName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the singleton.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataSingletonService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ODataClient } from '../client';\nimport { ODataEntitySetService } from './entity-set';\nimport { ODataSingletonService } from './singleton';\n\n@Injectable()\nexport class ODataServiceFactory {\n  constructor(protected client: ODataClient) {}\n\n  /**\n   * Factory method to create an entity set service.\n   * @param entitySetName Name of the entity set.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  entitySet(\n    entitySetName: string,\n    apiNameOrEntityType?: string\n  ): ODataEntitySetService {\n    return new (class extends ODataEntitySetService {})(\n      this.client,\n      entitySetName,\n      apiNameOrEntityType\n    );\n  }\n\n  /** Factory method to create a singleton service.\n   * @param singletonName Name of the singleton.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  singleton(\n    singletonName: string,\n    apiNameOrEntityType?: string\n  ): ODataSingletonService {\n    return new (class extends ODataSingletonService {})(\n      this.client,\n      singletonName,\n      apiNameOrEntityType\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSingletonService.html":{"url":"classes/ODataSingletonService.html","title":"class - ODataSingletonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSingletonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Singleton Service\nwww.odata.org/getting-started/advanced-tutorial/#singleton\n\n            \n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    singletonSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:27\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:19\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Returns :         ODataSingletonResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:58\n                \n            \n\n\n            \n                \n                    Patch the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:44\n                \n            \n\n\n            \n                \n                    Update the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:61\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:98\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        singletonSchema\n                    \n                \n\n                \n                    \n                        getsingletonSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/singleton.ts:34\n                                \n                            \n                    \n                        \n                                The schema for the singleton.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport type { ODataModel } from '../models/model';\nimport type {\n  ODataEntity,\n  ODataOptions,\n  ODataSingletonResource,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\n/**\n * OData Singleton Service\n * www.odata.org/getting-started/advanced-tutorial/#singleton\n */\nexport class ODataSingletonService extends ODataEntityService {\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(): ODataSingletonResource {\n    return this.client.singleton(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M) {\n    model.attach(this.entity());\n  }\n\n  /**\n   * The schema for the singleton.\n   */\n  get singletonSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Update the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public patch(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.modify(attrs, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:272\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:291\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:283\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { op: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:279\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Options.html":{"url":"interfaces/Options.html","title":"interface - Options","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Options\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OptionsHelper.html":{"url":"interfaces/OptionsHelper.html","title":"interface - OptionsHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OptionsHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Options\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            exponentialDecimals\n                                        \n                                \n                                \n                                        \n                                            helper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ieee754Compatible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            streaming\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exponentialDecimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exponentialDecimals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        helper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        helper:         ODataVersionHelper\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersionHelper\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ieee754Compatible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ieee754Compatible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        streaming\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        streaming:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Parser.html":{"url":"interfaces/Parser.html","title":"interface - Parser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Parser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deserialize\n                                    \n                                \n                                \n                                    \n                                        encode\n                                    \n                                \n                                \n                                    \n                                        serialize\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Renderable.html":{"url":"interfaces/Renderable.html","title":"interface - Renderable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Renderable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        render\n                                    \n                                \n                                \n                                    \n                                        toJSON\n                                    \n                                \n                                \n                                    \n                                        toString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseJson.html":{"url":"interfaces/ResponseJson.html","title":"interface - ResponseJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            statusText\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(req, res);\n    this.put(req.pathWithParams, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.pathWithParams, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseOptions.html":{"url":"interfaces/ResponseOptions.html","title":"interface - ResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OptionsHelper\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cacheability\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAge\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheability\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheability:         CacheCacheability\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CacheCacheability\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAge\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAge:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SegmentHandler.html":{"url":"classes/SegmentHandler.html","title":"class - SegmentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SegmentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearKey\n                            \n                            \n                                clearParameters\n                            \n                            \n                                hasKey\n                            \n                            \n                                hasParameters\n                            \n                            \n                                key\n                            \n                            \n                                parameters\n                            \n                            \n                                path\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segment: ODataSegment)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segment\n                                                  \n                                                        \n                                                                        ODataSegment\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearKey\n                        \n                    \n                \n            \n            \n                \nclearKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearParameters\n                        \n                    \n                \n            \n            \n                \nclearParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasKey\n                        \n                    \n                \n            \n            \n                \nhasKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasParameters\n                        \n                    \n                \n            \n            \n                \nhasParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n            \n                \nkey(value?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:19\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EntityKey\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n            \n                \nparameters(value?: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringAndCollectionFunctions.html":{"url":"classes/StringAndCollectionFunctions.html","title":"class - StringAndCollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringAndCollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                concat\n                            \n                            \n                                contains\n                            \n                            \n                                endsWith\n                            \n                            \n                                indexOf\n                            \n                            \n                                length\n                            \n                            \n                                startsWith\n                            \n                            \n                                subString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        concat\n                        \n                    \n                \n            \n            \n                \nconcat(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endsWith\n                        \n                    \n                \n            \n            \n                \nendsWith(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indexOf\n                        \n                    \n                \n            \n            \n                \nindexOf(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startsWith\n                        \n                    \n                \n            \n            \n                \nstartsWith(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subString\n                        \n                    \n                \n            \n            \n                \nsubString(field: any, start: number, length?: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringFunctions.html":{"url":"classes/StringFunctions.html","title":"class - StringFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesPattern\n                            \n                            \n                                toLower\n                            \n                            \n                                toUpper\n                            \n                            \n                                trim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesPattern\n                        \n                    \n                \n            \n            \n                \nmatchesPattern(value: T | string, pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLower\n                        \n                    \n                \n            \n            \n                \ntoLower(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUpper\n                        \n                    \n                \n            \n            \n                \ntoUpper(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:179\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trim\n                        \n                    \n                \n            \n            \n                \ntrim(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuredTypeFieldOptions.html":{"url":"interfaces/StructuredTypeFieldOptions.html","title":"interface - StructuredTypeFieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuredTypeFieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OptionsHelper\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         StructuredTypeFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuredTypeFieldConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeFunctions.html":{"url":"classes/TypeFunctions.html","title":"class - TypeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cast\n                            \n                            \n                                isof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cast\n                        \n                    \n                \n            \n            \n                \ncast(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isof\n                        \n                    \n                \n            \n            \n                \nisof(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:249\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from './builder';\nimport { normalizeValue } from './builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping;\n//export type Field = keyof T | Funcs;\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory() {\n    const h = new Field();\n    return new Proxy({ _name: '' } as T, h);\n  }\n\n  get(target: T, p: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (p === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    name = name ? `${name}/${p as string}` : p;\n    return new Proxy({ _name: name } as any, this);\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    let params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n}\n\n/*\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${this.field}/${render(this.value, { aliases, escape, prefix })}`;\n  }\n}\n*/\n\nexport class GroupingOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  /*\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n  */\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~13.1.0\n        \n            @angular/common : ~13.1.0\n        \n            @angular/compiler : ~13.1.0\n        \n            @angular/core : ~13.1.0\n        \n            @angular/forms : ~13.1.0\n        \n            @angular/platform-browser : ~13.1.0\n        \n            @angular/platform-browser-dynamic : ~13.1.0\n        \n            @angular/router : ~13.1.0\n        \n            rxjs : ~7.4.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FieldType   (projects/.../metadata.ts)\n                        \n                        \n                            ODataModelState   (projects/.../options.ts)\n                        \n                        \n                            PathSegmentNames   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomTypes   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptionNames   (projects/.../types.ts)\n                        \n                        \n                            StandardAggregateMethods   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/responses/metadata.ts\n    \n        \n            \n                \n                    \n                        \n                        FieldType\n                    \n                \n                        \n                            \n                                 ATTRIBUTE\n                            \n                        \n                        \n                            \n                                 TAG\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n            \n                \n                    \n                        \n                        ODataModelState\n                    \n                \n                        \n                            \n                                 Added\n                            \n                        \n                        \n                            \n                                 Removed\n                            \n                        \n                        \n                            \n                                 Changed\n                            \n                        \n                        \n                            \n                                 Unchanged\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        PathSegmentNames\n                    \n                \n                        \n                            \n                                 batch\n                            \n                        \n                        \n                            \n                                Value : batch\n                            \n                        \n                        \n                            \n                                 metadata\n                            \n                        \n                        \n                            \n                                Value : metadata\n                            \n                        \n                        \n                            \n                                 entitySet\n                            \n                        \n                        \n                            \n                                Value : entitySet\n                            \n                        \n                        \n                            \n                                 singleton\n                            \n                        \n                        \n                            \n                                Value : singleton\n                            \n                        \n                        \n                            \n                                 type\n                            \n                        \n                        \n                            \n                                Value : type\n                            \n                        \n                        \n                            \n                                 property\n                            \n                        \n                        \n                            \n                                Value : property\n                            \n                        \n                        \n                            \n                                 navigationProperty\n                            \n                        \n                        \n                            \n                                Value : navigationProperty\n                            \n                        \n                        \n                            \n                                 reference\n                            \n                        \n                        \n                            \n                                Value : reference\n                            \n                        \n                        \n                            \n                                 value\n                            \n                        \n                        \n                            \n                                Value : value\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 function\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 action\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryOptionNames\n                    \n                \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 expand\n                            \n                        \n                        \n                            \n                                Value : expand\n                            \n                        \n                        \n                            \n                                 compute\n                            \n                        \n                        \n                            \n                                Value : compute\n                            \n                        \n                        \n                            \n                                 filter\n                            \n                        \n                        \n                            \n                                Value : filter\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : search\n                            \n                        \n                        \n                            \n                                 transform\n                            \n                        \n                        \n                            \n                                Value : transform\n                            \n                        \n                        \n                            \n                                 orderBy\n                            \n                        \n                        \n                            \n                                Value : orderBy\n                            \n                        \n                        \n                            \n                                 top\n                            \n                        \n                        \n                            \n                                Value : top\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : skip\n                            \n                        \n                        \n                            \n                                 skiptoken\n                            \n                        \n                        \n                            \n                                Value : skiptoken\n                            \n                        \n                        \n                            \n                                 format\n                            \n                        \n                        \n                            \n                                Value : format\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n            \n                \n                    \n                        \n                        QueryCustomTypes\n                    \n                \n                        \n                            \n                                 Raw\n                            \n                        \n                        \n                            \n                                 Alias\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardAggregateMethods\n                    \n                \n                        \n                            \n                                 sum\n                            \n                        \n                        \n                            \n                                Value : sum\n                            \n                        \n                        \n                            \n                                 min\n                            \n                        \n                        \n                            \n                                Value : min\n                            \n                        \n                        \n                            \n                                 max\n                            \n                        \n                        \n                            \n                                Value : max\n                            \n                        \n                        \n                            \n                                 average\n                            \n                        \n                        \n                            \n                                Value : average\n                            \n                        \n                        \n                            \n                                 countdistinct\n                            \n                        \n                        \n                            \n                                Value : countdistinct\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngular OData\n\n\nA fluent API for querying, creating, updating and deleting OData resources in Angular.\nOData service for Angular.\nPlease check also my other related project, OData Angular Generator\nDemo:\nFull examples of the library:\n\nAngularODataEntity\n\nTable of contents\n\nInstallation\nUsage\nGenerator\nOData Version\nQuery Builder\nDocumentation\n\nInstallation\nInstall from npm:\nnpm i angular-odataUsage\n\nAdd module to your project\n\nimport { NgModule } from '@angular/core';\nimport { ODataModule } from 'angular-odata';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({\n      serviceRootUrl: 'https://services.odata.org/V4/(S(4m0tuxtnhcfctl4gzem3gr10))/TripPinServiceRW/'\n    })\n    ...\n  ]\n})\nexport class AppModule {}\nInject and use the ODataServiceFactory\n\nimport { Component } from \"@angular/core\";\nimport { ODataClient, ODATA_ETAG } from \"angular-odata\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"TripPin\";\n  constructor(private factory: ODataServiceFactory) {\n    this.queries();\n  }\n\n  queries() {\n    // Use OData Service Factory\n    let airportsService = this.factory.entitySet(\n      \"Airports\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Airport\"\n    );\n    let airports = airportsService.entities();\n\n    // Fetch airports\n    airports.fetch().subscribe(({ entities }) => {\n      console.log(\"Airports: \", entities);\n    });\n\n    // Fetch airports with count\n    airports\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    // Fetch all airports\n    airports\n      .fetchAll()\n      .subscribe((airports) => console.log(\"All Airports: \", airports));\n\n    // Fetch airport with key and fetch again from cache\n    airports\n      .entity(\"CYYZ\")\n      .fetch()\n      .pipe(\n        switchMap(() =>\n          // From Cache!\n          airports.entity(\"CYYZ\").fetch({ fetchPolicy: \"cache-first\" })\n        )\n      )\n      .subscribe(({ entity, annots }) =>\n        console.log(\"Airport: \", entity, \"Annotations: \", annots)\n      );\n\n    // Clone airports resource and filter new resource\n    airports\n      .clone()\n      .query((q) =>\n        q.filter({ Location: { City: { CountryRegion: \"United States\" } } })\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports of United States: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) =>\n      q.filter().push({ Location: { City: { Region: \"California\" } } })\n    );\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports in California: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Store airports resource\n    var json = airports.toJSON();\n    // Load airports resource\n    airports = this.odata.fromJSON(json) as ODataEntitySetResource;\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) => q.filter().clear());\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    let peopleService = this.factory.entitySet(\n      \"People\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Person\"\n    );\n    let people = peopleService.entities();\n\n    // Clone people resource and expand and fetch\n    people\n      .clone()\n      .query((q) =>\n        q.expand({\n          Friends: {\n            expand: { Friends: { select: [\"AddressInfo\"] } },\n          },\n          Trips: { select: [\"Name\", \"Tags\"] },\n        })\n      )\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Clone people resource and filter with expressions\n    people\n      .clone()\n      .query((q) =>\n        q.filter(({ e }) =>\n          e().eq(\"Emails\", \"john@example.com\").or(e().eq(\"UserName\", \"john\"))\n        )\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    this.odata\n      .batch(\"TripPin\")\n      .exec(() =>\n        forkJoin({\n          airports: airports.fetch(),\n          people: people.fetch({ withCount: true }),\n        })\n      )\n      .subscribe();\n  }\n}Generator\nIf you use OData Angular Generator, import the config and the module from generated source.\nimport { NgModule } from '@angular/core';\n\nimport { ODataModule } from 'angular-odata';\nimport { TripPinConfig, TripPinModule } from './trippin';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot(TripPinConfig),\n    TripPinModule\n  ]\n  ...\n})\nexport class AppModule {}OData Version\nThe library works mainly with OData Version 4, however, it incorporates basic support for versions 3 and 2.\nQuery Builder\nFor a deep query customizations the library use odata-query and odata-filter-builder as a builders.\n\nOData v4 query builder\nOData Filter Builder\n\nDocumentation\nThe api documentation is generated using compodoc and can be viewed here: https://diegomvh.github.io/angular-odata/docs/\nLibrary documentation can be viewed on the wiki here: https://github.com/diegomvh/angular-odata/wiki\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Diego van Haaster\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ODataModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    112 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (projects/.../builder.ts)\n                        \n                        \n                            AnnotationConfig   (projects/.../types.ts)\n                        \n                        \n                            ApiConfig   (projects/.../types.ts)\n                        \n                        \n                            CacheCacheability   (projects/.../types.ts)\n                        \n                        \n                            CallableConfig   (projects/.../types.ts)\n                        \n                        \n                            Connector   (projects/.../expressions.ts)\n                        \n                        \n                            Duration   (projects/.../durations.ts)\n                        \n                        \n                            EntityContainerConfig   (projects/.../types.ts)\n                        \n                        \n                            EntityKey   (projects/.../resource.ts)\n                        \n                        \n                            EntitySetConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Expand   (projects/.../builder.ts)\n                        \n                        \n                            ExpandObject   (projects/.../builder.ts)\n                        \n                        \n                            ExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ExpandType   (projects/.../builder.ts)\n                        \n                        \n                            FetchPolicy   (projects/.../types.ts)\n                        \n                        \n                            Filter   (projects/.../builder.ts)\n                        \n                        \n                            FilterType   (projects/.../builder.ts)\n                        \n                        \n                            Funcs   (projects/.../syntax.ts)\n                        \n                        \n                            GroupBy   (projects/.../builder.ts)\n                        \n                        \n                            JsonSchemaCustom   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaExpand   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaOptions   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaRequired   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaSelect   (projects/.../structured-type.ts)\n                        \n                        \n                            ModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ModelOptions   (projects/.../options.ts)\n                        \n                        \n                            NestedExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ODataContext   (projects/.../helper.ts)\n                        \n                        \n                            ODataEntities   (projects/.../types.ts)\n                        \n                        \n                            ODataEntitiesOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataEntity   (projects/.../types.ts)\n                        \n                        \n                            ODataEntityOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataMetadataType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEntry   (projects/.../options.ts)\n                        \n                        \n                            ODataModelEventType   (projects/.../options.ts)\n                        \n                        \n                            ODataModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataModelRelation   (projects/.../options.ts)\n                        \n                        \n                            ODataNoneOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataProperty   (projects/.../types.ts)\n                        \n                        \n                            ODataPropertyOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArguments   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArgumentsOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataSegment   (projects/.../segments.ts)\n                        \n                        \n                            ODataVersion   (projects/.../types.ts)\n                        \n                        \n                            OrderBy   (projects/.../builder.ts)\n                        \n                        \n                            OrderByObject   (projects/.../builder.ts)\n                        \n                        \n                            OrderByType   (projects/.../builder.ts)\n                        \n                        \n                            Parameter   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomType   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptions   (projects/.../builder.ts)\n                        \n                        \n                            SchemaConfig   (projects/.../types.ts)\n                        \n                        \n                            Select   (projects/.../builder.ts)\n                        \n                        \n                            SelectType   (projects/.../builder.ts)\n                        \n                        \n                            StructuredTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            StructuredTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Transform   (projects/.../builder.ts)\n                        \n                        \n                            Unpacked   (projects/.../builder.ts)\n                        \n                        \n                            Value   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Expand\n                \n            \n            \n                \n                        ExpandType | ExpandType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandObject\n                \n            \n            \n                \n                             | NestedExpandOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandType\n                \n            \n            \n                \n                        string | ExpandObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        FilterType | FilterType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GroupBy\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedExpandOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderBy\n                \n            \n            \n                \n                        OrderByType | OrderByType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByObject\n                \n            \n            \n                \n                         | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByType\n                \n            \n            \n                \n                        string | OrderByObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryCustomType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Select\n                \n            \n            \n                \n                        SelectType | SelectType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectType\n                \n            \n            \n                \n                        string | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Transform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Unpacked\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Value\n                \n            \n            \n                \n                            string | Date | number | boolean | QueryCustomType\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnnotationConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheCacheability\n                \n            \n            \n                \n                        \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallableConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityContainerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySetConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FetchPolicy\n                \n            \n            \n                \n                        \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataMetadataType\n                \n            \n            \n                \n                        \"minimal\" | \"full\" | \"none\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataVersion\n                \n            \n            \n                \n                        \"2.0\" | \"3.0\" | \"4.0\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions.ts\n    \n    \n        \n            \n                \n                    \n                    Connector\n                \n            \n            \n                \n                        \"and\" | \"or\"\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/durations.ts\n    \n    \n        \n            \n                \n                    \n                    Duration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/resource.ts\n    \n    \n        \n            \n                \n                    \n                    EntityKey\n                \n            \n            \n                \n                             | QueryCustomType | string | number\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/syntax.ts\n    \n    \n        \n            \n                \n                    \n                    Funcs\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n    \n    \n        \n            \n                \n                    \n                    JsonSchemaCustom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaExpand\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaSelect\n                \n            \n            \n                \n                        Array\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n    \n        \n            \n                \n                    \n                    ModelFieldOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEntry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEventType\n                \n            \n            \n                \n                        \"change\" | \"reset\" | \"update\" | \"destroy\" | \"add\" | \"remove\" | \"invalid\" | \"request\" | \"sync\" | \"attach\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelFieldOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelRelation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/helper.ts\n    \n    \n        \n            \n                \n                    \n                    ODataContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/responses/types.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntities\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataProperty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/types/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntitiesOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntityOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataNoneOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataPropertyOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataQueryArgumentsOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataQueryArguments\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n    \n        \n            \n                \n                    \n                    ODataSegment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
