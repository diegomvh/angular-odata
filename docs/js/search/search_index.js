var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiOptions.html",[0,1.066,1,2.457]],["body/interfaces/ApiOptions.html",[0,1.835,1,3.309,2,1.744,3,0.057,4,0.057,5,0.057,6,0.043,7,1.957,8,0.043,9,0.533,10,0.229,11,3.657,12,3.808,13,4.243,14,2.804,15,4.179,16,3.499,17,3.975,18,4.243,19,1.877,20,3.808,21,4.243,22,3.975,23,3.663,24,3.657,25,1.827,26,0.138,27,0.009,28,2.976,29,2.887,30,3.07,31,0.669,32,3.543,33,3.933,34,0.187,35,2.465,36,1.484,37,0.134,38,1.957,39,1.957,40,1.957,41,3.329,42,1.685,43,2.676,44,2.895,45,1.629,46,1.957,47,2.895,48,0.648,49,0.797,50,1.529,51,2.397,52,1.629,53,2.676,54,2.976,55,1.907,56,2.411,57,1.649,58,2.676,59,2.78,60,0.998,61,2.804,62,0.756,63,1.764,64,2.132,65,2.195,66,2.676,67,2.014,68,2.411,69,2.676,70,2.263,71,2.195,72,2.263,73,2.411,74,2.78,75,2.78,76,1.879,77,3.022,78,4.164,79,3.022,80,2.14,81,4.653,82,2.14,83,2.14,84,1.957,85,3.022,86,4.444,87,4.064,88,2.043,89,3.022,90,2.14,91,2.14,92,3.768,93,2.14,94,0.234,95,3.022,96,3.657,97,2.14,98,2.14,99,3.022,100,2.14,101,3.022,102,2.043,103,3.022,104,2.043,105,3.022,106,2.043,107,3.022,108,3.394,109,1.744,110,3.394,111,3.166,112,3.166,113,3.022,114,2.14,115,2.14,116,2.14,117,2.043,118,3.022,119,2.14,120,2.14,121,2.043,122,3.022,123,2.78,124,2.14,125,2.14,126,2.14,127,2.14,128,3.022,129,2.14,130,1.728,131,2.14,132,2.047,133,2.047,134,3.597,135,3.022,136,3.166,137,3.166,138,2.14,139,3.166,140,2.381,141,1.139,142,2.14,143,2.14,144,3.166,145,2.043,146,3.022,147,2.14,148,2.14,149,2.14,150,1.629,151,3.022,152,2.411,153,3.022,154,3.022,155,3.022,156,1.559,157,2.397,158,3.597,159,0.684,160,3.022,161,4.442,162,5.272,163,5.272,164,5.272,165,2.043,166,3.022,167,2.262,168,2.043,169,3.022,170,1.81,171,2.043,172,3.022,173,3.887,174,3.166,175,2.043,176,3.022,177,2.676,178,2.043,179,3.022,180,3.166,181,2.043,182,3.022,183,3.166,184,2.043,185,3.022,186,3.597,187,3.022,188,4.653,189,2.043,190,3.022,191,2.043,192,3.022,193,2.043,194,3.022,195,2.043,196,3.022,197,2.043,198,3.022,199,2.043,200,3.022,201,2.043,202,1.637,203,2.895,204,2.895,205,2.78,206,2.043,207,2.043,208,1.957,209,0.476,210,1.685,211,2.043,212,1.809,213,2.14,214,2.14,215,2.14,216,3.044,217,1.957,218,0.585,219,2.043,220,2.043,221,3.657,222,0.797,223,3.309,224,2.804,225,2.778,226,3.768,227,2.132,228,2.492,229,2.051,230,1.019,231,2.778,232,2.334,233,1.685,234,2.967,235,1.685,236,1.578,237,1.744,238,1.997,239,1.812,240,1.72,241,2.895,242,0.498,243,1.809,244,2.14,245,1.744,246,2.071,247,0.779,248,2.14,249,0.428,250,1.578,251,1.879,252,1.685,253,2.043,254,0.152,255,2.14,256,2.14,257,1.484,258,2.14,259,1.957,260,2.043,261,2.895,262,4.179,263,1.192,264,1.957,265,1.957,266,1.957,267,1.361,268,1.126,269,2.683,270,1.879,271,2.676,272,1.685,273,2.78,274,2.043,275,2.676,276,2.043,277,2.895,278,1.879,279,2.895,280,2.78,281,1.959,282,1.957,283,1.744,284,2.581,285,1.879,286,0.619,287,1.578,288,1.957,289,1.578,290,1.957,291,2.14,292,1.879,293,1.957,294,0.753,295,1.629,296,1.578,297,1.578,298,1.578,299,1.957,300,2.043,301,0.086,302,1.879,303,1.744,304,1.629,305,0.005,306,0.005]],["title/classes/ArithmeticFunctions.html",[307,0.347,308,1.884]],["body/classes/ArithmeticFunctions.html",[0,1.457,3,0.049,4,0.049,5,0.049,6,0.078,8,0.037,10,0.137,19,0.706,26,0.121,27,0.009,31,0.66,34,0.297,37,0.132,60,1.101,62,1.15,94,0.231,130,2.209,140,1.595,141,0.735,159,0.391,161,2.663,167,0.983,170,1.595,209,0.89,218,0.528,222,1.938,230,1.364,242,0.891,249,0.68,254,0.16,268,1.671,286,1.358,294,1.172,301,0.137,305,0.004,306,0.004,307,0.672,308,2.575,309,0.124,310,1.255,311,0.587,312,4.413,313,4.413,314,1.934,315,0.184,316,2.863,317,0.627,318,1.934,319,2.863,320,1.934,321,2.863,322,0.959,323,0.811,324,2.24,325,1.341,326,1.219,327,2.149,328,2.351,329,2.727,330,2.727,331,2.813,332,1.151,333,1.99,334,1.9,335,1.648,336,1.255,337,0.722,338,0.83,339,1.255,340,1.934,341,1.934,342,1.255,343,1.255,344,1.637,345,1.255,346,1.255,347,1.255,348,2.245,349,2.703,350,1.255,351,1.255,352,1.255,353,1.255,354,1.255,355,1.255,356,1.255,357,1.255,358,1.255,359,1.255,360,1.255,361,3.949,362,1.193,363,1.727,364,1.255,365,1.12,366,1.255,367,1.255,368,1.219,369,0.233,370,2.103,371,1.113,372,0.959,373,1.478,374,2.939,375,3.154,376,1.255,377,1.255,378,1.934,379,1.255,380,2.36,381,2.36,382,1.255,383,2.292,384,1.255,385,1.255,386,1.255,387,1.255,388,1.255,389,1.255,390,1.255,391,1.255,392,1.255,393,1.255,394,1.255,395,1.255,396,1.255,397,1.934,398,1.595,399,1.255,400,1.255,401,2.292,402,1.255,403,2.652,404,1.255,405,1.934,406,1.255,407,1.255,408,2.292,409,1.255,410,1.934,411,1.255,412,1.255,413,1.255,414,1.255,415,1.255,416,1.255,417,1.255,418,2.292,419,1.255,420,1.255,421,1.255,422,1.255,423,1.255,424,1.255,425,1.255,426,1.255,427,1.255,428,1.255,429,1.255,430,1.255,431,1.255,432,1.255,433,1.255,434,1.255,435,1.255,436,1.255,437,1.255,438,1.255,439,1.255,440,1.255,441,1.255,442,1.255,443,1.255,444,1.255,445,1.255,446,1.255,447,1.255,448,1.255,449,1.255,450,2.292,451,1.255,452,1.255,453,1.255,454,1.255,455,2.292,456,1.255,457,1.255,458,1.255,459,1.255,460,1.255,461,1.255,462,2.292,463,1.255,464,1.255,465,1.255,466,2.575,467,2.652,468,2.865,469,3.772,470,3.964,471,1.934,472,1.255,473,1.255,474,0.891,475,1.255,476,1.255,477,2.292,478,1.255,479,1.255,480,1.255,481,1.255,482,1.255,483,1.255,484,1.255,485,1.255,486,1.255,487,1.255,488,1.255,489,1.255,490,1.255,491,1.255,492,1.255,493,1.255,494,1.255,495,1.255,496,1.255,497,1.255,498,1.255,499,1.255,500,2.292,501,1.255,502,1.255,503,1.255,504,1.255,505,1.255,506,1.255,507,1.255,508,1.255,509,1.255,510,1.255,511,1.255,512,1.775,513,1.008,514,1.878,515,1.255,516,1.255,517,1.255,518,2.292,519,1.946,520,1.255,521,1.255,522,1.255,523,2.292,524,1.255,525,1.255,526,1.255,527,1.255,528,2.939,529,1.255,530,1.219,531,2.939,532,1.255,533,1.035,534,2.652,535,1.255,536,0.936]],["title/classes/ArithmeticOperators.html",[307,0.347,500,1.884]],["body/classes/ArithmeticOperators.html",[0,1.436,3,0.047,4,0.047,5,0.047,6,0.091,8,0.036,10,0.173,19,0.686,26,0.124,27,0.009,31,0.668,34,0.292,37,0.131,60,1.097,62,1.03,94,0.229,130,2.191,140,1.56,141,0.722,159,0.38,167,0.956,170,1.56,209,0.889,218,0.519,222,1.927,230,1.325,242,0.878,249,0.668,254,0.162,268,1.656,286,1.346,294,1.171,301,0.173,305,0.004,306,0.004,307,0.669,308,2.251,309,0.12,310,1.22,311,0.575,314,1.22,315,0.233,317,0.795,318,1.22,320,1.22,322,0.932,323,0.788,324,2.217,325,1.312,326,1.185,327,2.125,328,2.327,329,2.717,330,2.717,331,2.804,332,1.119,333,1.97,334,1.881,335,1.627,336,1.22,337,0.702,338,0.807,339,1.22,340,1.893,341,1.893,342,1.22,343,1.22,344,1.601,345,1.22,346,1.22,347,1.22,348,2.216,349,2.668,350,1.22,351,1.22,352,1.22,353,1.22,354,1.22,355,1.22,356,1.22,357,1.22,358,1.22,359,1.22,360,1.22,361,3.967,362,1.167,363,1.689,364,1.22,365,1.089,366,1.22,367,1.22,368,1.185,369,0.229,370,2.087,371,1.089,372,0.932,373,1.446,374,2.905,375,3.122,376,1.22,377,1.22,378,1.893,379,1.22,380,2.319,381,2.319,382,1.22,383,2.251,384,1.22,385,1.22,386,1.22,387,1.22,388,1.22,389,1.22,390,1.22,391,1.22,392,1.22,393,1.22,394,1.22,395,1.22,396,1.22,397,1.893,398,1.56,399,1.22,400,1.22,401,2.251,402,1.22,403,2.613,404,1.22,405,1.893,406,1.22,407,1.22,408,2.251,409,1.22,410,1.893,411,1.22,412,1.22,413,1.22,414,1.22,415,1.22,416,1.22,417,1.22,418,2.251,419,1.22,420,1.22,421,1.22,422,1.22,423,1.22,424,1.22,425,1.22,426,1.22,427,1.22,428,1.22,429,1.22,430,1.22,431,1.22,432,1.22,433,1.22,434,1.22,435,1.22,436,1.22,437,1.22,438,1.22,439,1.22,440,1.22,441,1.22,442,1.22,443,1.22,444,1.22,445,1.22,446,1.22,447,1.22,448,1.22,449,1.22,450,2.251,451,1.22,452,1.22,453,1.22,454,1.22,455,2.251,456,1.22,457,1.22,458,1.22,459,1.22,460,1.22,461,1.22,462,2.251,463,1.22,464,1.22,465,1.22,466,3.287,467,2.613,468,2.828,469,3.84,470,4.008,471,1.893,472,1.22,473,1.22,474,0.866,475,1.22,476,1.22,477,2.251,478,1.22,479,1.22,480,1.22,481,1.22,482,1.22,483,1.22,484,1.22,485,1.22,486,1.22,487,1.22,488,1.22,489,1.22,490,1.22,491,1.22,492,1.22,493,1.22,494,1.22,495,1.22,496,1.22,497,1.22,498,1.22,499,1.22,500,2.537,501,1.893,502,1.22,503,1.893,504,1.22,505,1.893,506,1.22,507,1.893,508,1.22,509,1.893,510,1.22,511,1.893,512,1.736,513,0.98,514,1.838,515,1.22,516,1.22,517,1.22,518,2.251,519,1.912,520,1.22,521,1.22,522,1.22,523,2.251,524,1.22,525,1.22,526,1.22,527,1.22,528,2.905,529,1.22,530,1.185,531,2.905,532,1.22,533,1.006,534,2.613,535,1.22,536,0.91,537,3.233,538,4.318,539,4.318,540,4.318,541,4.318,542,4.318,543,2.784,544,0.956,545,2.784,546,2.784,547,2.784,548,2.784,549,2.784]],["title/interfaces/Cache.html",[0,1.066,41,1.884]],["body/interfaces/Cache.html",[0,1.862,1,2.877,2,1.827,3,0.06,4,0.06,5,0.06,6,0.079,7,2.05,8,0.046,9,0.317,10,0.132,11,1.969,12,2.05,13,3.127,14,1.509,15,3.272,16,2.579,17,2.14,18,3.127,19,1.66,20,2.05,21,3.127,22,2.14,23,3.048,24,1.969,26,0.135,27,0.009,28,2.341,29,2.272,30,2.415,31,0.664,32,3.242,33,3.599,34,0.196,35,2.533,36,1.554,37,0.134,38,2.05,39,2.05,40,2.05,41,3.44,42,1.765,43,2.769,44,2.996,45,1.707,46,2.05,47,2.996,48,0.679,49,0.835,50,1.602,51,2.463,52,1.707,53,2.769,54,3.043,55,1.974,56,2.494,57,1.694,58,2.769,59,2.877,60,1.008,61,2.867,62,0.782,63,1.825,64,2.206,65,2.272,66,2.769,67,2.084,68,2.494,69,2.769,70,2.341,71,2.272,72,2.341,73,2.494,74,2.877,75,2.877,76,1.969,77,3.127,78,4.258,79,3.127,80,2.242,81,4.731,82,2.242,83,2.242,84,2.05,85,3.127,86,4.53,87,4.142,88,2.14,89,3.127,90,2.242,91,2.242,92,3.871,93,2.242,94,0.236,95,3.127,96,3.74,97,2.242,98,2.242,99,3.127,100,2.242,101,3.127,102,2.14,103,3.127,104,2.14,105,3.127,106,2.14,107,3.127,108,3.471,109,1.827,110,3.471,111,3.276,112,3.276,113,3.127,114,2.242,115,2.242,116,2.242,117,2.14,118,3.127,119,2.242,120,2.242,121,2.14,122,3.127,123,2.877,124,2.242,125,2.242,126,2.242,127,2.242,128,3.127,129,2.242,130,1.775,131,2.242,132,2.103,133,2.103,134,3.696,135,3.127,136,3.276,137,3.276,138,2.242,139,3.276,140,2.434,141,1.149,142,2.242,143,2.242,144,3.276,145,2.14,146,3.127,147,2.242,148,2.242,149,2.242,150,1.707,151,3.127,152,2.494,153,3.127,154,3.127,155,3.127,156,1.613,157,2.463,158,3.696,159,0.708,160,3.127,161,4.516,162,5.322,163,5.322,164,5.322,165,2.14,166,3.127,167,2.314,168,2.14,169,3.127,170,1.873,171,2.14,172,3.127,173,3.924,174,3.276,175,2.14,176,3.127,177,2.769,178,2.14,179,3.127,180,3.276,181,2.14,182,3.127,183,3.276,184,2.14,185,3.127,186,3.696,187,3.127,188,4.731,189,2.14,190,3.127,191,2.14,192,3.127,193,2.14,194,3.127,195,2.14,196,3.127,197,2.14,198,3.127,199,2.14,200,3.127,201,2.14,202,1.694,203,2.996,204,2.996,205,2.877,206,2.14,207,2.14,208,2.05,209,0.493,210,1.765,211,2.14,212,1.895,213,2.242,214,2.242,215,2.242,216,3.095,217,2.05,218,0.601,219,2.14,220,2.14,221,3.74,222,0.835,223,3.4,224,2.867,225,2.854,226,3.871,227,2.206,228,2.579,229,2.097,230,1.25,231,2.854,232,2.415,233,1.765,234,3.048,235,1.765,236,1.653,237,1.827,238,2.051,239,1.861,240,1.78,241,2.996,242,0.522,243,1.895,244,3.276,245,3.156,246,3.095,247,1.193,248,3.276,249,0.654,250,1.653,251,1.969,252,1.765,253,2.14,254,0.158,255,2.242,256,2.242,257,1.554,258,2.242,259,2.05,260,2.14,261,2.996,262,4.234,263,1.249,264,2.05,265,2.05,266,2.05,267,1.426,268,1.166,269,2.723,270,1.969,271,2.769,272,1.765,273,2.877,274,2.14,275,2.769,276,2.14,277,2.996,278,1.969,279,2.996,280,2.877,281,2.028,282,2.05,283,1.827,284,2.67,285,1.969,286,1.12,287,1.653,288,2.05,289,1.653,290,2.05,291,2.242,292,1.969,293,2.05,294,0.773,295,1.707,296,1.653,297,1.653,298,1.653,299,2.05,300,2.14,301,0.182,302,1.969,303,1.827,304,1.707,305,0.005,306,0.005,311,0.69,315,0.177,317,0.604,550,3.276,551,3.547,552,3.547]],["title/classes/CollectionFunctions.html",[307,0.347,401,1.884]],["body/classes/CollectionFunctions.html",[0,1.466,3,0.049,4,0.049,5,0.049,6,0.07,8,0.037,10,0.113,19,0.713,26,0.12,27,0.009,31,0.66,34,0.299,37,0.132,60,1.099,62,1.125,94,0.23,130,2.216,140,1.608,141,0.74,159,0.395,167,0.994,170,1.608,209,0.89,218,0.532,222,1.943,230,1.357,242,0.896,249,0.685,254,0.158,268,1.677,286,1.363,294,1.173,301,0.113,305,0.004,306,0.004,307,0.673,308,2.307,309,0.125,310,1.268,311,0.592,314,1.268,315,0.152,317,0.518,318,1.268,320,1.268,322,0.969,323,0.819,324,2.248,325,1.352,326,1.232,327,2.159,328,2.36,329,2.731,330,2.731,331,2.817,332,1.164,333,1.998,334,1.907,335,1.656,336,1.268,337,0.73,338,0.839,339,1.268,340,1.95,341,1.95,342,1.268,343,1.268,344,1.65,345,1.268,346,1.268,347,1.268,348,2.256,349,2.716,350,1.268,351,1.268,352,1.268,353,1.268,354,1.268,355,1.268,356,1.268,357,1.268,358,1.268,359,1.268,360,1.268,361,3.951,362,1.202,363,1.741,364,1.268,365,1.132,366,1.268,367,1.268,368,1.232,369,0.234,370,2.11,371,1.122,372,0.969,373,1.49,374,2.951,375,3.166,376,1.268,377,1.268,378,1.95,379,1.268,380,2.376,381,2.376,382,1.268,383,2.307,384,1.268,385,1.268,386,1.268,387,1.268,388,1.268,389,1.268,390,1.268,391,1.268,392,1.268,393,1.268,394,1.268,395,1.268,396,1.268,397,1.95,398,1.608,399,1.268,400,1.268,401,2.59,402,1.95,403,3.268,404,1.268,405,2.667,406,1.95,407,1.268,408,2.307,409,1.268,410,1.95,411,1.268,412,1.268,413,1.268,414,1.268,415,1.268,416,1.268,417,1.268,418,2.307,419,1.268,420,1.268,421,1.268,422,1.268,423,1.268,424,1.268,425,1.268,426,1.268,427,1.268,428,1.268,429,1.268,430,1.268,431,1.268,432,1.268,433,1.268,434,1.268,435,1.268,436,1.268,437,1.268,438,1.268,439,1.268,440,1.268,441,1.268,442,1.268,443,1.268,444,1.268,445,1.268,446,1.268,447,1.268,448,1.268,449,1.268,450,2.307,451,1.268,452,1.268,453,1.268,454,1.268,455,2.307,456,1.268,457,1.268,458,1.268,459,1.268,460,1.268,461,1.268,462,2.307,463,1.268,464,1.268,465,1.268,466,2.59,467,2.667,468,2.879,469,3.778,470,3.968,471,1.95,472,1.268,473,1.268,474,0.901,475,1.268,476,1.268,477,2.307,478,1.268,479,1.268,480,1.268,481,1.268,482,1.268,483,1.268,484,1.268,485,1.268,486,1.268,487,1.268,488,1.268,489,1.268,490,1.268,491,1.268,492,1.268,493,1.268,494,1.268,495,1.268,496,1.268,497,1.268,498,1.268,499,1.268,500,2.307,501,1.268,502,1.268,503,1.268,504,1.268,505,1.268,506,1.268,507,1.268,508,1.268,509,1.268,510,1.268,511,1.268,512,1.789,513,1.019,514,1.894,515,1.268,516,1.268,517,1.268,518,2.307,519,1.959,520,1.268,521,1.268,522,1.268,523,2.307,524,1.268,525,1.268,526,1.268,527,1.268,528,2.951,529,1.268,530,1.232,531,2.951,532,1.268,533,1.046,534,2.667,535,1.268,536,0.946,553,4.45,554,4.45,555,2.894,556,2.894]],["title/classes/ComputeExpression.html",[307,0.347,557,3.314]],["body/classes/ComputeExpression.html",[3,0.088,4,0.088,5,0.088,6,0.108,8,0.086,9,0.601,10,0.208,25,1.846,26,0.136,27,0.009,31,0.377,34,0.412,37,0.1,49,1.759,60,0.618,62,1.014,66,3.993,94,0.228,157,2.077,209,0.781,218,0.659,222,1.863,230,1.224,239,1.57,242,0.76,246,3.542,247,1.547,249,0.944,254,0.167,281,3.096,294,0.849,301,0.217,305,0.006,306,0.006,307,0.405,309,0.223,311,0.894,315,0.304,317,1.012,324,2.092,325,2.271,327,2.666,328,2.442,329,2.326,330,2.326,331,2.383,333,2.067,334,2.09,338,2.166,369,0.291,370,1.816,398,2.7,474,1.608,528,3.18,530,2.861,531,3.18,533,2.429,536,1.688,544,0.723,557,6.892,558,4.562,559,4.369,560,4.413,561,4.248,562,4.248,563,4.226,564,2.661,565,6.722,566,2.618,567,3.433,568,6.722,569,4.951,570,5.165,571,5.165,572,4.562,573,5.165,574,4.228,575,5.165,576,3.631,577,5.165,578,2.333,579,5.165,580,3.433,581,3.433,582,3.631,583,5.42,584,4.165,585,2.486,586,7.473,587,3.117,588,5.165,589,2.867,590,4.562,591,5.165,592,2.76,593,2.867,594,5.165,595,3.117,596,4.248,597,3.591,598,5.165]],["title/classes/ConditionalFunctions.html",[307,0.347,462,1.884]],["body/classes/ConditionalFunctions.html",[0,1.471,3,0.049,4,0.049,5,0.049,6,0.057,8,0.037,10,0.074,19,0.718,26,0.118,27,0.009,31,0.661,34,0.3,37,0.132,60,1.101,62,1.093,94,0.231,130,2.22,140,1.616,141,0.743,159,0.398,167,1,170,1.616,209,0.891,218,0.534,222,1.945,230,1.347,242,0.899,249,0.687,254,0.157,268,1.68,286,1.366,294,1.173,301,0.074,305,0.004,306,0.004,307,0.673,308,2.317,309,0.126,310,1.277,311,0.595,314,1.277,315,0.099,317,0.339,318,1.277,320,1.277,322,0.976,323,0.825,324,2.254,325,1.359,326,1.24,327,2.164,328,2.366,329,2.733,330,2.733,331,2.819,332,1.171,333,2.002,334,1.912,335,1.661,336,1.277,337,0.735,338,0.844,339,1.277,340,1.96,341,1.96,342,1.277,343,1.277,344,1.659,345,1.277,346,1.277,347,1.277,348,2.262,349,2.724,350,1.277,351,1.277,352,1.277,353,1.277,354,1.277,355,1.277,356,1.277,357,1.277,358,1.277,359,1.277,360,1.277,361,3.953,362,1.208,363,1.75,364,1.277,365,1.14,366,1.277,367,1.277,368,1.24,369,0.235,370,2.113,371,1.128,372,0.976,373,1.498,374,2.959,375,3.173,376,1.277,377,1.277,378,1.96,379,1.277,380,2.386,381,2.386,382,1.277,383,2.317,384,1.277,385,1.277,386,1.277,387,1.277,388,1.277,389,1.277,390,1.277,391,1.277,392,1.277,393,1.277,394,1.277,395,1.277,396,1.277,397,1.96,398,1.616,399,1.277,400,1.277,401,2.317,402,1.277,403,2.676,404,1.277,405,1.96,406,1.277,407,1.277,408,2.317,409,1.277,410,1.96,411,1.277,412,1.277,413,1.277,414,1.277,415,1.277,416,1.277,417,1.277,418,2.317,419,1.277,420,1.277,421,1.277,422,1.277,423,1.277,424,1.277,425,1.277,426,1.277,427,1.277,428,1.277,429,1.277,430,1.277,431,1.277,432,1.277,433,1.277,434,1.277,435,1.277,436,1.277,437,1.277,438,1.277,439,1.277,440,1.277,441,1.277,442,1.277,443,1.277,444,1.277,445,1.277,446,1.277,447,1.277,448,1.277,449,1.277,450,2.317,451,1.277,452,1.277,453,1.277,454,1.277,455,2.317,456,1.277,457,1.277,458,1.277,459,1.277,460,1.277,461,1.277,462,2.599,463,1.96,464,1.277,465,1.96,466,2.599,467,2.676,468,2.887,469,3.782,470,3.97,471,1.96,472,1.277,473,1.277,474,0.907,475,1.277,476,1.277,477,2.317,478,1.277,479,1.277,480,1.277,481,1.277,482,1.277,483,1.277,484,1.277,485,1.277,486,1.277,487,1.277,488,1.277,489,1.277,490,1.277,491,1.277,492,1.277,493,1.277,494,1.277,495,1.277,496,1.277,497,1.277,498,1.277,499,1.277,500,2.317,501,1.277,502,1.277,503,1.277,504,1.277,505,1.277,506,1.277,507,1.277,508,1.277,509,1.277,510,1.277,511,1.277,512,1.798,513,1.026,514,1.903,515,1.277,516,1.277,517,1.277,518,2.317,519,1.967,520,1.277,521,1.277,522,1.277,523,2.317,524,1.277,525,1.277,526,1.277,527,1.277,528,2.959,529,1.277,530,1.24,531,2.959,532,1.277,533,1.053,534,2.676,535,1.277,536,0.952,599,3.606,600,2.913]],["title/classes/CountExpression.html",[307,0.347,601,3.568]],["body/classes/CountExpression.html",[3,0.078,4,0.078,5,0.078,6,0.102,8,0.059,9,0.558,10,0.201,19,1.139,25,1.779,26,0.134,27,0.009,28,2.821,31,0.456,34,0.45,37,0.105,49,1.862,60,0.947,61,3.547,62,0.943,67,2.511,94,0.215,130,2.05,157,1.859,159,0.853,209,0.84,218,0.612,222,1.995,230,1.224,239,1.405,242,0.92,246,3.65,247,1.437,249,0.999,254,0.155,281,2.963,286,1.446,294,0.957,301,0.211,305,0.006,306,0.006,307,0.49,309,0.2,311,0.831,315,0.296,317,0.987,322,1.549,323,1.309,324,2.202,325,2.302,327,2.594,328,2.585,329,2.594,330,2.594,331,2.658,333,2.095,334,2.089,335,1.166,338,2.05,348,1.588,369,0.306,370,1.911,398,2.556,474,1.944,536,1.511,544,0.875,559,4.275,561,3.947,562,3.947,563,4.08,564,2.382,566,2.538,567,3.073,569,2.79,574,4.201,578,2.089,580,3.073,581,3.073,582,3.25,585,2.225,587,3.769,589,2.566,592,2.47,593,2.566,595,2.79,596,2.922,597,4.453,601,7.36,602,3.728,603,4.623,604,3.769,605,4.623,606,4.623,607,4.623,608,4.623,609,4.623,610,3.462,611,4.623,612,4.623,613,4.702,614,4.152,615,6.379,616,3.073,617,4.152,618,3.073,619,3.25,620,3.462,621,2.79,622,3.462,623,3.25,624,3.25,625,3.769,626,3.073,627,3.462,628,4.083,629,3.25,630,3.462,631,3.462,632,3.462,633,3.462,634,3.462,635,2.225,636,3.462,637,4.083,638,3.073,639,2.922,640,3.462,641,4.677,642,5.036,643,2.301,644,4.152,645,2.566,646,2.672,647,4.083,648,4.083]],["title/classes/CountField.html",[307,0.347,615,3.568]],["body/classes/CountField.html",[3,0.082,4,0.082,5,0.082,6,0.11,8,0.062,10,0.196,19,1.19,25,1.734,26,0.131,27,0.009,28,3.483,31,0.469,34,0.455,37,0.108,49,1.89,60,0.923,61,3.417,62,0.729,67,3.1,94,0.217,130,2.327,157,1.942,159,0.878,209,0.845,218,0.474,222,1.984,230,1.192,242,0.947,246,3.675,247,1.111,249,1.064,254,0.157,281,2.829,286,1.468,294,0.974,301,0.204,305,0.006,306,0.006,307,0.505,309,0.209,311,0.856,315,0.288,317,0.935,322,1.618,323,1.367,324,2.251,325,2.343,327,2.499,328,2.624,329,2.623,330,2.623,331,2.688,333,2.132,334,2.12,335,1.622,338,1.4,348,1.659,369,0.313,370,1.305,474,2.002,536,1.578,544,0.676,559,3.201,563,3.711,574,3.972,578,2.182,585,2.325,587,3.881,589,2.681,592,2.581,593,2.681,595,2.914,596,4.873,597,4.119,601,7.166,602,3.894,604,2.914,613,5.125,614,4.275,615,6.795,616,3.211,617,4.275,618,3.211,619,3.395,620,3.617,621,2.914,622,3.617,623,3.395,624,3.395,625,3.881,626,3.211,627,3.617,628,4.266,629,3.395,630,3.617,631,3.617,632,3.617,633,3.617,634,3.617,635,2.325,636,3.617,637,4.266,638,4.807,639,3.053,640,4.816,641,4.816,642,5.186,643,2.404,644,4.275,645,2.681,646,2.792,647,4.266,648,4.266,649,2.324,650,3.894,651,4.83,652,4.83,653,3.894,654,4.266,655,4.83,656,4.83,657,4.83,658,4.83,659,4.83]],["title/classes/CsdlAction.html",[307,0.347,660,2.558]],["body/classes/CsdlAction.html",[3,0.097,4,0.097,5,0.097,6,0.113,8,0.074,9,0.643,10,0.227,26,0.132,27,0.009,31,0.653,37,0.129,48,1.813,55,2.738,62,1.324,63,2.022,94,0.237,132,2.469,133,2.469,141,1.181,238,2.409,240,2.469,254,0.17,298,4.03,301,0.223,305,0.007,306,0.007,307,0.679,309,0.248,315,0.295,369,0.379,544,1.153,660,4.156,661,2.667,662,3.816,663,5.465,664,5.465,665,1.971,666,5.218,667,5.218,668,5.74,669,5.74,670,5.74,671,5.74,672,5.74,673,5.74,674,3.318,675,3.628,676,3.318,677,3.816,678,3.464,679,3.318,680,3.152]],["title/classes/CsdlActionImport.html",[307,0.347,679,2.558]],["body/classes/CsdlActionImport.html",[3,0.101,4,0.101,5,0.101,6,0.11,8,0.076,9,0.657,10,0.202,26,0.13,27,0.009,31,0.636,37,0.13,48,1.812,55,3.322,62,1.293,63,3.017,94,0.238,132,2.525,133,2.525,141,1.191,238,2.463,240,2.525,254,0.171,298,3.427,301,0.202,305,0.007,306,0.007,307,0.685,309,0.257,315,0.284,369,0.382,544,0.833,660,3.439,661,2.603,662,3.955,663,4.647,664,4.647,665,2.043,666,4.815,667,4.815,674,3.439,675,3.76,676,3.439,677,3.955,678,3.59,679,4.25,680,3.223,681,5.949,682,5.949,683,5.949,684,5.949]],["title/classes/CsdlAnnotable.html",[307,0.347,685,2.457]],["body/classes/CsdlAnnotable.html",[3,0.11,4,0.11,5,0.11,6,0.107,8,0.084,9,0.694,10,0.211,26,0.124,27,0.009,31,0.475,37,0.128,48,1.786,94,0.233,132,2.236,133,2.236,141,1.133,218,0.638,238,2.18,240,2.236,254,0.148,263,2.293,301,0.165,305,0.007,306,0.007,307,0.674,309,0.281,315,0.265,337,1.958,344,2.414,369,0.359,544,0.912,661,2.522,680,2.853,685,4.607,686,4.875,687,5.076,688,6.51,689,4.762,690,6.51,691,6.51,692,4.114,693,4.686,694,3.763,695,4.114,696,4.576,697,3.614,698,4.576]],["title/classes/CsdlAnnotation.html",[307,0.347,689,2.365]],["body/classes/CsdlAnnotation.html",[3,0.109,4,0.109,5,0.109,6,0.11,8,0.082,9,0.688,10,0.209,26,0.127,27,0.009,31,0.468,37,0.127,48,1.79,94,0.237,132,2.203,133,2.203,141,1.126,218,0.629,238,2.149,240,2.203,254,0.146,263,3.013,301,0.163,305,0.007,306,0.007,307,0.671,309,0.277,315,0.281,337,1.941,344,2.38,369,0.357,544,0.899,661,2.599,680,2.812,685,4.274,686,4.805,687,4.45,689,4.57,692,4.055,693,5.36,694,3.708,695,4.055,696,4.51,697,3.562,698,4.51,699,6.416,700,6.416,701,7.699]],["title/classes/CsdlAnnotations.html",[307,0.347,692,2.797]],["body/classes/CsdlAnnotations.html",[3,0.107,4,0.107,5,0.107,6,0.109,8,0.081,9,0.681,10,0.221,26,0.13,27,0.009,31,0.46,37,0.127,48,1.793,94,0.236,132,2.164,133,2.164,141,1.117,218,0.747,238,2.111,240,2.164,254,0.145,263,2.22,301,0.16,305,0.007,306,0.007,307,0.667,309,0.272,315,0.29,337,1.92,344,3.153,369,0.354,544,0.882,566,1.962,661,2.584,680,2.762,685,4.719,686,4.719,687,5.112,689,4.726,692,4.813,693,5.337,694,3.642,695,3.983,696,4.43,697,3.498,698,4.43,702,6.302,703,6.302,704,6.302,705,6.302,706,4.719]],["title/classes/CsdlComplexType.html",[307,0.347,707,2.671]],["body/classes/CsdlComplexType.html",[3,0.098,4,0.098,5,0.098,6,0.093,8,0.074,9,0.811,10,0.23,26,0.131,27,0.009,31,0.668,34,0.318,37,0.126,48,1.786,57,1.597,94,0.233,156,2.789,218,0.772,254,0.169,268,1.299,286,1.056,301,0.147,305,0.007,306,0.007,307,0.666,309,0.25,315,0.3,337,1.82,369,0.357,544,1.189,566,2.696,661,2.193,665,1.983,707,4.355,708,3.072,709,2.874,710,5.997,711,5.955,712,6.297,713,5.955,714,4.527,715,4.527,716,5.775,717,5.1,718,5.1,719,5.1,720,5.1,721,5.1,722,5.1,723,2.874,724,3.085,725,4.007,726,3.485,727,4.562,728,3.839,729,4.059,730,4.562]],["title/classes/CsdlEntityContainer.html",[307,0.347,731,3.314]],["body/classes/CsdlEntityContainer.html",[3,0.104,4,0.104,5,0.104,6,0.115,8,0.079,9,0.67,10,0.232,26,0.132,27,0.009,34,0.446,37,0.091,48,1.786,56,2.952,62,0.926,63,2.161,94,0.228,254,0.164,278,4.796,301,0.156,305,0.007,306,0.007,307,0.481,309,0.265,315,0.304,369,0.324,544,1.21,661,2.73,665,2.107,676,4.993,679,4.993,723,4.025,731,5.61,732,4.356,733,5.418,734,8.64,735,8.64,736,8.64,737,8.64,738,6.469,739,6.469,740,6.134,741,6.134,742,6.134,743,6.134,744,6.134,745,5.418,746,6.134,747,3.702]],["title/classes/CsdlEntitySet.html",[307,0.347,738,3.314]],["body/classes/CsdlEntitySet.html",[3,0.11,4,0.11,5,0.11,6,0.114,8,0.083,9,0.693,10,0.223,26,0.131,27,0.009,31,0.626,34,0.358,37,0.097,48,1.771,57,1.795,94,0.23,254,0.167,287,3.025,301,0.165,302,4.871,305,0.007,306,0.007,307,0.509,309,0.281,315,0.299,369,0.335,544,1.086,661,2.707,665,2.229,678,5.295,723,3.23,732,4.286,738,5.805,748,5.234,749,7.751,750,6.169,751,6.491,752,5.733,753,6.491,754,6.491,755,5.733,756,4.315]],["title/classes/CsdlEntityType.html",[307,0.347,726,2.671]],["body/classes/CsdlEntityType.html",[3,0.095,4,0.095,5,0.095,6,0.105,8,0.072,9,0.807,10,0.233,26,0.133,27,0.009,31,0.672,34,0.308,37,0.125,48,1.791,57,1.546,94,0.232,156,2.773,218,0.761,254,0.168,268,1.258,286,1.537,301,0.142,305,0.007,306,0.007,307,0.66,309,0.242,315,0.304,337,1.784,369,0.352,544,1.222,566,2.674,661,2.478,665,1.92,707,3.374,708,3.47,709,2.783,710,5.966,711,5.922,712,6.262,713,5.922,714,4.495,715,4.495,717,4.939,718,4.939,719,4.939,720,4.939,721,4.939,722,4.939,723,2.783,724,2.988,725,3.926,726,4.268,727,5.315,728,5.59,729,3.931,730,4.47,757,5.592,758,5.592,759,4.939]],["title/classes/CsdlEnumMember.html",[307,0.347,760,3.314]],["body/classes/CsdlEnumMember.html",[3,0.113,4,0.113,5,0.113,6,0.111,8,0.086,9,0.705,10,0.213,26,0.125,27,0.009,31,0.488,37,0.117,48,1.757,51,3.487,60,1.059,94,0.228,141,1.184,254,0.171,283,3.448,301,0.17,305,0.008,306,0.008,307,0.619,309,0.289,315,0.287,337,1.687,369,0.341,544,0.937,661,2.636,665,2.298,709,3.33,760,6.287,761,5.91,762,6.972,763,4.704,764,5.396,765,5.396]],["title/classes/CsdlEnumType.html",[307,0.347,763,3.111]],["body/classes/CsdlEnumType.html",[3,0.11,4,0.11,5,0.11,6,0.114,8,0.083,9,0.691,10,0.222,26,0.13,27,0.009,31,0.625,37,0.115,48,1.776,51,3.578,60,0.774,94,0.232,141,0.883,254,0.169,283,4.517,301,0.164,305,0.007,306,0.007,307,0.607,309,0.28,315,0.299,337,1.63,369,0.334,544,1.083,661,2.704,665,2.221,709,3.218,760,6.564,763,5.437,764,7.068,765,7.068,766,6.466,767,5.711,768,6.466,769,6.466,770,6.466]],["title/classes/CsdlFunction.html",[307,0.347,674,2.558]],["body/classes/CsdlFunction.html",[3,0.096,4,0.096,5,0.096,6,0.114,8,0.073,9,0.637,10,0.227,26,0.133,27,0.009,31,0.663,37,0.128,48,1.813,55,2.715,62,1.335,63,1.994,94,0.236,132,2.448,133,2.448,141,1.176,238,2.388,240,2.448,254,0.17,298,4.016,301,0.222,305,0.007,306,0.007,307,0.676,309,0.245,315,0.299,369,0.378,544,1.147,660,3.273,661,2.689,662,3.764,663,5.447,664,5.447,665,1.945,666,5.2,667,5.2,674,4.121,675,5.335,676,3.273,677,3.764,678,3.417,679,3.273,680,3.125,771,5.663,772,5.663,773,5.663,774,5.663,775,5.663,776,5.663,777,5.663]],["title/classes/CsdlFunctionImport.html",[307,0.347,676,2.558]],["body/classes/CsdlFunctionImport.html",[3,0.099,4,0.099,5,0.099,6,0.112,8,0.075,9,0.65,10,0.216,26,0.131,27,0.009,31,0.655,37,0.129,48,1.813,55,3.309,62,1.311,63,2.061,94,0.238,132,2.499,133,2.499,141,1.186,238,2.437,240,2.499,254,0.171,298,3.391,301,0.201,305,0.007,306,0.007,307,0.682,309,0.253,315,0.291,369,0.381,544,1.019,660,3.381,661,2.64,662,3.889,663,4.599,664,4.599,665,2.009,666,4.779,667,4.779,674,3.381,675,3.698,676,4.206,677,5.666,678,5.143,679,3.381,680,3.189,778,5.851,779,5.851,780,5.851,781,5.851,782,5.851]],["title/classes/CsdlInclude.html",[307,0.347,783,3.111]],["body/classes/CsdlInclude.html",[3,0.111,4,0.111,5,0.111,6,0.111,8,0.084,9,0.696,10,0.211,26,0.124,27,0.009,34,0.361,37,0.124,48,1.767,94,0.235,212,3.495,218,0.641,254,0.124,267,3.462,268,1.978,301,0.166,305,0.007,306,0.007,307,0.653,309,0.283,315,0.284,337,1.65,369,0.36,544,0.916,661,2.616,685,4.323,687,3.781,689,4.161,693,3.947,694,3.781,723,3.255,783,5.846,784,5.274,785,5.778,786,6.542,787,7.788,788,2.784,789,4.598,790,4.899,791,5.274,792,5.475,793,4.899,794,4.899]],["title/classes/CsdlIncludeAnnotations.html",[307,0.347,792,3.111]],["body/classes/CsdlIncludeAnnotations.html",[3,0.109,4,0.109,5,0.109,6,0.112,8,0.083,9,0.689,10,0.222,26,0.127,27,0.009,34,0.354,37,0.123,48,1.775,94,0.236,212,3.435,218,0.63,254,0.122,267,2.585,268,1.446,301,0.163,305,0.007,306,0.007,307,0.648,309,0.278,315,0.292,337,1.621,369,0.357,544,1.079,661,2.66,685,4.278,687,3.716,689,4.118,693,5.281,694,3.716,723,3.199,783,5.418,784,5.183,788,2.736,789,4.519,790,4.814,791,5.183,792,5.803,793,6.409,794,6.554,795,6.429,796,6.429,797,6.429,798,6.429,799,6.429]],["title/classes/CsdlKey.html",[307,0.347,727,2.797]],["body/classes/CsdlKey.html",[3,0.106,4,0.106,5,0.106,6,0.105,8,0.08,9,0.799,10,0.159,26,0.113,27,0.009,31,0.652,34,0.346,37,0.129,48,1.757,57,1.733,94,0.229,156,2.705,218,0.744,254,0.165,268,1.409,286,1.145,301,0.159,305,0.007,306,0.007,307,0.682,309,0.271,315,0.259,337,1.914,369,0.367,661,2.481,707,3.781,708,3.475,709,3.118,710,5.427,711,5.777,712,6.109,713,5.777,714,4.372,715,4.372,723,3.118,724,3.348,725,4.213,726,3.781,727,5.16,728,4.166,729,5.965,730,5.493,800,6.266,801,6.266,802,6.266]],["title/classes/CsdlNavigationProperty.html",[307,0.347,715,2.28]],["body/classes/CsdlNavigationProperty.html",[3,0.097,4,0.097,5,0.097,6,0.111,8,0.074,9,0.642,10,0.23,26,0.138,27,0.009,31,0.661,37,0.126,48,1.799,57,1.585,63,2.018,94,0.237,132,1.968,133,1.968,141,1.071,156,1.784,218,0.769,238,2.997,240,1.968,254,0.167,289,2.671,301,0.145,305,0.007,306,0.007,307,0.665,309,0.248,315,0.303,337,1.811,369,0.356,544,1.186,566,2.442,661,2.627,665,1.968,680,2.512,697,3.181,714,2.952,715,3.701,724,4.618,725,3.987,803,4.028,804,5.83,805,5.631,806,5.631,807,5.631,808,5.955,809,5.354,810,5.354,811,5.731,812,5.731,813,5.731,814,5.731,815,5.731,816,5.061,817,5.061,818,5.061,819,3.622]],["title/classes/CsdlNavigationPropertyBinding.html",[307,0.347,750,3.111]],["body/classes/CsdlNavigationPropertyBinding.html",[3,0.116,4,0.116,5,0.116,6,0.112,8,0.088,9,0.713,10,0.173,26,0.126,27,0.009,29,3.825,37,0.102,48,1.703,57,2.413,94,0.232,254,0.13,287,4.067,301,0.173,305,0.008,306,0.008,307,0.535,309,0.295,315,0.289,337,1.72,344,3.298,369,0.295,661,2.652,750,5.612,820,6.821,821,6.821,822,6.821,823,7.983]],["title/classes/CsdlOnDelete.html",[307,0.347,810,2.797]],["body/classes/CsdlOnDelete.html",[3,0.107,4,0.107,5,0.107,6,0.105,8,0.081,9,0.682,10,0.161,26,0.133,27,0.009,31,0.636,37,0.13,48,1.784,57,1.749,63,2.998,94,0.236,132,2.172,133,2.172,141,1.119,156,1.969,218,0.748,238,2.919,240,2.172,254,0.162,289,2.948,301,0.161,305,0.007,306,0.007,307,0.684,309,0.273,315,0.26,337,1.925,369,0.368,661,2.491,680,2.772,697,3.511,714,3.259,715,3.259,724,4.38,725,4.237,803,4.446,804,5.449,805,4.205,806,4.205,807,4.205,808,4.446,809,4.824,810,5.181,819,3.998,824,6.326,825,6.326,826,6.326]],["title/classes/CsdlParameter.html",[307,0.347,667,2.671]],["body/classes/CsdlParameter.html",[3,0.094,4,0.094,5,0.094,6,0.114,8,0.072,9,0.631,10,0.229,26,0.136,27,0.009,31,0.649,37,0.128,48,1.813,55,2.688,62,1.344,63,1.963,94,0.237,132,2.947,133,2.947,141,1.253,238,2.875,240,2.947,254,0.169,298,3.289,301,0.197,305,0.007,306,0.007,307,0.673,309,0.241,315,0.301,369,0.377,544,1.176,660,3.221,661,2.706,662,3.705,663,4.461,664,4.461,665,1.914,666,4.674,667,4.914,674,3.221,675,3.522,676,3.221,677,3.705,678,3.363,679,3.221,680,3.762,827,5.573,828,5.573,829,5.573,830,5.573,831,5.573,832,5.573,833,5.573,834,5.573]],["title/classes/CsdlProperty.html",[307,0.347,714,2.28]],["body/classes/CsdlProperty.html",[3,0.094,4,0.094,5,0.094,6,0.113,8,0.071,9,0.629,10,0.233,26,0.138,27,0.009,31,0.658,37,0.125,48,1.801,57,1.535,63,1.955,94,0.237,132,2.882,133,2.882,141,1.238,156,1.728,218,0.758,238,2.98,240,2.882,254,0.166,289,2.587,301,0.141,305,0.007,306,0.007,307,0.658,309,0.24,315,0.306,337,1.775,369,0.351,544,1.22,566,2.407,661,2.678,665,1.906,680,3.678,697,4.658,714,3.627,715,2.86,724,4.709,725,3.908,803,3.901,804,5.789,805,3.689,806,3.689,807,3.689,808,3.901,809,4.449,810,4.449,816,4.902,817,4.902,818,4.902,819,5.303,835,5.55,836,5.55,837,5.55,838,5.55,839,5.55,840,5.55,841,5.55]],["title/classes/CsdlPropertyRef.html",[307,0.347,730,2.797]],["body/classes/CsdlPropertyRef.html",[3,0.104,4,0.104,5,0.104,6,0.108,8,0.079,9,0.796,10,0.206,26,0.121,27,0.009,31,0.65,34,0.339,37,0.129,48,1.766,57,1.703,94,0.235,156,2.692,218,0.736,254,0.171,268,1.945,286,1.125,301,0.156,305,0.007,306,0.007,307,0.679,309,0.266,315,0.277,337,1.893,369,0.365,544,0.862,661,2.563,665,2.114,707,3.715,708,3.59,709,3.064,710,5.386,711,5.749,712,6.079,713,5.749,714,4.346,715,4.346,723,3.064,724,3.29,725,4.168,726,3.715,727,4.746,728,4.093,729,4.328,730,5.121,842,6.157,843,6.632]],["title/classes/CsdlReference.html",[307,0.347,789,3.111]],["body/classes/CsdlReference.html",[3,0.107,4,0.107,5,0.107,6,0.112,8,0.081,9,0.681,10,0.227,26,0.13,27,0.009,34,0.348,37,0.122,48,1.78,94,0.231,212,4.652,218,0.747,254,0.12,267,2.536,268,1.419,301,0.16,305,0.007,306,0.007,307,0.642,309,0.273,315,0.297,337,1.59,369,0.354,544,1.147,566,1.963,661,2.646,685,4.721,687,5.032,689,4.652,693,3.806,694,3.646,706,4.723,723,3.139,783,6.12,784,5.086,788,2.684,789,5.356,790,6.369,791,7.02,792,6.12,793,4.723,794,4.723,844,6.308,845,6.308,846,6.308,847,6.308,848,6.308]],["title/classes/CsdlReferentialConstraint.html",[307,0.347,809,2.797]],["body/classes/CsdlReferentialConstraint.html",[3,0.106,4,0.106,5,0.106,6,0.109,8,0.08,9,0.676,10,0.158,26,0.134,27,0.009,31,0.633,37,0.129,48,1.789,57,2.342,63,2.195,94,0.237,132,2.14,133,2.14,141,1.112,156,1.94,218,0.742,238,2.907,240,2.14,254,0.161,289,4.044,301,0.158,305,0.007,306,0.007,307,0.681,309,0.269,315,0.278,337,1.907,369,0.366,661,2.574,680,2.731,697,3.459,714,3.211,715,3.211,724,4.525,725,4.199,803,4.38,804,5.414,805,4.142,806,4.142,807,4.142,808,4.38,809,5.148,810,4.781,819,3.938,849,6.231,850,6.231,851,7.564]],["title/classes/CsdlReturnType.html",[307,0.347,666,2.671]],["body/classes/CsdlReturnType.html",[3,0.096,4,0.096,5,0.096,6,0.114,8,0.073,9,0.636,10,0.229,26,0.135,27,0.009,31,0.651,37,0.128,48,1.813,55,2.711,62,1.335,63,1.989,94,0.236,132,2.958,133,2.958,141,1.255,238,2.885,240,2.958,254,0.164,298,3.317,301,0.198,305,0.007,306,0.007,307,0.676,309,0.244,315,0.298,369,0.378,544,1.181,660,3.265,661,2.688,662,3.755,663,4.499,664,4.499,666,4.938,667,4.703,674,3.265,675,3.57,676,3.265,677,3.755,678,3.408,679,3.265,680,3.775,852,5.648,853,5.648,854,5.648,855,5.648,856,5.648,857,5.648,858,5.648,859,5.648]],["title/classes/CsdlSchema.html",[307,0.347,860,3.568]],["body/classes/CsdlSchema.html",[3,0.092,4,0.092,5,0.092,6,0.117,8,0.069,9,0.618,10,0.236,26,0.137,27,0.009,34,0.469,37,0.08,48,1.802,51,2.172,62,0.815,63,1.903,94,0.222,218,0.678,254,0.103,267,3.237,268,1.872,301,0.137,305,0.007,306,0.007,307,0.424,309,0.234,315,0.31,369,0.299,533,3.007,544,1.258,566,1.682,660,4.81,661,2.758,674,4.81,685,4.469,687,4.81,689,4.446,692,5.26,694,3.122,695,5.26,706,4.045,707,5.022,708,2.299,723,4.237,726,5.022,731,6.232,732,2.6,763,5.85,785,4.772,788,2.299,860,5.579,861,5.402,862,8.322,863,8.322,864,8.322,865,7.35,866,8.322,867,8.322,868,8.322,869,8.322,870,6.232,871,5.402,872,5.402,873,5.402,874,5.402,875,5.402,876,5.402,877,5.402,878,5.402,879,5.402,880,5.402,881,5.402,882,5.402,883,4.356,884,4.356]],["title/classes/CsdlSingleton.html",[307,0.347,739,3.314]],["body/classes/CsdlSingleton.html",[3,0.113,4,0.113,5,0.113,6,0.114,8,0.086,9,0.704,10,0.213,26,0.136,27,0.009,34,0.368,37,0.099,48,1.756,57,1.843,94,0.231,254,0.168,287,3.106,301,0.169,305,0.008,306,0.008,307,0.523,309,0.288,315,0.296,369,0.34,544,0.933,661,2.686,665,2.289,723,3.317,739,5.897,750,6.212,756,4.431,885,6.665,886,8.838,887,6.665,888,6.665,889,6.665,890,6.665]],["title/classes/CsdlStructuralProperty.html",[307,0.347,804,2.942]],["body/classes/CsdlStructuralProperty.html",[3,0.104,4,0.104,5,0.104,6,0.111,8,0.079,9,0.669,10,0.205,26,0.137,27,0.009,31,0.655,37,0.129,48,1.791,57,1.693,63,2.157,94,0.237,132,2.103,133,2.103,141,1.103,156,1.906,218,0.734,238,3.03,240,2.103,254,0.169,289,2.854,301,0.155,305,0.007,306,0.007,307,0.678,309,0.265,315,0.287,337,1.887,369,0.364,544,0.857,661,2.624,665,2.103,680,2.684,697,3.399,714,3.155,715,3.155,724,4.614,725,4.154,803,4.304,804,5.597,805,4.07,806,4.07,807,4.07,808,4.304,809,4.73,810,4.73,819,3.87,891,6.123,892,6.123,893,6.123,894,6.123]],["title/classes/CsdlStructuredType.html",[307,0.347,710,2.942]],["body/classes/CsdlStructuredType.html",[3,0.098,4,0.098,5,0.098,6,0.114,8,0.074,9,0.81,10,0.23,26,0.131,27,0.009,31,0.667,34,0.317,37,0.126,48,1.785,57,1.592,94,0.233,156,2.787,218,0.706,254,0.169,268,1.294,286,1.052,301,0.146,305,0.007,306,0.007,307,0.666,309,0.249,315,0.3,337,1.816,369,0.356,544,1.188,661,2.698,665,1.976,707,3.473,708,3.778,709,2.864,710,5.476,711,5.952,712,6.294,713,5.952,714,4.523,715,4.523,723,2.864,724,3.075,725,3.998,726,3.473,727,4.552,728,3.826,729,4.045,730,4.552,761,5.083,762,5.083,767,5.083,895,5.083,896,5.083,897,5.755,898,5.755]],["title/classes/CsdlTerm.html",[307,0.347,695,2.797]],["body/classes/CsdlTerm.html",[3,0.096,4,0.096,5,0.096,6,0.117,8,0.073,9,0.636,10,0.234,26,0.137,27,0.009,31,0.597,37,0.122,48,1.804,94,0.238,132,2.898,133,2.898,141,1.241,218,0.554,238,2.826,240,2.898,254,0.161,263,1.991,301,0.143,305,0.007,306,0.007,307,0.642,309,0.244,315,0.309,337,1.796,344,2.097,369,0.337,544,1.239,661,2.762,665,1.941,680,3.698,685,3.953,686,4.233,687,4.116,689,4.166,692,3.573,693,4.297,694,3.267,695,4.501,696,5.931,697,4.683,698,5.931,899,5.653,900,5.653,901,5.653,902,5.653,903,5.653,904,5.653,905,5.653,906,5.653,907,5.653,908,5.653,909,5.653]],["title/classes/CsdlTypeDefinition.html",[307,0.347,870,3.314]],["body/classes/CsdlTypeDefinition.html",[3,0.101,4,0.101,5,0.101,6,0.116,8,0.077,9,0.658,10,0.233,26,0.139,27,0.009,31,0.608,34,0.329,37,0.089,48,1.795,94,0.232,132,2.943,133,2.943,141,1.25,218,0.722,240,2.943,254,0.163,301,0.151,305,0.007,306,0.007,307,0.468,309,0.258,315,0.307,369,0.318,544,1.223,566,1.857,661,2.738,665,2.049,680,3.757,685,4.631,687,4.954,689,4.579,694,3.448,706,4.467,723,2.968,788,2.539,819,5.417,870,5.515,910,5.965,911,8.571,912,5.965,913,5.965,914,5.965,915,5.965,916,5.965,917,5.965,918,5.965,919,5.965]],["title/classes/DateAndTimeFunctions.html",[307,0.347,418,1.884]],["body/classes/DateAndTimeFunctions.html",[0,1.412,3,0.046,4,0.046,5,0.046,6,0.106,8,0.035,10,0.204,19,0.666,26,0.129,27,0.009,31,0.656,34,0.286,37,0.131,60,1.105,62,1.287,94,0.228,108,2.173,110,2.173,130,2.171,140,1.524,141,0.708,159,0.369,167,0.927,170,1.524,209,0.888,218,0.509,222,1.915,230,1.319,242,0.863,249,0.655,254,0.167,268,1.639,286,1.332,294,1.169,301,0.204,305,0.004,306,0.004,307,0.665,308,2.208,309,0.117,310,1.184,311,0.561,314,1.184,315,0.278,317,0.947,318,1.184,320,1.184,322,0.905,323,0.765,324,2.192,325,1.282,326,1.149,327,2.099,328,2.302,329,2.706,330,2.706,331,2.793,332,1.086,333,1.948,334,1.86,335,1.604,336,1.184,337,0.681,338,0.783,339,1.184,340,1.848,341,1.848,342,1.184,343,1.184,344,1.564,345,1.184,346,1.184,347,1.184,348,2.185,349,2.631,350,1.184,351,1.184,352,1.184,353,1.184,354,1.184,355,1.184,356,1.184,357,1.184,358,1.184,359,1.184,360,1.184,361,3.937,362,1.14,363,1.65,364,1.184,365,1.057,366,1.184,367,1.184,368,1.149,369,0.224,370,2.07,371,1.063,372,0.905,373,1.413,374,2.869,375,3.087,376,1.184,377,1.184,378,1.848,379,1.184,380,2.274,381,2.274,382,1.184,383,2.208,384,1.184,385,1.184,386,1.184,387,1.184,388,1.184,389,1.184,390,1.184,391,1.184,392,1.184,393,1.184,394,1.184,395,1.184,396,1.184,397,1.848,398,1.524,399,1.184,400,1.184,401,2.208,402,1.184,403,2.57,404,1.184,405,1.848,406,1.184,407,1.184,408,2.208,409,1.184,410,1.848,411,1.184,412,1.184,413,1.184,414,1.184,415,1.184,416,1.184,417,1.184,418,2.496,419,1.848,420,1.184,421,1.848,422,1.184,423,1.848,424,1.184,425,1.848,426,1.184,427,1.848,428,1.184,429,1.848,430,1.184,431,1.848,432,1.184,433,1.848,434,1.184,435,2.57,436,1.184,437,1.848,438,1.184,439,1.848,440,1.184,441,1.848,442,1.184,443,1.848,444,1.184,445,1.848,446,1.184,447,1.184,448,1.184,449,1.184,450,2.208,451,1.184,452,1.184,453,1.184,454,1.184,455,2.208,456,1.184,457,1.184,458,1.184,459,1.184,460,1.184,461,1.184,462,2.208,463,1.184,464,1.184,465,1.184,466,2.496,467,2.57,468,2.788,469,3.738,470,3.944,471,1.848,472,1.184,473,1.184,474,0.841,475,1.184,476,1.184,477,2.208,478,1.184,479,1.184,480,1.184,481,1.184,482,1.184,483,1.184,484,1.184,485,1.184,486,1.184,487,1.184,488,1.184,489,1.184,490,1.184,491,1.184,492,1.184,493,1.184,494,1.184,495,1.184,496,1.184,497,1.184,498,1.184,499,1.184,500,2.208,501,1.184,502,1.184,503,1.184,504,1.184,505,1.184,506,1.184,507,1.184,508,1.184,509,1.184,510,1.184,511,1.184,512,1.696,513,0.951,514,1.795,515,1.184,516,1.184,517,1.184,518,2.208,519,1.875,520,1.184,521,1.184,522,1.184,523,2.208,524,1.184,525,1.184,526,1.184,527,1.184,528,2.869,529,1.184,530,1.149,531,2.869,532,1.184,533,0.976,534,2.57,535,1.184,536,0.882,920,4.217,921,4.217,922,4.217,923,4.217,924,4.217,925,4.217,926,4.217,927,4.217,928,4.217,929,4.217,930,4.217,931,2.701,932,2.701,933,2.701,934,2.701,935,2.701,936,2.701,937,2.701,938,2.701,939,2.701,940,2.701,941,2.701,942,2.701,943,2.701,944,2.701]],["title/classes/ExpandExpression.html",[307,0.347,945,3.111]],["body/classes/ExpandExpression.html",[3,0.073,4,0.073,5,0.073,6,0.099,8,0.055,9,0.532,10,0.196,19,1.063,25,1.655,26,0.132,27,0.009,28,2.691,31,0.434,34,0.467,37,0.102,49,1.818,60,0.924,62,0.899,64,2.535,65,3.587,67,2.395,68,2.867,70,2.691,94,0.212,130,1.978,141,0.931,157,1.735,159,0.813,209,0.86,218,0.584,222,1.88,230,1.055,239,1.311,242,0.877,246,3.677,247,1.57,249,0.975,254,0.152,281,2.879,286,1.411,294,0.929,301,0.208,305,0.006,306,0.006,307,0.467,309,0.186,311,0.793,315,0.292,317,0.971,322,1.445,323,1.221,324,2.124,325,2.534,327,2.547,328,2.523,329,2.547,330,2.547,331,2.61,333,2.035,334,2.039,335,1.088,338,1.978,348,1.481,369,0.295,370,1.844,398,2.466,474,1.854,536,1.41,544,0.834,559,4.212,561,3.765,562,3.765,563,4.014,564,2.223,566,2.485,567,2.868,569,3.594,574,4.361,578,1.949,580,2.868,581,2.868,582,3.032,585,2.076,587,2.603,589,2.395,592,2.305,593,2.395,595,2.603,596,2.726,597,3.931,604,3.594,610,4.461,613,4.536,614,3.96,616,2.868,617,3.96,618,3.96,619,3.032,620,3.23,621,2.603,622,3.23,623,3.032,624,3.032,625,3.594,626,2.868,627,3.23,629,3.032,630,3.23,631,5.782,632,3.23,633,3.23,634,3.23,635,2.076,636,3.23,638,2.868,639,2.726,640,3.23,641,4.461,643,2.147,645,2.395,646,2.493,945,6.389,946,3.478,947,4.314,948,4.314,949,4.314,950,3.478,951,3.81,952,4.314,953,5.933,954,4.314,955,4.314,956,4.312,957,3.96,958,3.765,959,3.96,960,4.891,961,4.187,962,4.461,963,4.461,964,4.461,965,3.478,966,3.478,967,3.478,968,3.81,969,3.81,970,3.81,971,3.81,972,5.109,973,3.81,974,3.81,975,3.81,976,3.81,977,3.81,978,3.81,979,3.81,980,3.81,981,5.501,982,3.81,983,3.81,984,3.81,985,3.23,986,3.81,987,3.81,988,3.81,989,3.81]],["title/classes/ExpandField.html",[307,0.347,953,3.568]],["body/classes/ExpandField.html",[3,0.069,4,0.069,5,0.069,6,0.113,8,0.052,10,0.217,19,1.004,25,1.615,26,0.135,27,0.009,28,3.243,31,0.418,34,0.461,37,0.099,49,1.78,60,0.859,62,1.141,64,3.055,65,3.531,67,2.887,68,3.455,70,3.243,71,2.509,72,2.586,75,3.178,94,0.209,130,2.192,141,1.141,157,1.639,159,0.782,209,0.854,218,0.4,222,1.78,230,1.246,242,0.843,246,3.713,247,1.805,249,1.017,254,0.166,281,2.589,286,1.382,294,0.907,301,0.226,305,0.006,306,0.006,307,0.449,309,0.176,311,0.762,315,0.299,317,1.007,322,1.365,323,1.154,324,2.06,325,2.626,327,2.354,328,2.471,329,2.507,330,2.507,331,2.569,333,1.985,334,1.997,335,1.444,338,1.181,348,1.399,369,0.286,370,1.101,474,1.782,536,1.332,544,0.571,559,2.849,563,3.455,569,2.459,574,4.15,578,1.841,585,1.961,587,2.459,589,2.262,592,2.177,593,2.262,595,2.459,596,4.537,597,2.177,604,2.459,610,3.052,613,4.772,614,3.806,616,2.709,617,3.806,618,3.806,619,2.865,620,3.052,621,2.459,622,3.052,623,2.865,624,2.865,625,3.455,626,2.709,627,3.052,629,2.865,630,3.052,631,5.663,632,3.052,633,3.052,634,3.052,635,1.961,636,3.052,638,4.4,639,2.576,640,4.287,641,4.287,643,2.028,645,2.262,646,2.355,649,2.069,650,3.286,653,3.286,654,3.599,945,6.164,946,3.286,950,3.286,951,3.599,953,6.098,956,4.537,957,3.806,958,3.619,959,4.4,960,5.213,961,4.025,962,4.287,963,4.287,964,4.287,965,3.286,966,3.286,967,3.286,968,3.599,969,3.599,970,3.599,971,3.599,972,4.956,973,3.599,974,3.599,975,3.599,976,3.599,977,3.599,978,3.599,979,5.057,980,3.599,981,6.323,982,5.057,983,3.599,984,5.057,985,4.956,986,3.599,987,3.599,988,3.599,989,3.599,990,4.075,991,4.075,992,4.075,993,4.075,994,4.075,995,4.075,996,3.286,997,3.599,998,4.075,999,4.075,1000,3.286,1001,4.075,1002,3.286,1003,3.599,1004,4.075,1005,4.075,1006,4.075,1007,4.075,1008,4.075]],["title/classes/Expression.html",[307,0.347,559,2.202]],["body/classes/Expression.html",[3,0.103,4,0.103,5,0.103,6,0.116,8,0.078,9,0.666,10,0.189,25,1.889,26,0.133,27,0.009,31,0.443,34,0.411,37,0.09,94,0.204,156,2.765,209,0.799,249,1.088,254,0.142,301,0.189,305,0.007,306,0.007,307,0.477,309,0.263,311,0.991,315,0.306,317,1.004,324,2.319,325,1.847,327,2.73,328,2.633,329,2.319,330,2.319,331,2.376,333,2.323,334,2.217,335,1.879,348,2.088,369,0.322,370,2.177,398,3.035,536,1.986,559,4.288,561,5.092,563,4.349,564,3.132,578,2.746,592,3.248,645,4.136,649,2.692,1009,6.079,1010,7.451,1011,6.079,1012,6.079,1013,6.079,1014,6.079,1015,6.079,1016,6.079,1017,4.901,1018,4.901]],["title/classes/Field.html",[222,1.042,307,0.347]],["body/classes/Field.html",[3,0.066,4,0.066,5,0.066,6,0.091,8,0.083,9,0.497,10,0.099,23,3.851,26,0.118,27,0.009,29,1.714,33,3.458,34,0.477,37,0.058,48,1.558,49,2.22,51,2.236,54,2.924,55,2.118,56,2.677,57,1.949,58,2.09,59,2.171,60,0.468,62,0.977,63,2.279,94,0.202,132,1.343,133,1.343,156,1.217,218,0.383,222,1.524,224,1.664,234,1.946,238,1.31,240,1.343,242,1.172,254,0.147,257,2.438,260,2.36,263,1.959,267,1.573,268,0.88,269,1.378,285,2.171,286,0.715,287,1.823,289,1.823,294,1.139,298,1.823,301,0.099,302,3.087,305,0.005,306,0.005,307,0.436,309,0.169,315,0.221,322,1.31,337,0.986,338,2.732,344,1.451,362,1.503,369,0.169,370,1.503,563,1.882,643,4.695,660,2.26,663,2.472,664,2.472,665,1.343,666,2.36,667,2.36,674,2.26,675,2.472,676,2.26,678,2.36,679,2.26,680,1.714,689,2.09,692,2.472,693,2.36,695,2.472,696,2.749,697,2.171,698,2.749,707,2.36,708,1.664,711,2.6,713,2.6,714,2.015,715,2.015,724,2.09,726,2.36,727,2.472,728,2.6,730,2.472,731,2.929,732,2.677,738,2.929,739,2.929,747,2.36,749,3.454,750,2.749,756,2.6,760,2.929,763,2.749,764,3.153,765,3.153,783,2.749,788,2.367,789,3.909,790,2.929,792,2.749,793,2.929,794,2.929,805,2.6,806,2.6,807,2.6,809,2.472,810,2.472,819,2.472,860,4.484,865,3.454,870,2.929,883,3.153,884,3.153,1019,3.454,1020,7.415,1021,3.911,1022,5.562,1023,8.578,1024,2.677,1025,4.484,1026,1.946,1027,3.454,1028,4.912,1029,3.911,1030,2.472,1031,3.911,1032,3.911,1033,3.911,1034,3.911,1035,3.911,1036,3.911,1037,3.911,1038,3.911,1039,3.911,1040,3.911,1041,3.911,1042,3.911,1043,3.911,1044,3.911,1045,3.911,1046,2.749,1047,3.911,1048,3.911,1049,3.911,1050,3.911,1051,3.911,1052,3.911,1053,3.911,1054,3.911,1055,3.911,1056,3.911,1057,3.911,1058,3.911,1059,3.911,1060,3.911,1061,3.911,1062,3.911,1063,3.911,1064,3.911,1065,3.911,1066,3.911,1067,3.911,1068,3.911,1069,3.911,1070,3.911,1071,3.911,1072,3.911,1073,3.741,1074,3.911,1075,3.911,1076,3.911,1077,3.911,1078,3.911,1079,3.911,1080,3.911,1081,3.911,1082,3.911,1083,3.911,1084,3.911,1085,3.911,1086,3.911,1087,3.911,1088,3.911,1089,3.911,1090,3.911,1091,3.911,1092,3.911,1093,3.911,1094,3.911,1095,3.911,1096,3.911,1097,3.911,1098,3.911,1099,3.911,1100,3.911,1101,3.911,1102,3.911,1103,3.911,1104,3.911,1105,3.911,1106,3.911,1107,3.911,1108,3.911,1109,3.911,1110,3.911,1111,3.911,1112,3.911,1113,3.911,1114,3.911,1115,3.911,1116,3.911,1117,3.911,1118,5.562,1119,6.472,1120,3.911,1121,3.911,1122,3.911,1123,3.153,1124,3.911,1125,3.911,1126,7.049,1127,5.562,1128,3.911,1129,3.911,1130,3.911,1131,3.911,1132,3.911,1133,3.911,1134,8.65,1135,3.911,1136,5.562,1137,3.911,1138,3.909,1139,3.911,1140,3.911,1141,2.865,1142,3.911,1143,3.911,1144,3.911,1145,3.911,1146,3.911,1147,3.911,1148,3.911,1149,3.911,1150,3.911,1151,3.911,1152,3.911,1153,3.911,1154,3.911,1155,3.911,1156,3.911,1157,4.074,1158,3.911,1159,3.153,1160,3.911,1161,2.472,1162,3.911,1163,6.472,1164,5.562,1165,5.716,1166,3.911,1167,3.911,1168,3.911,1169,3.911,1170,3.911,1171,3.911,1172,3.911,1173,3.911]],["title/classes/Field-1.html",[222,0.868,307,0.289,1174,1.482]],["body/classes/Field-1.html",[0,1.447,3,0.048,4,0.048,5,0.048,6,0.088,8,0.036,9,0.39,10,0.152,19,0.696,26,0.124,27,0.009,31,0.659,34,0.294,37,0.131,48,0.836,60,1.099,62,1.036,94,0.232,130,2.2,140,1.578,141,0.729,159,0.385,167,0.97,170,1.578,209,0.889,218,0.523,222,1.952,230,1.358,239,1.327,242,0.884,249,0.674,254,0.164,268,1.663,286,1.465,294,1.172,301,0.165,305,0.004,306,0.004,307,0.67,308,2.272,309,0.122,310,1.237,311,0.581,314,1.237,315,0.222,317,0.622,318,1.237,320,1.237,322,0.946,323,0.799,324,2.228,325,1.327,326,1.202,327,2.137,328,2.34,329,2.722,330,2.722,331,2.808,332,1.135,333,1.98,334,1.89,335,1.731,336,1.913,337,0.712,338,1.547,339,1.913,340,1.913,341,1.913,342,1.913,343,2.339,344,2.228,345,1.237,346,1.237,347,1.237,348,2.23,349,2.686,350,1.237,351,1.913,352,1.237,353,1.237,354,1.237,355,1.237,356,1.237,357,1.237,358,1.237,359,1.237,360,1.237,361,3.946,362,1.18,363,1.708,364,1.237,365,1.105,366,1.237,367,1.237,368,1.202,369,0.26,370,2.095,371,1.101,372,0.946,373,1.462,374,2.922,375,3.138,376,1.237,377,1.237,378,1.913,379,1.237,380,2.339,381,2.339,382,1.237,383,2.272,384,1.237,385,1.237,386,1.237,387,1.237,388,1.237,389,1.237,390,1.237,391,1.237,392,1.237,393,1.237,394,1.237,395,1.237,396,1.237,397,1.913,398,1.578,399,1.237,400,1.237,401,2.272,402,1.237,403,2.633,404,1.237,405,1.913,406,1.237,407,1.237,408,2.272,409,1.237,410,1.913,411,1.237,412,1.237,413,1.237,414,1.237,415,1.237,416,1.237,417,1.237,418,2.272,419,1.237,420,1.237,421,1.237,422,1.237,423,1.237,424,1.237,425,1.237,426,1.237,427,1.237,428,1.237,429,1.237,430,1.237,431,1.237,432,1.237,433,1.237,434,1.237,435,1.237,436,1.237,437,1.237,438,1.237,439,1.237,440,1.237,441,1.237,442,1.237,443,1.237,444,1.237,445,1.237,446,1.237,447,1.237,448,1.237,449,1.237,450,2.272,451,1.237,452,1.237,453,1.237,454,1.237,455,2.272,456,1.237,457,1.237,458,1.237,459,1.237,460,1.237,461,1.237,462,2.272,463,1.237,464,1.237,465,1.237,466,2.556,467,2.633,468,2.846,469,3.764,470,3.96,471,1.913,472,1.237,473,1.237,474,0.879,475,1.237,476,1.237,477,2.272,478,1.237,479,1.237,480,1.237,481,1.237,482,1.237,483,1.237,484,1.237,485,1.237,486,1.237,487,1.237,488,1.237,489,1.237,490,1.237,491,1.237,492,1.237,493,1.237,494,1.237,495,1.237,496,1.237,497,1.237,498,1.237,499,1.237,500,2.272,501,1.237,502,1.237,503,1.237,504,1.237,505,1.237,506,1.237,507,1.237,508,1.237,509,1.237,510,1.237,511,1.237,512,1.756,513,0.994,514,1.858,515,1.237,516,1.237,517,1.237,518,2.272,519,1.929,520,1.237,521,1.237,522,1.237,523,2.272,524,1.237,525,1.237,526,1.237,527,1.237,528,2.922,529,1.237,530,1.202,531,2.922,532,1.237,533,1.02,534,2.633,535,1.237,536,0.923,665,0.97,1175,3.069,1176,2.823,1177,2.823,1178,2.823,1179,2.823,1180,2.823]],["title/interfaces/FieldParser.html",[0,1.066,237,2.28]],["body/interfaces/FieldParser.html",[0,1.862,1,2.878,2,1.828,3,0.06,4,0.06,5,0.06,6,0.046,7,2.051,8,0.046,9,0.548,10,0.208,11,1.97,12,2.051,13,3.129,14,1.51,15,3.273,16,2.58,17,2.141,18,3.129,19,1.661,20,2.051,21,3.129,22,2.141,23,3.049,24,1.97,26,0.135,27,0.009,28,2.342,29,2.273,30,2.416,31,0.666,32,3.243,33,3.6,34,0.196,35,2.534,36,1.555,37,0.134,38,2.051,39,2.051,40,2.051,41,3.373,42,1.766,43,2.77,44,2.997,45,1.708,46,2.051,47,2.997,48,0.68,49,0.835,50,1.603,51,2.464,52,1.708,53,2.77,54,3.044,55,1.975,56,2.495,57,1.694,58,2.77,59,2.878,60,1.008,61,2.868,62,0.783,63,1.826,64,2.207,65,2.273,66,2.77,67,2.085,68,2.495,69,2.77,70,2.342,71,2.273,72,2.342,73,2.495,74,2.878,75,2.878,76,1.97,77,3.129,78,4.259,79,3.129,80,2.243,81,4.732,82,2.243,83,2.243,84,2.051,85,3.129,86,4.53,87,4.143,88,2.141,89,3.129,90,2.243,91,2.243,92,3.872,93,2.243,94,0.235,95,3.129,96,3.741,97,2.243,98,2.243,99,3.129,100,2.243,101,3.129,102,2.141,103,3.129,104,2.141,105,3.129,106,2.141,107,3.129,108,3.472,109,1.828,110,3.472,111,3.277,112,3.277,113,3.129,114,2.243,115,2.243,116,2.243,117,2.141,118,3.129,119,2.243,120,2.243,121,2.141,122,3.129,123,2.878,124,2.243,125,2.243,126,2.243,127,2.243,128,3.129,129,2.243,130,1.776,131,2.243,132,2.571,133,2.571,134,3.697,135,3.129,136,3.277,137,3.277,138,2.243,139,3.277,140,2.435,141,1.2,142,2.243,143,2.243,144,3.277,145,2.141,146,3.129,147,2.243,148,2.243,149,2.243,150,1.708,151,3.129,152,2.495,153,3.129,154,3.129,155,3.129,156,1.614,157,2.464,158,3.697,159,0.708,160,3.129,161,4.517,162,5.322,163,5.322,164,5.322,165,2.141,166,3.129,167,2.314,168,2.141,169,3.129,170,1.874,171,2.141,172,3.129,173,3.924,174,3.277,175,2.141,176,3.129,177,2.77,178,2.141,179,3.129,180,3.277,181,2.141,182,3.129,183,3.277,184,2.141,185,3.129,186,3.697,187,3.129,188,4.732,189,2.141,190,3.129,191,2.141,192,3.129,193,2.141,194,3.129,195,2.141,196,3.129,197,2.141,198,3.129,199,2.141,200,3.129,201,2.141,202,1.694,203,2.997,204,2.997,205,2.878,206,2.141,207,2.141,208,2.051,209,0.493,210,1.766,211,2.141,212,1.896,213,2.243,214,2.243,215,2.243,216,3.096,217,2.051,218,0.661,219,2.141,220,2.141,221,3.741,222,0.835,223,3.401,224,3.051,225,2.855,226,3.872,227,2.207,228,2.58,229,2.098,230,1.042,231,2.855,232,2.416,233,1.766,234,3.049,235,1.766,236,1.654,237,2.671,238,2.508,239,2.275,240,2.462,241,3.895,242,0.522,243,1.896,244,2.243,245,1.828,246,2.144,247,0.817,248,2.243,249,0.448,250,1.654,251,1.97,252,1.766,253,2.141,254,0.154,255,2.243,256,2.243,257,1.555,258,2.243,259,2.051,260,2.141,261,2.997,262,4.235,263,1.25,264,2.051,265,2.051,266,2.051,267,1.427,268,1.166,269,2.723,270,1.97,271,2.77,272,1.766,273,2.878,274,2.141,275,2.77,276,2.141,277,2.997,278,1.97,279,2.997,280,2.878,281,2.028,282,2.051,283,1.828,284,2.671,285,1.97,286,0.649,287,1.654,288,2.051,289,1.654,290,2.051,291,2.243,292,1.97,293,2.051,294,0.774,295,1.708,296,1.654,297,1.654,298,1.654,299,2.051,300,2.141,301,0.09,302,1.97,303,1.828,304,1.708,305,0.005,306,0.005]],["title/classes/Function.html",[62,0.668,307,0.347]],["body/classes/Function.html",[0,1.453,3,0.048,4,0.048,5,0.048,6,0.088,8,0.037,10,0.112,19,0.702,25,0.988,26,0.124,27,0.009,31,0.664,34,0.296,37,0.132,60,1.097,62,1.119,94,0.231,130,2.327,140,1.588,141,0.733,159,0.389,167,0.978,170,1.588,209,0.89,218,0.526,222,1.936,230,1.33,242,0.888,249,0.823,254,0.161,268,1.668,286,1.356,294,1.172,301,0.112,305,0.004,306,0.004,307,0.671,308,2.284,309,0.123,310,1.248,311,0.585,314,1.248,315,0.222,317,0.625,318,1.248,320,1.248,322,0.954,323,0.806,324,2.235,325,1.335,326,1.212,327,2.235,328,2.487,329,2.725,330,2.744,331,2.811,332,1.145,333,2.15,334,2.052,335,1.737,336,1.248,337,0.718,338,0.825,339,1.248,340,1.926,341,1.926,342,1.248,343,1.248,344,1.63,345,1.248,346,1.248,347,1.248,348,2.239,349,2.696,350,1.248,351,1.248,352,1.248,353,1.248,354,1.248,355,1.248,356,1.248,357,1.248,358,1.248,359,1.248,360,1.248,361,3.955,362,1.187,363,1.719,364,1.248,365,1.114,366,1.248,367,1.248,368,1.212,369,0.261,370,2.1,371,1.108,372,0.954,373,1.472,374,2.932,375,3.147,376,1.248,377,1.248,378,1.926,379,1.248,380,2.352,381,2.352,382,1.248,383,2.284,384,1.248,385,1.248,386,1.248,387,1.248,388,1.248,389,1.248,390,1.248,391,1.248,392,1.248,393,1.248,394,1.248,395,1.248,396,1.248,397,1.926,398,1.588,399,1.248,400,1.248,401,2.284,402,1.248,403,2.644,404,1.248,405,1.926,406,1.248,407,1.248,408,2.284,409,1.248,410,1.926,411,1.248,412,1.248,413,1.248,414,1.248,415,1.248,416,1.248,417,1.248,418,2.284,419,1.248,420,1.248,421,1.248,422,1.248,423,1.248,424,1.248,425,1.248,426,1.248,427,1.248,428,1.248,429,1.248,430,1.248,431,1.248,432,1.248,433,1.248,434,1.248,435,1.248,436,1.248,437,1.248,438,1.248,439,1.248,440,1.248,441,1.248,442,1.248,443,1.248,444,1.248,445,1.248,446,1.248,447,1.248,448,1.248,449,1.248,450,2.284,451,1.248,452,1.248,453,1.248,454,1.248,455,2.284,456,1.248,457,1.248,458,1.248,459,1.248,460,1.248,461,1.248,462,2.284,463,1.248,464,1.248,465,1.248,466,2.568,467,2.644,468,2.858,469,3.769,470,3.962,471,1.926,472,1.248,473,1.248,474,0.886,475,1.248,476,1.248,477,2.284,478,1.248,479,1.248,480,1.248,481,1.248,482,1.248,483,1.248,484,1.248,485,1.248,486,1.248,487,1.248,488,1.248,489,1.248,490,1.248,491,1.248,492,1.248,493,1.248,494,1.248,495,1.248,496,1.248,497,1.248,498,1.248,499,1.248,500,2.284,501,1.248,502,1.248,503,1.248,504,1.248,505,1.248,506,1.248,507,1.248,508,1.248,509,1.248,510,1.248,511,1.248,512,1.767,513,1.003,514,1.87,515,1.248,516,1.248,517,1.248,518,2.284,519,1.939,520,1.248,521,1.248,522,1.248,523,2.284,524,1.248,525,1.248,526,1.248,527,1.248,528,2.932,529,1.248,530,1.212,531,2.932,532,1.248,533,1.029,534,2.644,535,1.248,536,0.93,578,1.286,649,1.588,665,0.978,1181,2.847,1182,2.847,1183,2.847,1184,2.847,1185,2.847]],["title/classes/GeoFunctions.html",[307,0.347,455,1.884]],["body/classes/GeoFunctions.html",[0,1.454,3,0.048,4,0.048,5,0.048,6,0.078,8,0.037,10,0.136,19,0.702,26,0.121,27,0.009,31,0.665,34,0.296,37,0.132,60,1.099,62,1.149,94,0.231,130,2.206,140,2.181,141,0.733,159,0.389,167,1.51,170,2.181,209,0.89,218,0.526,222,1.936,230,1.364,242,0.889,249,0.678,254,0.159,268,1.668,286,1.356,294,1.172,301,0.136,305,0.004,306,0.004,307,0.671,308,2.285,309,0.123,310,1.249,311,0.585,314,1.249,315,0.183,317,0.625,318,1.249,320,1.249,322,0.955,323,0.807,324,2.236,325,1.336,326,1.213,327,2.145,328,2.347,329,2.725,330,2.725,331,2.811,332,1.146,333,1.987,334,1.897,335,1.645,336,1.249,337,0.719,338,0.826,339,1.249,340,1.927,341,1.927,342,1.249,343,1.249,344,1.631,345,1.249,346,1.249,347,1.249,348,2.24,349,2.697,350,1.249,351,1.249,352,1.249,353,1.249,354,1.249,355,1.249,356,1.249,357,1.249,358,1.249,359,1.249,360,1.249,361,3.961,362,1.188,363,1.72,364,1.249,365,1.115,366,1.249,367,1.249,368,1.213,369,0.232,370,2.101,371,1.109,372,0.955,373,1.473,374,2.933,375,3.148,376,1.249,377,1.249,378,1.927,379,1.249,380,2.353,381,2.353,382,1.249,383,2.285,384,1.249,385,1.249,386,1.249,387,1.249,388,1.249,389,1.249,390,1.249,391,1.249,392,1.249,393,1.249,394,1.249,395,1.249,396,1.249,397,1.927,398,1.589,399,1.249,400,1.249,401,2.285,402,1.249,403,2.646,404,1.249,405,1.927,406,1.249,407,1.249,408,2.285,409,1.249,410,1.927,411,1.249,412,1.249,413,1.249,414,1.249,415,1.249,416,1.249,417,1.249,418,2.285,419,1.249,420,1.249,421,1.249,422,1.249,423,1.249,424,1.249,425,1.249,426,1.249,427,1.249,428,1.249,429,1.249,430,1.249,431,1.249,432,1.249,433,1.249,434,1.249,435,1.249,436,1.249,437,1.249,438,1.249,439,1.249,440,1.249,441,1.249,442,1.249,443,1.249,444,1.249,445,1.249,446,1.249,447,1.249,448,1.249,449,1.249,450,2.285,451,1.249,452,1.249,453,1.249,454,1.249,455,2.569,456,1.927,457,1.249,458,1.927,459,1.249,460,1.927,461,1.249,462,2.285,463,1.249,464,1.249,465,1.249,466,2.569,467,2.646,468,2.859,469,3.769,470,3.963,471,1.927,472,1.249,473,1.249,474,0.887,475,1.249,476,1.249,477,2.285,478,1.249,479,1.249,480,1.249,481,1.249,482,1.249,483,1.249,484,1.249,485,1.249,486,1.249,487,1.249,488,1.249,489,1.249,490,1.249,491,1.249,492,1.249,493,1.249,494,1.249,495,1.249,496,1.249,497,1.249,498,1.249,499,1.249,500,2.285,501,1.249,502,1.249,503,1.249,504,1.249,505,1.249,506,1.249,507,1.249,508,1.249,509,1.249,510,1.249,511,1.249,512,1.768,513,1.004,514,1.871,515,1.249,516,1.249,517,1.249,518,2.285,519,1.94,520,1.249,521,1.249,522,1.249,523,2.285,524,1.249,525,1.249,526,1.249,527,1.249,528,2.933,529,1.249,530,1.213,531,2.933,532,1.249,533,1.03,534,2.646,535,1.249,536,0.931,544,0.752,1186,4.397,1187,4.397,1188,4.397,1189,2.85,1190,2.85,1191,2.85]],["title/classes/Grouping.html",[307,0.347,512,1.78]],["body/classes/Grouping.html",[0,1.458,3,0.049,4,0.049,5,0.049,6,0.089,8,0.037,10,0.112,19,0.706,25,0.993,26,0.124,27,0.009,31,0.66,34,0.297,37,0.132,60,1.098,62,1.043,94,0.23,130,2.21,140,1.596,141,0.736,159,0.391,167,0.984,170,1.596,209,0.89,218,0.528,222,1.939,230,1.331,242,0.891,249,0.826,254,0.158,268,1.671,286,1.358,294,1.173,301,0.112,305,0.004,306,0.004,307,0.672,308,2.293,309,0.124,310,1.256,311,0.588,314,1.256,315,0.223,317,0.628,318,1.256,320,1.256,322,0.96,323,0.811,324,2.24,325,1.342,326,1.22,327,2.373,328,2.492,329,2.727,330,2.727,331,2.813,332,1.152,333,2.153,334,2.056,335,1.742,336,1.256,337,0.723,338,0.831,339,1.256,340,1.936,341,1.936,342,1.256,343,1.256,344,1.638,345,1.256,346,1.256,347,1.256,348,2.246,349,2.704,350,1.256,351,1.256,352,1.256,353,1.256,354,1.256,355,1.256,356,1.256,357,1.256,358,1.256,359,1.256,360,1.256,361,3.949,362,1.193,363,1.728,364,1.256,365,1.121,366,1.256,367,1.256,368,1.22,369,0.262,370,2.104,371,1.114,372,0.96,373,1.479,374,2.94,375,3.155,376,1.256,377,1.256,378,1.936,379,1.256,380,2.361,381,2.361,382,1.256,383,2.293,384,1.256,385,1.256,386,1.256,387,1.256,388,1.256,389,1.256,390,1.256,391,1.256,392,1.256,393,1.256,394,1.256,395,1.256,396,1.256,397,1.936,398,1.596,399,1.256,400,1.256,401,2.293,402,1.256,403,2.653,404,1.256,405,1.936,406,1.256,407,1.256,408,2.293,409,1.256,410,1.936,411,1.256,412,1.256,413,1.256,414,1.256,415,1.256,416,1.256,417,1.256,418,2.293,419,1.256,420,1.256,421,1.256,422,1.256,423,1.256,424,1.256,425,1.256,426,1.256,427,1.256,428,1.256,429,1.256,430,1.256,431,1.256,432,1.256,433,1.256,434,1.256,435,1.256,436,1.256,437,1.256,438,1.256,439,1.256,440,1.256,441,1.256,442,1.256,443,1.256,444,1.256,445,1.256,446,1.256,447,1.256,448,1.256,449,1.256,450,2.293,451,1.256,452,1.256,453,1.256,454,1.256,455,2.293,456,1.256,457,1.256,458,1.256,459,1.256,460,1.256,461,1.256,462,2.293,463,1.256,464,1.256,465,1.256,466,2.576,467,2.653,468,2.866,469,3.773,470,3.965,471,1.936,472,1.256,473,1.256,474,0.892,475,1.256,476,1.256,477,2.293,478,1.256,479,1.256,480,1.256,481,1.256,482,1.256,483,1.256,484,1.256,485,1.256,486,1.256,487,1.256,488,1.256,489,1.256,490,1.256,491,1.256,492,1.256,493,1.256,494,1.256,495,1.256,496,1.256,497,1.256,498,1.256,499,1.256,500,2.293,501,1.256,502,1.256,503,1.256,504,1.256,505,1.256,506,1.256,507,1.256,508,1.256,509,1.256,510,1.256,511,1.256,512,2.434,513,1.009,514,2.576,515,1.256,516,1.256,517,1.256,518,2.293,519,1.947,520,1.256,521,1.256,522,1.256,523,2.293,524,1.256,525,1.256,526,1.256,527,1.256,528,2.94,529,1.256,530,1.22,531,2.94,532,1.256,533,1.036,534,2.653,535,1.256,536,0.936,578,1.295,649,1.596,1192,2.866,1193,2.866,1194,2.866,1195,2.866,1196,2.866,1197,2.866]],["title/classes/Lambda.html",[307,0.347,518,1.884]],["body/classes/Lambda.html",[0,1.454,3,0.048,4,0.048,5,0.048,6,0.089,8,0.037,10,0.112,19,0.703,25,0.989,26,0.124,27,0.009,31,0.659,34,0.296,37,0.132,60,1.097,62,1.04,94,0.232,130,2.328,140,1.59,141,0.733,159,0.389,167,0.979,170,1.59,209,0.89,218,0.527,222,1.937,230,1.33,242,0.889,249,0.824,254,0.158,268,1.78,286,1.356,294,1.172,301,0.112,305,0.004,306,0.004,307,0.671,308,2.286,309,0.123,310,1.25,311,0.585,314,1.25,315,0.223,317,0.626,318,1.25,320,1.25,322,0.955,323,0.807,324,2.236,325,1.337,326,1.213,327,2.236,328,2.488,329,2.725,330,2.725,331,2.812,332,1.146,333,2.15,334,2.053,335,1.738,336,1.25,337,0.719,338,0.826,339,1.25,340,1.928,341,1.928,342,1.25,343,1.25,344,1.631,345,1.25,346,1.25,347,1.25,348,2.24,349,2.698,350,1.25,351,1.25,352,1.25,353,1.25,354,1.25,355,1.25,356,1.25,357,1.25,358,1.25,359,1.25,360,1.25,361,3.948,362,1.189,363,1.721,364,1.25,365,1.115,366,1.25,367,1.25,368,1.213,369,0.261,370,2.101,371,1.109,372,0.955,373,1.473,374,2.934,375,3.149,376,1.25,377,1.25,378,1.928,379,1.25,380,2.354,381,2.354,382,1.25,383,2.286,384,1.25,385,1.25,386,1.25,387,1.25,388,1.25,389,1.25,390,1.25,391,1.25,392,1.25,393,1.25,394,1.25,395,1.25,396,1.25,397,1.928,398,1.59,399,1.25,400,1.25,401,2.286,402,1.25,403,2.646,404,1.25,405,1.928,406,1.25,407,1.25,408,2.286,409,1.25,410,1.928,411,1.25,412,1.25,413,1.25,414,1.25,415,1.25,416,1.25,417,1.25,418,2.286,419,1.25,420,1.25,421,1.25,422,1.25,423,1.25,424,1.25,425,1.25,426,1.25,427,1.25,428,1.25,429,1.25,430,1.25,431,1.25,432,1.25,433,1.25,434,1.25,435,1.25,436,1.25,437,1.25,438,1.25,439,1.25,440,1.25,441,1.25,442,1.25,443,1.25,444,1.25,445,1.25,446,1.25,447,1.25,448,1.25,449,1.25,450,2.286,451,1.25,452,1.25,453,1.25,454,1.25,455,2.286,456,1.25,457,1.25,458,1.25,459,1.25,460,1.25,461,1.25,462,2.286,463,1.25,464,1.25,465,1.25,466,2.569,467,3.021,468,2.859,469,3.77,470,3.963,471,1.928,472,1.25,473,1.25,474,0.887,475,1.25,476,1.25,477,2.286,478,1.25,479,1.25,480,1.25,481,1.25,482,1.25,483,1.25,484,1.25,485,1.25,486,1.25,487,1.25,488,1.25,489,1.25,490,1.25,491,1.25,492,1.25,493,1.25,494,1.25,495,1.25,496,1.25,497,1.25,498,1.25,499,1.25,500,2.286,501,1.25,502,1.25,503,1.25,504,1.25,505,1.25,506,1.25,507,1.25,508,1.25,509,1.25,510,1.25,511,1.25,512,1.769,513,1.004,514,1.872,515,1.25,516,1.25,517,1.25,518,2.776,519,1.941,520,1.25,521,1.25,522,1.25,523,2.286,524,1.25,525,1.25,526,1.25,527,1.25,528,2.934,529,1.25,530,1.213,531,2.934,532,1.25,533,1.03,534,2.646,535,1.25,536,0.932,544,0.399,578,1.288,649,1.59,1198,2.518,1199,2.851,1200,2.851,1201,2.851,1202,2.851,1203,2.851]],["title/classes/LambdaOperators.html",[307,0.347,523,1.884]],["body/classes/LambdaOperators.html",[0,1.464,3,0.049,4,0.049,5,0.049,6,0.07,8,0.037,10,0.113,19,0.711,26,0.12,27,0.009,31,0.66,34,0.298,37,0.132,60,1.102,62,1.046,94,0.231,130,2.215,140,1.605,141,0.739,159,0.394,167,0.991,170,1.605,209,0.89,218,0.531,222,1.977,230,1.356,242,0.895,249,0.683,254,0.158,268,1.812,286,1.362,294,1.173,301,0.113,305,0.004,306,0.004,307,0.672,308,2.303,309,0.125,310,1.265,311,0.591,314,1.265,315,0.152,317,0.517,318,1.265,320,1.265,322,0.967,323,0.817,324,2.246,325,1.35,326,1.229,327,2.156,328,2.358,329,2.73,330,2.73,331,2.816,332,1.161,333,1.996,334,1.905,335,1.654,336,1.265,337,0.728,338,0.837,339,1.265,340,1.946,341,1.946,342,1.265,343,1.265,344,1.647,345,1.265,346,1.265,347,1.265,348,2.253,349,2.713,350,1.265,351,1.265,352,1.265,353,1.265,354,1.265,355,1.265,356,1.265,357,1.265,358,1.265,359,1.265,360,1.265,361,3.951,362,1.2,363,1.737,364,1.265,365,1.129,366,1.265,367,1.265,368,1.229,369,0.234,370,2.108,371,1.12,372,0.967,373,1.487,374,2.948,375,3.163,376,1.265,377,1.265,378,1.946,379,1.265,380,2.372,381,2.372,382,1.265,383,2.303,384,1.265,385,1.265,386,1.265,387,1.265,388,1.265,389,1.265,390,1.265,391,1.265,392,1.265,393,1.265,394,1.265,395,1.265,396,1.265,397,1.946,398,1.605,399,1.265,400,1.265,401,2.303,402,1.265,403,2.664,404,1.265,405,1.946,406,1.265,407,1.265,408,2.303,409,1.265,410,1.946,411,1.265,412,1.265,413,1.265,414,1.265,415,1.265,416,1.265,417,1.265,418,2.303,419,1.265,420,1.265,421,1.265,422,1.265,423,1.265,424,1.265,425,1.265,426,1.265,427,1.265,428,1.265,429,1.265,430,1.265,431,1.265,432,1.265,433,1.265,434,1.265,435,1.265,436,1.265,437,1.265,438,1.265,439,1.265,440,1.265,441,1.265,442,1.265,443,1.265,444,1.265,445,1.265,446,1.265,447,1.265,448,1.265,449,1.265,450,2.303,451,1.265,452,1.265,453,1.265,454,1.265,455,2.303,456,1.265,457,1.265,458,1.265,459,1.265,460,1.265,461,1.265,462,2.303,463,1.265,464,1.265,465,1.265,466,2.586,467,2.664,468,2.875,469,3.777,470,3.967,471,1.946,472,1.265,473,1.265,474,0.899,475,1.265,476,1.265,477,2.303,478,1.265,479,1.265,480,1.265,481,1.265,482,1.265,483,1.265,484,1.265,485,1.265,486,1.265,487,1.265,488,1.265,489,1.265,490,1.265,491,1.265,492,1.265,493,1.265,494,1.265,495,1.265,496,1.265,497,1.265,498,1.265,499,1.265,500,2.303,501,1.265,502,1.265,503,1.265,504,1.265,505,1.265,506,1.265,507,1.265,508,1.265,509,1.265,510,1.265,511,1.265,512,1.786,513,1.017,514,1.89,515,1.265,516,1.265,517,1.265,518,2.792,519,1.956,520,1.265,521,1.265,522,1.265,523,2.586,524,1.946,525,1.265,526,1.946,527,1.265,528,2.948,529,1.265,530,1.229,531,2.948,532,1.265,533,1.043,534,2.664,535,1.265,536,0.943,544,0.622,1204,2.887,1205,2.887]],["title/classes/LogicalOperators.html",[307,0.347,477,1.884]],["body/classes/LogicalOperators.html",[0,1.417,3,0.046,4,0.046,5,0.046,6,0.099,8,0.035,10,0.19,19,0.669,26,0.126,27,0.009,31,0.671,34,0.287,37,0.131,60,1.095,62,1.02,94,0.228,130,2.174,140,1.531,141,0.711,159,0.371,167,0.933,170,1.531,209,0.888,218,0.511,222,1.917,230,1.32,242,0.866,249,0.658,254,0.164,268,1.642,286,1.335,294,1.169,301,0.19,305,0.004,306,0.004,307,0.666,308,2.216,309,0.117,310,1.19,311,0.564,314,1.19,315,0.256,317,0.874,318,1.19,320,1.19,322,0.91,323,0.769,324,2.197,325,1.287,326,1.156,327,2.104,328,2.306,329,2.708,330,2.708,331,2.795,332,1.092,333,1.952,334,1.864,335,1.608,336,1.19,337,0.685,338,0.787,339,1.19,340,1.857,341,1.857,342,1.19,343,1.19,344,1.571,345,1.19,346,1.19,347,1.19,348,2.19,349,2.638,350,1.19,351,1.19,352,1.19,353,1.19,354,1.19,355,1.19,356,1.19,357,1.19,358,1.19,359,1.19,360,1.19,361,3.972,362,1.145,363,1.657,364,1.19,365,1.062,366,1.19,367,1.19,368,1.156,369,0.225,370,2.073,371,1.068,372,0.91,373,1.419,374,2.876,375,3.093,376,1.19,377,1.19,378,1.857,379,1.19,380,2.282,381,2.282,382,1.19,383,2.216,384,1.19,385,1.19,386,1.19,387,1.19,388,1.19,389,1.19,390,1.19,391,1.19,392,1.19,393,1.19,394,1.19,395,1.19,396,1.19,397,1.857,398,1.531,399,1.19,400,1.19,401,2.216,402,1.19,403,2.578,404,1.19,405,1.857,406,1.19,407,1.19,408,2.216,409,1.19,410,1.857,411,1.19,412,1.19,413,1.19,414,1.19,415,1.19,416,1.19,417,1.19,418,2.216,419,1.19,420,1.19,421,1.19,422,1.19,423,1.19,424,1.19,425,1.19,426,1.19,427,1.19,428,1.19,429,1.19,430,1.19,431,1.19,432,1.19,433,1.19,434,1.19,435,1.19,436,1.19,437,1.19,438,1.19,439,1.19,440,1.19,441,1.19,442,1.19,443,1.19,444,1.19,445,1.19,446,1.19,447,1.19,448,1.19,449,1.19,450,2.216,451,1.19,452,1.19,453,1.19,454,1.19,455,2.216,456,1.19,457,1.19,458,1.19,459,1.19,460,1.19,461,1.19,462,2.216,463,1.19,464,1.19,465,1.19,466,3.425,467,2.578,468,2.795,469,3.866,470,4.024,471,1.857,472,1.19,473,1.19,474,0.845,475,1.19,476,1.19,477,2.503,478,1.857,479,1.19,480,1.857,481,1.19,482,1.857,483,1.19,484,1.857,485,1.19,486,1.857,487,1.19,488,1.857,489,1.19,490,1.19,491,1.19,492,1.19,493,1.19,494,1.857,495,1.19,496,1.857,497,1.19,498,1.857,499,1.19,500,2.216,501,1.19,502,1.19,503,1.19,504,1.19,505,1.19,506,1.19,507,1.19,508,1.19,509,1.19,510,1.19,511,1.19,512,1.703,513,0.957,514,1.803,515,1.19,516,1.19,517,1.19,518,2.216,519,1.882,520,1.19,521,1.19,522,1.19,523,2.216,524,1.19,525,1.19,526,1.19,527,1.19,528,2.876,529,1.19,530,1.156,531,2.876,532,1.19,533,0.981,534,2.578,535,1.19,536,0.887,544,1.051,1206,4.236,1207,4.236,1208,4.236,1209,4.236,1210,4.236,1211,4.236,1212,2.716,1213,2.716,1214,2.716,1215,2.716,1216,2.716,1217,2.716,1218,2.716,1219,2.716,1220,2.716]],["title/classes/ODataAnnotatable.html",[307,0.347,1221,2.202]],["body/classes/ODataAnnotatable.html",[3,0.098,4,0.098,5,0.098,6,0.109,8,0.074,9,0.703,10,0.2,25,1.622,26,0.131,27,0.009,31,0.526,34,0.318,37,0.107,60,0.987,62,1.188,94,0.225,141,0.788,159,0.788,202,2.357,209,0.807,230,1.217,242,1.062,247,1.328,249,0.994,254,0.15,262,4.205,263,3.094,264,3.335,265,3.335,266,3.335,269,2.904,294,0.911,301,0.209,305,0.007,306,0.007,307,0.566,309,0.249,311,0.96,315,0.281,317,1.009,369,0.249,371,1.819,788,3.879,1221,3.59,1222,5.096,1223,4.169,1224,4.169,1225,3.472,1226,7.214,1227,2.607,1228,4.535,1229,4.004,1230,4.248,1231,5.77,1232,4.167,1233,4.577,1234,4.577,1235,2.822,1236,4.004,1237,4.806,1238,5.77,1239,3.969,1240,3.259,1241,4.004,1242,5.096,1243,5.096,1244,5.096,1245,5.096,1246,3.647,1247,5.096,1248,1.933,1249,5.096,1250,5.096,1251,5.096,1252,2.973,1253,5.096,1254,5.096,1255,5.096,1256,5.096,1257,5.096,1258,5.096,1259,5.096,1260,5.096]],["title/classes/ODataAnnotation.html",[307,0.347,1228,2.365]],["body/classes/ODataAnnotation.html",[3,0.1,4,0.1,5,0.1,6,0.115,8,0.076,9,0.763,10,0.231,26,0.131,27,0.009,31,0.58,34,0.325,37,0.109,60,0.875,62,0.89,94,0.232,141,0.998,159,0.805,202,2.39,209,0.79,230,0.912,242,1.077,249,0.923,254,0.112,262,4.564,263,3.108,264,4.594,265,4.594,266,4.594,269,2.576,294,0.923,301,0.15,305,0.007,306,0.007,307,0.574,309,0.255,315,0.301,317,0.926,369,0.255,371,1.487,788,3.705,1221,2.934,1222,5.208,1225,2.838,1228,4.44,1229,3.273,1230,3.768,1232,3.825,1233,4.059,1234,4.059,1236,3.273,1237,4.832,1239,3.519,1240,2.664,1241,3.273,1242,6.458,1243,5.208,1244,5.208,1245,5.208,1246,3.727,1247,5.208,1248,1.975,1249,5.208,1250,5.208,1251,5.208,1252,3.038,1253,5.208,1254,5.208,1255,5.208,1256,5.208,1257,5.208,1258,5.208,1259,5.208,1260,5.208,1261,7.312,1262,5.897,1263,5.897,1264,5.897,1265,5.897,1266,5.897]],["title/classes/ODataAnnotations.html",[307,0.347,1267,3.111]],["body/classes/ODataAnnotations.html",[3,0.075,4,0.075,5,0.075,6,0.111,8,0.057,9,0.619,10,0.198,14,1.887,25,1.854,26,0.135,27,0.009,30,2.066,32,3.583,34,0.335,37,0.111,48,1.326,49,1.63,54,3.363,55,2.636,57,1.226,61,1.887,71,1.943,72,2.003,73,2.134,94,0.221,150,2.922,152,3.875,156,2.681,159,0.605,173,3.226,209,0.885,218,0.679,230,1.071,242,0.653,247,1.02,249,1.017,254,0.153,269,2.438,286,1.556,294,1.132,297,3.226,301,0.198,305,0.006,306,0.006,307,0.584,309,0.192,311,0.808,315,0.291,317,0.908,334,2.177,362,1.87,369,0.262,370,1.64,533,2.194,544,0.621,649,2.194,1073,4.001,1240,3.724,1246,3.837,1248,2.697,1267,6.163,1268,3.32,1269,4.507,1270,4.546,1271,3.243,1272,4.434,1273,5.839,1274,3.698,1275,4.948,1276,4.434,1277,4.434,1278,3.32,1279,4.434,1280,4.177,1281,4.434,1282,5.839,1283,4.434,1284,5.839,1285,4.434,1286,4.546,1287,4.434,1288,4.434,1289,4.434,1290,4.434,1291,4.434,1292,3.32,1293,3.32,1294,3.32,1295,3.32,1296,3.32,1297,2.284,1298,5.352,1299,6.029,1300,5.183,1301,5.183,1302,4.601,1303,5.352,1304,5.183,1305,5.183,1306,3.32,1307,5.58,1308,3.32,1309,3.32,1310,3.32,1311,3.32,1312,3.32,1313,3.32,1314,3.32,1315,4.546,1316,4.546,1317,3.32,1318,3.32,1319,3.32,1320,3.32,1321,3.32,1322,3.32,1323,3.32,1324,3.32,1325,3.32,1326,5.183,1327,3.32,1328,4.546,1329,5.58,1330,5.183,1331,3.32,1332,3.32,1333,3.32,1334,4.546,1335,6.029,1336,4.546,1337,4.546,1338,4.546,1339,3.32,1340,3.32,1341,3.32,1342,3.32,1343,3.32,1344,3.32,1345,5.183,1346,3.32,1347,4.546,1348,3.32,1349,3.32,1350,3.32]],["title/classes/ODataApiOptions.html",[307,0.347,1351,3.909]],["body/classes/ODataApiOptions.html",[1,4.473,3,0.075,4,0.075,5,0.075,6,0.116,8,0.057,9,0.619,10,0.209,11,4.332,12,4.006,13,4.497,14,2.95,15,4.305,16,3.884,17,4.183,18,4.497,19,1.923,20,4.006,21,4.497,22,4.183,23,4.01,24,3.848,25,1.755,26,0.135,27,0.009,28,3.131,29,3.421,30,3.473,31,0.651,32,3.587,33,3.703,34,0.382,37,0.066,41,2.588,44,2.569,51,2.445,53,3.249,54,3.131,59,3.376,60,0.728,74,3.848,94,0.216,141,0.607,159,0.607,202,1.987,203,2.569,204,2.569,205,2.468,206,4.183,207,4.183,208,2.569,209,0.659,210,2.212,211,2.682,212,2.375,216,3.228,227,3.668,228,3.026,229,2.32,235,3.026,239,2.106,254,0.085,301,0.176,305,0.006,306,0.006,307,0.349,309,0.192,315,0.307,335,1.533,362,1.201,369,0.192,371,1.533,372,2.614,533,2.198,649,2.198,1026,2.212,1123,4.903,1225,2.927,1227,2.008,1269,4.307,1351,5.371,1352,4.446,1353,4.446,1354,4.446,1355,6.081,1356,4.903,1357,3.884,1358,4.446,1359,7.453,1360,4.446,1361,4.275,1362,4.446,1363,4.446,1364,4.043,1365,4.903,1366,4.446,1367,7.453,1368,7.453,1369,4.446,1370,5.239,1371,3.982,1372,4.446,1373,6.081,1374,5.371,1375,4.446,1376,4.446,1377,4.446,1378,4.446,1379,6.081,1380,3.515,1381,4.446,1382,4.446,1383,4.554,1384,6.081,1385,4.446,1386,4.446,1387,3.926,1388,4.446,1389,6.081,1390,6.081,1391,4.554,1392,3.329,1393,7.418,1394,8.25,1395,4.446,1396,4.446,1397,4.446,1398,8.058,1399,8.058,1400,8.058,1401,8.058,1402,8.058,1403,8.058,1404,8.058,1405,4.446,1406,4.446,1407,4.446,1408,4.446,1409,4.446,1410,4.446,1411,4.446,1412,3.926,1413,4.446,1414,4.446,1415,4.446,1416,4.446,1417,3.926,1418,6.081,1419,4.446,1420,4.446,1421,4.446,1422,3.926,1423,4.446,1424,3.926,1425,4.446,1426,4.446,1427,4.446,1428,3.926,1429,4.446,1430,3.926,1431,4.446,1432,6.081,1433,4.446,1434,4.446,1435,4.446,1436,4.446,1437,4.446,1438,6.081,1439,4.446,1440,6.081,1441,4.446,1442,4.446,1443,4.446,1444,3.926]],["title/classes/ODataBaseService.html",[307,0.347,1445,3.111]],["body/classes/ODataBaseService.html",[3,0.065,4,0.065,5,0.065,6,0.113,8,0.049,10,0.22,19,2.206,26,0.136,27,0.009,34,0.354,35,3.769,36,1.686,37,0.057,46,4.682,57,2.24,60,0.767,94,0.195,156,1.197,209,0.665,229,2.892,239,1.949,254,0.168,272,4.256,296,4.322,301,0.231,305,0.005,306,0.005,307,0.302,309,0.166,311,0.731,315,0.298,317,1.005,362,2.476,369,0.238,370,2.51,544,1.186,649,1.986,732,4.116,1445,3.863,1446,3.846,1447,6.549,1448,6.549,1449,6.175,1450,3.706,1451,3.397,1452,4.917,1453,5.663,1454,3.846,1455,4.507,1456,5.541,1457,4.173,1458,6.587,1459,6.19,1460,6.183,1461,3.846,1462,4.47,1463,3.846,1464,3.846,1465,3.846,1466,3.846,1467,5.541,1468,6.587,1469,6.183,1470,3.846,1471,3.846,1472,3.846,1473,3.846,1474,3.846,1475,4.801,1476,6.264,1477,5.88,1478,3.846,1479,4.053,1480,3.846,1481,3.846,1482,3.397,1483,3.846,1484,3.101,1485,2.703,1486,3.101,1487,2.135,1488,3.846,1489,6.412,1490,6.412,1491,5.495,1492,3.846]],["title/classes/ODataBatchRequest.html",[307,0.347,1493,3.909]],["body/classes/ODataBatchRequest.html",[3,0.055,4,0.055,5,0.055,6,0.103,8,0.093,9,0.431,10,0.147,11,2.679,16,4.259,19,1.189,24,2.679,26,0.108,27,0.009,29,1.412,30,2.996,34,0.46,35,3.099,36,1.412,37,0.072,48,0.924,49,1.702,50,1.455,52,1.55,53,4.411,94,0.221,96,2.679,141,0.79,159,0.44,177,1.721,202,1.891,209,0.839,218,0.568,227,3.643,228,4.056,229,2.453,233,3.729,242,1.215,247,1.111,249,0.869,250,1.501,254,0.131,257,3.378,286,0.882,292,3.822,294,0.973,295,2.323,299,2.79,301,0.147,304,1.55,305,0.005,306,0.005,307,0.379,309,0.139,311,0.642,315,0.269,317,0.873,331,2.196,332,2.585,333,1.778,334,0.85,337,0.812,338,1.996,362,2.385,365,1.888,369,0.139,474,1.502,514,2.463,537,2.412,550,2.036,574,2.487,585,1.55,599,3.891,629,3.393,639,3.658,1025,4.667,1026,1.603,1141,2.982,1157,2.79,1174,2.327,1175,2.264,1248,1.079,1252,2.487,1274,3.679,1297,2.982,1357,1.603,1361,3.393,1371,2.579,1380,4.824,1383,2.412,1450,2.79,1457,2.18,1459,3.208,1462,3.435,1493,6.619,1494,3.221,1495,5.112,1496,4.826,1497,4.826,1498,6.428,1499,3.221,1500,4.332,1501,4.826,1502,3.221,1503,3.221,1504,4.826,1505,6.619,1506,3.221,1507,4.826,1508,7.494,1509,3.221,1510,3.221,1511,3.221,1512,3.221,1513,5.828,1514,2.845,1515,2.141,1516,3.221,1517,3.221,1518,2.845,1519,3.614,1520,4.826,1521,4.263,1522,5.788,1523,3.221,1524,4.826,1525,3.221,1526,3.221,1527,4.667,1528,4.826,1529,4.826,1530,4.826,1531,3.221,1532,3.221,1533,5.788,1534,3.221,1535,3.221,1536,3.221,1537,2.845,1538,3.221,1539,3.393,1540,3.614,1541,4.155,1542,6.428,1543,4.84,1544,4.826,1545,6.885,1546,4.826,1547,2.845,1548,3.393,1549,3.221,1550,3.614,1551,4.826,1552,4.826,1553,4.178,1554,7.882,1555,4.826,1556,2.845,1557,2.141,1558,4.826,1559,6.428,1560,4.826,1561,5.788,1562,3.221,1563,4.826,1564,3.221,1565,3.221,1566,3.221,1567,3.221,1568,3.221,1569,3.221,1570,3.221,1571,3.221,1572,3.221,1573,3.221,1574,3.221,1575,3.221,1576,3.221,1577,3.221,1578,4.826,1579,3.221,1580,2.845,1581,3.221,1582,4.667,1583,3.221,1584,3.221,1585,5.828,1586,3.221,1587,3.221,1588,3.221,1589,7.882,1590,2.845,1591,3.208,1592,3.221,1593,3.221,1594,3.221,1595,3.221,1596,5.788,1597,3.221,1598,5.788,1599,2.845,1600,5.788,1601,3.05,1602,2.845,1603,4.334,1604,3.221,1605,3.221,1606,3.221,1607,4.263,1608,3.221,1609,3.221,1610,5.112,1611,3.221,1612,3.221,1613,3.221,1614,3.221,1615,5.788,1616,5.412,1617,6.428,1618,3.221,1619,4.826,1620,2.579,1621,3.221,1622,3.221,1623,2.412,1624,3.221,1625,3.221,1626,3.221,1627,3.221,1628,3.221,1629,3.221,1630,4.826,1631,4.263,1632,3.221,1633,4.826,1634,4.263,1635,4.263,1636,3.891,1637,4.826,1638,3.221,1639,4.826,1640,4.826,1641,4.826,1642,4.826,1643,3.221,1644,3.221,1645,3.221,1646,4.263,1647,3.221,1648,2.845,1649,3.221,1650,3.221,1651,3.221,1652,3.221,1653,4.826,1654,7.882,1655,4.826,1656,6.428,1657,6.885,1658,3.221,1659,5.788,1660,6.428,1661,4.826,1662,3.221,1663,3.221,1664,3.221,1665,3.221,1666,3.221,1667,3.221,1668,3.221,1669,3.221,1670,3.221,1671,3.221,1672,3.221,1673,3.221,1674,3.221,1675,2.845,1676,3.221,1677,3.221,1678,3.221,1679,3.221,1680,3.221,1681,5.788,1682,3.221,1683,3.221,1684,3.221,1685,3.221,1686,3.221,1687,4.826,1688,8.15,1689,5.788,1690,3.221,1691,3.221,1692,3.221,1693,5.788,1694,4.814,1695,3.614,1696,6.428,1697,4.826,1698,3.221,1699,3.221,1700,3.221,1701,3.221,1702,3.221,1703,3.221]],["title/classes/ODataCache.html",[307,0.347,1704,2.942]],["body/classes/ODataCache.html",[0,0.781,3,0.055,4,0.055,5,0.055,6,0.111,8,0.042,9,0.434,10,0.214,25,1.809,26,0.134,27,0.009,31,0.424,34,0.381,35,3.567,36,1.422,37,0.072,41,3.826,42,1.615,43,3.447,49,1.706,50,3.568,52,1.562,60,0.696,94,0.23,110,2.5,141,1.026,156,2.338,159,0.443,202,2.849,209,0.809,227,3.474,229,2.256,230,1.279,239,1.767,242,1.217,245,4.582,247,1.589,249,1.031,254,0.171,286,1.47,294,0.734,301,0.219,305,0.005,306,0.006,307,0.255,309,0.14,311,0.646,315,0.294,317,1.02,335,1.224,369,0.21,371,0.818,550,4.365,560,3.324,564,1.672,635,3.105,1026,1.615,1030,5.669,1141,2.5,1161,3.067,1174,1.305,1235,3.022,1248,2.161,1274,3.106,1357,2.415,1364,2.157,1365,6.228,1380,4.648,1457,2.914,1462,1.733,1479,2.051,1487,1.801,1500,5.014,1541,4.852,1553,5.105,1582,3.913,1585,4.687,1591,2.157,1601,5.082,1620,1.733,1704,3.226,1705,2.866,1706,5.625,1707,6.185,1708,4.353,1709,3.913,1710,4.535,1711,4.831,1712,3.913,1713,4.353,1714,4.353,1715,3.913,1716,3.913,1717,3.913,1718,6.158,1719,4.853,1720,3.244,1721,2.616,1722,3.244,1723,5.812,1724,6.842,1725,4.818,1726,3.634,1727,3.244,1728,3.244,1729,4.078,1730,2.616,1731,3.244,1732,2.5,1733,3.411,1734,3.244,1735,3.634,1736,5.625,1737,3.411,1738,3.244,1739,2.616,1740,3.244,1741,2.616,1742,3.244,1743,2.616,1744,3.244,1745,4.855,1746,2.429,1747,2.616,1748,3.634,1749,3.244,1750,2.694,1751,2.616,1752,3.244,1753,3.411,1754,3.244,1755,3.634,1756,3.244,1757,4.464,1758,5.914,1759,3.634,1760,3.244,1761,3.913,1762,2.866,1763,2.866,1764,2.157,1765,2.866,1766,4.286,1767,2.866,1768,3.913,1769,4.286,1770,5.134,1771,4.286,1772,3.634,1773,2.866,1774,2.866,1775,2.866,1776,2.616,1777,2.616,1778,2.616,1779,2.866,1780,4.286,1781,2.866,1782,2.866,1783,2.866,1784,2.866,1785,2.866,1786,2.866,1787,2.866,1788,2.866,1789,4.286,1790,2.866,1791,4.286,1792,2.866,1793,4.286,1794,2.866,1795,2.866,1796,2.866,1797,2.866,1798,2.866,1799,2.616,1800,2.866,1801,2.866,1802,2.866,1803,2.866,1804,2.866,1805,2.866,1806,2.866,1807,2.866,1808,2.866,1809,2.866,1810,2.866,1811,5.698,1812,2.866,1813,4.286,1814,2.866,1815,2.866,1816,2.866,1817,2.866,1818,2.866,1819,2.866,1820,2.866,1821,2.616,1822,2.866,1823,2.866,1824,2.866]],["title/interfaces/ODataCacheEntry.html",[0,1.066,1725,2.942]],["body/interfaces/ODataCacheEntry.html",[0,0.968,2,2.071,3,0.068,4,0.068,5,0.068,6,0.052,8,0.052,9,0.507,26,0.106,27,0.009,31,0.293,34,0.415,35,3.318,36,1.761,37,0.084,41,3.815,42,2,43,3.812,49,1.335,50,3.399,52,1.934,94,0.229,110,3.385,141,1.153,156,2.045,159,0.549,202,2.929,209,0.832,227,3.202,229,2.221,230,1.208,242,1.269,245,4.619,247,0.925,249,1.013,254,0.161,286,1.498,294,0.83,305,0.005,306,0.006,307,0.315,317,0.909,335,1.013,369,0.174,371,1.013,550,3.583,560,2.921,635,3.434,1026,2,1030,5.76,1141,2.921,1161,2.54,1174,1.616,1235,1.572,1248,2.2,1274,3.029,1357,2,1365,6.607,1380,4.124,1457,2.561,1462,2.147,1479,2.54,1487,2.231,1500,4.513,1541,4.54,1553,5.023,1582,4.571,1585,5.297,1591,2.672,1601,4.51,1620,2.147,1704,2.672,1705,3.55,1706,4.919,1707,6.377,1708,3.009,1710,2.825,1711,4.246,1713,3.009,1714,3.009,1718,6.188,1723,5.488,1724,6.851,1725,4.743,1726,3.009,1729,3.583,1732,2.071,1733,2.825,1735,3.009,1736,5.343,1737,2.825,1745,3.985,1748,3.009,1750,2.231,1753,2.825,1755,3.009,1757,4.124,1758,5.634,1759,3.009,1761,4.571,1762,3.55,1763,3.55,1764,2.672,1765,3.55,1766,5.008,1767,5.008,1768,5.297,1769,5.802,1770,6.896,1771,5.008,1772,4.246,1773,3.55,1774,3.55,1775,3.55,1776,3.24,1777,3.24,1778,3.24,1779,3.55,1780,5.008,1781,3.55,1782,3.55,1783,3.55,1784,3.55,1785,3.55,1786,3.55,1787,3.55,1788,3.55,1789,5.008,1790,3.55,1791,5.008,1792,3.55,1793,5.008,1794,3.55,1795,3.55,1796,3.55,1797,3.55,1798,3.55,1799,3.24,1800,3.55,1801,3.55,1802,3.55,1803,3.55,1804,3.55,1805,3.55,1806,3.55,1807,3.55,1808,3.55,1809,3.55,1810,3.55,1811,6.302,1812,3.55,1813,5.008,1814,3.55,1815,3.55,1816,3.55,1817,3.55,1818,3.55,1819,3.55,1820,3.55,1821,3.24,1822,3.55,1823,3.55,1824,3.55]],["title/classes/ODataCallable.html",[307,0.347,1825,3.568]],["body/classes/ODataCallable.html",[3,0.071,4,0.071,5,0.071,6,0.112,8,0.054,9,0.523,10,0.228,25,1.637,26,0.139,27,0.009,29,3.689,31,0.622,34,0.401,37,0.063,45,2.024,60,1.099,62,0.883,94,0.228,159,0.574,202,2.589,209,0.754,210,2.913,216,3.562,218,0.574,224,3.256,225,3.392,229,2.843,230,0.905,231,3.692,232,3.692,234,3.622,236,2.728,239,1.278,247,1.347,249,0.531,254,0.168,259,2.431,263,2.564,269,2.061,275,3.889,294,0.531,298,3.137,299,3.891,300,4.062,301,0.222,305,0.006,306,0.006,307,0.33,309,0.182,311,0.779,315,0.309,317,1.064,369,0.182,371,1.835,373,1.96,544,1.019,566,2.653,708,3.098,756,5.509,788,3.459,1024,4.051,1138,2.956,1221,3.35,1223,3.383,1224,3.383,1225,2.817,1227,2.644,1228,3.127,1229,2.334,1230,3.75,1232,3.503,1233,3.249,1234,3.249,1235,3.179,1236,2.334,1237,2.334,1239,2.817,1240,1.9,1241,2.334,1732,4.477,1750,3.737,1825,4.719,1826,4.206,1827,5.857,1828,3.891,1829,4.114,1830,4.114,1831,3.699,1832,4.062,1833,4.836,1834,5.853,1835,4.206,1836,4.206,1837,4.206,1838,5.45,1839,3.149,1840,3.149,1841,2.538,1842,4.206,1843,5.82,1844,2.796,1845,4.206,1846,3.383,1847,4.206,1848,5.169,1849,5.169,1850,5.169,1851,4.206,1852,5.169,1853,5.169,1854,4.206,1855,3.383,1856,4.206,1857,5.169,1858,4.383,1859,2.956,1860,3.149,1861,2.956,1862,2.956,1863,3.149,1864,2.956,1865,2.247,1866,3.149,1867,2.431,1868,3.149,1869,2.024,1870,2.658,1871,2.658,1872,2.334,1873,2.658,1874,2.538,1875,2.658,1876,2.658,1877,2.658,1878,2.956,1879,3.149,1880,2.796,1881,2.956,1882,2.538,1883,2.538,1884,2.334,1885,6.732,1886,4.206,1887,5.853,1888,4.206,1889,4.206,1890,4.206,1891,2.796,1892,3.714,1893,3.714,1894,3.714,1895,4.206,1896,4.206,1897,3.891,1898,3.891,1899,3.714,1900,2.796,1901,2.796,1902,2.796,1903,4.206]],["title/classes/ODataCallableParser.html",[307,0.347,1838,3.314]],["body/classes/ODataCallableParser.html",[3,0.074,4,0.074,5,0.074,6,0.114,8,0.056,9,0.536,10,0.222,19,1.821,25,1.543,26,0.137,27,0.009,31,0.539,34,0.408,37,0.089,49,1.026,51,2.413,60,0.522,94,0.233,159,0.595,173,2.796,209,0.851,216,3.839,222,1.026,224,3.721,225,3.197,229,2.846,230,0.928,231,3.197,232,3.444,234,3.678,236,2.031,238,1.46,242,1.208,243,3.949,247,1.003,249,0.758,254,0.167,257,1.91,267,3.3,268,1.846,275,3.949,294,0.933,296,3.444,297,2.031,301,0.22,305,0.006,306,0.006,307,0.471,309,0.188,311,0.798,315,0.302,317,0.933,335,1.513,369,0.188,373,2.298,519,2.168,544,1.035,560,2.246,576,3.064,635,3.557,665,1.497,708,2.553,756,4.913,1026,2.169,1046,3.064,1157,3.965,1174,1.753,1225,2.888,1227,1.969,1248,1.46,1252,3.091,1462,3.206,1620,2.329,1828,4.272,1831,3.792,1838,4.493,1844,2.897,1846,3.468,1855,2.519,1865,3.206,1891,5.639,1897,4.479,1898,4.479,1900,2.897,1901,2.897,1902,2.897,1904,3.85,1905,6,1906,4.359,1907,4.359,1908,4.359,1909,5.532,1910,4.359,1911,4.359,1912,4.359,1913,4.359,1914,4.359,1915,4.359,1916,5.299,1917,4.359,1918,4.359,1919,5.299,1920,4.359,1921,6.528,1922,4.14,1923,5.137,1924,3.264,1925,3.85,1926,3.264,1927,3.85,1928,3.264,1929,3.85,1930,5.455,1931,3.792,1932,4.217,1933,3.85,1934,3.85,1935,3.264,1936,3.264,1937,3.264,1938,3.264,1939,3.264,1940,4.493,1941,3.264,1942,4.493,1943,3.264,1944,3.264,1945,3.064,1946,3.264,1947,2.755,1948,2.755,1949,5.299,1950,3.85,1951,6.059,1952,3.85,1953,3.85,1954,2.897,1955,2.897,1956,2.755,1957,6.528,1958,7.248,1959,5.299,1960,5.299,1961,3.85,1962,3.85,1963,3.85,1964,3.85,1965,3.85,1966,3.85]],["title/classes/ODataConfigAsyncLoader.html",[307,0.347,1967,3.314]],["body/classes/ODataConfigAsyncLoader.html",[3,0.108,4,0.108,5,0.108,6,0.106,8,0.082,10,0.161,26,0.095,27,0.009,34,0.453,35,3.848,36,2.788,37,0.122,49,1.498,60,0.917,156,2.384,159,0.868,209,0.843,242,0.937,251,4.252,252,4.343,254,0.121,301,0.161,305,0.007,306,0.007,307,0.645,309,0.275,311,1.019,315,0.261,317,0.741,335,2.072,369,0.331,643,3.811,1248,2.131,1764,4.229,1931,4.021,1967,5.735,1968,5.129,1969,5.67,1970,7.147,1971,6.362,1972,6.362,1973,6.362,1974,4.764,1975,4.229,1976,4.021,1977,5.129,1978,5.129,1979,5.129,1980,5.129,1981,5.129,1982,5.129,1983,5.129,1984,5.129,1985,5.129,1986,5.129,1987,5.129]],["title/classes/ODataConfigLoader.html",[307,0.347,1969,2.942]],["body/classes/ODataConfigLoader.html",[3,0.11,4,0.11,5,0.11,6,0.1,8,0.083,27,0.009,34,0.457,35,3.777,36,2.845,37,0.123,49,1.528,60,0.928,156,2.673,159,0.886,209,0.847,242,0.956,251,3.603,252,4.367,305,0.007,306,0.007,307,0.65,309,0.281,311,1.031,315,0.222,317,0.756,335,1.955,369,0.281,643,3.858,1248,2.174,1764,4.315,1931,4.102,1967,4.861,1968,5.234,1969,5.708,1970,7.181,1974,4.861,1975,4.315,1976,4.102,1977,5.234,1978,5.234,1979,5.234,1980,5.234,1981,5.234,1982,5.234,1983,5.234,1984,5.234,1985,5.234,1986,5.234,1987,5.234,1988,6.491]],["title/classes/ODataConfigSyncLoader.html",[307,0.347,1975,2.942]],["body/classes/ODataConfigSyncLoader.html",[3,0.108,4,0.108,5,0.108,6,0.106,8,0.082,10,0.162,26,0.095,27,0.009,34,0.454,35,3.767,36,2.799,37,0.123,49,1.503,60,0.919,156,2.39,159,0.872,209,0.844,242,0.94,251,3.545,252,4.533,254,0.121,301,0.162,305,0.007,306,0.007,307,0.646,309,0.276,311,1.021,315,0.262,317,0.744,335,2.076,369,0.332,643,3.82,1248,2.139,1764,4.245,1931,4.036,1967,4.782,1968,5.149,1969,5.677,1970,7.154,1974,4.782,1975,5.103,1976,4.036,1977,6.19,1978,5.149,1979,5.149,1980,5.149,1981,5.149,1982,5.149,1983,5.149,1984,5.149,1985,5.149,1986,5.149,1987,5.149,1989,6.386,1990,6.386,1991,6.386]],["title/classes/ODataEntitiesAnnotations.html",[307,0.347,1329,2.942]],["body/classes/ODataEntitiesAnnotations.html",[3,0.073,4,0.073,5,0.073,6,0.111,8,0.055,9,0.61,10,0.208,14,1.835,25,1.84,26,0.134,27,0.009,30,2.009,32,3.541,34,0.328,37,0.109,48,1.306,49,1.817,54,3.323,55,1.642,57,1.192,61,2.903,62,0.899,71,2.99,72,3.081,73,3.283,94,0.223,150,2.866,152,3.842,156,2.29,159,0.589,173,3.179,209,0.883,218,0.721,230,1.055,242,0.635,247,0.992,249,1.008,254,0.156,269,1.518,286,1.547,294,1.128,297,3.179,301,0.196,305,0.006,306,0.006,307,0.577,309,0.186,311,0.792,315,0.305,317,0.93,334,2.16,362,1.843,369,0.186,370,1.609,533,2.658,566,2.485,649,2.152,1073,3.942,1240,3.696,1246,3.763,1248,2.464,1267,6.217,1268,3.228,1269,4.252,1270,4.459,1271,3.181,1273,5.108,1274,2.303,1275,3.958,1278,3.228,1280,4.116,1282,5.781,1284,5.781,1286,4.459,1292,3.228,1293,3.228,1294,3.228,1295,3.228,1296,3.228,1297,2.221,1298,5.307,1299,5.978,1300,5.108,1301,5.108,1302,4.534,1303,5.307,1304,5.108,1305,5.108,1306,3.228,1307,5.543,1308,3.228,1309,3.228,1310,3.228,1311,3.228,1312,3.228,1313,3.228,1314,3.228,1315,5.509,1316,4.459,1317,3.228,1318,3.228,1319,3.228,1320,3.228,1321,3.228,1322,3.228,1323,3.228,1324,3.228,1325,3.228,1326,5.108,1327,3.228,1328,4.459,1329,5.842,1330,5.108,1331,3.228,1332,3.228,1333,3.228,1334,5.509,1335,5.978,1336,4.459,1337,5.108,1338,4.459,1339,3.228,1340,3.228,1341,5.108,1342,3.228,1343,5.108,1344,3.228,1345,5.108,1346,3.228,1347,4.459,1348,3.228,1349,3.228,1350,3.228,1992,4.311,1993,3.476,1994,4.311,1995,4.311,1996,4.311,1997,4.311,1998,3.476,1999,3.476,2000,3.808,2001,4.311,2002,4.311,2003,4.311,2004,4.311,2005,4.311,2006,4.311,2007,4.311,2008,4.311,2009,4.311,2010,4.311,2011,4.311,2012,4.311,2013,4.311,2014,3.808,2015,4.311]],["title/classes/ODataEntityAnnotations.html",[307,0.347,1307,2.942]],["body/classes/ODataEntityAnnotations.html",[3,0.069,4,0.069,5,0.069,6,0.115,8,0.052,9,0.675,10,0.219,14,2.809,25,1.809,26,0.137,27,0.009,30,3.076,32,3.447,34,0.314,37,0.107,48,1.264,49,1.893,54,3.235,55,1.543,57,2.224,61,1.725,62,0.861,71,1.776,72,1.831,73,1.951,94,0.221,150,3.447,152,3.768,156,2.229,159,0.553,173,3.518,209,0.88,218,0.702,230,1.021,242,0.597,247,0.933,249,0.989,254,0.166,269,1.427,286,1.526,294,1.119,297,3.076,301,0.217,305,0.005,306,0.005,307,0.562,309,0.175,311,0.759,315,0.31,317,0.972,334,2.124,362,1.783,369,0.175,370,1.541,533,2.588,566,2.437,597,3.526,649,2.061,1073,3.814,1240,3.633,1246,3.605,1248,2.528,1267,6.159,1268,3.035,1269,4.139,1270,4.271,1271,3.047,1273,4.942,1274,2.165,1275,3.791,1278,3.035,1280,3.982,1282,5.652,1284,5.652,1286,4.271,1292,3.035,1293,3.035,1294,3.035,1295,3.035,1296,3.035,1297,2.088,1298,5.204,1299,5.863,1300,4.942,1301,4.942,1302,4.387,1303,5.204,1304,4.942,1305,4.942,1306,3.035,1307,5.859,1308,3.035,1309,3.035,1310,3.035,1311,4.942,1312,3.035,1313,4.942,1314,3.035,1315,5.363,1316,4.271,1317,4.942,1318,3.035,1319,4.942,1320,3.035,1321,4.942,1322,3.035,1323,4.942,1324,3.035,1325,4.942,1326,4.942,1327,3.035,1328,5.652,1329,5.623,1330,4.942,1331,3.035,1332,3.035,1333,3.035,1334,5.363,1335,5.863,1336,4.271,1337,4.942,1338,4.271,1339,3.035,1340,3.035,1341,3.035,1342,3.035,1343,3.035,1344,3.035,1345,4.942,1346,3.035,1347,4.271,1348,3.035,1349,3.035,1350,3.035,1993,3.268,1998,3.268,1999,3.268,2000,3.58,2014,3.58,2016,4.053,2017,4.053,2018,4.053,2019,4.053,2020,4.053,2021,4.053,2022,4.053,2023,4.053,2024,4.053,2025,4.053,2026,4.053,2027,4.053,2028,4.053,2029,4.053,2030,4.053,2031,4.053,2032,4.053,2033,4.053,2034,4.053,2035,4.053,2036,4.053,2037,4.053,2038,4.053,2039,4.053,2040,4.053,2041,4.053,2042,4.053,2043,4.053,2044,4.053]],["title/classes/ODataEntityContainer.html",[307,0.347,2045,3.568]],["body/classes/ODataEntityContainer.html",[3,0.09,4,0.09,5,0.09,6,0.097,8,0.068,9,0.61,10,0.221,25,1.534,26,0.14,27,0.009,31,0.617,34,0.44,37,0.079,45,2.543,60,0.904,62,1.029,94,0.229,159,0.721,209,0.503,210,3.394,218,0.669,230,1.055,239,1.606,247,1.216,249,0.667,254,0.169,263,2.812,269,2.402,277,4.614,278,4.193,294,0.667,301,0.224,305,0.007,306,0.007,307,0.415,309,0.228,311,0.908,315,0.307,317,1.049,369,0.228,371,2.013,544,0.74,566,2.768,708,3.397,732,2.543,733,4.666,745,6.024,747,3.188,788,3.665,1024,4.279,1138,3.714,1221,3.759,1223,3.942,1224,3.942,1225,3.283,1227,3.081,1228,3.644,1229,2.933,1230,4.113,1232,3.842,1233,3.786,1234,3.786,1235,3.123,1236,2.933,1237,2.933,1239,3.283,1240,2.387,1241,2.933,1248,1.77,1732,4.361,1750,4.193,1827,6.042,1829,4.795,1830,4.795,1831,4.311,1832,4.558,1833,5.223,1839,3.956,1840,3.956,1841,3.188,1843,5.021,1859,3.714,1860,3.956,1861,3.714,1862,3.714,1863,3.956,1864,3.714,1865,2.823,1866,3.956,1867,3.054,1868,3.956,1869,2.543,1870,3.339,1871,3.339,1872,2.933,1873,3.339,1874,3.188,1875,3.339,1876,3.339,1877,3.339,1878,3.714,1879,3.956,1880,3.512,1881,3.714,1882,3.188,1883,3.188,1884,2.933,2045,5.5,2046,6.672,2047,5.657,2048,5.283,2049,5.283,2050,5.283]],["title/classes/ODataEntityService.html",[307,0.347,2051,3.314]],["body/classes/ODataEntityService.html",[3,0.099,4,0.099,5,0.099,6,0.106,8,0.075,10,0.216,19,1.795,26,0.135,27,0.009,34,0.437,35,3.278,37,0.087,48,1.665,60,0.702,156,2.744,157,2.357,209,0.557,218,0.714,229,2.706,247,1.676,249,0.92,254,0.162,286,1.071,296,4.051,301,0.228,305,0.007,306,0.007,307,0.46,309,0.253,311,0.969,315,0.297,317,0.993,362,2.241,370,2.349,544,1.161,566,2.467,649,2.632,708,3.1,732,3.506,1024,3.506,1445,6.11,1447,5.455,1448,5.455,1449,5.455,1456,4.389,1457,3.852,1458,5.455,1459,5.778,1460,5.121,1462,3.892,1467,4.389,1468,5.455,1469,5.121,1475,4.389,1476,5.455,1477,5.121,1479,3.704,1487,3.253,1540,5.935,2051,5.455,2052,5.861,2053,5.455,2054,7.926,2055,5.861,2056,6.685,2057,5.861,2058,6.434,2059,5.512,2060,5.861,2061,4.725,2062,4.725,2063,4.725,2064,5.861,2065,5.861,2066,4.725,2067,4.725,2068,5.861,2069,4.725,2070,5.861]],["title/classes/ODataEntitySet.html",[307,0.347,2047,3.314]],["body/classes/ODataEntitySet.html",[3,0.089,4,0.089,5,0.089,6,0.102,8,0.068,9,0.608,10,0.221,19,1.298,25,1.696,26,0.14,27,0.009,31,0.617,34,0.416,37,0.078,45,2.535,60,0.903,62,1.027,94,0.231,159,0.719,209,0.501,210,3.387,218,0.667,230,1.053,239,1.601,247,1.212,249,0.665,254,0.169,263,2.808,269,2.398,279,4.608,294,0.665,301,0.224,302,4.187,303,3.886,305,0.007,306,0.007,307,0.413,309,0.228,311,0.906,315,0.309,317,1.048,369,0.228,371,2.011,544,0.738,566,2.766,708,3.393,748,4.246,752,4.652,755,6.012,788,3.662,1024,4.241,1138,3.702,1221,3.753,1223,3.934,1224,3.934,1225,3.276,1227,2.379,1228,3.637,1229,2.923,1230,4.108,1232,3.838,1233,3.779,1234,3.779,1235,3.119,1236,2.923,1237,2.923,1239,3.276,1240,2.379,1241,2.923,1732,4.357,1750,4.187,1827,6.039,1829,4.785,1830,4.785,1831,4.302,1832,4.551,1833,5.218,1839,3.944,1840,3.944,1841,3.178,1843,5.014,1859,3.702,1860,3.944,1861,3.702,1862,3.702,1863,3.944,1864,3.702,1865,2.814,1866,3.944,1867,3.044,1868,3.944,1869,2.535,1870,3.329,1871,3.329,1872,2.923,1873,3.329,1874,3.178,1875,3.329,1876,3.329,1877,3.329,1878,3.702,1879,3.944,1880,3.501,1881,3.702,1882,3.178,1883,3.178,1884,2.923,2046,7.042,2047,5.097,2071,5.267,2072,5.267,2073,5.267,2074,5.267]],["title/classes/ODataEntitySetService.html",[307,0.347,2075,3.568]],["body/classes/ODataEntitySetService.html",[3,0.054,4,0.054,5,0.054,6,0.108,8,0.041,10,0.217,14,3.769,19,1.188,26,0.13,27,0.009,31,0.235,34,0.413,35,3.413,36,1.41,37,0.048,48,1.759,60,0.577,61,1.369,71,2.113,94,0.183,109,3.31,141,0.789,202,2.942,209,0.828,218,0.473,227,3.642,229,2.897,239,1.465,242,0.851,247,1.662,249,0.946,250,1.499,254,0.163,257,2.113,272,3.921,286,1.661,293,4.638,294,0.869,296,3.367,301,0.223,303,3.722,304,1.548,305,0.005,306,0.005,307,0.252,309,0.139,311,0.641,315,0.296,317,1.003,362,1.736,370,1.952,544,1.141,566,2.142,649,1.742,732,4.501,747,5.324,748,2.593,1024,3.312,1073,4.638,1235,3.187,1252,2.484,1271,4.116,1280,5.125,1297,4.252,1361,3.389,1364,2.138,1370,3.389,1445,4.065,1447,3.61,1448,3.61,1449,3.61,1456,2.409,1457,3.728,1458,3.61,1459,4.802,1460,3.389,1462,2.576,1467,2.409,1468,3.61,1469,3.389,1475,2.409,1476,3.61,1477,3.389,1479,2.033,1485,2.261,1487,1.785,1505,4.258,1515,2.138,1543,5.921,1553,3.342,1557,3.205,1636,2.593,1761,6.04,1764,2.138,1869,3.862,2051,5.153,2053,6.008,2056,5.179,2058,4.258,2059,5.688,2061,2.593,2062,2.593,2063,2.593,2066,3.887,2067,2.593,2069,2.593,2075,3.887,2076,8.424,2077,5.108,2078,4.258,2079,5.783,2080,4.821,2081,5.783,2082,4.802,2083,7.224,2084,5.783,2085,5.674,2086,3.216,2087,4.258,2088,5.674,2089,3.216,2090,3.216,2091,3.216,2092,3.216,2093,6.553,2094,3.216,2095,3.216,2096,3.216,2097,5.108,2098,2.841,2099,5.783,2100,4.821,2101,3.216,2102,3.216,2103,3.216,2104,4.821,2105,3.216,2106,3.216,2107,3.216,2108,3.216,2109,3.216,2110,3.216,2111,3.216,2112,3.216,2113,3.216,2114,3.216,2115,3.216,2116,3.216,2117,4.821,2118,3.216,2119,3.216,2120,3.216,2121,2.841,2122,3.216,2123,3.216,2124,3.216,2125,2.841,2126,3.216,2127,3.887,2128,3.216,2129,3.216,2130,3.216,2131,6.424,2132,5.783,2133,3.216,2134,2.841,2135,3.216,2136,2.841,2137,3.216,2138,3.216,2139,3.216,2140,3.216,2141,3.216,2142,3.216,2143,4.821,2144,3.216,2145,3.216,2146,3.216,2147,3.216,2148,3.216,2149,3.216,2150,3.216,2151,3.216,2152,3.216,2153,3.216,2154,3.216,2155,3.216]],["title/classes/ODataEntityTypeKey.html",[307,0.347,2156,3.568]],["body/classes/ODataEntityTypeKey.html",[3,0.039,4,0.039,5,0.039,6,0.069,8,0.03,9,0.48,10,0.119,14,0.983,25,0.838,26,0.128,27,0.009,30,1.077,31,0.606,34,0.365,37,0.088,49,1.483,51,1.498,57,1.486,60,1.022,64,0.983,65,1.633,67,2.16,76,3.497,87,1.335,94,0.227,108,1.92,109,1.19,110,1.92,132,0.793,133,0.793,141,0.804,150,2.254,157,0.929,159,0.639,173,1.077,177,1.234,202,2.326,209,0.851,216,3.631,218,0.365,221,2.982,222,2.011,223,2.982,224,3.382,225,1.736,229,2.718,230,1.214,231,1.736,232,1.736,236,1.736,237,1.92,238,0.774,239,0.702,240,0.793,241,1.335,242,1.252,243,2.502,249,1.114,250,2.504,254,0.164,257,1.633,263,1.649,267,1.883,268,1.601,273,2.068,284,4.179,286,1.077,287,3.548,288,1.335,289,2.504,290,1.335,292,1.282,294,0.871,295,2.585,296,2.936,297,3.318,301,0.059,304,2.585,305,0.004,306,0.004,307,0.422,309,0.1,315,0.16,317,0.772,322,0.774,323,0.654,333,0.639,335,0.94,362,1.702,363,2.102,365,1.832,369,0.255,371,2.095,372,2.309,373,2.11,519,1.692,560,1.92,563,1.112,564,1.19,576,2.619,584,3.004,597,3.684,621,2.248,625,2.248,635,3.032,708,3.03,709,1.15,788,1.586,1024,3.866,1026,1.15,1046,1.624,1073,1.335,1141,3.414,1157,3.406,1159,1.863,1174,2.665,1221,2.33,1227,2.662,1230,1.19,1232,1.793,1235,1.458,1239,1.793,1240,2.427,1248,1.568,1252,3.414,1269,1.335,1271,1.991,1280,2.248,1297,3.766,1302,1.536,1371,2.502,1391,1.73,1392,1.73,1550,1.73,1557,1.536,1616,2.79,1620,2.502,1732,1.19,1757,2.154,1828,2.154,1832,1.394,1846,2.706,1855,2.706,1865,1.234,1867,1.335,1869,3.032,1870,1.46,1871,1.46,1872,2.599,1873,1.46,1874,1.394,1875,1.46,1876,1.46,1877,1.46,1884,1.282,1891,5.217,1897,3.406,1898,3.406,1900,1.536,1901,1.536,1902,1.536,1922,3.241,1923,6.221,1924,4.962,1926,3.506,1928,3.506,1930,4.732,1931,2.959,1932,2.619,1935,1.73,1936,2.79,1937,1.73,1938,1.73,1939,2.79,1940,2.79,1941,1.73,1942,3.506,1943,1.73,1944,1.73,1945,1.624,1946,4.023,1947,1.46,1948,1.46,1954,2.477,1955,1.536,1956,1.46,2082,3.113,2093,3.506,2156,4.331,2157,4.331,2158,3.726,2159,2.31,2160,4.745,2161,2.041,2162,1.46,2163,1.73,2164,3.004,2165,3.004,2166,6.6,2167,3.004,2168,4.331,2169,3.004,2170,2.041,2171,3.004,2172,2.041,2173,2.041,2174,1.73,2175,3.291,2176,2.041,2177,2.041,2178,2.041,2179,2.041,2180,5.204,2181,2.041,2182,5.204,2183,2.041,2184,2.041,2185,2.041,2186,3.291,2187,2.041,2188,2.041,2189,2.041,2190,2.041,2191,2.041,2192,2.79,2193,6.089,2194,2.041,2195,2.041,2196,2.041,2197,2.041,2198,2.041,2199,2.041,2200,2.041,2201,3.291,2202,3.291,2203,3.291,2204,3.291,2205,3.291,2206,3.004,2207,2.041,2208,3.291,2209,4.358,2210,2.041,2211,2.041,2212,3.291,2213,2.041,2214,2.041,2215,2.041,2216,3.291,2217,2.041,2218,3.291,2219,3.291,2220,3.291,2221,3.291,2222,3.291,2223,3.291,2224,3.291,2225,5.564,2226,4.136,2227,2.041,2228,4.751,2229,4.751,2230,1.863,2231,3.775,2232,2.041,2233,2.041,2234,2.041,2235,2.041,2236,2.041,2237,2.041,2238,2.041,2239,2.041,2240,2.041,2241,2.041,2242,2.041,2243,2.041,2244,2.041,2245,2.041,2246,2.041,2247,2.041,2248,2.041,2249,7.47,2250,2.041,2251,2.041,2252,2.041,2253,2.041,2254,5.564,2255,2.041,2256,1.73,2257,3.291,2258,2.041,2259,2.041,2260,2.041,2261,2.041,2262,3.291,2263,2.041,2264,2.041,2265,2.041,2266,2.041,2267,2.041,2268,2.041,2269,2.041,2270,2.041,2271,2.041,2272,1.624,2273,1.863,2274,2.041,2275,2.041,2276,4.745,2277,2.041,2278,2.041,2279,2.041,2280,2.041,2281,2.041,2282,2.041,2283,3.004,2284,2.041,2285,2.041,2286,5.852,2287,7.095,2288,5.795,2289,3.291,2290,3.291,2291,2.041,2292,4.745,2293,2.041,2294,2.041,2295,2.041,2296,2.041,2297,2.041,2298,2.041,2299,5.564,2300,2.041,2301,1.73,2302,2.041,2303,2.041,2304,2.041,2305,3.291,2306,1.536,2307,1.73,2308,1.73,2309,1.73,2310,2.041,2311,4.745,2312,2.041,2313,2.041,2314,2.041,2315,2.041,2316,2.041,2317,2.041,2318,2.041,2319,2.041,2320,3.775,2321,3.291,2322,2.041,2323,2.041,2324,2.041,2325,2.041,2326,1.863,2327,2.041,2328,2.041,2329,2.041,2330,2.041,2331,2.041,2332,2.041,2333,2.041,2334,2.041,2335,2.041,2336,4.136,2337,3.291,2338,3.291,2339,2.041,2340,2.041,2341,1.863,2342,2.041,2343,2.041,2344,2.041,2345,2.041,2346,2.041,2347,3.291,2348,5.204,2349,2.041,2350,2.041,2351,3.291,2352,3.291,2353,2.041,2354,3.291,2355,2.041,2356,3.291,2357,3.291,2358,2.041,2359,2.041,2360,2.041,2361,4.136,2362,2.041,2363,2.041]],["title/classes/ODataEnumType.html",[307,0.347,2364,3.568]],["body/classes/ODataEnumType.html",[3,0.065,4,0.065,5,0.065,6,0.111,8,0.049,9,0.49,10,0.224,25,1.728,26,0.14,27,0.009,31,0.56,34,0.385,37,0.057,45,1.843,51,3.436,60,1.111,62,1.115,94,0.226,141,0.953,159,0.523,202,2.644,209,0.784,210,2.726,216,3.498,218,0.537,222,1.967,224,3.144,225,3.253,229,2.817,230,1.08,231,3.581,232,3.581,236,2.553,239,1.163,247,1.472,249,0.483,254,0.173,259,2.213,263,2.459,269,1.929,271,3.73,281,3.472,283,3.295,284,4.306,294,0.808,301,0.226,305,0.005,306,0.005,307,0.3,309,0.165,311,0.729,315,0.307,317,1.065,369,0.165,371,1.76,544,1.034,566,2.601,708,2.971,709,1.905,788,3.367,896,4.838,1024,3.964,1138,2.691,1221,3.183,1223,3.166,1224,3.166,1225,2.636,1227,2.474,1228,2.926,1229,2.125,1230,3.597,1232,3.698,1233,3.04,1234,3.04,1235,3.222,1236,2.125,1237,2.125,1239,2.636,1240,1.729,1241,2.125,1248,1.835,1732,4.474,1750,3.55,1827,5.772,1828,3.697,1829,3.85,1830,3.85,1831,3.462,1832,3.859,1833,4.668,1839,2.867,1840,2.867,1841,2.31,1843,4.251,1844,2.545,1846,3.166,1848,4.838,1849,4.838,1850,4.838,1852,4.838,1853,4.838,1855,3.166,1857,4.838,1858,4.102,1859,2.691,1860,2.867,1861,2.691,1862,2.691,1863,2.867,1864,2.691,1865,2.045,1866,2.867,1867,2.213,1868,2.867,1869,1.843,1870,2.42,1871,2.42,1872,2.125,1873,2.42,1874,2.31,1875,2.42,1876,2.42,1877,2.42,1878,2.691,1879,2.867,1880,2.545,1881,2.691,1882,2.31,1883,2.31,1884,2.125,1891,2.545,1892,3.381,1893,3.381,1897,3.697,1898,3.697,1899,3.381,1900,2.545,1901,2.545,1902,2.545,1922,4.212,2364,4.416,2365,8.619,2366,4.838,2367,4.838,2368,4.838,2369,3.828,2370,3.828,2371,3.381,2372,3.828,2373,5.477,2374,3.828,2375,5.477,2376,4.416,2377,3.381,2378,5.531,2379,4.416,2380,3.828,2381,5.629,2382,4.416,2383,4.416,2384,4.416,2385,3.828,2386,3.828,2387,4.416,2388,3.828,2389,3.087,2390,3.087,2391,3.828,2392,3.828,2393,3.828,2394,3.828,2395,3.828]],["title/classes/ODataEnumTypeFieldParser.html",[307,0.347,2378,3.314]],["body/classes/ODataEnumTypeFieldParser.html",[3,0.073,4,0.073,5,0.073,6,0.099,8,0.056,9,0.533,10,0.187,26,0.13,27,0.009,31,0.435,34,0.406,37,0.089,49,1.018,51,2.399,57,1.65,60,1.07,62,1.031,94,0.235,141,1.118,159,0.59,202,1.412,209,0.854,216,3.58,218,0.67,222,1.964,224,2.539,225,2.014,229,2.636,230,0.923,231,2.014,232,2.014,236,2.014,237,3.073,242,1.084,247,0.995,249,1.082,254,0.17,257,1.894,263,2.594,267,2.747,268,1.536,269,2.101,270,2.399,271,3.187,280,4.088,281,3.353,282,2.498,283,3.073,284,3.073,285,4.088,287,2.78,294,0.863,301,0.196,305,0.006,306,0.006,307,0.468,309,0.187,311,0.794,315,0.279,317,0.9,323,1.224,335,1.09,369,0.187,371,1.09,372,1.448,373,2.467,519,2.155,544,0.605,560,3.519,566,2.126,597,3.935,635,3.544,665,2.048,709,2.151,788,3.485,895,3.817,1024,2.08,1141,3.519,1157,3.448,1174,1.738,1221,4.074,1223,3.448,1224,3.448,1225,2.08,1228,3.187,1229,2.399,1230,3.981,1232,3.287,1233,3.311,1234,3.311,1235,2.334,1236,2.399,1237,2.399,1239,2.871,1240,1.953,1241,2.399,1248,1.448,1271,2.309,1297,3.073,1371,2.309,1462,2.309,1620,2.309,1828,2.498,1832,3.599,1841,2.608,1846,2.498,1855,2.498,1858,4.467,1865,2.309,1867,3.448,1869,2.08,1872,2.399,1882,2.608,1883,2.608,1884,2.399,1897,3.448,1898,3.448,1922,2.608,1930,4.895,1947,2.732,1948,2.732,1954,2.873,1955,2.873,1956,2.732,2082,2.873,2162,2.732,2163,3.237,2174,3.237,2192,3.237,2209,4.654,2256,3.237,2272,3.038,2288,4.467,2301,3.237,2306,2.873,2307,3.237,2308,3.237,2309,3.237,2376,3.485,2378,5.786,2379,3.485,2381,4.809,2382,3.485,2383,3.485,2384,3.485,2387,3.485,2389,5.507,2390,3.485,2396,6.825,2397,5.965,2398,4.322,2399,3.237,2400,3.817,2401,6.504,2402,3.817,2403,3.817,2404,3.817,2405,3.817,2406,3.817,2407,3.817,2408,3.817,2409,5.268,2410,3.817,2411,3.817,2412,6.504,2413,5.268,2414,3.817,2415,3.817,2416,3.817,2417,6.033,2418,3.817,2419,3.817,2420,3.817,2421,3.817,2422,3.817,2423,3.817,2424,3.817,2425,3.817,2426,3.817,2427,3.817,2428,3.817,2429,5.268]],["title/classes/ODataEnumTypeParser.html",[307,0.347,1922,2.671]],["body/classes/ODataEnumTypeParser.html",[3,0.061,4,0.061,5,0.061,6,0.115,8,0.046,9,0.47,10,0.225,25,1.695,26,0.137,27,0.009,31,0.496,34,0.375,37,0.078,49,1.458,51,2.491,57,1.454,60,1.074,62,1.09,94,0.235,141,1.154,159,0.494,202,1.182,209,0.834,216,3.674,218,0.607,222,1.912,224,2.238,225,2.887,229,2.697,230,0.813,231,2.887,232,2.887,236,2.451,237,3.192,239,1.099,242,1.001,247,1.425,249,1.077,254,0.172,257,1.586,263,2.182,267,3.128,268,1.749,269,1.852,270,2.008,271,3.633,280,2.919,281,3.489,282,3.58,283,3.504,284,3.883,285,4.01,287,2.451,294,0.859,301,0.221,305,0.005,306,0.005,307,0.413,309,0.156,311,0.7,315,0.306,317,1.015,323,1.024,335,1.326,369,0.156,371,0.912,372,1.212,373,2.278,519,1.9,544,1.012,560,3.192,566,1.928,597,3.633,635,3.273,665,1.242,709,1.8,759,3.195,788,3.31,1024,1.741,1141,3.192,1157,3.039,1174,1.455,1221,3.87,1223,3.039,1224,3.039,1225,2.531,1227,1.634,1228,2.809,1229,2.008,1230,3.192,1232,2.981,1233,2.919,1234,2.919,1235,2.423,1236,2.008,1237,2.008,1239,2.531,1240,1.634,1241,2.008,1248,1.761,1271,1.933,1297,2.709,1371,1.933,1462,2.809,1620,1.933,1828,3.58,1831,3.323,1841,2.183,1844,2.405,1846,3.039,1855,3.039,1858,3.937,1865,2.809,1867,2.091,1869,1.741,1872,2.008,1882,2.183,1883,2.183,1884,2.008,1897,3.039,1898,3.039,1922,3.173,1930,4.52,1947,2.286,1948,2.286,1954,2.405,1955,2.405,1956,2.286,2082,2.405,2162,2.286,2163,2.709,2174,2.709,2192,4.639,2209,4.298,2256,4.639,2272,2.543,2288,3.937,2301,2.709,2306,2.405,2307,2.709,2308,2.709,2309,2.709,2366,4.644,2367,4.644,2368,4.644,2371,3.195,2376,4.24,2377,3.195,2378,5.824,2379,4.24,2381,5.483,2382,4.24,2383,4.24,2384,4.24,2387,4.24,2389,4.995,2390,2.917,2396,7.876,2399,2.709,2400,3.195,2401,6.006,2402,3.195,2403,3.195,2404,3.195,2405,3.195,2406,3.195,2407,4.644,2408,3.195,2409,5.471,2410,3.195,2411,3.195,2412,6.006,2413,4.644,2414,3.195,2415,3.195,2416,3.195,2417,5.471,2418,3.195,2419,3.195,2420,3.195,2421,3.195,2422,3.195,2423,3.195,2424,3.195,2425,6.006,2426,3.195,2427,3.195,2428,3.195,2429,4.644,2430,5.258,2431,3.618,2432,3.618,2433,3.618,2434,3.618,2435,3.195,2436,3.618,2437,3.618,2438,3.618,2439,3.618,2440,3.618,2441,3.618,2442,3.618,2443,3.618,2444,3.618,2445,3.618,2446,3.618]],["title/classes/ODataInMemoryCache.html",[307,0.347,2447,3.909]],["body/classes/ODataInMemoryCache.html",[3,0.076,4,0.076,5,0.076,6,0.079,8,0.058,9,0.547,10,0.226,25,1.942,26,0.138,27,0.009,31,0.447,34,0.338,35,3.571,37,0.067,41,3.85,49,1.762,50,3.901,60,0.834,94,0.224,141,0.836,202,2.277,209,0.582,218,0.6,227,3.675,229,1.906,230,1.302,239,2.117,245,4.399,247,1.722,249,0.989,254,0.172,286,1.119,301,0.229,305,0.006,306,0.007,307,0.352,309,0.194,311,0.815,315,0.308,317,1.041,369,0.265,550,4.404,560,3.155,564,2.313,566,2.795,585,2.161,1030,5.228,1161,2.838,1235,3.378,1248,1.504,1274,2.399,1357,2.234,1364,2.985,1380,5.229,1457,3.651,1487,2.492,1500,5.168,1541,5.08,1553,5.078,1601,5.321,1623,4.585,1704,6.033,1706,5.604,1707,5.681,1708,4.585,1709,4.937,1710,4.898,1711,4.585,1712,4.937,1713,4.585,1714,4.585,1715,4.937,1716,4.937,1717,4.937,1718,6.002,1721,3.62,1723,5.681,1724,6.579,1725,4.632,1726,3.362,1729,3.87,1730,3.62,1732,2.313,1733,3.156,1735,3.362,1736,5.217,1737,4.304,1739,3.62,1741,3.62,1743,3.62,1745,4.898,1746,3.362,1747,3.62,1748,3.362,1750,2.492,1751,3.62,1753,4.304,1755,3.362,1757,4.325,1758,5.604,1759,3.362,2447,5.408,2448,4.49,2449,4.49,2450,3.966,2451,3.966,2452,4.49,2453,4.49,2454,3.966,2455,3.966,2456,4.49,2457,3.966,2458,3.966,2459,3.966,2460,3.966,2461,3.966,2462,3.966,2463,3.966,2464,3.966,2465,3.966,2466,4.937,2467,3.62,2468,3.62,2469,3.62,2470,3.62]],["title/classes/ODataInStorageCache.html",[307,0.347,2471,3.568]],["body/classes/ODataInStorageCache.html",[0,0.988,3,0.069,4,0.069,5,0.069,6,0.101,8,0.053,9,0.514,10,0.223,16,2.04,25,1.907,26,0.137,27,0.009,31,0.419,34,0.317,35,3.507,37,0.061,41,3.868,49,1.695,50,4.009,60,0.795,94,0.229,141,0.907,152,3.196,202,2.17,209,0.547,218,0.564,227,3.609,228,2.04,229,1.79,230,1.274,233,2.04,239,2.018,242,1.06,245,4.312,247,1.808,249,1.019,254,0.174,286,1.051,294,0.518,301,0.226,305,0.006,306,0.006,307,0.322,309,0.177,311,0.765,315,0.309,317,1.038,362,1.554,369,0.249,373,1.926,550,4.197,560,2.963,564,2.112,566,2.763,585,1.973,1030,5.1,1161,2.591,1235,3.318,1248,1.926,1274,2.191,1357,2.04,1364,2.725,1380,5.174,1457,3.55,1487,2.276,1500,5.103,1541,4.969,1548,2.882,1553,4.955,1601,5.205,1623,6.167,1694,3.07,1695,3.07,1704,5.973,1706,4.973,1707,5.524,1708,4.306,1709,4.636,1710,5.524,1711,4.306,1712,4.636,1713,4.306,1714,4.306,1715,4.636,1716,4.636,1717,4.636,1718,5.883,1721,3.306,1723,5.524,1724,6.478,1725,4.785,1726,3.07,1729,2.591,1730,3.306,1732,2.112,1733,2.882,1735,3.07,1736,4.973,1737,4.042,1739,3.306,1741,3.306,1743,3.306,1745,4.668,1746,3.07,1747,3.306,1748,3.07,1750,2.276,1751,3.306,1753,4.042,1755,3.07,1757,4.16,1758,5.39,1759,3.07,1772,3.07,2450,3.621,2451,3.621,2454,3.621,2455,3.621,2457,3.621,2458,3.621,2459,3.621,2460,3.621,2461,3.621,2462,3.621,2463,3.621,2464,3.621,2465,3.621,2466,4.636,2467,3.306,2468,3.306,2469,3.306,2470,3.306,2471,4.636,2472,3.621,2473,7.798,2474,5.75,2475,4.1,2476,4.1,2477,5.078,2478,4.1,2479,4.1,2480,4.1,2481,4.1,2482,3.306,2483,3.621,2484,3.621,2485,3.621,2486,3.621,2487,5.078,2488,3.621,2489,3.621,2490,3.621,2491,3.621,2492,3.621,2493,3.621]],["title/modules/ODataModule.html",[2494,3.568,2495,3.111]],["body/modules/ODataModule.html",[0,1.501,3,0.106,4,0.106,5,0.106,6,0.097,10,0.158,26,0.113,27,0.009,34,0.492,37,0.126,62,1.142,159,0.851,167,2.14,209,0.775,242,0.917,252,4.053,254,0.119,294,0.955,301,0.158,305,0.007,306,0.007,307,0.489,311,0.829,315,0.213,317,0.726,338,2.192,1227,2.815,1452,5.954,1455,4.38,1515,4.142,1869,2.999,1969,5.028,1975,4.142,2495,5.725,2496,5.024,2497,5.504,2498,7.194,2499,5.954,2500,6.681,2501,6.231,2502,6.997,2503,6.231,2504,7.194,2505,7.194,2506,6.681,2507,5.024,2508,6.681,2509,5.504,2510,6.567,2511,6.681,2512,4.38,2513,5.504,2514,5.504,2515,6.681,2516,7.481,2517,5.504,2518,5.504,2519,5.504,2520,5.504,2521,5.024,2522,5.504,2523,5.504,2524,5.504,2525,5.024,2526,5.504,2527,5.504,2528,5.504,2529,5.504,2530,6.681,2531,5.504,2532,6.099,2533,4.666,2534,5.504,2535,5.024,2536,5.504,2537,5.504,2538,5.504,2539,5.504]],["title/classes/ODataParameterParser.html",[307,0.347,1909,3.568]],["body/classes/ODataParameterParser.html",[3,0.073,4,0.073,5,0.073,6,0.115,8,0.056,9,0.534,10,0.22,19,1.473,25,1.345,26,0.136,27,0.009,31,0.598,34,0.407,37,0.089,49,1.611,51,3.111,60,0.716,94,0.232,159,0.592,173,3.437,209,0.842,216,3.829,222,1.611,224,3.686,225,2.021,229,2.831,230,1.141,231,3.189,232,3.437,234,4.155,236,2.786,238,2.292,242,1.207,243,3.94,247,0.998,249,0.755,254,0.168,257,1.901,267,2.751,268,1.539,275,3.194,294,0.931,296,3.437,297,2.021,301,0.215,305,0.006,306,0.006,307,0.469,309,0.187,311,0.795,315,0.305,317,0.987,335,1.093,369,0.187,373,2.292,519,2.16,544,0.837,560,2.234,576,4.202,597,2.317,635,3.549,665,2.053,708,3.292,756,2.882,1026,2.158,1046,3.048,1157,3.954,1174,1.744,1225,2.087,1248,1.452,1252,3.08,1462,2.317,1620,2.317,1828,4.262,1838,3.247,1844,2.882,1846,2.506,1855,3.455,1865,2.317,1891,5.633,1897,4.471,1898,4.471,1900,2.882,1901,2.882,1902,2.882,1904,3.83,1909,5.516,1916,3.83,1919,3.83,1921,6.513,1922,4.45,1923,5.522,1924,3.247,1925,3.83,1926,3.247,1927,3.83,1928,3.247,1929,3.83,1930,5.447,1931,3.778,1932,4.202,1933,3.83,1934,3.83,1935,3.247,1936,5.522,1937,3.247,1938,5.522,1939,3.247,1940,4.477,1941,5.522,1942,4.477,1943,3.247,1944,3.247,1945,3.048,1946,3.247,1947,2.741,1948,2.741,1949,5.28,1950,3.83,1951,6.043,1952,3.83,1953,3.83,1954,2.882,1955,2.882,1956,2.741,1957,6.513,1958,7.238,1959,5.28,1960,5.28,1961,3.83,1962,3.83,1963,3.83,1964,3.83,1965,3.83,1966,3.83,2540,5.978,2541,4.336,2542,4.336,2543,4.336,2544,4.336,2545,4.336,2546,4.336,2547,4.336,2548,4.336,2549,4.336,2550,4.336,2551,4.336,2552,4.336,2553,4.336,2554,4.336]],["title/classes/ODataPathSegments.html",[307,0.347,1539,3.111]],["body/classes/ODataPathSegments.html",[3,0.069,4,0.069,5,0.069,6,0.113,8,0.073,9,0.511,10,0.215,19,2.025,25,1.848,26,0.134,27,0.009,29,3.842,31,0.609,34,0.432,37,0.085,42,3.289,49,1.556,52,2.751,60,0.984,62,0.863,67,1.635,84,2.35,94,0.231,130,1.657,159,0.979,209,0.843,230,0.629,235,2.023,239,2.296,242,1.23,247,0.935,249,1.099,254,0.172,286,1.656,294,0.906,295,2.751,301,0.217,305,0.006,306,0.006,307,0.319,309,0.176,311,0.76,315,0.299,317,0.997,322,1.362,323,1.151,330,2.439,332,2.884,333,1.983,334,1.893,363,1.59,369,0.176,371,1.025,372,2.696,474,1.265,537,4.28,544,0.8,635,2.751,1026,2.023,1141,4.148,1157,2.35,1161,2.569,1174,2.298,1232,3.181,1239,1.957,1371,3.054,1457,1.836,1479,2.569,1539,4.647,1591,5.689,1616,3.044,1733,4.018,1768,5.33,1776,4.608,1777,3.278,1778,3.278,2059,5.023,2162,2.569,2228,6.092,2229,6.092,2230,3.278,2231,5.33,2306,2.702,2555,3.59,2556,6.61,2557,5.048,2558,5.048,2559,6.339,2560,5.716,2561,5.716,2562,4.065,2563,4.065,2564,5.048,2565,6.626,2566,4.065,2567,4.065,2568,4.065,2569,4.065,2570,4.608,2571,4.065,2572,4.065,2573,4.065,2574,5.048,2575,4.065,2576,4.065,2577,4.065,2578,4.065,2579,4.065,2580,4.065,2581,4.065,2582,4.065,2583,6.334,2584,3.044,2585,3.59,2586,4.065,2587,4.065,2588,4.065,2589,5.716,2590,5.716,2591,6.61,2592,4.065,2593,4.065,2594,4.065,2595,4.065,2596,4.065,2597,4.065,2598,5.716,2599,4.065,2600,4.065,2601,4.065,2602,4.065,2603,4.065,2604,4.065,2605,4.065,2606,4.065,2607,7.171,2608,4.065,2609,6.61,2610,4.065,2611,4.065,2612,4.065,2613,4.065,2614,4.065,2615,5.716,2616,6.61,2617,3.59,2618,3.59,2619,3.59,2620,3.59,2621,4.065,2622,4.065,2623,4.065,2624,5.716,2625,4.065,2626,4.065,2627,4.065,2628,4.065,2629,4.065,2630,4.065,2631,4.065,2632,4.065,2633,4.065,2634,4.065,2635,5.716,2636,4.065,2637,4.065,2638,4.065,2639,5.716,2640,4.065,2641,4.065]],["title/classes/ODataPathSegmentsHandler.html",[307,0.347,2642,3.568]],["body/classes/ODataPathSegmentsHandler.html",[3,0.098,4,0.098,5,0.098,6,0.115,8,0.074,10,0.184,26,0.117,27,0.009,34,0.455,37,0.108,52,2.789,55,3.145,56,3.975,57,2.284,58,4.412,60,1.064,62,1.246,63,2.909,94,0.184,130,1.679,159,0.987,209,0.874,230,1.119,249,1.11,254,0.15,295,3.481,301,0.184,305,0.007,306,0.007,307,0.568,309,0.251,311,0.962,315,0.303,317,1.024,323,1.641,369,0.251,513,2.041,544,0.811,1361,5.085,1457,2.618,1539,5.805,1591,5.242,1976,3.663,2059,5.762,2558,5.118,2559,5.417,2565,4.672,2570,5.832,2584,4.339,2642,5.832,2643,5.118,2644,5.795,2645,5.795,2646,5.795,2647,5.795,2648,5.795,2649,5.795,2650,5.795,2651,5.795,2652,5.118,2653,5.118,2654,6.389,2655,5.118,2656,6.389,2657,5.118,2658,6.965,2659,5.118,2660,5.118,2661,5.118,2662,5.118,2663,6.965,2664,5.118,2665,5.118,2666,5.118,2667,5.118,2668,5.118,2669,5.118,2670,5.118,2671,5.118,2672,5.118,2673,5.118]],["title/classes/ODataPropertyAnnotations.html",[307,0.347,1298,2.942]],["body/classes/ODataPropertyAnnotations.html",[3,0.077,4,0.077,5,0.077,6,0.058,8,0.058,9,0.626,10,0.191,14,1.933,25,1.824,26,0.134,27,0.009,30,2.117,32,3.619,34,0.34,37,0.112,48,1.342,49,1.65,54,3.397,55,1.73,57,1.256,61,1.933,71,1.991,72,2.052,73,2.186,94,0.222,150,2.97,152,3.903,156,2.341,159,0.62,173,3.266,209,0.886,218,0.737,230,1.084,242,0.669,247,1.045,249,1.024,254,0.15,269,1.6,286,1.564,294,1.136,297,3.266,301,0.191,305,0.006,306,0.006,307,0.59,309,0.196,311,0.821,315,0.277,317,0.916,334,2.191,362,1.894,369,0.196,370,1.667,533,2.23,566,2.524,1073,4.051,1240,3.748,1246,3.9,1248,2.519,1267,6.263,1268,3.401,1269,4.346,1270,4.621,1271,3.297,1273,5.248,1274,2.427,1275,4.102,1278,3.401,1280,4.229,1282,5.888,1284,5.888,1286,4.621,1292,3.401,1293,3.401,1294,3.401,1295,3.401,1296,3.401,1297,2.34,1298,5.806,1299,6.073,1300,5.248,1301,5.248,1302,4.659,1303,5.391,1304,5.248,1305,5.248,1306,3.401,1307,5.612,1308,3.401,1309,3.401,1310,3.401,1311,3.401,1312,3.401,1313,3.401,1314,3.401,1315,4.621,1316,4.621,1317,3.401,1318,3.401,1319,3.401,1320,3.401,1321,3.401,1322,3.401,1323,3.401,1324,3.401,1325,3.401,1326,5.248,1327,3.401,1328,4.621,1329,5.612,1330,5.248,1331,3.401,1332,3.401,1333,3.401,1334,4.621,1335,6.073,1336,4.621,1337,4.621,1338,4.621,1339,3.401,1340,3.401,1341,3.401,1342,3.401,1343,3.401,1344,3.401,1345,5.248,1346,3.401,1347,4.621,1348,3.401,1349,3.401,1350,3.401,1993,3.662,1998,3.662,1999,3.662,2674,4.542,2675,4.542,2676,4.542]],["title/classes/ODataQueryOptionHandler.html",[307,0.347,2677,3.568]],["body/classes/ODataQueryOptionHandler.html",[3,0.041,4,0.041,5,0.041,6,0.108,8,0.087,10,0.201,25,1.085,26,0.123,27,0.009,28,2.49,29,3.751,31,0.54,34,0.332,37,0.057,49,1.588,60,1.121,62,1.091,64,2.735,65,2.817,66,2.944,67,2.713,68,2.652,69,3.604,70,3.048,71,3.248,72,3.348,73,3.567,74,3.059,94,0.22,96,3.059,123,3.059,130,1.746,141,1.033,159,0.527,202,2.86,209,0.864,229,1.502,233,2.401,234,1.202,235,4.412,239,1.173,246,3.721,247,1.613,249,0.956,250,2.248,254,0.163,268,1.355,294,0.973,301,0.201,304,2.322,305,0.004,306,0.004,307,0.303,309,0.104,311,0.514,315,0.284,317,1.022,322,0.809,323,0.684,325,2.3,326,1.028,333,1.524,361,1.643,362,2.115,365,2.514,368,1.028,369,0.104,371,0.974,513,0.851,544,0.541,557,5.052,572,3.41,574,3.105,583,3.113,596,2.44,613,4.485,614,2.567,617,2.567,618,2.567,638,5.942,639,4.784,649,1.395,653,3.113,747,5.247,945,4.236,950,3.89,956,4.264,957,2.567,958,4.264,959,2.567,960,4.006,961,2.714,962,2.891,963,2.891,964,2.891,972,2.891,981,3.89,996,3.113,1000,3.113,1002,3.89,1165,2.133,1174,1.553,1232,1.858,1235,2.742,1239,2.322,1248,1.616,1252,3.311,1357,4.391,1371,2.063,1374,6.19,1393,4.261,1723,5.32,1729,4.062,1732,4.032,1750,3.059,1757,2.232,1869,3.093,1976,1.527,2162,3.483,2209,3.809,2306,2.567,2326,1.947,2532,1.947,2564,3.41,2677,6.9,2678,2.415,2679,5.511,2680,3.861,2681,3.861,2682,6.382,2683,6.426,2684,6.026,2685,2.415,2686,2.415,2687,2.415,2688,3.861,2689,2.415,2690,3.861,2691,2.415,2692,4.867,2693,8.695,2694,3.861,2695,2.415,2696,2.415,2697,2.415,2698,3.861,2699,2.415,2700,2.415,2701,3.861,2702,6.026,2703,2.415,2704,3.861,2705,2.415,2706,5.511,2707,3.861,2708,3.861,2709,2.415,2710,3.861,2711,2.415,2712,3.861,2713,2.415,2714,3.861,2715,2.415,2716,2.415,2717,3.861,2718,3.861,2719,2.415,2720,3.861,2721,2.415,2722,2.133,2723,2.415,2724,1.947,2725,3.113,2726,3.113,2727,4.824,2728,6.026,2729,2.415,2730,2.415,2731,5.511,2732,4.824,2733,2.415,2734,2.415,2735,3.861,2736,2.415,2737,2.415,2738,3.861,2739,2.415,2740,3.861,2741,2.415,2742,2.415,2743,2.415,2744,2.415,2745,2.415,2746,2.415,2747,2.415,2748,2.415,2749,7.226,2750,2.415,2751,2.415,2752,4.824,2753,2.415,2754,3.861,2755,2.415,2756,2.415,2757,2.415,2758,2.415,2759,2.415,2760,2.415,2761,2.415,2762,2.415,2763,3.861,2764,4.824,2765,4.824,2766,4.824,2767,4.824,2768,2.415,2769,3.861,2770,3.861,2771,3.861,2772,2.415,2773,2.415,2774,2.415,2775,7.569,2776,7.569,2777,6.426,2778,7.569,2779,2.415,2780,2.415,2781,2.415,2782,2.415,2783,2.415,2784,2.415,2785,2.415,2786,3.41,2787,2.415,2788,2.415,2789,3.861,2790,2.415,2791,3.861,2792,2.415,2793,3.861,2794,2.415,2795,2.415,2796,2.415,2797,3.861,2798,2.415,2799,2.415,2800,2.415,2801,2.415,2802,2.415,2803,2.415,2804,2.415,2805,3.861,2806,2.415,2807,3.861,2808,2.415,2809,3.861,2810,2.415,2811,4.824,2812,2.415,2813,2.415,2814,2.415,2815,3.861,2816,2.415,2817,3.861,2818,2.415,2819,3.861,2820,2.415,2821,2.415,2822,2.415,2823,2.415,2824,2.415,2825,2.415,2826,2.415,2827,2.415,2828,6.026,2829,2.415,2830,2.415,2831,6.026,2832,2.415,2833,2.415,2834,6.026,2835,2.415,2836,4.824,2837,2.415,2838,2.415,2839,6.026,2840,2.415,2841,6.026,2842,2.415,2843,2.415,2844,6.026,2845,2.415,2846,2.415,2847,2.415]],["title/classes/ODataQueryOptions.html",[307,0.347,2726,3.568]],["body/classes/ODataQueryOptions.html",[3,0.074,4,0.074,5,0.074,6,0.114,8,0.056,9,0.536,10,0.208,19,1.477,25,1.348,26,0.131,27,0.009,28,4.041,29,2.627,31,0.539,34,0.452,37,0.089,60,1.046,61,1.853,64,2.918,65,3.005,66,2.326,67,2.97,68,2.095,69,3.663,70,3.097,71,1.908,72,1.966,73,2.095,75,2.416,94,0.215,130,2.321,141,0.936,159,0.818,209,0.816,229,2.134,235,2.166,239,1.323,242,0.641,246,3.204,247,1.578,249,0.757,254,0.161,286,1.528,294,0.866,295,2.885,301,0.215,305,0.006,306,0.006,307,0.342,309,0.188,311,0.798,315,0.3,317,1,322,1.458,323,1.232,324,1.866,325,1.323,327,1.355,329,2.299,330,1.866,332,2.97,333,2.142,334,1.95,362,2.48,369,0.188,372,2.008,374,1.853,474,1.355,544,0.96,557,4.489,559,4.082,596,4.896,613,3.985,617,3.985,618,3.985,619,3.06,621,2.627,623,3.06,624,3.06,625,3.617,638,4.557,639,2.751,747,2.627,945,4.214,956,3.789,958,3.789,960,3.985,962,4.489,963,4.489,964,4.489,965,4.833,966,4.833,967,4.833,985,3.26,1174,2.41,1248,2.682,1252,2.243,1729,3.789,1757,2.516,1932,3.06,2209,2.751,2341,3.51,2557,5.294,2574,5.294,2583,5.294,2585,3.845,2617,3.845,2618,3.845,2619,3.845,2620,3.845,2677,3.51,2682,6.842,2724,3.51,2725,5.956,2726,5.528,2786,5.294,2848,3.845,2849,5.994,2850,7.387,2851,5.994,2852,5.994,2853,4.353,2854,4.353,2855,5.994,2856,6.246,2857,4.353,2858,5.994,2859,4.353,2860,4.353,2861,4.353,2862,5.994,2863,4.353,2864,4.353,2865,4.353,2866,4.353,2867,4.353,2868,4.353,2869,4.353,2870,4.353,2871,4.353,2872,5.994,2873,5.994,2874,5.994,2875,5.994,2876,4.353,2877,4.353,2878,6.856,2879,5.994,2880,4.353,2881,5.994,2882,4.353,2883,4.353,2884,4.353,2885,4.353,2886,4.353,2887,4.353,2888,4.353,2889,4.353,2890,4.353,2891,4.353,2892,4.353,2893,4.353,2894,4.353,2895,4.353,2896,4.353,2897,4.353,2898,5.994,2899,4.353,2900,4.353,2901,4.353,2902,4.353,2903,5.994,2904,5.994,2905,5.994,2906,5.994,2907,5.994,2908,4.353,2909,4.353]],["title/classes/ODataReferential.html",[307,0.347,2171,3.568]],["body/classes/ODataReferential.html",[3,0.039,4,0.039,5,0.039,6,0.069,8,0.03,9,0.48,10,0.059,14,0.984,25,0.838,26,0.128,27,0.009,30,1.077,31,0.606,34,0.365,37,0.088,49,1.483,51,1.499,57,1.743,60,1.022,64,0.984,65,1.634,67,2.161,76,3.498,87,1.336,94,0.227,108,1.921,109,1.191,110,1.921,132,0.794,133,0.794,141,0.805,150,2.255,157,0.93,159,0.64,173,1.077,177,1.235,202,2.327,209,0.851,216,3.631,218,0.366,221,2.983,222,2.011,223,2.983,224,3.382,225,1.737,229,2.718,230,1.214,231,1.737,232,1.737,236,1.737,237,1.921,238,0.774,239,0.703,240,0.794,241,1.336,242,1.252,243,2.503,249,1.114,250,2.505,254,0.162,257,1.634,263,1.65,267,1.884,268,1.491,273,2.069,284,4.18,286,1.077,287,3.549,288,1.336,289,2.937,290,1.336,292,1.283,294,0.871,295,2.586,296,2.937,297,3.318,301,0.059,304,2.586,305,0.004,306,0.004,307,0.422,309,0.1,315,0.16,317,0.772,322,0.774,323,0.655,333,0.639,335,0.94,362,1.703,363,2.102,365,1.833,369,0.255,371,2.095,372,2.31,373,2.111,519,1.693,560,1.921,563,1.113,564,1.191,576,2.621,584,3.006,597,3.685,621,2.25,625,2.25,635,3.033,708,3.03,709,1.15,788,1.587,843,2.042,1024,3.867,1026,1.15,1046,1.625,1073,1.336,1141,3.415,1157,3.407,1159,1.864,1174,2.665,1221,2.331,1227,2.663,1230,1.191,1232,1.794,1235,1.459,1239,1.794,1240,2.428,1248,1.569,1252,3.415,1269,1.336,1271,1.992,1280,2.25,1297,3.767,1302,1.537,1371,2.503,1391,1.731,1392,1.731,1550,1.731,1557,1.537,1616,2.792,1620,2.503,1732,1.191,1757,2.155,1828,2.155,1832,1.395,1846,2.708,1855,2.708,1865,1.235,1867,1.336,1869,3.033,1870,1.461,1871,1.461,1872,2.6,1873,1.461,1874,1.395,1875,1.461,1876,1.461,1877,1.461,1884,1.283,1891,5.218,1897,3.407,1898,3.407,1900,1.537,1901,1.537,1902,1.537,1922,3.243,1923,6.222,1924,4.963,1926,3.508,1928,3.508,1930,4.733,1931,2.961,1932,2.621,1935,1.731,1936,2.792,1937,1.731,1938,1.731,1939,2.792,1940,2.792,1941,1.731,1942,3.508,1943,1.731,1944,1.731,1945,1.625,1946,4.024,1947,1.461,1948,1.461,1954,2.478,1955,1.537,1956,1.461,2082,3.114,2093,3.508,2156,3.777,2157,4.333,2160,4.746,2161,2.042,2162,1.461,2163,1.731,2164,3.006,2165,3.006,2166,6.601,2167,3.006,2168,4.333,2169,3.006,2170,2.042,2171,3.777,2172,2.042,2173,2.042,2174,1.731,2175,3.293,2176,2.042,2177,2.042,2178,2.042,2179,2.042,2180,5.206,2181,2.042,2182,5.206,2183,2.042,2184,2.042,2185,2.042,2186,3.293,2187,2.042,2188,2.042,2189,2.042,2190,2.042,2191,2.042,2192,2.792,2193,6.091,2194,2.042,2195,2.042,2196,2.042,2197,2.042,2198,2.042,2199,2.042,2200,2.042,2201,3.293,2202,3.293,2203,3.293,2204,3.293,2205,3.293,2206,3.006,2207,2.042,2208,3.293,2209,4.359,2210,2.042,2211,2.042,2212,3.293,2213,2.042,2214,2.042,2215,2.042,2216,3.293,2217,2.042,2218,3.293,2219,3.293,2220,3.293,2221,3.293,2222,3.293,2223,3.293,2224,3.293,2225,5.565,2226,4.138,2227,2.042,2228,4.753,2229,4.753,2230,1.864,2231,3.777,2232,2.042,2233,2.042,2234,2.042,2235,2.042,2236,2.042,2237,2.042,2238,2.042,2239,2.042,2240,2.042,2241,2.042,2242,2.042,2243,2.042,2244,2.042,2245,2.042,2246,2.042,2247,2.042,2248,2.042,2249,7.471,2250,2.042,2251,2.042,2252,2.042,2253,2.042,2254,5.565,2255,2.042,2256,1.731,2257,3.293,2258,2.042,2259,2.042,2260,2.042,2261,2.042,2262,3.293,2263,2.042,2264,2.042,2265,2.042,2266,2.042,2267,2.042,2268,2.042,2269,2.042,2270,2.042,2271,2.042,2272,1.625,2273,1.864,2274,2.042,2275,2.042,2276,4.746,2277,2.042,2278,2.042,2279,2.042,2280,2.042,2281,2.042,2282,2.042,2283,3.006,2284,2.042,2285,2.042,2286,5.854,2287,7.096,2288,5.796,2289,3.293,2290,3.293,2291,2.042,2292,4.746,2293,2.042,2294,2.042,2295,2.042,2296,2.042,2297,2.042,2298,2.042,2299,5.565,2300,2.042,2301,1.731,2302,2.042,2303,2.042,2304,2.042,2305,3.293,2306,1.537,2307,1.731,2308,1.731,2309,1.731,2310,2.042,2311,4.746,2312,2.042,2313,2.042,2314,2.042,2315,2.042,2316,2.042,2317,2.042,2318,2.042,2319,2.042,2320,3.777,2321,3.293,2322,2.042,2323,2.042,2324,2.042,2325,2.042,2326,1.864,2327,2.042,2328,2.042,2329,2.042,2330,2.042,2331,2.042,2332,2.042,2333,2.042,2334,2.042,2335,2.042,2336,4.138,2337,3.293,2338,3.293,2339,2.042,2340,2.042,2341,1.864,2342,2.042,2343,2.042,2344,2.042,2345,2.042,2346,2.042,2347,3.293,2348,5.206,2349,2.042,2350,2.042,2351,3.293,2352,3.293,2353,2.042,2354,3.293,2355,2.042,2356,3.293,2357,3.293,2358,2.042,2359,2.042,2360,2.042,2361,4.138,2362,2.042,2363,2.042,2435,3.293]],["title/classes/ODataRequest.html",[307,0.347,1500,2.558]],["body/classes/ODataRequest.html",[1,1.825,3,0.056,4,0.056,5,0.056,6,0.116,8,0.042,9,0.438,10,0.205,11,2.72,12,4.209,14,3.1,15,3.711,16,3.624,19,2.018,20,3.386,24,3.855,25,1.102,26,0.13,27,0.009,28,3.138,29,2.846,31,0.588,34,0.416,37,0.049,41,3.528,42,2.916,43,3.891,49,2.046,53,1.756,54,1.485,57,1.921,60,0.831,61,1.399,64,1.399,65,1.441,67,1.322,70,1.485,71,1.441,72,1.485,94,0.224,130,0.953,141,0.449,159,0.8,202,1.074,203,1.9,205,1.825,208,1.9,209,0.817,228,3.755,229,1.824,233,2.916,235,1.636,242,1.111,249,1.019,250,2.284,254,0.139,257,2.148,269,1.158,272,3.231,294,0.415,301,0.124,304,2.359,305,0.005,306,0.005,307,0.258,309,0.142,311,0.652,315,0.309,317,0.809,323,0.931,338,1.698,362,1.877,363,1.286,369,0.142,371,1.236,550,4.104,643,4.578,649,1.771,732,3.505,1026,1.636,1141,3.752,1174,3.37,1175,4.118,1274,3.711,1297,3.995,1303,2.185,1356,2.651,1371,3.891,1380,4.014,1383,2.462,1412,2.903,1424,2.903,1428,2.903,1430,2.903,1450,4.482,1457,3.644,1459,4.841,1500,3.753,1513,5.236,1515,2.185,1519,5.65,1527,2.651,1540,5.65,1543,3.445,1556,5.735,1557,3.258,1590,2.903,1603,2.462,1607,5.735,1610,6.432,1631,2.903,1634,2.903,1635,2.903,1646,6.432,2127,2.651,2910,3.287,2911,5.859,2912,5.859,2913,5.859,2914,5.859,2915,5.859,2916,5.859,2917,6.945,2918,6.494,2919,6.494,2920,6.494,2921,6.494,2922,5.859,2923,5.859,2924,5.859,2925,4.328,2926,4.901,2927,2.903,2928,3.287,2929,3.287,2930,3.287,2931,6.494,2932,3.287,2933,6.945,2934,6.945,2935,3.287,2936,3.287,2937,3.287,2938,6.494,2939,3.287,2940,3.287,2941,3.287,2942,3.287,2943,3.287,2944,3.287,2945,3.287,2946,3.287,2947,3.287,2948,3.287,2949,3.287,2950,3.287,2951,3.287,2952,3.287,2953,3.287,2954,3.287,2955,3.287,2956,3.287,2957,3.287,2958,3.287,2959,3.287,2960,3.287,2961,3.287,2962,3.287,2963,3.287,2964,3.287,2965,3.287,2966,3.287,2967,3.287,2968,3.287,2969,3.287,2970,3.287,2971,3.287,2972,4.901,2973,3.287,2974,5.859,2975,3.287,2976,2.903,2977,2.903,2978,2.903,2979,3.287,2980,3.287,2981,3.287,2982,3.287,2983,3.287,2984,6.945,2985,3.287,2986,6.494,2987,4.901,2988,3.287,2989,4.901,2990,3.287,2991,3.287,2992,3.287,2993,3.287,2994,3.287,2995,4.901,2996,6.494,2997,3.287,2998,5.859,2999,4.901,3000,5.859,3001,3.287,3002,4.901,3003,3.287,3004,3.287,3005,7.283,3006,3.287,3007,3.287,3008,3.287,3009,3.287,3010,3.287,3011,4.901,3012,3.287,3013,3.287,3014,3.287,3015,3.287,3016,3.287,3017,3.287,3018,3.287,3019,3.287,3020,3.287,3021,3.287,3022,4.901,3023,3.287,3024,3.287,3025,3.287,3026,3.287,3027,3.287,3028,3.287,3029,3.287,3030,3.287,3031,3.287,3032,3.287,3033,3.287,3034,3.287,3035,4.901,3036,3.287,3037,3.287,3038,3.287,3039,4.901,3040,3.287,3041,3.287,3042,3.287,3043,4.901,3044,3.287,3045,3.287,3046,3.287,3047,3.287,3048,3.287,3049,3.287,3050,3.287,3051,3.287,3052,6.494,3053,3.287,3054,3.287,3055,3.287,3056,3.287,3057,3.287,3058,3.287,3059,3.287,3060,3.287,3061,3.287,3062,3.287,3063,3.287,3064,3.287,3065,3.287,3066,3.287,3067,3.287,3068,3.287,3069,6.945,3070,3.287,3071,4.901,3072,4.901,3073,3.287,3074,3.287,3075,3.287,3076,3.287,3077,3.287,3078,3.287,3079,3.287,3080,3.287,3081,3.287,3082,3.287,3083,3.287,3084,3.287,3085,3.287]],["title/classes/ODataResponse.html",[307,0.347,1541,2.671]],["body/classes/ODataResponse.html",[3,0.063,4,0.063,5,0.063,6,0.114,8,0.048,9,0.478,10,0.213,14,2.672,16,3.781,23,1.843,25,1.546,26,0.129,27,0.009,34,0.463,37,0.055,38,3.091,39,2.141,40,2.141,49,1.999,57,2.294,60,0.993,94,0.207,141,0.73,152,3.77,159,0.73,209,0.799,218,0.524,227,1.576,228,4.298,229,2.667,230,1.336,233,3.781,242,1.325,245,4.375,249,0.959,254,0.139,269,2.422,272,4.128,286,1.333,294,0.989,295,1.782,301,0.185,305,0.005,306,0.005,307,0.291,309,0.16,311,0.712,315,0.302,317,0.979,333,1.901,338,2.202,362,2.388,369,0.16,590,3.271,621,2.235,625,2.235,643,3.781,649,1.933,732,3.993,1026,1.843,1174,1.489,1235,1.449,1246,3.968,1248,2.103,1269,2.141,1274,3.354,1275,3.555,1298,3.555,1303,4.173,1307,3.555,1329,3.555,1356,4.312,1357,2.662,1371,3.354,1380,4.795,1383,2.773,1422,4.724,1450,4.528,1457,3.539,1484,5.062,1485,4.413,1486,5.062,1500,4.528,1513,4.312,1514,6.711,1515,2.462,1519,5.148,1521,3.271,1527,2.986,1537,3.271,1540,5.148,1541,4.585,1547,3.271,1553,3.628,1601,3.968,1602,4.724,1603,2.773,1675,5.545,1694,5.69,1695,5.69,1746,6.005,1821,4.312,2925,4.724,2927,3.271,2976,3.271,2977,3.271,2978,3.271,3086,3.704,3087,6.278,3088,6.278,3089,6.278,3090,6.278,3091,5.348,3092,6.278,3093,5.348,3094,3.704,3095,3.704,3096,5.543,3097,3.704,3098,3.704,3099,3.704,3100,3.704,3101,3.704,3102,5.348,3103,3.704,3104,3.704,3105,3.704,3106,3.704,3107,3.704,3108,3.704,3109,3.704,3110,3.704,3111,3.704,3112,3.704,3113,3.704,3114,3.704,3115,3.704,3116,3.704,3117,3.704,3118,5.348,3119,3.704,3120,3.704,3121,5.348,3122,5.348,3123,3.704,3124,3.704,3125,3.704,3126,3.704,3127,3.704,3128,3.704,3129,3.704,3130,3.704,3131,3.704,3132,3.704,3133,3.704,3134,3.704,3135,6.278,3136,3.704,3137,3.704,3138,3.704,3139,3.704,3140,6.278,3141,3.704,3142,3.704,3143,3.704,3144,3.271,3145,3.704,3146,3.704,3147,3.704,3148,3.704,3149,5.348,3150,3.704,3151,3.704,3152,3.704,3153,3.704,3154,5.348,3155,3.704,3156,3.704,3157,4.312,3158,3.704,3159,3.704,3160,4.724,3161,3.704,3162,3.704,3163,6.278,3164,3.704,3165,3.704,3166,6.278,3167,3.704,3168,3.704,3169,7.292,3170,6.278,3171,7.292,3172,3.704,3173,5.348,3174,5.348,3175,3.704,3176,6.278,3177,3.704,3178,6.711,3179,6.278,3180,6.278,3181,5.348,3182,3.704,3183,6.278,3184,3.704,3185,3.704,3186,3.704,3187,3.704,3188,3.704,3189,3.704,3190,3.704]],["title/classes/ODataResponseOptions.html",[307,0.347,3096,3.568]],["body/classes/ODataResponseOptions.html",[3,0.087,4,0.087,5,0.087,6,0.117,8,0.066,9,0.599,10,0.233,23,3.933,26,0.134,27,0.009,31,0.576,32,3.804,33,4.222,34,0.411,37,0.077,41,3.363,47,3.875,48,1.428,49,1.756,50,3.029,54,3.369,60,0.803,94,0.232,141,0.915,159,0.702,204,4.568,205,4.14,209,0.638,216,3.268,217,4.311,219,4.501,220,4.945,242,0.758,247,1.886,254,0.16,294,0.65,301,0.213,305,0.006,306,0.006,307,0.404,309,0.222,311,0.892,315,0.31,317,0.979,334,2.087,335,1.691,369,0.222,371,1.691,599,6.014,649,2.423,1025,4.149,1026,2.56,1123,5.406,1174,2.696,1225,3.227,1227,2.324,1269,4.568,1357,2.56,1387,4.544,1391,5.021,1392,3.853,1417,4.544,1444,4.544,1550,5.021,1599,4.544,1799,4.149,2209,4.995,2283,6.014,2320,5.406,3096,6.014,3144,4.544,3157,6.9,3160,4.544,3191,5.145,3192,6.705,3193,6.705,3194,6.705,3195,6.705,3196,6.705,3197,6.705,3198,5.145,3199,5.145,3200,5.145,3201,5.145,3202,5.145,3203,5.145,3204,5.145,3205,6.705,3206,5.145,3207,6.705,3208,5.145,3209,6.705,3210,5.145,3211,6.705,3212,5.145,3213,6.705,3214,6.705,3215,5.145,3216,5.145,3217,5.145,3218,6.705,3219,6.705,3220,5.145,3221,5.145,3222,5.145,3223,5.145,3224,5.145,3225,5.145,3226,5.145,3227,5.145,3228,5.145,3229,5.145,3230,4.544,3231,5.145,3232,5.145,3233,5.145,3234,5.145,3235,5.145,3236,5.145,3237,5.145,3238,5.145,3239,5.145,3240,5.145,3241,5.145]],["title/classes/ODataSchema.html",[307,0.347,1833,2.797]],["body/classes/ODataSchema.html",[3,0.075,4,0.075,5,0.075,6,0.115,8,0.057,9,0.542,10,0.221,25,1.365,26,0.138,27,0.009,34,0.47,37,0.066,48,1.679,51,1.783,60,0.727,62,0.916,94,0.234,159,0.605,209,0.798,216,2.51,218,0.595,224,2.583,229,2.427,230,1.206,242,1.096,247,1.397,249,1.06,250,2.066,254,0.162,261,4.303,263,2.138,267,2.783,268,1.557,269,2.138,270,4.132,272,3.704,274,4.492,276,4.177,278,3.842,294,0.94,301,0.224,304,2.134,305,0.006,306,0.006,307,0.348,309,0.192,311,0.808,315,0.308,317,0.992,369,0.192,371,1.118,519,2.194,544,0.621,566,2.155,635,2.922,649,2.194,708,1.887,732,2.922,747,2.675,788,3.508,884,4.894,1221,4.007,1223,3.508,1224,3.508,1225,2.922,1227,3.522,1228,3.243,1229,2.461,1230,3.128,1232,3.583,1233,3.37,1234,3.37,1235,2.375,1236,2.461,1237,2.461,1239,2.922,1240,2.003,1241,2.461,1248,2.493,1357,2.206,1450,4.852,1519,6.029,1603,3.32,1825,6.002,1828,4.654,1833,3.837,1841,2.675,1843,2.947,1844,2.947,1882,2.675,1883,2.675,1884,2.461,1897,4.507,1898,4.507,1948,2.802,2045,5.581,2047,4.546,2206,3.575,2364,6.002,3242,4.434,3243,6.07,3244,6.07,3245,6.07,3246,6.07,3247,6.07,3248,6.07,3249,4.434,3250,4.434,3251,4.434,3252,7.444,3253,4.434,3254,4.434,3255,4.434,3256,4.434,3257,6.07,3258,7.444,3259,4.434,3260,6.07,3261,4.434,3262,6.07,3263,4.434,3264,6.07,3265,4.434,3266,6.07,3267,4.434,3268,4.434,3269,4.434,3270,4.434,3271,4.434,3272,4.434,3273,4.434,3274,4.434,3275,4.434,3276,4.434,3277,4.434,3278,4.434,3279,4.434,3280,4.434,3281,4.434,3282,4.434,3283,4.434,3284,4.434,3285,4.434,3286,4.434,3287,4.434,3288,4.434,3289,4.434,3290,6.922,3291,4.434,3292,6.07,3293,4.434,3294,4.434,3295,6.07,3296,6.07,3297,4.434,3298,6.07,3299,4.434,3300,4.434,3301,4.434,3302,4.434,3303,4.434,3304,4.434,3305,4.434,3306,4.434,3307,4.434]],["title/classes/ODataSchemaElement.html",[307,0.347,1827,2.942]],["body/classes/ODataSchemaElement.html",[3,0.078,4,0.078,5,0.078,6,0.111,8,0.059,9,0.558,10,0.215,25,1.703,26,0.141,27,0.009,31,0.648,34,0.417,37,0.069,45,3.003,60,0.846,62,0.942,94,0.233,159,0.63,177,2.467,202,2.584,209,0.817,210,4.055,218,0.612,230,0.965,239,1.403,247,1.062,249,0.583,254,0.168,262,3.334,263,2.935,267,2.509,268,1.778,269,2.489,301,0.218,305,0.006,306,0.006,307,0.362,309,0.2,311,0.83,315,0.301,317,1.066,323,1.307,369,0.27,371,2.165,372,2.367,373,1.546,544,0.647,560,2.379,566,2.2,649,2.255,708,3.606,788,3.655,1024,4.178,1174,1.857,1221,4.055,1223,3.606,1224,3.606,1225,2.222,1227,2.819,1228,3.334,1229,2.563,1230,4.074,1232,3.806,1233,3.464,1234,3.464,1235,2.962,1236,2.563,1237,2.563,1239,3.003,1240,2.086,1241,2.563,1370,3.245,1450,4.085,1482,4.078,1620,2.467,1732,4.547,1750,4.524,1827,5.633,1829,4.386,1830,4.386,1831,3.944,1832,4.568,1833,5.151,1841,2.786,1843,5.417,1859,4.386,1861,4.386,1862,4.386,1864,4.386,1865,3.334,1867,3.606,1869,3.003,1870,3.944,1871,3.944,1872,3.464,1873,3.944,1874,3.765,1875,3.944,1876,3.944,1877,3.944,1878,3.245,1880,4.148,1881,4.386,1882,2.786,1883,2.786,1884,2.563,1894,5.511,1947,2.918,1956,2.918,2272,3.245,2273,3.723,3308,4.617,3309,6.24,3310,4.617,3311,4.617,3312,4.617,3313,4.617,3314,4.617,3315,4.617,3316,4.617,3317,4.617,3318,4.617,3319,4.617,3320,6.24,3321,4.617,3322,6.24]],["title/injectables/ODataServiceFactory.html",[2499,3.111,3323,3.909]],["body/injectables/ODataServiceFactory.html",[3,0.101,4,0.101,5,0.101,6,0.107,8,0.077,10,0.203,26,0.134,27,0.009,34,0.46,37,0.089,55,3.044,56,4.302,94,0.232,202,2.727,209,0.701,218,0.723,230,1.14,254,0.173,294,0.93,301,0.218,303,4.3,305,0.007,306,0.007,307,0.627,311,0.98,315,0.273,317,0.858,369,0.258,513,2.103,544,1.032,732,4.336,747,5.173,1175,5.867,1235,2.883,1297,4.3,1450,4.824,1451,5.273,1452,5.867,1453,8.008,1455,5.618,1869,4.017,2075,6.729,2499,5.18,2512,4.197,3323,6.508,3324,5.273,3325,5.971,3326,5.971,3327,5.971,3328,5.971,3329,8.346,3330,5.971,3331,5.971,3332,8.346,3333,6.729,3334,7.369]],["title/classes/ODataSingletonService.html",[307,0.347,3333,3.568]],["body/classes/ODataSingletonService.html",[3,0.085,4,0.085,5,0.085,6,0.101,8,0.065,10,0.212,14,3.555,19,1.629,26,0.133,27,0.009,34,0.432,35,3.572,36,2.206,37,0.075,48,1.712,56,4.157,94,0.168,202,2.823,209,0.745,218,0.648,227,3.335,229,2.864,242,0.973,247,1.158,254,0.159,286,1.208,293,4.828,296,3.893,301,0.224,303,4.304,305,0.006,306,0.006,307,0.395,309,0.218,311,0.879,315,0.295,317,0.992,362,2.117,370,2.257,544,1.14,566,2.533,649,2.388,732,4.408,1024,3.181,1073,4.529,1235,3.066,1271,4.348,1280,5.04,1357,3.289,1445,5.187,1447,4.949,1448,4.949,1449,4.949,1456,3.769,1457,3.846,1458,4.949,1459,5.552,1460,4.646,1462,3.531,1467,3.769,1468,4.949,1469,4.646,1475,3.769,1476,4.949,1477,4.646,1479,3.181,1485,3.538,1487,2.794,1543,5.187,1553,3.82,1557,5.41,1580,5.837,2051,6.094,2053,6.255,2056,6.318,2061,4.058,2062,4.058,2063,4.058,2066,4.058,2067,4.058,2069,4.058,2085,4.445,2087,5.837,2093,6.255,2098,4.445,2121,4.445,2125,4.445,2134,4.445,2136,4.445,3333,5.329,3335,5.033,3336,6.609,3337,6.609,3338,7.379,3339,5.033,3340,7.379,3341,5.033,3342,5.033,3343,5.033,3344,5.033,3345,5.033,3346,5.033,3347,5.033,3348,5.033,3349,6.609]],["title/classes/Operator.html",[307,0.347,466,1.884]],["body/classes/Operator.html",[0,1.454,3,0.048,4,0.048,5,0.048,6,0.089,8,0.037,10,0.112,19,0.703,25,0.99,26,0.124,27,0.009,31,0.662,34,0.296,37,0.132,60,1.097,62,1.041,94,0.231,130,2.328,140,1.59,141,0.733,159,0.389,167,0.98,170,1.59,209,0.89,218,0.527,222,1.937,230,1.33,242,0.889,249,0.824,254,0.158,268,1.669,286,1.356,294,1.172,301,0.112,305,0.004,306,0.004,307,0.671,308,2.286,309,0.123,310,1.25,311,0.585,314,1.25,315,0.223,317,0.626,318,1.25,320,1.25,322,0.955,323,0.807,324,2.237,325,1.337,326,1.214,327,2.237,328,2.488,329,2.726,330,2.726,331,2.812,332,1.147,333,2.151,334,2.053,335,1.738,336,1.25,337,0.719,338,0.827,339,1.25,340,1.929,341,1.929,342,1.25,343,1.25,344,1.632,345,1.25,346,1.25,347,1.25,348,2.241,349,2.698,350,1.25,351,1.25,352,1.25,353,1.25,354,1.25,355,1.25,356,1.25,357,1.25,358,1.25,359,1.25,360,1.25,361,3.955,362,1.189,363,1.721,364,1.25,365,1.116,366,1.25,367,1.25,368,1.214,369,0.261,370,2.101,371,1.11,372,0.955,373,1.474,374,2.934,375,3.149,376,1.25,377,1.25,378,1.929,379,1.25,380,2.354,381,2.354,382,1.25,383,2.286,384,1.25,385,1.25,386,1.25,387,1.25,388,1.25,389,1.25,390,1.25,391,1.25,392,1.25,393,1.25,394,1.25,395,1.25,396,1.25,397,1.929,398,1.59,399,1.25,400,1.25,401,2.286,402,1.25,403,2.647,404,1.25,405,1.929,406,1.25,407,1.25,408,2.286,409,1.25,410,1.929,411,1.25,412,1.25,413,1.25,414,1.25,415,1.25,416,1.25,417,1.25,418,2.286,419,1.25,420,1.25,421,1.25,422,1.25,423,1.25,424,1.25,425,1.25,426,1.25,427,1.25,428,1.25,429,1.25,430,1.25,431,1.25,432,1.25,433,1.25,434,1.25,435,1.25,436,1.25,437,1.25,438,1.25,439,1.25,440,1.25,441,1.25,442,1.25,443,1.25,444,1.25,445,1.25,446,1.25,447,1.25,448,1.25,449,1.25,450,2.286,451,1.25,452,1.25,453,1.25,454,1.25,455,2.286,456,1.25,457,1.25,458,1.25,459,1.25,460,1.25,461,1.25,462,2.286,463,1.25,464,1.25,465,1.25,466,2.934,467,3.022,468,2.86,469,3.77,470,3.963,471,1.929,472,1.25,473,1.25,474,0.888,475,1.25,476,1.25,477,2.286,478,1.25,479,1.25,480,1.25,481,1.25,482,1.25,483,1.25,484,1.25,485,1.25,486,1.25,487,1.25,488,1.25,489,1.25,490,1.25,491,1.25,492,1.25,493,1.25,494,1.25,495,1.25,496,1.25,497,1.25,498,1.25,499,1.25,500,2.286,501,1.25,502,1.25,503,1.25,504,1.25,505,1.25,506,1.25,507,1.25,508,1.25,509,1.25,510,1.25,511,1.25,512,1.769,513,1.005,514,1.873,515,1.25,516,1.25,517,1.25,518,2.286,519,1.941,520,1.25,521,1.25,522,1.25,523,2.286,524,1.25,525,1.25,526,1.25,527,1.25,528,2.934,529,1.25,530,1.214,531,2.934,532,1.25,533,1.031,534,2.647,535,1.25,536,0.932,578,1.288,649,1.59,1198,2.519,3350,2.852,3351,2.852,3352,2.852,3353,2.852,3354,2.852]],["title/classes/OrderByExpression.html",[307,0.347,956,2.797]],["body/classes/OrderByExpression.html",[3,0.087,4,0.087,5,0.087,6,0.108,8,0.066,9,0.597,10,0.213,25,1.774,26,0.135,27,0.009,31,0.488,34,0.41,37,0.111,49,1.752,60,0.613,62,0.773,70,3.362,94,0.208,157,2.059,209,0.841,218,0.655,222,1.927,230,1.151,239,1.556,246,3.078,247,1.178,249,0.94,254,0.16,281,2.615,294,0.94,301,0.217,305,0.006,306,0.006,307,0.525,309,0.221,311,0.889,315,0.304,317,1.021,324,2.317,325,2.262,327,2.699,328,2.674,329,2.612,330,2.612,331,2.676,333,2.182,334,2.161,335,1.291,338,2.157,348,1.759,369,0.289,370,2.011,398,2.689,474,1.594,513,1.804,536,1.674,544,0.717,559,4.362,561,4.225,562,4.225,563,4.173,564,2.639,566,2.612,567,3.405,569,3.09,574,4.216,578,2.314,580,3.405,581,3.405,582,3.6,585,2.465,587,3.09,589,2.843,592,2.736,593,2.843,595,3.09,604,4.034,616,3.405,626,3.405,643,2.549,644,4.444,645,2.843,646,2.96,956,5.812,957,4.444,996,4.129,997,4.524,3355,4.129,3356,6.685,3357,6.685,3358,5.122,3359,5.122,3360,5.904,3361,5.122,3362,5.122,3363,5.904,3364,5.122,3365,5.122,3366,5.122,3367,5.39,3368,5.904,3369,5.904,3370,5.904,3371,6.573,3372,4.524,3373,5.006,3374,5.904]],["title/classes/OrderByField.html",[307,0.347,3367,3.568]],["body/classes/OrderByField.html",[3,0.094,4,0.094,5,0.094,6,0.11,8,0.071,10,0.179,25,1.583,26,0.128,27,0.009,31,0.513,34,0.426,37,0.115,49,1.307,70,2.507,94,0.213,157,2.232,209,0.853,218,0.544,222,1.975,230,1.089,246,2.911,249,1.06,254,0.134,281,2.754,294,0.976,301,0.179,305,0.007,306,0.007,307,0.552,309,0.24,311,0.937,315,0.286,317,0.901,324,2.407,325,2.139,327,2.743,328,2.742,329,2.669,330,2.669,331,2.734,333,2.249,334,2.215,335,1.775,338,1.609,348,1.906,369,0.304,370,1.5,474,1.728,513,1.955,536,1.814,559,3.503,563,3.913,574,3.983,578,2.507,585,2.671,587,3.349,589,3.081,592,2.965,593,3.081,595,3.349,604,3.349,616,3.689,626,3.689,643,2.762,644,4.68,645,3.081,646,3.208,649,2.544,650,4.475,956,5.666,957,4.68,3355,4.475,3360,4.902,3363,4.902,3367,6.556,3368,7.411,3369,7.411,3370,7.411,3371,6.828,3372,4.902,3373,5.271,3374,6.217,3375,5.55,3376,5.55,3377,5.55,3378,5.55,3379,5.55]],["title/interfaces/Parser.html",[0,1.066,224,1.884]],["body/interfaces/Parser.html",[0,1.856,1,2.855,2,1.808,3,0.059,4,0.059,5,0.059,6,0.086,7,2.028,8,0.045,9,0.314,10,0.154,11,1.948,12,2.028,13,3.103,14,1.494,15,3.253,16,2.559,17,2.118,18,3.103,19,1.652,20,2.028,21,3.103,22,2.118,23,3.029,24,1.948,26,0.134,27,0.009,28,2.323,29,2.254,30,2.397,31,0.663,32,3.226,33,3.581,34,0.194,35,2.518,36,1.538,37,0.134,38,2.028,39,2.028,40,2.028,41,3.363,42,1.746,43,2.748,44,2.973,45,1.689,46,2.028,47,2.973,48,0.672,49,0.826,50,1.585,51,2.448,52,1.689,53,2.748,54,3.028,55,1.959,56,2.475,57,1.684,58,2.748,59,2.855,60,1.032,61,2.853,62,0.776,63,1.811,64,2.189,65,2.254,66,2.748,67,2.068,68,2.475,69,2.748,70,2.323,71,2.254,72,2.323,73,2.475,74,2.855,75,2.855,76,1.948,77,3.103,78,4.237,79,3.103,80,2.218,81,4.713,82,2.218,83,2.218,84,2.028,85,3.103,86,4.51,87,4.125,88,2.118,89,3.103,90,2.218,91,2.218,92,3.848,93,2.218,94,0.235,95,3.103,96,3.721,97,2.218,98,2.218,99,3.103,100,2.218,101,3.103,102,2.118,103,3.103,104,2.118,105,3.103,106,2.118,107,3.103,108,3.454,109,1.808,110,3.454,111,3.251,112,3.251,113,3.103,114,2.218,115,2.218,116,2.218,117,2.118,118,3.103,119,2.218,120,2.218,121,2.118,122,3.103,123,2.855,124,2.218,125,2.218,126,2.218,127,2.218,128,3.103,129,2.218,130,1.764,131,2.218,132,2.091,133,2.091,134,3.673,135,3.103,136,3.251,137,3.251,138,2.218,139,3.251,140,2.422,141,1.147,142,2.218,143,2.218,144,3.251,145,2.118,146,3.103,147,2.218,148,2.218,149,2.218,150,1.689,151,3.103,152,2.475,153,3.103,154,3.103,155,3.103,156,1.601,157,2.448,158,3.673,159,0.702,160,3.103,161,4.5,162,5.311,163,5.311,164,5.311,165,2.118,166,3.103,167,2.302,168,2.118,169,3.103,170,1.859,171,2.118,172,3.103,173,3.916,174,3.251,175,2.118,176,3.103,177,2.748,178,2.118,179,3.103,180,3.251,181,2.118,182,3.103,183,3.251,184,2.118,185,3.103,186,3.673,187,3.103,188,4.713,189,2.118,190,3.103,191,2.118,192,3.103,193,2.118,194,3.103,195,2.118,196,3.103,197,2.118,198,3.103,199,2.118,200,3.103,201,2.118,202,1.681,203,2.973,204,2.973,205,2.855,206,2.118,207,2.118,208,2.028,209,0.489,210,1.746,211,2.118,212,1.875,213,2.218,214,2.218,215,2.218,216,3.475,217,2.028,218,0.597,219,2.118,220,2.118,221,4.549,222,0.826,223,3.379,224,3.037,225,3.326,226,3.848,227,2.189,228,2.559,229,2.551,230,1.104,231,3.326,232,3.124,233,1.746,234,3.029,235,1.746,236,2.397,237,1.808,238,2.039,239,1.85,240,1.766,241,2.973,242,0.517,243,1.875,244,2.218,245,1.808,246,2.127,247,0.808,248,2.218,249,0.443,250,1.636,251,1.948,252,1.746,253,2.118,254,0.16,255,2.218,256,2.218,257,1.538,258,2.218,259,2.028,260,2.118,261,2.973,262,4.222,263,1.236,264,2.028,265,2.028,266,2.028,267,1.411,268,1.157,269,2.714,270,1.948,271,2.748,272,1.746,273,2.855,274,2.118,275,2.748,276,2.118,277,2.973,278,1.948,279,2.973,280,2.855,281,2.012,282,2.028,283,1.808,284,2.65,285,1.948,286,0.641,287,1.636,288,2.028,289,1.636,290,2.028,291,2.218,292,1.948,293,2.028,294,0.769,295,1.689,296,1.636,297,1.636,298,1.636,299,2.028,300,2.118,301,0.17,302,1.948,303,1.808,304,1.689,305,0.005,306,0.005,311,0.684,315,0.208,317,0.709,544,0.852,1846,2.028,1855,2.028,3380,3.51,3381,3.51,3382,3.51]],["title/interfaces/ParserOptions.html",[0,1.066,216,1.83]],["body/interfaces/ParserOptions.html",[0,1.854,1,2.848,2,1.803,3,0.059,4,0.059,5,0.059,6,0.045,7,2.022,8,0.045,9,0.543,10,0.22,11,1.942,12,2.022,13,4.301,14,1.489,15,3.247,16,2.553,17,2.111,18,4.301,19,1.649,20,2.022,21,4.301,22,2.111,23,3.707,24,1.942,26,0.136,27,0.009,28,2.318,29,2.934,30,3.119,31,0.672,32,3.585,33,3.98,34,0.193,35,2.513,36,1.533,37,0.134,38,2.022,39,2.022,40,2.022,41,3.36,42,1.741,43,2.742,44,2.966,45,1.684,46,2.022,47,2.966,48,0.67,49,0.824,50,1.58,51,2.444,52,1.684,53,2.742,54,3.477,55,1.954,56,2.47,57,1.681,58,2.742,59,2.848,60,1.005,61,2.849,62,0.774,63,1.807,64,2.184,65,2.249,66,2.742,67,2.063,68,2.47,69,2.742,70,2.318,71,2.249,72,2.318,73,2.47,74,2.848,75,2.848,76,1.942,77,3.096,78,4.23,79,3.096,80,2.211,81,4.708,82,2.211,83,2.211,84,2.022,85,3.096,86,4.504,87,4.119,88,2.111,89,3.096,90,2.211,91,2.211,92,3.841,93,2.211,94,0.235,95,3.096,96,3.715,97,2.211,98,2.211,99,3.096,100,2.211,101,3.096,102,2.111,103,3.096,104,2.111,105,3.096,106,2.111,107,3.096,108,3.448,109,1.803,110,3.448,111,3.243,112,3.243,113,3.096,114,2.211,115,2.211,116,2.211,117,2.111,118,3.096,119,2.211,120,2.211,121,2.111,122,3.096,123,2.848,124,2.211,125,2.211,126,2.211,127,2.211,128,3.096,129,2.211,130,1.761,131,2.211,132,2.087,133,2.087,134,3.667,135,3.096,136,3.243,137,3.243,138,2.211,139,3.243,140,2.419,141,1.146,142,2.211,143,2.211,144,3.243,145,2.111,146,3.096,147,2.211,148,2.211,149,2.211,150,1.684,151,3.096,152,2.47,153,3.096,154,3.096,155,3.096,156,1.597,157,2.444,158,3.667,159,0.701,160,3.096,161,4.495,162,5.307,163,5.307,164,5.307,165,2.111,166,3.096,167,2.299,168,2.111,169,3.096,170,1.854,171,2.111,172,3.096,173,3.913,174,3.243,175,2.111,176,3.096,177,2.742,178,2.111,179,3.096,180,3.243,181,2.111,182,3.096,183,3.243,184,2.111,185,3.096,186,3.667,187,3.096,188,4.708,189,2.111,190,3.096,191,2.111,192,3.096,193,2.111,194,3.096,195,2.111,196,3.096,197,2.111,198,3.096,199,2.111,200,3.096,201,2.111,202,1.677,203,4.119,204,4.119,205,3.956,206,2.111,207,2.111,208,2.022,209,0.488,210,1.741,211,2.111,212,1.869,213,2.211,214,2.211,215,2.211,216,3.183,217,2.022,218,0.596,219,2.111,220,2.111,221,3.715,222,0.824,223,3.373,224,2.849,225,2.832,226,3.841,227,2.184,228,2.553,229,2.083,230,1.035,231,2.832,232,2.391,233,1.741,234,3.024,235,1.741,236,1.63,237,1.803,238,2.035,239,1.847,240,1.762,241,2.966,242,0.515,243,1.869,244,2.211,245,1.803,246,2.122,247,0.805,248,2.211,249,0.442,250,1.63,251,1.942,252,1.741,253,2.111,254,0.153,255,2.211,256,2.211,257,1.533,258,2.211,259,2.022,260,2.111,261,2.966,262,4.218,263,1.232,264,2.022,265,2.022,266,2.022,267,1.407,268,1.154,269,2.711,270,1.942,271,2.742,272,1.741,273,2.848,274,2.111,275,2.742,276,2.111,277,2.966,278,1.942,279,2.966,280,2.848,281,2.008,282,2.022,283,1.803,284,2.644,285,1.942,286,0.639,287,1.63,288,2.022,289,1.63,290,2.022,291,2.211,292,1.942,293,2.022,294,0.767,295,1.684,296,1.63,297,1.63,298,1.63,299,2.022,300,2.111,301,0.089,302,1.942,303,1.803,304,1.684,305,0.005,306,0.005]],["title/interfaces/PassedInitialConfig.html",[0,1.066,2502,3.568]],["body/interfaces/PassedInitialConfig.html",[0,1.495,2,3.199,3,0.105,4,0.105,5,0.105,6,0.08,8,0.08,9,0.674,10,0.215,26,0.121,27,0.009,34,0.492,37,0.126,62,1.139,159,0.848,167,2.132,209,0.773,242,0.914,252,4.439,294,0.953,305,0.007,306,0.007,307,0.487,338,1.799,1227,3.821,1452,5.716,1455,4.364,1515,4.127,1869,2.988,1969,5.017,1975,4.127,2495,5.305,2497,5.483,2498,6.666,2499,5.716,2500,5.483,2502,6.82,2504,6.666,2505,6.666,2506,6.666,2507,5.006,2508,6.666,2509,5.483,2510,6.556,2511,7.471,2512,4.364,2513,5.483,2514,5.483,2515,7.656,2516,7.471,2517,5.483,2518,5.483,2519,5.483,2520,5.483,2521,5.006,2522,5.483,2523,5.483,2524,5.483,2525,5.006,2526,5.483,2527,5.483,2528,5.483,2529,5.483,2530,6.666,2531,5.483,2532,6.085,2533,4.649,2534,5.483,2535,5.006,2536,5.483,2537,5.483,2538,5.483,2539,5.483]],["title/interfaces/Renderable.html",[0,1.066,327,1.378]],["body/interfaces/Renderable.html",[0,1.464,2,1.488,3,0.049,4,0.049,5,0.049,6,0.084,8,0.037,10,0.073,19,0.712,25,0.999,26,0.121,27,0.009,31,0.66,34,0.299,37,0.132,60,1.098,62,1.046,94,0.23,130,2.215,140,1.605,141,0.739,159,0.394,167,0.992,170,1.605,209,0.89,218,0.531,222,1.942,230,1.333,242,0.895,249,0.684,254,0.157,268,1.676,286,1.362,294,1.173,301,0.073,305,0.004,306,0.004,307,0.672,308,2.304,310,1.266,311,0.591,314,1.266,315,0.207,317,0.708,318,1.266,320,1.266,322,0.967,323,0.818,324,2.247,325,1.35,326,1.229,327,2.247,328,2.497,329,2.73,330,2.73,331,2.816,332,2.444,333,2.158,334,2.06,335,1.655,336,1.266,337,0.728,338,0.837,339,1.266,340,1.947,341,1.947,342,1.266,343,1.266,344,1.648,345,1.266,346,1.266,347,1.266,348,2.253,349,2.714,350,1.266,351,1.266,352,1.266,353,1.266,354,1.266,355,1.266,356,1.266,357,1.266,358,1.266,359,1.266,360,1.266,361,3.951,362,1.2,363,1.738,364,1.266,365,1.13,366,1.266,367,1.266,368,1.229,369,0.234,370,2.108,371,1.12,372,0.967,373,1.488,374,2.949,375,3.163,376,1.266,377,1.266,378,1.947,379,1.266,380,2.373,381,2.373,382,1.266,383,2.304,384,1.266,385,1.266,386,1.266,387,1.266,388,1.266,389,1.266,390,1.266,391,1.266,392,1.266,393,1.266,394,1.266,395,1.266,396,1.266,397,1.947,398,1.605,399,1.266,400,1.266,401,2.304,402,1.266,403,2.664,404,1.266,405,1.947,406,1.266,407,1.266,408,2.304,409,1.266,410,1.947,411,1.266,412,1.266,413,1.266,414,1.266,415,1.266,416,1.266,417,1.266,418,2.304,419,1.266,420,1.266,421,1.266,422,1.266,423,1.266,424,1.266,425,1.266,426,1.266,427,1.266,428,1.266,429,1.266,430,1.266,431,1.266,432,1.266,433,1.266,434,1.266,435,1.266,436,1.266,437,1.266,438,1.266,439,1.266,440,1.266,441,1.266,442,1.266,443,1.266,444,1.266,445,1.266,446,1.266,447,1.266,448,1.266,449,1.266,450,2.304,451,1.266,452,1.266,453,1.266,454,1.266,455,2.304,456,1.266,457,1.266,458,1.266,459,1.266,460,1.266,461,1.266,462,2.304,463,1.266,464,1.266,465,1.266,466,2.587,467,2.664,468,2.876,469,3.777,470,3.967,471,1.947,472,1.266,473,1.266,474,0.899,475,1.266,476,1.266,477,2.304,478,1.266,479,1.266,480,1.266,481,1.266,482,1.266,483,1.266,484,1.266,485,1.266,486,1.266,487,1.266,488,1.266,489,1.266,490,1.266,491,1.266,492,1.266,493,1.266,494,1.266,495,1.266,496,1.266,497,1.266,498,1.266,499,1.266,500,2.304,501,1.266,502,1.266,503,1.266,504,1.266,505,1.266,506,1.266,507,1.266,508,1.266,509,1.266,510,1.266,511,1.266,512,1.786,513,1.017,514,1.891,515,1.266,516,1.266,517,1.266,518,2.304,519,1.956,520,1.266,521,1.266,522,1.266,523,2.304,524,1.266,525,1.266,526,1.266,527,1.266,528,2.949,529,1.266,530,1.229,531,2.949,532,1.266,533,1.044,534,2.664,535,1.266,536,0.944,578,1.305,3383,2.888,3384,2.888,3385,2.888,3386,2.888]],["title/interfaces/ResponseJson.html",[0,1.066,2482,3.568]],["body/interfaces/ResponseJson.html",[0,1.381,2,2.955,3,0.097,4,0.097,5,0.097,6,0.074,8,0.074,9,0.642,16,4.094,25,1.616,26,0.131,27,0.009,34,0.396,37,0.085,41,3.775,50,3.828,94,0.23,141,1.123,152,3.778,202,2.565,209,0.546,218,0.562,227,3.059,228,4.094,233,4.094,242,1.211,249,0.991,254,0.161,294,0.724,305,0.007,306,0.007,307,0.45,317,0.668,362,2.336,369,0.248,373,2.407,585,2.76,1030,4.542,1248,1.921,1380,4.997,1457,3.247,1487,3.184,1500,4.537,1541,4.736,1548,4.032,1553,4.154,1601,4.542,1623,5.877,1694,6.161,1695,6.161,1704,4.777,1707,5.784,1710,5.052,1718,5.784,1725,3.813,1737,4.032,1753,4.032,1772,4.295,2466,5.795,2467,4.624,2468,4.624,2469,4.624,2470,4.624,2471,4.624,2472,5.066,2473,7.903,2477,5.066,2482,5.795,2483,5.066,2484,5.066,2485,5.066,2486,5.066,2487,6.348,2488,5.066,2489,5.066,2490,5.066,2491,5.066,2492,5.066,2493,5.066]],["title/interfaces/ResponseOptions.html",[0,1.066,217,2.558]],["body/interfaces/ResponseOptions.html",[0,1.871,1,2.911,2,1.857,3,0.061,4,0.061,5,0.061,6,0.046,7,2.083,8,0.046,9,0.552,10,0.172,11,2,12,2.083,13,3.164,14,1.534,15,3.303,16,2.609,17,2.175,18,3.164,19,1.673,20,2.083,21,3.164,22,2.175,23,3.076,24,2,26,0.134,27,0.009,28,2.369,29,2.298,30,2.444,31,0.665,32,3.267,33,3.627,34,0.199,35,2.556,36,1.58,37,0.135,38,2.083,39,2.083,40,2.083,41,3.388,42,1.793,43,2.802,44,3.031,45,1.735,46,2.083,47,3.923,48,0.69,49,0.848,50,1.628,51,2.486,52,1.735,53,2.802,54,3.067,55,1.997,56,2.524,57,1.71,58,2.802,59,2.911,60,1.011,61,2.889,62,0.791,63,1.847,64,2.232,65,2.298,66,2.802,67,2.109,68,2.524,69,2.802,70,2.369,71,2.298,72,2.369,73,2.524,74,2.911,75,2.911,76,2,77,3.164,78,4.29,79,3.164,80,2.278,81,4.757,82,2.278,83,2.278,84,2.083,85,3.164,86,4.559,87,4.169,88,2.175,89,3.164,90,2.278,91,2.278,92,3.907,93,2.278,94,0.235,95,3.164,96,3.768,97,2.278,98,2.278,99,3.164,100,2.278,101,3.164,102,2.175,103,3.164,104,2.175,105,3.164,106,2.175,107,3.164,108,3.497,109,1.857,110,3.497,111,3.314,112,3.314,113,3.164,114,2.278,115,2.278,116,2.278,117,2.175,118,3.164,119,2.278,120,2.278,121,2.175,122,3.164,123,2.911,124,2.278,125,2.278,126,2.278,127,2.278,128,3.164,129,2.278,130,1.791,131,2.278,132,2.123,133,2.123,134,3.73,135,3.164,136,3.314,137,3.314,138,2.278,139,3.314,140,2.453,141,1.174,142,2.278,143,2.278,144,3.314,145,2.175,146,3.164,147,2.278,148,2.278,149,2.278,150,1.735,151,3.164,152,2.524,153,3.164,154,3.164,155,3.164,156,1.632,157,2.486,158,3.73,159,0.716,160,3.164,161,4.542,162,5.338,163,5.338,164,5.338,165,2.175,166,3.164,167,2.331,168,2.175,169,3.164,170,1.895,171,2.175,172,3.164,173,3.936,174,3.314,175,2.175,176,3.164,177,2.802,178,2.175,179,3.164,180,3.314,181,2.175,182,3.164,183,3.314,184,2.175,185,3.164,186,3.73,187,3.164,188,4.757,189,2.175,190,3.164,191,2.175,192,3.164,193,2.175,194,3.164,195,2.175,196,3.164,197,2.175,198,3.164,199,2.175,200,3.164,201,2.175,202,1.714,203,3.031,204,3.031,205,2.911,206,2.175,207,2.175,208,2.083,209,0.499,210,1.793,211,2.175,212,1.926,213,2.278,214,2.278,215,2.278,216,3.213,217,3.031,218,0.666,219,4.096,220,4.096,221,3.768,222,0.848,223,3.431,224,2.889,225,2.881,226,3.907,227,2.232,228,2.609,229,2.113,230,1.05,231,2.881,232,2.444,233,1.793,234,3.076,235,1.793,236,1.68,237,1.857,238,2.07,239,1.878,240,1.801,241,3.031,242,0.531,243,1.926,244,2.278,245,1.857,246,2.169,247,0.829,248,2.278,249,0.455,250,1.68,251,2,252,1.793,253,2.175,254,0.154,255,2.278,256,2.278,257,1.58,258,2.278,259,2.083,260,2.175,261,3.031,262,4.253,263,1.269,264,2.083,265,2.083,266,2.083,267,1.449,268,1.179,269,2.736,270,2,271,2.802,272,1.793,273,2.911,274,2.175,275,2.802,276,2.175,277,3.031,278,2,279,3.031,280,2.911,281,2.051,282,2.083,283,1.857,284,2.702,285,2,286,0.659,287,1.68,288,2.083,289,1.68,290,2.083,291,2.278,292,2,293,2.083,294,0.781,295,1.735,296,1.68,297,1.68,298,1.68,299,2.083,300,2.175,301,0.091,302,2,303,1.857,304,1.735,305,0.005,306,0.005]],["title/classes/SearchExpression.html",[307,0.347,958,2.797]],["body/classes/SearchExpression.html",[3,0.072,4,0.072,5,0.072,6,0.112,8,0.054,9,0.525,10,0.211,25,1.641,26,0.135,27,0.009,31,0.594,34,0.402,37,0.109,49,1.984,60,0.874,62,0.639,68,3.251,94,0.201,157,1.702,159,0.578,209,0.844,218,0.576,230,0.655,239,1.286,242,0.623,246,2.793,247,0.974,249,0.922,254,0.158,263,2.071,281,2.3,294,1.002,301,0.214,305,0.006,306,0.006,307,0.461,309,0.183,311,0.782,315,0.305,317,1.021,323,1.198,324,2.103,325,2.053,327,2.584,328,2.506,329,2.471,330,2.471,331,2.531,333,2.121,334,2.025,335,1.067,338,1.958,348,1.453,349,1.75,369,0.254,370,1.588,371,1.067,372,1.418,398,2.441,474,1.317,512,1.702,513,1.491,536,1.383,544,0.823,559,4.195,561,3.715,562,4.269,563,4.29,564,2.18,566,2.471,567,2.813,569,4.789,574,3.951,578,1.912,580,2.813,581,2.813,585,2.037,589,2.349,592,3.141,593,2.349,604,2.554,644,3.908,645,4.406,646,2.446,958,5.884,959,3.908,1000,3.412,1017,4.74,1018,3.412,1141,2.18,1174,2.935,1252,3.48,1548,2.975,2399,3.169,2856,5.884,3373,3.169,3387,3.412,3388,5.966,3389,5.966,3390,8.052,3391,7.683,3392,5.879,3393,6.953,3394,4.232,3395,4.232,3396,5.192,3397,4.232,3398,4.232,3399,4.232,3400,4.232,3401,5.192,3402,4.232,3403,5.192,3404,4.232,3405,4.232,3406,4.232,3407,4.232,3408,5.192,3409,4.232,3410,4.232,3411,4.74,3412,3.738,3413,3.738,3414,7.445,3415,6.773,3416,3.738,3417,5.192,3418,3.738,3419,3.738,3420,5.192,3421,5.192,3422,5.192,3423,5.192,3424,5.192,3425,3.738,3426,5.192,3427,3.738,3428,3.738,3429,3.738,3430,3.738,3431,3.738]],["title/classes/SearchTerm.html",[307,0.347,3411,3.568]],["body/classes/SearchTerm.html",[3,0.081,4,0.081,5,0.081,6,0.106,8,0.062,10,0.163,25,1.441,26,0.129,27,0.009,31,0.561,34,0.424,37,0.114,49,1.697,60,0.921,68,2.311,94,0.22,157,1.931,159,0.656,209,0.858,218,0.471,242,0.707,246,2.65,249,1.041,254,0.122,281,2.507,294,1.041,301,0.163,305,0.006,306,0.006,307,0.503,309,0.208,311,0.852,315,0.273,317,0.84,323,1.36,324,2.244,325,1.947,327,2.566,328,2.619,329,2.566,330,2.566,331,2.629,333,2.216,334,2.116,335,1.616,338,1.392,348,1.649,349,1.986,369,0.277,371,1.211,372,1.609,474,1.495,512,1.931,513,1.691,536,1.569,559,3.188,562,3.035,563,4.274,569,4.835,574,3.715,578,2.169,585,2.311,589,2.666,592,3.423,593,2.666,644,4.259,645,4.576,646,2.776,649,2.315,958,5.804,959,4.259,1017,5.166,1018,3.872,1141,2.474,1174,3.093,1252,3.715,1548,3.376,2399,3.596,2856,3.872,3373,3.596,3387,3.872,3388,4.241,3389,4.241,3390,8.025,3391,7.551,3393,6.646,3396,4.241,3401,4.241,3403,4.241,3408,4.241,3411,6.202,3412,4.241,3413,4.241,3414,7.646,3415,7.078,3416,4.241,3417,5.659,3418,4.241,3419,4.241,3420,5.659,3421,5.659,3422,5.659,3423,5.659,3424,5.659,3425,4.241,3426,5.659,3427,4.241,3428,4.241,3429,4.241,3430,4.241,3431,4.241,3432,4.802,3433,4.802,3434,4.802,3435,4.802,3436,4.802,3437,4.802]],["title/classes/SegmentHandler.html",[307,0.347,2584,3.314]],["body/classes/SegmentHandler.html",[3,0.094,4,0.094,5,0.094,6,0.116,8,0.071,10,0.213,26,0.133,27,0.009,29,3.082,31,0.513,34,0.448,37,0.105,52,2.667,55,2.11,56,2.667,57,1.532,58,2.96,60,1.085,62,0.836,63,1.952,94,0.217,159,0.96,209,0.87,230,1.347,247,1.618,249,1.059,254,0.168,286,1.285,301,0.226,305,0.007,306,0.007,307,0.552,309,0.24,311,0.936,315,0.306,317,1.026,323,1.569,369,0.24,513,1.952,544,1.138,649,2.541,1361,4.943,1457,2.503,1539,4.943,1591,4.675,1976,3.502,2059,5.787,2559,6.085,2565,5.67,2570,4.468,2584,5.266,2642,4.468,2643,4.894,2652,4.894,2653,6.211,2654,6.211,2655,6.211,2656,6.211,2657,6.211,2658,6.823,2659,7.177,2660,4.894,2661,7.177,2662,6.211,2663,6.823,2664,7.177,2665,4.894,2666,7.177,2667,4.894,2668,4.894,2669,4.894,2670,4.894,2671,4.894,2672,4.894,2673,4.894,2722,4.894,3438,5.541,3439,5.541,3440,5.541,3441,5.541,3442,5.541,3443,5.541,3444,5.541,3445,5.541,3446,5.541,3447,5.541,3448,5.541]],["title/classes/SelectExpression.html",[307,0.347,960,2.942]],["body/classes/SelectExpression.html",[3,0.093,4,0.093,5,0.093,6,0.107,8,0.071,9,0.625,10,0.212,25,1.822,26,0.135,27,0.009,31,0.401,34,0.424,37,0.104,49,1.812,60,0.658,62,0.829,64,3.275,94,0.195,157,2.21,209,0.796,218,0.686,222,1.907,230,1.19,239,1.67,246,3.183,247,1.265,249,0.972,254,0.159,281,2.737,294,0.883,301,0.217,305,0.007,306,0.007,307,0.431,309,0.238,311,0.931,315,0.305,317,1.025,324,2.178,325,2.339,327,2.662,328,2.515,329,2.395,330,2.395,331,2.454,333,2.128,334,2.139,338,2.23,369,0.302,370,1.89,398,2.781,474,1.711,536,1.796,544,0.77,559,4.419,561,4.421,562,4.421,563,4.234,564,2.831,566,2.662,567,3.653,569,3.316,574,4.31,578,2.483,580,3.653,581,4.65,582,3.863,585,2.645,587,3.316,589,3.05,592,2.936,593,3.05,595,3.316,604,4.221,610,5.238,643,2.735,645,3.05,646,3.176,960,6.153,961,4.917,1002,4.431,1003,4.854,3449,4.854,3450,5.496,3451,5.496,3452,5.496,3453,5.496,3454,5.496,3455,5.496]],["title/classes/StringAndCollectionFunctions.html",[307,0.347,383,1.884]],["body/classes/StringAndCollectionFunctions.html",[0,1.428,3,0.047,4,0.047,5,0.047,6,0.094,8,0.035,10,0.18,19,0.679,26,0.125,27,0.009,31,0.668,34,0.29,37,0.131,60,1.105,62,1.219,94,0.229,130,2.184,140,1.548,141,0.969,159,0.376,167,0.946,170,1.548,209,0.889,218,0.515,222,2.014,230,1.323,242,0.873,249,0.664,254,0.163,268,1.65,286,1.341,294,1.17,301,0.18,305,0.004,306,0.004,307,0.667,308,2.237,309,0.119,310,1.208,311,0.57,314,1.208,315,0.242,317,0.827,318,1.208,320,1.208,322,0.923,323,0.78,324,2.209,325,1.302,326,1.173,327,2.116,328,2.319,329,2.713,330,2.713,331,2.8,332,1.108,333,1.963,334,1.874,335,1.619,336,1.208,337,0.695,338,0.799,339,1.208,340,1.878,341,1.878,342,1.208,343,1.208,344,1.589,345,1.208,346,1.208,347,1.208,348,2.205,349,2.656,350,1.208,351,1.208,352,1.208,353,1.208,354,1.208,355,1.208,356,1.208,357,1.208,358,1.208,359,1.208,360,1.208,361,3.965,362,1.158,363,1.676,364,1.208,365,1.078,366,1.208,367,1.208,368,1.173,369,0.227,370,2.081,371,1.08,372,0.923,373,1.435,374,2.894,375,3.11,376,1.208,377,1.208,378,1.878,379,1.208,380,2.304,381,2.304,382,1.208,383,2.523,384,1.878,385,1.208,386,1.878,387,1.208,388,1.878,389,1.208,390,1.878,391,1.208,392,1.878,393,1.208,394,1.878,395,1.208,396,1.878,397,2.599,398,2.457,399,1.208,400,1.208,401,2.237,402,1.208,403,2.599,404,1.208,405,1.878,406,1.208,407,1.208,408,2.237,409,1.208,410,1.878,411,1.208,412,1.208,413,1.208,414,1.208,415,1.208,416,1.208,417,1.208,418,2.237,419,1.208,420,1.208,421,1.208,422,1.208,423,1.208,424,1.208,425,1.208,426,1.208,427,1.208,428,1.208,429,1.208,430,1.208,431,1.208,432,1.208,433,1.208,434,1.208,435,1.208,436,1.208,437,1.208,438,1.208,439,1.208,440,1.208,441,1.208,442,1.208,443,1.208,444,1.208,445,1.208,446,1.208,447,1.208,448,1.208,449,1.208,450,2.237,451,1.208,452,1.208,453,1.208,454,1.208,455,2.237,456,1.208,457,1.208,458,1.208,459,1.208,460,1.208,461,1.208,462,2.237,463,1.208,464,1.208,465,1.208,466,2.523,467,2.599,468,2.815,469,3.75,470,3.951,471,1.878,472,1.208,473,1.208,474,0.858,475,1.208,476,1.208,477,2.237,478,1.208,479,1.208,480,1.208,481,1.208,482,1.208,483,1.208,484,1.208,485,1.208,486,1.208,487,1.208,488,1.208,489,1.208,490,1.208,491,1.208,492,1.208,493,1.208,494,1.208,495,1.208,496,1.208,497,1.208,498,1.208,499,1.208,500,2.237,501,1.208,502,1.208,503,1.208,504,1.208,505,1.208,506,1.208,507,1.208,508,1.208,509,1.208,510,1.208,511,1.208,512,1.723,513,0.971,514,1.824,515,1.208,516,1.208,517,1.208,518,2.237,519,1.9,520,1.208,521,1.208,522,1.208,523,2.237,524,1.208,525,1.208,526,1.208,527,1.208,528,2.894,529,1.208,530,1.173,531,2.894,532,1.208,533,0.996,534,2.599,535,1.208,536,0.901,544,0.994,3456,4.285,3457,4.285,3458,4.285,3459,4.285,3460,4.285,3461,4.285,3462,2.756,3463,2.756,3464,2.756,3465,2.756,3466,2.756,3467,2.756,3468,2.756]],["title/classes/StringFunctions.html",[307,0.347,408,1.884]],["body/classes/StringFunctions.html",[0,1.453,3,0.048,4,0.048,5,0.048,6,0.084,8,0.037,10,0.153,19,0.702,26,0.122,27,0.009,31,0.659,34,0.296,37,0.132,60,1.101,62,1.173,94,0.231,130,2.206,140,1.588,141,0.733,159,0.389,167,0.978,170,1.588,209,0.89,218,0.526,222,1.936,230,1.372,242,0.888,249,0.678,254,0.161,268,1.668,286,1.356,294,1.172,301,0.153,305,0.004,306,0.004,307,0.671,308,2.284,309,0.123,310,1.248,311,0.585,314,1.248,315,0.206,317,0.703,318,1.248,320,1.248,322,0.954,323,0.806,324,2.235,325,1.335,326,1.212,327,2.145,328,2.347,329,2.725,330,2.725,331,2.811,332,1.145,333,1.986,334,1.896,335,1.644,336,1.248,337,0.718,338,0.825,339,1.248,340,1.926,341,1.926,342,1.248,343,1.248,344,1.63,345,1.248,346,1.248,347,1.248,348,2.239,349,2.696,350,1.248,351,1.248,352,1.248,353,1.248,354,1.248,355,1.248,356,1.248,357,1.248,358,1.248,359,1.248,360,1.248,361,3.948,362,1.187,363,1.719,364,1.248,365,1.114,366,1.248,367,1.248,368,1.212,369,0.232,370,2.1,371,1.108,372,0.954,373,1.472,374,2.932,375,3.147,376,1.248,377,1.248,378,1.926,379,1.248,380,2.352,381,2.352,382,1.248,383,2.284,384,1.248,385,1.248,386,1.248,387,1.248,388,1.248,389,1.248,390,1.248,391,1.248,392,1.248,393,1.248,394,1.248,395,1.248,396,1.248,397,1.926,398,1.588,399,1.248,400,1.248,401,2.284,402,1.248,403,2.644,404,1.248,405,1.926,406,1.248,407,1.248,408,2.568,409,1.926,410,2.644,411,1.248,412,1.926,413,1.248,414,1.926,415,1.248,416,1.926,417,1.248,418,2.284,419,1.248,420,1.248,421,1.248,422,1.248,423,1.248,424,1.248,425,1.248,426,1.248,427,1.248,428,1.248,429,1.248,430,1.248,431,1.248,432,1.248,433,1.248,434,1.248,435,1.248,436,1.248,437,1.248,438,1.248,439,1.248,440,1.248,441,1.248,442,1.248,443,1.248,444,1.248,445,1.248,446,1.248,447,1.248,448,1.248,449,1.248,450,2.284,451,1.248,452,1.248,453,1.248,454,1.248,455,2.284,456,1.248,457,1.248,458,1.248,459,1.248,460,1.248,461,1.248,462,2.284,463,1.248,464,1.248,465,1.248,466,2.568,467,2.644,468,2.858,469,3.769,470,3.962,471,1.926,472,1.248,473,1.248,474,0.886,475,1.248,476,1.248,477,2.284,478,1.248,479,1.248,480,1.248,481,1.248,482,1.248,483,1.248,484,1.248,485,1.248,486,1.248,487,1.248,488,1.248,489,1.248,490,1.248,491,1.248,492,1.248,493,1.248,494,1.248,495,1.248,496,1.248,497,1.248,498,1.248,499,1.248,500,2.284,501,1.248,502,1.248,503,1.248,504,1.248,505,1.248,506,1.248,507,1.248,508,1.248,509,1.248,510,1.248,511,1.248,512,1.767,513,1.003,514,1.87,515,1.248,516,1.248,517,1.248,518,2.284,519,1.939,520,1.248,521,1.248,522,1.248,523,2.284,524,1.248,525,1.248,526,1.248,527,1.248,528,2.932,529,1.248,530,1.212,531,2.932,532,1.248,533,1.029,534,2.644,535,1.248,536,0.93,3230,3.881,3469,4.394,3470,4.394,3471,4.394,3472,2.847,3473,2.847,3474,2.847,3475,2.847]],["title/interfaces/StructuredTypeFieldOptions.html",[0,1.066,221,2.457]],["body/interfaces/StructuredTypeFieldOptions.html",[0,1.875,1,2.923,2,1.868,3,0.061,4,0.061,5,0.061,6,0.047,7,2.095,8,0.047,9,0.554,11,2.012,12,2.095,13,3.178,14,1.543,15,3.314,16,2.621,17,2.188,18,3.178,19,1.678,20,2.095,21,3.178,22,2.188,23,3.086,24,2.012,26,0.134,27,0.009,28,2.379,29,2.308,30,2.454,31,0.665,32,3.276,33,3.637,34,0.2,35,2.565,36,1.589,37,0.135,38,2.095,39,2.095,40,2.095,41,3.393,42,1.804,43,2.814,44,3.044,45,1.745,46,2.095,47,3.044,48,0.694,49,0.853,50,1.638,51,2.494,52,1.745,53,2.814,54,3.075,55,2.006,56,2.535,57,1.715,58,2.814,59,2.923,60,1.012,61,2.897,62,0.795,63,1.855,64,2.241,65,2.308,66,2.814,67,2.118,68,2.535,69,2.814,70,2.379,71,2.308,72,2.379,73,2.535,74,2.923,75,2.923,76,2.012,77,3.178,78,4.302,79,3.178,80,2.291,81,4.767,82,2.291,83,2.291,84,2.095,85,3.178,86,4.57,87,4.179,88,2.188,89,3.178,90,2.291,91,2.291,92,3.92,93,2.291,94,0.235,95,3.178,96,3.779,97,2.291,98,2.291,99,3.178,100,2.291,101,3.178,102,2.188,103,3.178,104,2.188,105,3.178,106,2.188,107,3.178,108,3.507,109,1.868,110,3.507,111,3.328,112,3.328,113,3.178,114,2.291,115,2.291,116,2.291,117,2.188,118,3.178,119,2.291,120,2.291,121,2.188,122,3.178,123,2.923,124,2.291,125,2.291,126,2.291,127,2.291,128,3.178,129,2.291,130,1.798,131,2.291,132,2.13,133,2.13,134,3.742,135,3.178,136,3.328,137,3.328,138,2.291,139,3.328,140,2.46,141,1.154,142,2.291,143,2.291,144,3.328,145,2.188,146,3.178,147,2.291,148,2.291,149,2.291,150,1.745,151,3.178,152,2.535,153,3.178,154,3.178,155,3.178,156,1.639,157,2.494,158,3.742,159,0.719,160,3.178,161,4.551,162,5.345,163,5.345,164,5.345,165,2.188,166,3.178,167,2.338,168,2.188,169,3.178,170,1.903,171,2.188,172,3.178,173,3.941,174,3.328,175,2.188,176,3.178,177,2.814,178,2.188,179,3.178,180,3.328,181,2.188,182,3.178,183,3.328,184,2.188,185,3.178,186,3.742,187,3.178,188,4.767,189,2.188,190,3.178,191,2.188,192,3.178,193,2.188,194,3.178,195,2.188,196,3.178,197,2.188,198,3.178,199,2.188,200,3.178,201,2.188,202,1.721,203,3.044,204,3.044,205,2.923,206,2.188,207,2.188,208,2.095,209,0.501,210,1.804,211,2.188,212,1.937,213,2.291,214,2.291,215,2.291,216,3.219,217,2.095,218,0.667,219,2.188,220,2.188,221,4.013,222,1.602,223,4.013,224,2.897,225,2.891,226,3.92,227,2.241,228,2.621,229,2.119,230,1.053,231,2.891,232,2.454,233,1.804,234,3.086,235,1.804,236,1.69,237,1.868,238,2.077,239,1.885,240,1.809,241,3.044,242,0.534,243,1.937,244,2.291,245,1.868,246,2.178,247,0.834,248,2.291,249,0.458,250,1.69,251,2.012,252,1.804,253,2.188,254,0.155,255,2.291,256,2.291,257,1.589,258,2.291,259,2.095,260,2.188,261,3.044,262,4.26,263,1.277,264,2.095,265,2.095,266,2.095,267,1.458,268,1.184,269,2.741,270,2.012,271,2.814,272,1.804,273,2.923,274,2.188,275,2.814,276,2.188,277,3.044,278,2.012,279,3.044,280,2.923,281,2.06,282,2.095,283,1.868,284,2.713,285,2.012,286,0.663,287,1.69,288,2.095,289,1.69,290,2.095,291,2.291,292,2.012,293,2.095,294,0.783,295,1.745,296,1.69,297,1.69,298,1.69,299,2.095,300,2.188,301,0.092,302,2.012,303,1.868,304,1.745,305,0.005,306,0.005]],["title/classes/TypeFunctions.html",[307,0.347,450,1.884]],["body/classes/TypeFunctions.html",[0,1.461,3,0.049,4,0.049,5,0.049,6,0.069,8,0.037,10,0.112,19,0.709,26,0.125,27,0.009,31,0.66,34,0.298,37,0.132,60,1.1,62,1.123,94,0.232,130,2.212,140,1.601,141,0.737,159,0.393,167,0.988,170,1.601,209,0.89,218,0.53,222,1.94,230,1.356,242,0.893,249,0.682,254,0.158,268,1.673,286,1.36,294,1.173,301,0.112,305,0.004,306,0.004,307,0.672,308,2.298,309,0.124,310,1.261,311,0.589,314,1.261,315,0.151,317,0.516,318,1.261,320,1.261,322,0.964,323,0.814,324,2.244,325,1.346,326,1.224,327,2.153,328,2.355,329,2.729,330,2.729,331,2.815,332,1.157,333,1.993,334,1.903,335,1.652,336,1.261,337,0.725,338,0.834,339,1.261,340,1.941,341,1.941,342,1.261,343,1.261,344,1.643,345,1.261,346,1.261,347,1.261,348,2.249,349,2.709,350,1.261,351,1.261,352,1.261,353,1.261,354,1.261,355,1.261,356,1.261,357,1.261,358,1.261,359,1.261,360,1.261,361,3.95,362,1.197,363,1.733,364,1.261,365,1.125,366,1.261,367,1.261,368,1.224,369,0.233,370,2.106,371,1.117,372,0.964,373,1.484,374,2.944,375,3.159,376,1.261,377,1.261,378,1.941,379,1.261,380,2.367,381,2.367,382,1.261,383,2.298,384,1.261,385,1.261,386,1.261,387,1.261,388,1.261,389,1.261,390,1.261,391,1.261,392,1.261,393,1.261,394,1.261,395,1.261,396,1.261,397,1.941,398,1.601,399,1.261,400,1.261,401,2.298,402,1.261,403,2.659,404,1.261,405,1.941,406,1.261,407,1.261,408,2.298,409,1.261,410,1.941,411,1.261,412,1.261,413,1.261,414,1.261,415,1.261,416,1.261,417,1.261,418,2.298,419,1.261,420,1.261,421,1.261,422,1.261,423,1.261,424,1.261,425,1.261,426,1.261,427,1.261,428,1.261,429,1.261,430,1.261,431,1.261,432,1.261,433,1.261,434,1.261,435,1.261,436,1.261,437,1.261,438,1.261,439,1.261,440,1.261,441,1.261,442,1.261,443,1.261,444,1.261,445,1.261,446,1.261,447,1.261,448,1.261,449,1.261,450,2.582,451,1.941,452,1.261,453,1.941,454,1.261,455,2.298,456,1.261,457,1.261,458,1.261,459,1.261,460,1.261,461,1.261,462,2.298,463,1.261,464,1.261,465,1.261,466,2.582,467,2.659,468,2.871,469,3.775,470,3.966,471,1.941,472,1.261,473,1.261,474,0.895,475,1.261,476,1.261,477,2.298,478,1.261,479,1.261,480,1.261,481,1.261,482,1.261,483,1.261,484,1.261,485,1.261,486,1.261,487,1.261,488,1.261,489,1.261,490,1.261,491,1.261,492,1.261,493,1.261,494,1.261,495,1.261,496,1.261,497,1.261,498,1.261,499,1.261,500,2.298,501,1.261,502,1.261,503,1.261,504,1.261,505,1.261,506,1.261,507,1.261,508,1.261,509,1.261,510,1.261,511,1.261,512,1.781,513,1.013,514,1.885,515,1.261,516,1.261,517,1.261,518,2.298,519,1.952,520,1.261,521,1.261,522,1.261,523,2.298,524,1.261,525,1.261,526,1.261,527,1.261,528,2.944,529,1.261,530,1.224,531,2.944,532,1.261,533,1.04,534,2.659,535,1.261,536,0.94,544,0.62,3476,4.429,3477,4.429,3478,2.877,3479,2.877]],["title/dependencies.html",[3480,3.255,3481,4.707]],["body/dependencies.html",[27,0.009,36,3.087,305,0.008,306,0.008,2507,5.679,2512,4.951,3481,6.221,3482,7.044,3483,9.201,3484,7.044,3485,7.044,3486,8.133,3487,8.133,3488,7.044,3489,7.044,3490,7.044,3491,7.044,3492,7.044,3493,7.044,3494,7.044,3495,7.044,3496,7.044]],["title/miscellaneous/enumerations.html",[3497,2.759,3498,4.707]],["body/miscellaneous/enumerations.html",[6,0.103,7,3.105,8,0.069,26,0.103,27,0.009,28,3.115,31,0.392,52,3.318,53,3.684,54,3.115,55,2.626,56,3.318,57,1.907,58,3.684,59,3.827,60,1.14,61,3.419,62,1.041,63,2.428,64,2.934,65,3.022,66,3.684,67,2.772,68,3.318,69,3.684,70,3.115,71,3.022,72,3.115,73,3.318,74,3.827,75,3.827,76,3.827,77,3.242,79,3.242,84,3.105,85,3.242,88,3.242,89,3.242,94,0.136,95,3.242,96,3.827,99,3.242,101,3.242,102,3.242,103,3.242,104,3.242,105,3.242,106,3.242,107,3.242,108,2.768,113,3.242,117,3.242,118,3.242,121,3.242,122,3.242,123,3.827,128,3.242,134,3.242,135,3.242,145,3.242,146,3.242,150,2.586,151,3.242,153,3.242,154,3.242,155,3.242,158,3.242,160,3.242,165,3.242,166,3.242,168,3.242,169,3.242,171,3.242,172,3.242,175,3.242,176,3.242,178,3.242,179,3.242,181,3.242,182,3.242,184,3.242,185,3.242,186,3.242,187,3.242,189,3.242,190,3.242,191,3.242,192,3.242,193,3.242,194,3.242,195,3.242,196,3.242,197,3.242,198,3.242,199,3.242,200,3.242,201,3.242,227,2.934,268,1.208,305,0.007,306,0.007,537,5.163,985,5.163,1019,4.745,1020,6.09,1027,4.745,1028,4.745,1271,3.684,1729,4.358,2053,5.163,2077,6.09,2162,3.395,2535,5.559,3497,4.023,3498,4.745,3499,6.725,3500,5.372,3501,6.895,3502,6.09,3503,6.895,3504,6.895,3505,6.09,3506,6.895,3507,4.745,3508,6.09,3509,6.895,3510,6.895,3511,5.372,3512,5.372,3513,5.372,3514,4.745,3515,6.895,3516,6.895,3517,6.895,3518,6.895]],["title/index.html",[8,0.047,2533,2.759,3519,3.255]],["body/index.html",[15,2.455,23,3.509,27,0.009,34,0.478,37,0.105,41,3.001,42,2.287,45,2.211,50,2.076,61,1.956,64,2.647,65,2.726,67,3.038,109,2.367,235,4.141,250,2.141,253,3.753,254,0.087,269,2.931,272,4.441,281,1.798,286,0.84,294,0.58,303,3.204,305,0.006,306,0.006,307,0.553,325,2.399,334,2.149,371,1.778,732,2.993,883,6.092,1024,3.636,1030,2.904,1161,2.904,1175,4.372,1227,3.566,1357,4.482,1364,5.961,1370,5.311,1371,2.455,1450,3.595,1452,3.23,1457,3.824,1487,2.551,1518,4.058,1620,2.455,1636,3.705,1648,4.058,1745,3.23,1872,2.551,1874,2.773,1945,3.23,1974,3.441,1976,2.904,2078,4.058,2097,4.058,2127,5.685,2494,6.562,2495,5.549,2499,4.372,2510,6.092,2512,4.956,2525,5.015,2724,3.705,3157,5.015,3178,7.882,3508,5.493,3520,7.577,3521,4.595,3522,4.595,3523,4.595,3524,4.595,3525,4.595,3526,4.595,3527,6.22,3528,4.595,3529,4.595,3530,6.673,3531,4.595,3532,4.595,3533,4.595,3534,6.22,3535,6.22,3536,6.673,3537,4.595,3538,6.22,3539,4.595,3540,6.22,3541,6.22,3542,6.22,3543,4.595,3544,6.22,3545,4.595,3546,4.595,3547,6.22,3548,6.22,3549,6.22,3550,4.595,3551,6.22,3552,4.595,3553,4.595,3554,4.595,3555,4.595,3556,4.595,3557,4.595,3558,4.595,3559,4.595,3560,4.595,3561,4.595,3562,4.595,3563,4.595,3564,6.22,3565,9.166,3566,4.595,3567,4.595,3568,4.595,3569,7.051,3570,8.464,3571,4.595,3572,4.595,3573,4.595,3574,7.051,3575,4.595,3576,4.595,3577,4.595,3578,7.051,3579,6.22,3580,6.22,3581,4.595,3582,6.22,3583,6.22,3584,7.555,3585,6.22,3586,4.595,3587,6.22,3588,4.595,3589,4.595,3590,4.595,3591,4.595,3592,4.595,3593,8.579,3594,4.595,3595,4.595,3596,4.595,3597,7.555,3598,4.595,3599,7.051,3600,4.595,3601,4.595,3602,4.595,3603,4.595,3604,4.595,3605,4.595,3606,4.595,3607,4.595,3608,4.595,3609,4.595,3610,4.595,3611,4.595,3612,4.595,3613,4.595,3614,4.595,3615,4.058,3616,4.595,3617,4.595,3618,4.595,3619,4.058,3620,4.595,3621,4.595,3622,6.22,3623,6.22,3624,4.595,3625,4.595,3626,4.595,3627,4.058,3628,4.595]],["title/license.html",[2533,2.759,3519,3.255,3629,2.971]],["body/license.html",[27,0.008,63,2.348,109,4.319,305,0.008,306,0.008,1370,5.536,1495,5.887,1880,5.235,2082,4.431,2088,5.887,2692,5.887,3536,5.887,3629,5.374,3630,5.887,3631,8.383,3632,6.665,3633,5.887,3634,5.887,3635,5.887,3636,7.875,3637,6.665,3638,6.665,3639,6.665,3640,6.665,3641,6.665,3642,6.665,3643,7.875,3644,9.17,3645,6.665,3646,6.665,3647,6.665,3648,6.665,3649,6.665,3650,6.665,3651,6.665,3652,6.665,3653,6.665,3654,6.665,3655,6.665,3656,7.875,3657,6.665,3658,6.665,3659,6.665,3660,6.665,3661,6.665,3662,6.665,3663,7.875,3664,7.875,3665,6.665,3666,6.665,3667,6.665,3668,6.665,3669,6.665,3670,6.665,3671,6.665,3672,6.665,3673,6.665,3674,6.665,3675,6.665,3676,6.665,3677,6.665,3678,6.665,3679,6.665,3680,6.665,3681,6.665,3682,6.665,3683,6.665,3684,6.665,3685,6.665,3686,6.665,3687,6.665,3688,6.665,3689,6.665,3690,6.665,3691,6.665,3692,6.665,3693,6.665,3694,6.665]],["title/modules.html",[2496,4.888]],["body/modules.html",[27,0.008,305,0.008,306,0.008,2495,5.152,2496,5.909,3695,7.329]],["title/overview.html",[3696,5.355]],["body/overview.html",[2,3.751,27,0.008,305,0.008,306,0.008,309,0.315,1174,2.928,2494,5.87,3324,6.431,3615,6.431,3696,6.431,3697,7.281,3698,7.281]],["title/properties.html",[9,0.476,3480,3.255]],["body/properties.html",[9,0.626,23,3.483,27,0.009,305,0.008,306,0.008,1235,2.738,1357,4.507,1450,4.046,1455,5.696,2521,6.534,3520,7.555,3530,6.182,3619,6.182,3627,7.157,3629,5.644,3630,6.182,3633,6.182,3634,6.182,3635,6.182,3699,7,3700,7,3701,7,3702,7,3703,7,3704,7,3705,7,3706,7,3707,7,3708,7,3709,7,3710,7]],["title/miscellaneous/typealiases.html",[3497,2.759,3711,5.329]],["body/miscellaneous/typealiases.html",[6,0.118,7,2.958,8,0.066,15,3.57,25,2.112,26,0.14,27,0.009,31,0.373,32,3.216,33,3.57,38,2.958,39,2.958,40,2.958,41,3.482,42,2.547,43,3.57,44,2.958,45,2.463,46,2.958,47,3.862,48,0.98,49,1.205,50,2.312,60,0.8,64,2.844,65,2.929,67,2.687,69,3.57,70,3.018,94,0.217,108,2.637,123,3.709,141,0.912,223,3.709,234,3.325,252,3.325,261,3.862,262,3.57,271,3.57,273,3.709,275,3.57,277,3.862,279,3.862,280,3.709,305,0.006,306,0.006,324,2.455,329,1.593,558,4.52,583,5.387,602,4.126,614,4.442,642,5.387,709,4.176,946,4.126,957,4.442,959,4.442,961,4.697,972,5.003,1275,4.442,1460,4.697,1469,4.697,1477,5.229,1484,5.387,1485,4.697,1486,5.387,1543,4.697,1757,2.958,2059,4.442,2157,4.126,2164,5.387,2165,5.387,2167,5.387,2168,5.387,2169,5.387,2555,4.52,2559,5.003,2725,5.387,2848,4.52,3355,4.126,3387,4.126,3393,5.387,3449,4.52,3497,3.832,3499,8.102,3502,7.918,3505,8.14,3507,4.52,3514,4.52,3712,6.682,3713,5.118,3714,5.118,3715,5.118,3716,5.118,3717,5.118,3718,7.44,3719,6.682,3720,7.887,3721,6.682,3722,6.682,3723,7.887,3724,6.682,3725,8.182,3726,6.682,3727,6.682,3728,7.44,3729,7.44,3730,5.118,3731,6.682,3732,6.682,3733,6.682,3734,6.682,3735,6.682,3736,5.118,3737,5.118,3738,7.44,3739,7.887,3740,6.682,3741,6.682,3742,5.118,3743,7.887,3744,6.682,3745,5.118,3746,5.118,3747,5.118,3748,5.118,3749,5.118,3750,5.118]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":1141,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["0.12.0",{"_index":3496,"title":{},"body":{"dependencies.html":{}}}],["0.122.0",{"_index":3699,"title":{},"body":{"properties.html":{}}}],["00:00",{"_index":115,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["07/schema",{"_index":2344,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["1",{"_index":1174,"title":{"classes/Field-1.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"overview.html":{}}}],["1.1.19",{"_index":3491,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3698,"title":{},"body":{"overview.html":{}}}],["125",{"_index":3697,"title":{},"body":{"overview.html":{}}}],["128",{"_index":80,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["15",{"_index":142,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["15.2.6",{"_index":3483,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":78,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["17",{"_index":143,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["1].tostring",{"_index":3073,"title":{},"body":{"classes/ODataRequest.html":{}}}],["1}\\$skiptoken=([\\d\\w\\s",{"_index":1349,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["2",{"_index":3615,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0",{"_index":38,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["2.3.0",{"_index":3494,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1693,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["2019",{"_index":3632,"title":{},"body":{"license.html":{}}}],["23:59:59.999999999999",{"_index":116,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["3",{"_index":3614,"title":{},"body":{"index.html":{}}}],["3.0",{"_index":39,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["4",{"_index":3609,"title":{},"body":{"index.html":{}}}],["4.0",{"_index":40,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["404",{"_index":2142,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["6",{"_index":148,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["7.5.0",{"_index":3492,"title":{},"body":{"dependencies.html":{}}}],["754",{"_index":137,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["8",{"_index":92,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["9",{"_index":149,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["9a",{"_index":2228,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["_add",{"_index":562,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["_add(name",{"_index":568,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["_add(node",{"_index":604,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_annotations",{"_index":3087,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_body",{"_index":2911,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_children",{"_index":561,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_connector",{"_index":3388,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_context",{"_index":3088,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_fields",{"_index":2256,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["_functions",{"_index":1334,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_headers",{"_index":2912,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_keys",{"_index":2255,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["_method",{"_index":2913,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_name",{"_index":341,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["_negated",{"_index":3389,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_options",{"_index":3089,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_params",{"_index":2914,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_path",{"_index":2915,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_payload",{"_index":3090,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_properties",{"_index":1325,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_requests",{"_index":1584,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responses",{"_index":1588,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responsetype",{"_index":2916,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_segments",{"_index":2556,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["above",{"_index":3662,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1552,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["abstract",{"_index":156,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["acc",{"_index":635,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["acc.params",{"_index":2602,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc.paths.push(path",{"_index":2601,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["accept",{"_index":11,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["accept.length",{"_index":3017,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push",{"_index":3011,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`odata.metadata=${this.api.options.accept?.metadata",{"_index":3008,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`streaming=${this.api.options.accept?.streaming",{"_index":3014,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accessors",{"_index":649,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByField.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["action.ts",{"_index":662,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["action.ts:1",{"_index":771,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:12",{"_index":668,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:14",{"_index":671,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:15",{"_index":673,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:16",{"_index":670,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:17",{"_index":669,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:18",{"_index":672,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:22",{"_index":778,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:24",{"_index":782,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:25",{"_index":780,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:26",{"_index":779,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:27",{"_index":781,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:3",{"_index":775,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:31",{"_index":681,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:33",{"_index":684,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:34",{"_index":682,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:35",{"_index":683,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:39",{"_index":827,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:4",{"_index":777,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:41",{"_index":829,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:42",{"_index":834,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:43",{"_index":830,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:44",{"_index":828,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:45",{"_index":831,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:46",{"_index":832,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:47",{"_index":833,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:5",{"_index":773,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:51",{"_index":853,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:53",{"_index":859,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:54",{"_index":855,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:55",{"_index":854,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:56",{"_index":856,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:57",{"_index":857,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:58",{"_index":858,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:6",{"_index":772,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:7",{"_index":774,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:8",{"_index":776,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["actionimport",{"_index":1069,"title":{},"body":{"classes/Field.html":{}}}],["actionimports",{"_index":734,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["actions",{"_index":862,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["add",{"_index":537,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"miscellaneous/enumerations.html":{}}}],["add(ctx",{"_index":1618,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["add(left",{"_index":501,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["add(name",{"_index":2561,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["added",{"_index":3511,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["addfield",{"_index":2269,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["additionalitems",{"_index":2247,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["addressinfo",{"_index":3598,"title":{},"body":{"index.html":{}}}],["again",{"_index":3574,"title":{},"body":{"index.html":{}}}],["aggregate",{"_index":3712,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["airport",{"_index":3573,"title":{},"body":{"index.html":{}}}],["airports",{"_index":3565,"title":{},"body":{"index.html":{}}}],["airports.entity(\"cyyz\").fetch",{"_index":3576,"title":{},"body":{"index.html":{}}}],["airports.fetch",{"_index":3605,"title":{},"body":{"index.html":{}}}],["airports.fetch().subscribe",{"_index":3568,"title":{},"body":{"index.html":{}}}],["airports.query((q",{"_index":3585,"title":{},"body":{"index.html":{}}}],["airports.tojson",{"_index":3588,"title":{},"body":{"index.html":{}}}],["airportsservice",{"_index":3563,"title":{},"body":{"index.html":{}}}],["airportsservice.entities",{"_index":3567,"title":{},"body":{"index.html":{}}}],["alias",{"_index":268,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["alias(value",{"_index":2769,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["aliases",{"_index":329,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["all(field",{"_index":526,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["allows",{"_index":1609,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["along",{"_index":3546,"title":{},"body":{"index.html":{}}}],["and(exp",{"_index":3396,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["and(left",{"_index":490,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["and/or",{"_index":3654,"title":{},"body":{"license.html":{}}}],["angular",{"_index":3520,"title":{},"body":{"index.html":{},"properties.html":{}}}],["angular/animations",{"_index":3482,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2507,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1515,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/PassedInitialConfig.html":{}}}],["angular/compiler",{"_index":3484,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2512,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":3485,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":3486,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":3489,"title":{},"body":{"dependencies.html":{}}}],["angularodataentity",{"_index":3531,"title":{},"body":{"index.html":{}}}],["annot",{"_index":1237,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annot.bool",{"_index":1257,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.int",{"_index":1258,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.permissions",{"_index":1259,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.properties",{"_index":1260,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.string",{"_index":1256,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.term",{"_index":1244,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annotatable",{"_index":1234,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue",{"_index":1223,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue(term",{"_index":1229,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation",{"_index":788,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation.ts",{"_index":686,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{}}}],["annotation.ts:1",{"_index":690,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:15",{"_index":700,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:16",{"_index":701,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:19",{"_index":899,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:2",{"_index":691,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:21",{"_index":904,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:22",{"_index":909,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:23",{"_index":901,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:24",{"_index":902,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:25",{"_index":900,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:26",{"_index":905,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:27",{"_index":903,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:28",{"_index":906,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:29",{"_index":907,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:30",{"_index":908,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:5",{"_index":703,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:7",{"_index":705,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:9",{"_index":704,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotationconfig",{"_index":262,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["annotationlist",{"_index":687,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["annotations",{"_index":269,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["annotations=${this.api.options.prefer?.includeannotations",{"_index":3029,"title":{},"body":{"classes/ODataRequest.html":{}}}],["annotationslist",{"_index":863,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["annots",{"_index":3178,"title":{},"body":{"classes/ODataResponse.html":{},"index.html":{}}}],["annots.data(payload",{"_index":3180,"title":{},"body":{"classes/ODataResponse.html":{}}}],["any(field",{"_index":524,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)['_name",{"_index":345,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)[f.name",{"_index":2292,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["any[]).map((v",{"_index":2211,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["api",{"_index":1450,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{},"properties.html":{}}}],["api.options",{"_index":3054,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apiconfig",{"_index":252,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apinameorentitytype",{"_index":1453,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["apioptions",{"_index":1,"title":{"interfaces/ApiOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["apioptions.helper.countparam",{"_index":3057,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apioptions.helper.etag(options.body",{"_index":3060,"title":{},"body":{"classes/ODataRequest.html":{}}}],["app",{"_index":3554,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":3559,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":3557,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":3560,"title":{},"body":{"index.html":{}}}],["application",{"_index":3540,"title":{},"body":{"index.html":{}}}],["application/json;${accept.join",{"_index":3019,"title":{},"body":{"classes/ODataRequest.html":{}}}],["application_http",{"_index":1520,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["application_json",{"_index":1521,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["applied",{"_index":2826,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["appliesto",{"_index":698,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["apply",{"_index":2825,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["apply(query",{"_index":2827,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["applymixins(derivedctor",{"_index":353,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatafunctions",{"_index":532,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odataoperators",{"_index":529,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatasyntax",{"_index":535,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["appmodule",{"_index":3544,"title":{},"body":{"index.html":{}}}],["arbitrary",{"_index":183,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["arising",{"_index":3691,"title":{},"body":{"license.html":{}}}],["arithmeticfunctions",{"_index":308,"title":{"classes/ArithmeticFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arithmeticoperators",{"_index":500,"title":{"classes/ArithmeticOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arr",{"_index":2747,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.find((v",{"_index":2750,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.push(obj",{"_index":2751,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["array",{"_index":1757,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["array.isarray(config.keys",{"_index":2261,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["array.isarray(right",{"_index":472,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["array.isarray(this.configs",{"_index":1981,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(this.passedconfigs",{"_index":1978,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(value",{"_index":1931,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["arraybuffer",{"_index":2933,"title":{},"body":{"classes/ODataRequest.html":{}}}],["arrays",{"_index":1535,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["arrays.zip(this._requests",{"_index":1639,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["asc",{"_index":3369,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["ascending",{"_index":3356,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["ascending(field",{"_index":3360,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["asp",{"_index":1413,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["assertarray",{"_index":2679,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject",{"_index":2680,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject(create",{"_index":2688,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign",{"_index":2681,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign(values",{"_index":2690,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["associated",{"_index":3645,"title":{},"body":{"license.html":{}}}],["at(index",{"_index":2694,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["atomicitygroup",{"_index":1564,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["attach",{"_index":2053,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/enumerations.html":{}}}],["attach(model",{"_index":2085,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach(value",{"_index":2055,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>(model",{"_index":2121,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach>(value",{"_index":2068,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>>(model",{"_index":2122,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["attr",{"_index":1165,"title":{},"body":{"classes/Field.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["attr?.nodevalue",{"_index":1167,"title":{},"body":{"classes/Field.html":{}}}],["attribute",{"_index":1027,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["attribute_abstract",{"_index":1109,"title":{},"body":{"classes/Field.html":{}}}],["attribute_action",{"_index":1106,"title":{},"body":{"classes/Field.html":{}}}],["attribute_alias",{"_index":1076,"title":{},"body":{"classes/Field.html":{}}}],["attribute_applies_to",{"_index":1114,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_term",{"_index":1113,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_type",{"_index":1084,"title":{},"body":{"classes/Field.html":{}}}],["attribute_contains_target",{"_index":1098,"title":{},"body":{"classes/Field.html":{}}}],["attribute_default_value",{"_index":1093,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set",{"_index":1107,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set_path",{"_index":1100,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_type",{"_index":1102,"title":{},"body":{"classes/Field.html":{}}}],["attribute_extends",{"_index":1112,"title":{},"body":{"classes/Field.html":{}}}],["attribute_function",{"_index":1105,"title":{},"body":{"classes/Field.html":{}}}],["attribute_has_stream",{"_index":1097,"title":{},"body":{"classes/Field.html":{}}}],["attribute_include_in_service_document",{"_index":1108,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_bound",{"_index":1099,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_composable",{"_index":1101,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_flags",{"_index":1111,"title":{},"body":{"classes/Field.html":{}}}],["attribute_max_length",{"_index":1088,"title":{},"body":{"classes/Field.html":{}}}],["attribute_name",{"_index":1082,"title":{},"body":{"classes/Field.html":{}}}],["attribute_namespace",{"_index":1077,"title":{},"body":{"classes/Field.html":{}}}],["attribute_nullable",{"_index":1087,"title":{},"body":{"classes/Field.html":{}}}],["attribute_open_type",{"_index":1085,"title":{},"body":{"classes/Field.html":{}}}],["attribute_partner",{"_index":1094,"title":{},"body":{"classes/Field.html":{}}}],["attribute_path",{"_index":1103,"title":{},"body":{"classes/Field.html":{}}}],["attribute_precision",{"_index":1089,"title":{},"body":{"classes/Field.html":{}}}],["attribute_property",{"_index":1095,"title":{},"body":{"classes/Field.html":{}}}],["attribute_qualifier",{"_index":1079,"title":{},"body":{"classes/Field.html":{}}}],["attribute_referenced_property",{"_index":1096,"title":{},"body":{"classes/Field.html":{}}}],["attribute_scale",{"_index":1090,"title":{},"body":{"classes/Field.html":{}}}],["attribute_srid",{"_index":1092,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target",{"_index":1104,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target_namespace",{"_index":1080,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term",{"_index":1081,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term_namespace",{"_index":1078,"title":{},"body":{"classes/Field.html":{}}}],["attribute_type",{"_index":1086,"title":{},"body":{"classes/Field.html":{}}}],["attribute_underlying_type",{"_index":1110,"title":{},"body":{"classes/Field.html":{}}}],["attribute_unicode",{"_index":1091,"title":{},"body":{"classes/Field.html":{}}}],["attribute_uri",{"_index":1075,"title":{},"body":{"classes/Field.html":{}}}],["attribute_value",{"_index":1083,"title":{},"body":{"classes/Field.html":{}}}],["attribute_version",{"_index":1074,"title":{},"body":{"classes/Field.html":{}}}],["attributes",{"_index":1073,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attributes(data",{"_index":1278,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["attributes.getnameditem('version",{"_index":1166,"title":{},"body":{"classes/Field.html":{}}}],["attrs",{"_index":2093,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attrs[field.name",{"_index":2360,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["attrs[key",{"_index":2318,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["author",{"_index":3710,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":3681,"title":{},"body":{"license.html":{}}}],["available",{"_index":2527,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["average",{"_index":3517,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["backward",{"_index":2628,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["base",{"_index":157,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["base64",{"_index":2234,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["baseterm",{"_index":696,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["basetype",{"_index":711,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["basic",{"_index":3611,"title":{},"body":{"index.html":{}}}],["batch",{"_index":53,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["batch(\"trippin",{"_index":3604,"title":{},"body":{"index.html":{}}}],["batch._requests",{"_index":1595,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch_prefix",{"_index":1522,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batchboundary",{"_index":1653,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["binary",{"_index":96,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["binary(value",{"_index":2771,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["binary32",{"_index":147,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["binary64",{"_index":138,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["binding",{"_index":756,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["binding.ts",{"_index":820,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:1",{"_index":822,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:2",{"_index":823,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["bindingstructuredtype",{"_index":3292,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingstructuredtype.issubtypeof(callablebindingstructuredtype",{"_index":3300,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingtype",{"_index":3258,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bit",{"_index":81,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["blob",{"_index":2934,"title":{},"body":{"classes/ODataRequest.html":{}}}],["body",{"_index":228,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bodyqueryoptions",{"_index":12,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bool",{"_index":264,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boolean",{"_index":31,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["boolean((f.value",{"_index":2406,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["boolean(field.collection",{"_index":2185,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["boolean(field.navigation",{"_index":2187,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["bound",{"_index":299,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boundary",{"_index":1657,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix",{"_index":1523,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${batchboundary}${boundary_prefix_suffix",{"_index":1669,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${changesetboundary}${boundary_prefix_suffix",{"_index":1661,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["break",{"_index":2283,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["browse",{"_index":3695,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3487,"title":{},"body":{"dependencies.html":{}}}],["bugs",{"_index":3705,"title":{},"body":{"properties.html":{}}}],["build",{"_index":1723,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["buildentry",{"_index":1708,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry(payload",{"_index":1721,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["builder",{"_index":325,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["builders",{"_index":3618,"title":{},"body":{"index.html":{}}}],["buildjsonbody(requests",{"_index":1670,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildkey",{"_index":1709,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildkey(names",{"_index":1726,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildlegacybody",{"_index":1652,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildpathandquery",{"_index":2583,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["byte",{"_index":79,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["c",{"_index":2088,"title":{},"body":{"classes/ODataEntitySetService.html":{},"license.html":{}}}],["c.binding()?.type",{"_index":3297,"title":{},"body":{"classes/ODataSchema.html":{}}}],["c.clone",{"_index":593,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["c.istypeof(type",{"_index":2206,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["c.tojson",{"_index":1018,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["cache",{"_index":41,"title":{"interfaces/Cache.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cache_control",{"_index":3119,"title":{},"body":{"classes/ODataResponse.html":{}}}],["cache_key_separator",{"_index":1765,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cacheability",{"_index":219,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["cachecacheability",{"_index":47,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["cachecontrol",{"_index":3160,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["cachecontrol.split(',').foreach((directive",{"_index":3234,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["cached",{"_index":1811,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cachekey",{"_index":2924,"title":{},"body":{"classes/ODataRequest.html":{}}}],["california",{"_index":3587,"title":{},"body":{"index.html":{}}}],["callable",{"_index":1843,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["callable.configure",{"_index":3307,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callable_binding_parameter",{"_index":1921,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["callablebindingstructuredtype",{"_index":3298,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callablebindingtype",{"_index":3296,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callableconfig",{"_index":275,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["callables",{"_index":274,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["callaction",{"_index":1447,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callaction(params",{"_index":1456,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction",{"_index":1448,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction(params",{"_index":1467,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["can't",{"_index":2152,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["case",{"_index":599,"title":{},"body":{"classes/ConditionalFunctions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["case(condition",{"_index":463,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["cast",{"_index":3476,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["cast(value",{"_index":451,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["catch",{"_index":1156,"title":{},"body":{"classes/Field.html":{}}}],["catcherror",{"_index":2116,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["catcherror((error",{"_index":2140,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["caught",{"_index":258,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ceiling",{"_index":312,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["ceiling(value",{"_index":314,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["ch",{"_index":2280,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ch.findchildparser(predicate",{"_index":2282,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["change",{"_index":3508,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["changeset",{"_index":1656,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changeset_prefix",{"_index":1524,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetboundary",{"_index":1654,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetendline",{"_index":1685,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetid",{"_index":1655,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetresponses",{"_index":1683,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["channel",{"_index":1577,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["characters",{"_index":93,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["charge",{"_index":3640,"title":{},"body":{"license.html":{}}}],["check",{"_index":1161,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"index.html":{}}}],["checkversion(document",{"_index":1160,"title":{},"body":{"classes/Field.html":{}}}],["childparser",{"_index":2284,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["childparser((c",{"_index":2205,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["children",{"_index":563,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["children.push(exp",{"_index":3419,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children.push(new",{"_index":3417,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children[index",{"_index":591,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["chunk",{"_index":1691,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunk.slice(1",{"_index":1692,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunks",{"_index":1674,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["city",{"_index":3580,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3684,"title":{},"body":{"license.html":{}}}],["class",{"_index":307,"title":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["classes",{"_index":309,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["clean",{"_index":2477,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["clear",{"_index":2682,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["clearkey",{"_index":2661,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["clearpaging",{"_index":2821,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["clearparameters",{"_index":2666,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["client",{"_index":1455,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"properties.html":{}}}],["clock",{"_index":114,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["clone",{"_index":334,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["close",{"_index":1658,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["code",{"_index":1688,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["collection",{"_index":173,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["collectionfunctions",{"_index":401,"title":{"classes/CollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["commonmodule",{"_index":2506,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["complete.html#_toc406398229",{"_index":1405,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398230",{"_index":1406,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398236",{"_index":1409,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398237",{"_index":1410,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398238",{"_index":1407,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398240",{"_index":1408,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complextype",{"_index":1049,"title":{},"body":{"classes/Field.html":{}}}],["complextypes",{"_index":864,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["compodoc",{"_index":3621,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":3490,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":3551,"title":{},"body":{"index.html":{}}}],["composable",{"_index":300,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["composite",{"_index":2146,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["compute",{"_index":66,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["compute(opts",{"_index":572,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["computed",{"_index":2160,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["computeexpression",{"_index":557,"title":{"classes/ComputeExpression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["computeexpression.compute",{"_index":2787,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["computeexpressionbuilder",{"_index":583,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["computeexpressionbuilder,current",{"_index":573,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["concat",{"_index":3456,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["concat(field",{"_index":384,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["concatmap",{"_index":1516,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["condition",{"_index":465,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditionalfunctions",{"_index":462,"title":{"classes/ConditionalFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditions",{"_index":3661,"title":{},"body":{"license.html":{}}}],["config",{"_index":1227,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["config.accept",{"_index":1433,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.alias",{"_index":3272,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.annotations",{"_index":1247,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["config.base",{"_index":2258,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.bodyqueryoptions",{"_index":1431,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.bound",{"_index":1888,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.composable",{"_index":1890,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.configure",{"_index":3305,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.containers",{"_index":3283,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.deleterefby",{"_index":1439,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.entities",{"_index":3277,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entitysetpath",{"_index":1886,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.entitysets",{"_index":2049,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["config.entitytype",{"_index":2072,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.enums",{"_index":3274,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.etag",{"_index":1435,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fetchpolicy",{"_index":1429,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fields",{"_index":2266,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.flags",{"_index":2402,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.headers",{"_index":1423,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.jsonbatchformat",{"_index":1443,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.keys.map((key",{"_index":2263,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.members",{"_index":2390,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.name",{"_index":1947,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["config.namespace",{"_index":3271,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.nonparenthesisforemptyparameterfunction",{"_index":1441,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.open",{"_index":2260,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.params",{"_index":1421,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.prefer",{"_index":1437,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.return",{"_index":1950,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["config.service",{"_index":2074,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.stringasenum",{"_index":1419,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.stripmetadata",{"_index":1427,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.version",{"_index":1417,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.withcredentials",{"_index":1425,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["configs",{"_index":251,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["configure",{"_index":1828,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["configure(undefined",{"_index":1844,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSchema.html":{}}}],["connection",{"_index":3693,"title":{},"body":{"license.html":{}}}],["connector",{"_index":3390,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["console.log",{"_index":3584,"title":{},"body":{"index.html":{}}}],["console.log(\"airport",{"_index":3577,"title":{},"body":{"index.html":{}}}],["console.log(\"airports",{"_index":3569,"title":{},"body":{"index.html":{}}}],["console.log(\"all",{"_index":3572,"title":{},"body":{"index.html":{}}}],["const",{"_index":242,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["constants",{"_index":1026,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["constructor",{"_index":369,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(action",{"_index":824,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["constructor(annot",{"_index":1242,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["constructor(annotationlist",{"_index":688,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["constructor(client",{"_index":1451,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["constructor(config",{"_index":1225,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["constructor(configs",{"_index":1971,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["constructor(field",{"_index":650,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/OrderByField.html":{}}}],["constructor(group",{"_index":1192,"title":{},"body":{"classes/Grouping.html":{}}}],["constructor(helper",{"_index":1272,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["constructor(init",{"_index":2925,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["constructor(name",{"_index":665,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{}}}],["constructor(namespace",{"_index":785,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlSchema.html":{}}}],["constructor(o",{"_index":2685,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["constructor(op",{"_index":1198,"title":{},"body":{"classes/Lambda.html":{},"classes/Operator.html":{}}}],["constructor(passedconfigs",{"_index":1989,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["constructor(path",{"_index":821,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["constructor(private",{"_index":1976,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["constructor(property",{"_index":849,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["constructor(propertyrefs",{"_index":800,"title":{},"body":{"classes/CsdlKey.html":{}}}],["constructor(protected",{"_index":513,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(public",{"_index":337,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(request",{"_index":1499,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["constructor(segment",{"_index":3438,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["constructor(segments",{"_index":2558,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{}}}],["constructor(target",{"_index":702,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["constructor(term",{"_index":699,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["constructor(termnamespace",{"_index":795,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["constructor(type",{"_index":852,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["constructor(undefined",{"_index":564,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/ODataCache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["constructor(uri",{"_index":844,"title":{},"body":{"classes/CsdlReference.html":{}}}],["constructor(value",{"_index":3432,"title":{},"body":{"classes/SearchTerm.html":{}}}],["constructor(values",{"_index":2851,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["constructor(xml",{"_index":1116,"title":{},"body":{"classes/Field.html":{}}}],["constructors",{"_index":354,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructors.foreach((basector",{"_index":355,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["container",{"_index":884,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataSchema.html":{}}}],["container.entitysets",{"_index":3288,"title":{},"body":{"classes/ODataSchema.html":{}}}],["container.ts",{"_index":733,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:10",{"_index":746,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:11",{"_index":744,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:12",{"_index":741,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:5",{"_index":740,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:7",{"_index":745,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:8",{"_index":743,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:9",{"_index":742,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["containers",{"_index":276,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contains",{"_index":3457,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["contains(field",{"_index":386,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["containstarget",{"_index":805,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["content",{"_index":644,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["content_id",{"_index":1525,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_transfer_encoding",{"_index":1526,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_type",{"_index":1527,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["contentid",{"_index":1684,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["contents",{"_index":3533,"title":{},"body":{"index.html":{}}}],["contenttype",{"_index":1675,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["contenttype.indexof(application_json",{"_index":3143,"title":{},"body":{"classes/ODataResponse.html":{}}}],["context",{"_index":1274,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["context.entityset",{"_index":1780,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.entityset}(${context.key",{"_index":1783,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.key",{"_index":1782,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.type",{"_index":1784,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["continue",{"_index":3033,"title":{},"body":{"classes/ODataRequest.html":{}}}],["continueonerror",{"_index":211,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contract",{"_index":3688,"title":{},"body":{"license.html":{}}}],["conventions.html#sec_parameteraliases",{"_index":2768,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptioncompute",{"_index":2785,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptionformat",{"_index":2790,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["converts",{"_index":2717,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["coordinate",{"_index":163,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["copies",{"_index":3656,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3643,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3631,"title":{},"body":{"license.html":{}}}],["core",{"_index":1415,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["count",{"_index":61,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["count(opts",{"_index":607,"title":{},"body":{"classes/CountExpression.html":{}}}],["countdistinct",{"_index":3518,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["countexpression",{"_index":601,"title":{"classes/CountExpression.html":{}},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countexpressionbuilder",{"_index":642,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["countexpressionbuilder,current",{"_index":608,"title":{},"body":{"classes/CountExpression.html":{}}}],["countfield",{"_index":615,"title":{"classes/CountField.html":{}},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(field",{"_index":647,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(this.field.clone",{"_index":637,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countryregion",{"_index":3581,"title":{},"body":{"index.html":{}}}],["count}(${object.keys(params",{"_index":628,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["create",{"_index":1869,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{}}}],["create(attrs",{"_index":2091,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["create/update/patch",{"_index":2149,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["createsyncloader",{"_index":2538,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["createsyncloader(passedconfig",{"_index":2523,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["creating",{"_index":1874,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["creation",{"_index":255,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["credentials",{"_index":1384,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["csdl",{"_index":723,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdl/csdl",{"_index":1023,"title":{},"body":{"classes/Field.html":{}}}],["csdlaction",{"_index":660,"title":{"classes/CsdlAction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlactionimport",{"_index":679,"title":{"classes/CsdlActionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlannotable",{"_index":685,"title":{"classes/CsdlAnnotable.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotable:2",{"_index":706,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotation",{"_index":689,"title":{"classes/CsdlAnnotation.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["csdlannotations",{"_index":692,"title":{"classes/CsdlAnnotations.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdlcomplextype",{"_index":707,"title":{"classes/CsdlComplexType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlentitycontainer",{"_index":731,"title":{"classes/CsdlEntityContainer.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlentityset",{"_index":738,"title":{"classes/CsdlEntitySet.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["csdlentitytype",{"_index":726,"title":{"classes/CsdlEntityType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlenummember",{"_index":760,"title":{"classes/CsdlEnumMember.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["csdlenumtype",{"_index":763,"title":{"classes/CsdlEnumType.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunction",{"_index":674,"title":{"classes/CsdlFunction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunctionimport",{"_index":676,"title":{"classes/CsdlFunctionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlinclude",{"_index":783,"title":{"classes/CsdlInclude.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlincludeannotations",{"_index":792,"title":{"classes/CsdlIncludeAnnotations.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlkey",{"_index":727,"title":{"classes/CsdlKey.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationproperty",{"_index":715,"title":{"classes/CsdlNavigationProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationpropertybinding",{"_index":750,"title":{"classes/CsdlNavigationPropertyBinding.html":{}},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlondelete",{"_index":810,"title":{"classes/CsdlOnDelete.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlparameter",{"_index":667,"title":{"classes/CsdlParameter.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlproperty",{"_index":714,"title":{"classes/CsdlProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlpropertyref",{"_index":730,"title":{"classes/CsdlPropertyRef.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlreference",{"_index":789,"title":{"classes/CsdlReference.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlreferentialconstraint",{"_index":809,"title":{"classes/CsdlReferentialConstraint.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlreturntype",{"_index":666,"title":{"classes/CsdlReturnType.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlschema",{"_index":860,"title":{"classes/CsdlSchema.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlsingleton",{"_index":739,"title":{"classes/CsdlSingleton.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlstructuralproperty",{"_index":804,"title":{"classes/CsdlStructuralProperty.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["csdlstructuralproperty:3",{"_index":816,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:4",{"_index":818,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:5",{"_index":817,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuredtype",{"_index":710,"title":{"classes/CsdlStructuredType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["csdlstructuredtype:10",{"_index":720,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:11",{"_index":718,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:12",{"_index":721,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:13",{"_index":717,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:8",{"_index":719,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:9",{"_index":722,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlterm",{"_index":695,"title":{"classes/CsdlTerm.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdltypedefinition",{"_index":870,"title":{"classes/CsdlTypeDefinition.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["ctx",{"_index":1615,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ctx(this",{"_index":1622,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["current",{"_index":574,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["custom",{"_index":2170,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["customheaders",{"_index":2999,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[accept",{"_index":3018,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_match_header",{"_index":3003,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_none_match_header",{"_index":3006,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[prefer",{"_index":3038,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customizations",{"_index":3617,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1355,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["customparams",{"_index":3043,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$expand",{"_index":3046,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$select",{"_index":3044,"title":{},"body":{"classes/ODataRequest.html":{}}}],["damages",{"_index":3685,"title":{},"body":{"license.html":{}}}],["data",{"_index":152,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["data(data",{"_index":1282,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["dataservices",{"_index":1137,"title":{},"body":{"classes/Field.html":{}}}],["date",{"_index":108,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/DateAndTimeFunctions.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["date(value",{"_index":419,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["date.now",{"_index":1786,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["dateandtimefunctions",{"_index":418,"title":{"classes/DateAndTimeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["datetimeoffset",{"_index":121,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["day",{"_index":920,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["day(value",{"_index":421,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["days",{"_index":124,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deal",{"_index":3647,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3694,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":134,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["deep",{"_index":3616,"title":{},"body":{"index.html":{}}}],["def",{"_index":2702,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["default",{"_index":239,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["default_fetch_policy",{"_index":1389,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_strip_metadata",{"_index":1390,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_timeout",{"_index":1766,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["default_version",{"_index":1391,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["default_version].odata_etag",{"_index":2317,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["default_version].type(value",{"_index":2204,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaults",{"_index":2335,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaultvalue",{"_index":697,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["defined",{"_index":315,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["definition",{"_index":883,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"index.html":{}}}],["definition.ts",{"_index":910,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:10",{"_index":919,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:11",{"_index":917,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:3",{"_index":912,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:5",{"_index":914,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:6",{"_index":918,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:7",{"_index":913,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:8",{"_index":915,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:9",{"_index":916,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["delete",{"_index":1361,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["delete'].indexof(this._method",{"_index":3002,"title":{},"body":{"classes/ODataRequest.html":{}}}],["deleterefby",{"_index":13,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deleting",{"_index":3524,"title":{},"body":{"index.html":{}}}],["delivered",{"_index":1576,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deltalink",{"_index":1343,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["demo",{"_index":3528,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3481,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependson",{"_index":1565,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deps",{"_index":2539,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["derivedctor.prototype",{"_index":358,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["desc",{"_index":3370,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["descending",{"_index":3357,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["descending(field",{"_index":3363,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["description",{"_index":1235,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"properties.html":{}}}],["deseialize",{"_index":1848,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialization",{"_index":1849,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialize",{"_index":225,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deserialize(value",{"_index":1846,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["deserialized",{"_index":1850,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["destroy",{"_index":2077,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/enumerations.html":{}}}],["destroy(key",{"_index":2094,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["diego",{"_index":3633,"title":{},"body":{"license.html":{},"properties.html":{}}}],["digits",{"_index":144,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["directive",{"_index":3241,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["directive.startswith(max_age",{"_index":3235,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["disable",{"_index":2519,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["distribute",{"_index":3652,"title":{},"body":{"license.html":{}}}],["div",{"_index":538,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["div(left",{"_index":507,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["document",{"_index":1119,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement",{"_index":1130,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.attributes",{"_index":1127,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.getelementsbytagname",{"_index":1139,"title":{},"body":{"classes/Field.html":{}}}],["documentation",{"_index":3536,"title":{},"body":{"index.html":{},"license.html":{}}}],["domparser",{"_index":1118,"title":{},"body":{"classes/Field.html":{}}}],["double",{"_index":145,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["down",{"_index":2737,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["duration",{"_index":123,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["duration(value",{"_index":2770,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["dynamic",{"_index":3488,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":281,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["e().eq(\"emails",{"_index":3600,"title":{},"body":{"index.html":{}}}],["e.istypeof(type",{"_index":3290,"title":{},"body":{"classes/ODataSchema.html":{}}}],["earth",{"_index":162,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["editlink",{"_index":1317,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["edm.binary",{"_index":151,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.boolean",{"_index":95,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.byte",{"_index":99,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.date",{"_index":107,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.datetimeoffset",{"_index":118,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.decimal",{"_index":128,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.double",{"_index":135,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.duration",{"_index":122,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geography",{"_index":155,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographycollection",{"_index":182,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographylinestring",{"_index":166,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultilinestring",{"_index":176,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultipoint",{"_index":172,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultipolygon",{"_index":179,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographypoint",{"_index":160,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographypolygon",{"_index":169,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometry",{"_index":185,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrycollection",{"_index":200,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrylinestring",{"_index":190,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultilinestring",{"_index":196,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultipoint",{"_index":194,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultipolygon",{"_index":198,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrypoint",{"_index":187,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrypolygon",{"_index":192,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.guid",{"_index":77,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int16",{"_index":85,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int32",{"_index":103,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int64",{"_index":105,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.sbyte",{"_index":101,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.single",{"_index":146,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.stream",{"_index":153,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.string",{"_index":89,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.timeofday",{"_index":113,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edmtype",{"_index":76,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edmtype.binary",{"_index":2223,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.boolean].indexof(this.type",{"_index":2244,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.byte",{"_index":2239,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.date",{"_index":2219,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.datetimeoffset",{"_index":2221,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.decimal",{"_index":2242,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.double].indexof(this.type",{"_index":2243,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.guid",{"_index":2222,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int16",{"_index":2238,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int32",{"_index":2237,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int64",{"_index":2236,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.sbyte",{"_index":2240,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.string",{"_index":2218,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.timeofday",{"_index":2220,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmx:dataservices",{"_index":1034,"title":{},"body":{"classes/Field.html":{}}}],["edmx:edmx",{"_index":1032,"title":{},"body":{"classes/Field.html":{}}}],["edmx:include",{"_index":1038,"title":{},"body":{"classes/Field.html":{}}}],["edmx:includeannotations",{"_index":1040,"title":{},"body":{"classes/Field.html":{}}}],["edmx:reference",{"_index":1036,"title":{},"body":{"classes/Field.html":{}}}],["element",{"_index":1138,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["empty",{"_index":1374,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["encode",{"_index":232,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encode(params",{"_index":1916,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["encode(value",{"_index":236,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encoded",{"_index":1853,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["encoding",{"_index":1852,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["endline",{"_index":1678,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["endregion",{"_index":304,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["endswith",{"_index":3458,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["endswith(field",{"_index":388,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["entities",{"_index":272,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["entities'].indexof(this._responsetype",{"_index":3068,"title":{},"body":{"classes/ODataRequest.html":{}}}],["entity",{"_index":732,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["entity(\"cyyz",{"_index":3575,"title":{},"body":{"index.html":{}}}],["entity(key",{"_index":2058,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{}}}],["entitycontainer",{"_index":865,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["entitycontainerconfig",{"_index":277,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityContainer.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entityid",{"_index":3176,"title":{},"body":{"classes/ODataResponse.html":{}}}],["entitykey",{"_index":2059,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["entityset",{"_index":55,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["entityset(entitysetname",{"_index":3327,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetconfig",{"_index":279,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entitysetname",{"_index":3329,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetpath",{"_index":298,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysets",{"_index":278,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysetschema",{"_index":2084,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["entitytype",{"_index":302,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytypes",{"_index":866,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["entries",{"_index":1706,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry",{"_index":1724,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry.lastread",{"_index":1805,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.payload",{"_index":1794,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.tags.indexof(t",{"_index":1803,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["enu",{"_index":2375,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["enu.configure",{"_index":3303,"title":{},"body":{"classes/ODataSchema.html":{}}}],["enum",{"_index":51,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enumerations",{"_index":3498,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":270,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enums.toname(this.members",{"_index":2420,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tonames(this.members",{"_index":2415,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalue(this.members",{"_index":2414,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalues(this.members",{"_index":2412,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enumtype",{"_index":1046,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["enumtypeconfig",{"_index":271,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypefieldconfig",{"_index":280,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypes",{"_index":867,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["eq",{"_index":1206,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["eq(left",{"_index":478,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["errata02",{"_index":1401,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["error",{"_index":257,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["error(\"batch",{"_index":1608,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error(\"save",{"_index":2151,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('batch",{"_index":1604,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('destroy",{"_index":2137,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('field",{"_index":1940,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["error('modify",{"_index":2135,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('no",{"_index":1814,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["error('odata",{"_index":1163,"title":{},"body":{"classes/Field.html":{}}}],["error('unable",{"_index":1158,"title":{},"body":{"classes/Field.html":{}}}],["error('update",{"_index":2133,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error(`${this.name",{"_index":2307,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["error(`no",{"_index":2641,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["error.status",{"_index":2141,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["errorhandler",{"_index":256,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["errors",{"_index":2193,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`maxlength",{"_index":2200,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`required",{"_index":2198,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors[field.name",{"_index":2363,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errs",{"_index":2361,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["escape",{"_index":330,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["eslint",{"_index":2518,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["eslint/explicit",{"_index":2522,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["etag",{"_index":14,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["etag_headers",{"_index":3121,"title":{},"body":{"classes/ODataResponse.html":{}}}],["event",{"_index":3680,"title":{},"body":{"license.html":{}}}],["events",{"_index":1607,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["every(predicate",{"_index":2698,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["examples",{"_index":3529,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1648,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["execute",{"_index":1617,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["existing",{"_index":2087,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["exists",{"_index":1735,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exp",{"_index":2856,"title":{},"body":{"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.children",{"_index":3428,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.connector",{"_index":3429,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.length",{"_index":3416,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["expand",{"_index":65,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expand(opts",{"_index":950,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["expandexpression",{"_index":945,"title":{"classes/ExpandExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["expandexpression.expand",{"_index":2782,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expandexpression.expand(opts",{"_index":973,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandexpressionbuilder",{"_index":972,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["expandexpressionbuilder,current",{"_index":951,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield",{"_index":953,"title":{"classes/ExpandField.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield(field",{"_index":987,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield(this.field.clone",{"_index":969,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandobject",{"_index":3718,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandoptions",{"_index":3719,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandtype",{"_index":3720,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expand}(${object.keys(params",{"_index":968,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expired",{"_index":1736,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exponentialdecimals",{"_index":203,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["exponentialdecimals=${this.api.options.accept?.exponentialdecimals",{"_index":3016,"title":{},"body":{"classes/ODataRequest.html":{}}}],["export",{"_index":37,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["express",{"_index":3671,"title":{},"body":{"license.html":{}}}],["expression",{"_index":559,"title":{"classes/Expression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["expression(key",{"_index":2855,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expression).render",{"_index":624,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["expression:116",{"_index":612,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:123",{"_index":3405,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:131",{"_index":606,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:138",{"_index":3398,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:146",{"_index":3410,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:177",{"_index":955,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:191",{"_index":949,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:30",{"_index":580,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:34",{"_index":581,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:38",{"_index":582,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:45",{"_index":579,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:48",{"_index":3452,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:5",{"_index":567,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:62",{"_index":571,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:70",{"_index":3366,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expression:85",{"_index":3362,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expressions",{"_index":2724,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"index.html":{}}}],["expressions/expand",{"_index":2870,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expressions/select",{"_index":2871,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["extend",{"_index":735,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["extends",{"_index":218,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["extra",{"_index":1367,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["f",{"_index":597,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["f.configure",{"_index":2298,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.default",{"_index":2337,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.deserialize(value[f.name",{"_index":2291,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.isstructuredtype",{"_index":2338,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.name",{"_index":2288,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["f.navigation",{"_index":2347,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.nullable",{"_index":2359,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.serialize((value",{"_index":2293,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.structured().defaults",{"_index":2340,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.tojsonschema(expand",{"_index":2353,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.value",{"_index":2410,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["f]{12",{"_index":2232,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f]{12}$/.test",{"_index":2596,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["f]{4",{"_index":2231,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["f]{8",{"_index":2230,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["fa",{"_index":2229,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["factory",{"_index":1175,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["factory(api",{"_index":1590,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["factory(name",{"_index":339,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["false",{"_index":372,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["features",{"_index":3144,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["features.split(';').foreach((o",{"_index":3221,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["fetch",{"_index":1364,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["fetchall",{"_index":2078,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["fetchall(options",{"_index":2100,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetching",{"_index":1747,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["fetchmany",{"_index":2079,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany(top",{"_index":2102,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchnavigationproperty",{"_index":1449,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchnavigationproperty(resource",{"_index":1475,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchone",{"_index":2080,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchone(options",{"_index":2104,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate",{"_index":2081,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate(key",{"_index":2106,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchpolicy",{"_index":15,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["field",{"_index":222,"title":{"classes/Field.html":{},"classes/Field-1.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["field(enu",{"_index":2373,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["field(field",{"_index":610,"title":{},"body":{"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/SelectExpression.html":{}}}],["field(name",{"_index":576,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["field(namevalue",{"_index":2407,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["field(odatametadata.attribute_alias",{"_index":1146,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_namespace",{"_index":1145,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_uri",{"_index":1132,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_version",{"_index":1125,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_action",{"_index":1151,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotation",{"_index":1136,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotations",{"_index":1155,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_complex_type",{"_index":1148,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_container",{"_index":1152,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_type",{"_index":1149,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_enum_type",{"_index":1147,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_function",{"_index":1150,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include",{"_index":1133,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include_annotations",{"_index":1135,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_term",{"_index":1154,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_type_definition",{"_index":1153,"title":{},"body":{"classes/Field.html":{}}}],["field.default",{"_index":2181,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.encode(v",{"_index":2331,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.factory",{"_index":587,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["field.factory(name",{"_index":347,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["field.isstructuredtype",{"_index":2328,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.maxlength",{"_index":2183,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.name",{"_index":2305,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.navigation",{"_index":2302,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.nullable",{"_index":2184,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.precision",{"_index":2189,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.referentials",{"_index":2178,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.scale",{"_index":2191,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.structured",{"_index":2329,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.type",{"_index":2176,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.validate(value",{"_index":2362,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.value",{"_index":2400,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fieldnames",{"_index":1171,"title":{},"body":{"classes/Field.html":{}}}],["fieldparser",{"_index":237,"title":{"interfaces/FieldParser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields",{"_index":284,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields(value",{"_index":2376,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fields.reduce",{"_index":2290,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields.reduce((acc",{"_index":2339,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fieldtype",{"_index":1020,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["fieldtype.attribute",{"_index":1126,"title":{},"body":{"classes/Field.html":{}}}],["fieldtype.tag",{"_index":1134,"title":{},"body":{"classes/Field.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["files",{"_index":3646,"title":{},"body":{"license.html":{}}}],["filter",{"_index":67,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["filter((f",{"_index":2336,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["filter((k",{"_index":2904,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((key",{"_index":619,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["filter((p",{"_index":1957,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["filter((r",{"_index":1822,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["filter((t",{"_index":2610,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["filter(opts",{"_index":653,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["filterconnector",{"_index":3721,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["filterexpression",{"_index":613,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["filterexpression.filter",{"_index":2798,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["filterexpression.filter(opts",{"_index":632,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["filterexpressionbuilder",{"_index":614,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["filterexpressionbuilder,current",{"_index":654,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{}}}],["filtertype",{"_index":3723,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["find",{"_index":1232,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["find((f",{"_index":2325,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((field",{"_index":2304,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((k",{"_index":2250,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((p",{"_index":3146,"title":{},"body":{"classes/ODataResponse.html":{}}}],["find(predicate",{"_index":2564,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["findannotation",{"_index":1224,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findannotation(predicate",{"_index":1236,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findcallablefortype",{"_index":3243,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findcallablefortype(type",{"_index":3257,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findchildparser",{"_index":2278,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["findentitysetfortype",{"_index":3244,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findentitysetfortype(type",{"_index":3260,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype",{"_index":3245,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype(type",{"_index":3262,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findoptionsfortype",{"_index":1898,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["findstructuredtypefortype",{"_index":3246,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype(type",{"_index":3264,"title":{},"body":{"classes/ODataSchema.html":{}}}],["first",{"_index":42,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["first(undefined",{"_index":2567,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["firstvaluefrom",{"_index":1517,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["fitness",{"_index":3676,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":131,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["flags",{"_index":282,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["flat",{"_index":188,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floating",{"_index":139,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floor",{"_index":313,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["floor(value",{"_index":318,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fluent",{"_index":3521,"title":{},"body":{"index.html":{}}}],["flush",{"_index":1710,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["following",{"_index":3660,"title":{},"body":{"license.html":{}}}],["foreach(([name",{"_index":2267,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["foreach((key",{"_index":2906,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["forget",{"_index":1711,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forget(undefined",{"_index":1730,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forkjoin",{"_index":1974,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"index.html":{}}}],["forkjoin(this.configs",{"_index":1982,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["format",{"_index":74,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["format(opts",{"_index":2791,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["format/v4.01/odata",{"_index":1396,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["forroot",{"_index":2500,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["forroot(passedconfig",{"_index":2501,"title":{},"body":{"modules/ODataModule.html":{}}}],["fot",{"_index":2707,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["found",{"_index":2306,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["fractionalseconds",{"_index":921,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["fractionalseconds(value",{"_index":423,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["free",{"_index":3639,"title":{},"body":{"license.html":{}}}],["friends",{"_index":3597,"title":{},"body":{"index.html":{}}}],["fromhttpresponse",{"_index":3091,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromhttpresponse(req",{"_index":3102,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson",{"_index":3092,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson(req",{"_index":3104,"title":{},"body":{"classes/ODataResponse.html":{}}}],["full",{"_index":45,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2590,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["function",{"_index":62,"title":{"classes/Function.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["function('case",{"_index":464,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('cast",{"_index":452,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('ceiling",{"_index":447,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('concat",{"_index":385,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('contains",{"_index":387,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('date",{"_index":420,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('day",{"_index":422,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('endswith",{"_index":389,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('floor",{"_index":448,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('fractionalseconds",{"_index":424,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.distance",{"_index":457,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.intersects",{"_index":459,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.length",{"_index":461,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubsequence",{"_index":407,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubset",{"_index":404,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hour",{"_index":426,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('indexof",{"_index":391,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('isof",{"_index":454,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('length",{"_index":393,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('matchespattern",{"_index":411,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('maxdatetime",{"_index":428,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('mindatetime",{"_index":430,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('minute",{"_index":432,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('month",{"_index":434,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('now",{"_index":436,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('round",{"_index":449,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('second",{"_index":438,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('startswith",{"_index":395,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('substring",{"_index":400,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('time",{"_index":440,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('tolower",{"_index":413,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totaloffsetminutes",{"_index":442,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totalseconds",{"_index":444,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('toupper",{"_index":415,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('trim",{"_index":417,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('year",{"_index":446,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function(name",{"_index":1337,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["functionimport",{"_index":1067,"title":{},"body":{"classes/Field.html":{}}}],["functionimports",{"_index":736,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["functionname",{"_index":677,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["functions",{"_index":533,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["furnished",{"_index":3659,"title":{},"body":{"license.html":{}}}],["g",{"_index":1547,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["g1",{"_index":1566,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["g2",{"_index":1567,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ge",{"_index":1207,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ge(left",{"_index":484,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["generate",{"_index":3545,"title":{},"body":{"index.html":{}}}],["generated",{"_index":3620,"title":{},"body":{"index.html":{}}}],["generator",{"_index":3527,"title":{},"body":{"index.html":{}}}],["geodistance",{"_index":1186,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geodistance(value",{"_index":456,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geofunctions",{"_index":455,"title":{"classes/GeoFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geography",{"_index":158,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographycollection",{"_index":184,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographylinestring",{"_index":168,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultilinestring",{"_index":178,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultipoint",{"_index":175,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultipolygon",{"_index":181,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographypoint",{"_index":165,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographypolygon",{"_index":171,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geointersects",{"_index":1187,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geointersects(value",{"_index":458,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geolength",{"_index":1188,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geolength(line",{"_index":460,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geometry",{"_index":186,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrycollection",{"_index":201,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrylinestring",{"_index":191,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultilinestring",{"_index":197,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultipoint",{"_index":195,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultipolygon",{"_index":199,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrypoint",{"_index":189,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrypolygon",{"_index":193,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["get'].indexof(this._method",{"_index":3005,"title":{},"body":{"classes/ODataRequest.html":{}}}],["get(key",{"_index":248,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["get(name",{"_index":1733,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{}}}],["get(path",{"_index":2701,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["get(target",{"_index":342,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["getannotations",{"_index":3115,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getapi",{"_index":1482,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataSchemaElement.html":{}}}],["getbody",{"_index":2956,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcachekey",{"_index":2968,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcontext",{"_index":3113,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getcount",{"_index":2002,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getdeltalink",{"_index":2006,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["geteditlink",{"_index":2034,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getentityset",{"_index":1288,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["getentitysets",{"_index":3268,"title":{},"body":{"classes/ODataSchema.html":{}}}],["getentitysetschema",{"_index":2114,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["getetag",{"_index":2027,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getfunctions",{"_index":2014,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getheaders",{"_index":2960,"title":{},"body":{"classes/ODataRequest.html":{}}}],["gethelper",{"_index":1387,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["getid",{"_index":2025,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediacontenttype",{"_index":2040,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaeditlink",{"_index":2038,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaetag",{"_index":2029,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediareadlink",{"_index":2036,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmetadataetag",{"_index":2031,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmethod",{"_index":2954,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getname",{"_index":2722,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["getnextlink",{"_index":2004,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getobjects",{"_index":1169,"title":{},"body":{"classes/Field.html":{}}}],["getoptions",{"_index":3109,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getparams",{"_index":2958,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getparseroptions",{"_index":1385,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["getpath",{"_index":2952,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpathwithparams",{"_index":2962,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpayload",{"_index":3111,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getproperties",{"_index":2042,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getreadlink",{"_index":2000,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getresponse",{"_index":1712,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["getresponse(req",{"_index":1737,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["getresponsetype",{"_index":2950,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getsingletonschema",{"_index":3345,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["getskip",{"_index":2010,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getskiptoken",{"_index":2012,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getstructuredtypeschema",{"_index":2064,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["getting",{"_index":2533,"title":{"index.html":{},"license.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["gettop",{"_index":2008,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["gettype",{"_index":1290,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["geturl",{"_index":2964,"title":{},"body":{"classes/ODataRequest.html":{}}}],["geturlwithparams",{"_index":2966,"title":{},"body":{"classes/ODataRequest.html":{}}}],["git+https://github.com/diegomvh/angular",{"_index":3708,"title":{},"body":{"properties.html":{}}}],["given",{"_index":1732,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["granted",{"_index":3638,"title":{},"body":{"license.html":{}}}],["group",{"_index":514,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupby",{"_index":3724,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grouping",{"_index":512,"title":{"classes/Grouping.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["grouping(exp",{"_index":3418,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(node",{"_index":3423,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(objects.clone(this.group",{"_index":517,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["gt",{"_index":1208,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["gt(left",{"_index":482,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["guid",{"_index":84,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegments.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["haaster",{"_index":3635,"title":{},"body":{"license.html":{},"properties.html":{}}}],["hack",{"_index":2595,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["handle",{"_index":1746,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{}}}],["handlefetch",{"_index":1713,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlefetch(req",{"_index":1739,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate",{"_index":1714,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate(req",{"_index":1741,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handler",{"_index":639,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["handlerequest",{"_index":1715,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlerequest(req",{"_index":1743,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlers",{"_index":2585,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["has(key",{"_index":2858,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["has(left",{"_index":496,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["has(path",{"_index":2704,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["has(target",{"_index":351,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hashmap",{"_index":2745,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["haskey",{"_index":2659,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasparameters",{"_index":2664,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasreferentials",{"_index":2252,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["hasstream",{"_index":728,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["hassubsequence",{"_index":553,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubsequence(s1",{"_index":406,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hassubset",{"_index":554,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubset(s1",{"_index":402,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["header",{"_index":1356,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["headerkey",{"_index":3149,"title":{},"body":{"classes/ODataResponse.html":{}}}],["headers",{"_index":16,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["headers.getall(key",{"_index":1560,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["helper",{"_index":1269,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["here",{"_index":3623,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":3637,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3682,"title":{},"body":{"license.html":{}}}],["holds",{"_index":1767,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["homepage",{"_index":3704,"title":{},"body":{"properties.html":{}}}],["hour",{"_index":922,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["hour(value",{"_index":425,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hours",{"_index":125,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["htmlcollection",{"_index":1172,"title":{},"body":{"classes/Field.html":{}}}],["http",{"_index":1383,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["http.boundarydelimiter(contenttype",{"_index":1677,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.boundaryend(batchboundary",{"_index":1679,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders",{"_index":3040,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpheaders((options",{"_index":1630,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders(this._headers",{"_index":3074,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams",{"_index":3049,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams(params",{"_index":3056,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.parseresponsestatus(chunk[0",{"_index":1690,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.resolveheaderkey",{"_index":3150,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.resolveheaderkey(this.headers",{"_index":3173,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.splithttpparams",{"_index":3071,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.withouthttpparams(params",{"_index":3053,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http11",{"_index":1528,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http://docs.oasis",{"_index":1394,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["http://json",{"_index":2342,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["httpclientmodule",{"_index":2508,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["httpcontext",{"_index":2938,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httperrorresponse",{"_index":1505,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{}}}],["httpheaders",{"_index":1513,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["httpheaders(json.headers",{"_index":3131,"title":{},"body":{"classes/ODataResponse.html":{}}}],["httpheaders(response['headers",{"_index":1701,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["httpparams",{"_index":2931,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httpresponse",{"_index":1514,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["httpresponsebase",{"_index":1508,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["https://devblogs.microsoft.com/odata/extension",{"_index":1411,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["https://diegomvh.github.io/angular",{"_index":3624,"title":{},"body":{"index.html":{}}}],["https://docs.oasis",{"_index":2764,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["https://github.com/diegomvh/angular",{"_index":3627,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://github.com/odata/aspnetcoreodata/issues/171",{"_index":215,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1647",{"_index":214,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1974",{"_index":213,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://json",{"_index":2214,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["https://services.odata.org/v4/(s(4m0tuxtnhcfctl4gzem3gr10))/trippinservicerw",{"_index":3543,"title":{},"body":{"index.html":{}}}],["https://www.odata.org/getting",{"_index":1579,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["id",{"_index":30,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["identifier",{"_index":83,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["identify",{"_index":1758,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["ieee",{"_index":136,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754",{"_index":3009,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ieee754compatible",{"_index":204,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754compatible=${this.api.options.accept?.ieee754compatible",{"_index":3012,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_match_header",{"_index":2970,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_none_match_header",{"_index":2971,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ifmatch",{"_index":206,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ifnonematch",{"_index":207,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["implements",{"_index":335,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["implied",{"_index":3672,"title":{},"body":{"license.html":{}}}],["import",{"_index":34,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["imports",{"_index":2525,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["in(left",{"_index":498,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["include",{"_index":2299,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_etag",{"_index":2311,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_navigation",{"_index":2287,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_parents",{"_index":2249,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["includeannotations",{"_index":212,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["included",{"_index":3665,"title":{},"body":{"license.html":{}}}],["includeinservicedocument",{"_index":678,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["includes",{"_index":791,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["including",{"_index":1880,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"license.html":{}}}],["incorporates",{"_index":3610,"title":{},"body":{"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexof",{"_index":3459,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["indexof(field",{"_index":390,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["indexof(s.name",{"_index":2633,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["indexof(this.type",{"_index":2224,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["indicating",{"_index":1750,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataSchemaElement.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["inherited",{"_index":566,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["init",{"_index":2927,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.api",{"_index":2978,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.body",{"_index":2987,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.bodyqueryoptions",{"_index":2994,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.context",{"_index":2983,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.etag",{"_index":3000,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.fetchpolicy",{"_index":2991,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.headers",{"_index":3042,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.method",{"_index":2975,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.observe",{"_index":2982,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.params",{"_index":3051,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.reportprogress",{"_index":2980,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.resource",{"_index":2977,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.responsetype",{"_index":2985,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.withcredentials",{"_index":2989,"title":{},"body":{"classes/ODataRequest.html":{}}}],["inject",{"_index":3550,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":3323,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"injectables/ODataServiceFactory.html":{}}}],["injectables",{"_index":3324,"title":{},"body":{"injectables/ODataServiceFactory.html":{},"overview.html":{}}}],["injection",{"_index":2529,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken",{"_index":2509,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken('odata.config",{"_index":2517,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["inside",{"_index":1233,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["install",{"_index":3537,"title":{},"body":{"index.html":{}}}],["installation",{"_index":3534,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1252,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["instead",{"_index":3319,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["int",{"_index":265,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["int16",{"_index":88,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["int32",{"_index":104,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["int64",{"_index":106,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["integer",{"_index":87,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"overview.html":{}}}],["invalid",{"_index":3510,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isbatch",{"_index":2918,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isbound",{"_index":663,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["iscallabletype",{"_index":3295,"title":{},"body":{"classes/ODataSchema.html":{}}}],["iscomposable",{"_index":675,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["isedmtype",{"_index":1936,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isenumtype",{"_index":1938,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isexpired",{"_index":1716,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isexpired(entry",{"_index":1748,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isfetch",{"_index":2919,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isflags",{"_index":765,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["iskey",{"_index":2248,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ismutate",{"_index":2920,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isnamespaceof",{"_index":3247,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isnamespaceof(type",{"_index":3266,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isof",{"_index":3477,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["isof(value",{"_index":453,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["isquerybody",{"_index":2921,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isstructuredtype",{"_index":1941,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["issubtypeof",{"_index":1829,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(schema",{"_index":1859,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(type",{"_index":2274,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["issupertypeof",{"_index":1830,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issupertypeof(schema",{"_index":1862,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof",{"_index":1831,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof(type",{"_index":1865,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["items",{"_index":2246,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["john",{"_index":3602,"title":{},"body":{"index.html":{}}}],["john@example.com\").or(e().eq(\"username",{"_index":3601,"title":{},"body":{"index.html":{}}}],["join",{"_index":474,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["json",{"_index":1371,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"index.html":{}}}],["json.body",{"_index":3130,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.key",{"_index":2623,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parameters",{"_index":2625,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parse(this.storage.getitem(this.name",{"_index":2490,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.status",{"_index":3132,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.statustext",{"_index":3133,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.stringify(array.from(this.entries.entries",{"_index":2489,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.type",{"_index":2622,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.url",{"_index":3134,"title":{},"body":{"classes/ODataResponse.html":{}}}],["jsonbatchformat",{"_index":17,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["jsonschemacustom",{"_index":2165,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaexpand",{"_index":2167,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaoptions",{"_index":2168,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemarequired",{"_index":2169,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaselect",{"_index":2164,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["k",{"_index":1799,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponseOptions.html":{}}}],["k.name",{"_index":2251,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["k.startswith(key",{"_index":1800,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["k.trim",{"_index":3223,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["keep",{"_index":2849,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(...keys",{"_index":2908,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(keys",{"_index":2860,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["key",{"_index":286,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["key(value",{"_index":2657,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key.set(kt.alias",{"_index":2330,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["key.size",{"_index":2332,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keyof",{"_index":297,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys",{"_index":295,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys(values",{"_index":2570,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["keys.indexof(k",{"_index":2905,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keytypes",{"_index":2321,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keywords",{"_index":3701,"title":{},"body":{"properties.html":{}}}],["key}=${params[key",{"_index":630,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["key}=${value",{"_index":2620,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["kind",{"_index":3670,"title":{},"body":{"license.html":{}}}],["kt",{"_index":2323,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["kt.name.split",{"_index":2324,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["lambda",{"_index":518,"title":{"classes/Lambda.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('all",{"_index":527,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('any",{"_index":525,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambdaoperators",{"_index":523,"title":{"classes/LambdaOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["last",{"_index":1768,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["last(undefined",{"_index":2572,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["lastread",{"_index":1770,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["le",{"_index":1209,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["le(left",{"_index":488,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["leap",{"_index":119,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["left",{"_index":469,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left.split('/').pop().tolowercase()[0",{"_index":520,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op",{"_index":522,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op}(${alias}:${render(right",{"_index":521,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length",{"_index":398,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length(value",{"_index":392,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["levels",{"_index":75,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["levels(n",{"_index":984,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["liability",{"_index":3686,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3683,"title":{},"body":{"license.html":{}}}],["library",{"_index":3530,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":3629,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":3649,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3673,"title":{},"body":{"license.html":{}}}],["line",{"_index":167,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"modules/ODataModule.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["lines",{"_index":1680,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["link",{"_index":1393,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["literal",{"_index":25,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":3589,"title":{},"body":{"index.html":{}}}],["loadconfigs",{"_index":1970,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["loader",{"_index":2515,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["loaders",{"_index":2513,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["location",{"_index":3157,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["location_header",{"_index":3120,"title":{},"body":{"classes/ODataResponse.html":{}}}],["logic",{"_index":98,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["logicaloperators",{"_index":477,"title":{"classes/LogicalOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["long_description",{"_index":2161,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["looking",{"_index":1871,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["lt",{"_index":1210,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["lt(left",{"_index":486,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["m",{"_index":2056,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["mainly",{"_index":3608,"title":{},"body":{"index.html":{}}}],["make",{"_index":2526,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["managed",{"_index":2693,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["map",{"_index":1248,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/ResponseJson.html":{}}}],["map(([key",{"_index":2619,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["map((f",{"_index":2352,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["map((key",{"_index":629,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{}}}],["map((n",{"_index":646,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["map((name",{"_index":590,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataResponse.html":{}}}],["map((response",{"_index":1637,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["map((s",{"_index":2608,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["map((v",{"_index":473,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["map((value",{"_index":1986,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["map([...this.annotations",{"_index":1300,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["map(object.entries(values",{"_index":2876,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["map(this.annotations",{"_index":1305,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mapfields",{"_index":2366,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapfields(mapper",{"_index":2379,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapped",{"_index":2383,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapper",{"_index":2381,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["maps",{"_index":2382,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["match",{"_index":1240,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["match(/[&?]{1}\\$skip=(\\d",{"_index":1348,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$top=(\\d",{"_index":1346,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match[1",{"_index":1350,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["matches",{"_index":1241,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["matchespattern",{"_index":3469,"title":{},"body":{"classes/StringFunctions.html":{}}}],["matchespattern(value",{"_index":409,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["matching",{"_index":306,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":985,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/enumerations.html":{}}}],["max_age",{"_index":3217,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["maxage",{"_index":220,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxdatetime",{"_index":923,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["maxdatetime(value",{"_index":427,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["maxlength",{"_index":240,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxpagesize",{"_index":208,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["meant",{"_index":1873,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["mediacontenttype",{"_index":1323,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaeditlink",{"_index":1321,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaetag",{"_index":1311,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediareadlink",{"_index":1319,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["member",{"_index":285,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members",{"_index":283,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members.some((member",{"_index":2428,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["merchantability",{"_index":3675,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2692,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"license.html":{}}}],["message",{"_index":1689,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["metadata",{"_index":54,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["metadataetag",{"_index":1313,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["method",{"_index":1297,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{}}}],["methods",{"_index":311,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["microsoft.odata.sampleservice.models.trippin.airport",{"_index":3566,"title":{},"body":{"index.html":{}}}],["microsoft.odata.sampleservice.models.trippin.person",{"_index":3594,"title":{},"body":{"index.html":{}}}],["min",{"_index":3516,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mindatetime",{"_index":924,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["mindatetime(value",{"_index":429,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["minimal",{"_index":44,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["minute",{"_index":925,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["minute(value",{"_index":431,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["minutes",{"_index":126,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["miscellaneous",{"_index":3497,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":2429,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mit",{"_index":3630,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mod",{"_index":539,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mod(left",{"_index":509,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["model",{"_index":293,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["model.attach(this.entities",{"_index":2124,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entities().entity",{"_index":2123,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entity",{"_index":3348,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["modelfieldoptions",{"_index":3726,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":3727,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["models/collection",{"_index":2118,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["models/model",{"_index":2067,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["modify",{"_index":2082,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"license.html":{}}}],["modify(key",{"_index":2108,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["modifying",{"_index":2775,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["module",{"_index":2494,"title":{"modules/ODataModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":2496,"title":{"modules.html":{}},"body":{"modules/ODataModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2505,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["month",{"_index":926,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["month(value",{"_index":433,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["mul",{"_index":540,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mul(left",{"_index":505,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["multipart_mixed",{"_index":1529,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary",{"_index":1530,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary}${changesetboundary",{"_index":1663,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["n",{"_index":981,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["n.render",{"_index":589,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["name",{"_index":254,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["named",{"_index":2308,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["namednodemap",{"_index":1162,"title":{},"body":{"classes/Field.html":{}}}],["names",{"_index":560,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.indexof(key",{"_index":2315,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["names.indexof(type",{"_index":1956,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.join",{"_index":2419,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.join(cache_key_separator",{"_index":1787,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["names.length",{"_index":2416,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.push(`${this.alias}.${this.name",{"_index":1955,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["names.push(`${this.schema.alias}.${this.name",{"_index":3321,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["namespace",{"_index":267,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["namespace/alias",{"_index":1881,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["namevalue",{"_index":2409,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["name}/${key",{"_index":350,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["navigation",{"_index":287,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["navigationproperties",{"_index":712,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["navigationproperty",{"_index":58,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["navigationpropertybinding",{"_index":749,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["navigationpropertybindings",{"_index":886,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["ne",{"_index":1211,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ne(left",{"_index":480,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["neg",{"_index":541,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["neg(value",{"_index":511,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["negated",{"_index":3391,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["nestedexpandoptions",{"_index":3728,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nestedorderby",{"_index":3729,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["net",{"_index":1414,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["network",{"_index":43,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":294,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["newline",{"_index":1531,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["newline_regexp",{"_index":1532,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["next",{"_index":2520,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["nextlink",{"_index":1341,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["ngmodule",{"_index":2510,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["nicer",{"_index":1870,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["node",{"_index":569,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["node.children",{"_index":3422,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.connector",{"_index":3420,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.length",{"_index":3421,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.negated",{"_index":3424,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["none",{"_index":46,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBaseService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["none_parser",{"_index":243,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["noninfringement",{"_index":3679,"title":{},"body":{"license.html":{}}}],["nonparenthesisforemptyparameterfunction",{"_index":18,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["normalize",{"_index":361,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["normalize(value",{"_index":2774,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["normalized",{"_index":2773,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["normalizevalue",{"_index":326,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["normalizevalue(value",{"_index":368,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["not(exp",{"_index":3401,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["not(value",{"_index":494,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["notexp",{"_index":3427,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["notice",{"_index":3663,"title":{},"body":{"license.html":{}}}],["now",{"_index":435,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["npm",{"_index":3538,"title":{},"body":{"index.html":{}}}],["null",{"_index":362,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["nullable",{"_index":238,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["number",{"_index":141,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["number(directive.split('=')[1",{"_index":3236,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["number(match[1",{"_index":1347,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["number.isnan(maxage",{"_index":3237,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["numeric",{"_index":129,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["o",{"_index":596,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["o.split",{"_index":3222,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["obj",{"_index":2749,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["object",{"_index":365,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.assign",{"_index":1302,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{}}}],["object.assign(acc",{"_index":625,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["object.assign(acc.params",{"_index":2603,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["object.assign(customparams",{"_index":3048,"title":{},"body":{"classes/ODataRequest.html":{}}}],["object.assign(this",{"_index":1245,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["object.assign(this.etag",{"_index":1434,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["object.create(null",{"_index":360,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.defineproperty",{"_index":357,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.entries",{"_index":2265,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.entries(config.fields).map",{"_index":2404,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["object.entries(config.parameters",{"_index":1952,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["object.entries(params",{"_index":2618,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["object.fromentries(key",{"_index":2334,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.getownpropertydescriptor(basector.prototype",{"_index":359,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.getownpropertynames(basector.prototype).foreach((name",{"_index":356,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.keys(attrs",{"_index":2314,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.keys(this.values).reduce",{"_index":634,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects",{"_index":322,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this._segments",{"_index":2626,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["objects.clone(this.values[key",{"_index":636,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects.clone(v",{"_index":381,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["objects.get(obj",{"_index":2755,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.has(obj",{"_index":2759,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.merge(obj",{"_index":2760,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.resolvekey(key",{"_index":2333,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["objects.set(obj",{"_index":2753,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.unset(obj",{"_index":2756,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["observable",{"_index":35,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["observe",{"_index":1610,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["obtaining",{"_index":3642,"title":{},"body":{"license.html":{}}}],["odata",{"_index":1357,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"index.html":{},"properties.html":{}}}],["odata.git",{"_index":3709,"title":{},"body":{"properties.html":{}}}],["odata.include",{"_index":3028,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata.mergecallableparameters(config.callables",{"_index":3280,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata.metadata",{"_index":3224,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata.streaming",{"_index":3226,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/docs",{"_index":3625,"title":{},"body":{"index.html":{}}}],["odata/issues",{"_index":3706,"title":{},"body":{"properties.html":{}}}],["odata/src/lib/cache/cache.ts",{"_index":1705,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odata/src/lib/cache/cache.ts:103",{"_index":1752,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:124",{"_index":1734,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:136",{"_index":1731,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:157",{"_index":1728,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:166",{"_index":1749,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:176",{"_index":1744,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:187",{"_index":1740,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:22",{"_index":1720,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:222",{"_index":1742,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:23",{"_index":1719,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:30",{"_index":1738,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:31",{"_index":1754,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:38",{"_index":1756,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:55",{"_index":1760,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:74",{"_index":1722,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:91",{"_index":1727,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/memory.ts",{"_index":2448,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/memory.ts:4",{"_index":2449,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/storage.ts",{"_index":2472,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odata/src/lib/cache/storage.ts:13",{"_index":2475,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:14",{"_index":2474,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:35",{"_index":2481,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:45",{"_index":2480,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/helper.ts",{"_index":3749,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/loaders.ts",{"_index":1968,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:12",{"_index":1991,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:21",{"_index":1972,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:29",{"_index":1973,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:6",{"_index":1988,"title":{},"body":{"classes/ODataConfigLoader.html":{}}}],["odata/src/lib/loaders.ts:9",{"_index":1990,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/models/options.ts",{"_index":3507,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/module.ts",{"_index":2497,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata/src/lib/module.ts:31",{"_index":2503,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/options.ts",{"_index":1352,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:103",{"_index":1353,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:123",{"_index":1386,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:134",{"_index":1388,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:21",{"_index":1381,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:25",{"_index":1377,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:29",{"_index":1360,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:33",{"_index":1372,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:37",{"_index":1378,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:41",{"_index":1369,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:45",{"_index":1363,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:49",{"_index":1375,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:53",{"_index":1366,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:57",{"_index":1382,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:61",{"_index":1358,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:66",{"_index":1354,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:72",{"_index":1362,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:82",{"_index":1376,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/resources/path/handlers.ts",{"_index":2643,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:11",{"_index":3447,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:15",{"_index":3446,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:19",{"_index":3444,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:23",{"_index":3442,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:26",{"_index":3440,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:29",{"_index":3445,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:33",{"_index":3443,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:36",{"_index":3441,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:41",{"_index":2644,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:43",{"_index":2646,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:46",{"_index":2651,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:49",{"_index":2645,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:52",{"_index":2647,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:55",{"_index":2648,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:58",{"_index":2650,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:6",{"_index":3439,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:61",{"_index":2649,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:8",{"_index":3448,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/segments.ts",{"_index":2555,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/segments.ts:112",{"_index":2563,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:117",{"_index":2566,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:122",{"_index":2577,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:136",{"_index":2568,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:141",{"_index":2573,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:146",{"_index":2562,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:152",{"_index":2569,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:48",{"_index":2560,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:54",{"_index":2575,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:67",{"_index":2581,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:73",{"_index":2571,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:88",{"_index":2579,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:99",{"_index":2578,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/query/builder.ts",{"_index":3514,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts",{"_index":1009,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:14",{"_index":1016,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:18",{"_index":1014,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:28",{"_index":1012,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:30",{"_index":1011,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:34",{"_index":1013,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:38",{"_index":1015,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:5",{"_index":1010,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts",{"_index":558,"title":{},"body":{"classes/ComputeExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:17",{"_index":565,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:29",{"_index":575,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:69",{"_index":570,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:75",{"_index":577,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts",{"_index":602,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:111",{"_index":605,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:137",{"_index":611,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:14",{"_index":659,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:18",{"_index":658,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:24",{"_index":657,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:54",{"_index":655,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:66",{"_index":652,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:76",{"_index":656,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:8",{"_index":651,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:86",{"_index":603,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:95",{"_index":609,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts",{"_index":946,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:108",{"_index":1001,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:11",{"_index":990,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:117",{"_index":998,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:129",{"_index":1005,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:133",{"_index":1007,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:137",{"_index":994,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:142",{"_index":995,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:152",{"_index":947,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:161",{"_index":952,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:17",{"_index":1008,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:197",{"_index":948,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:202",{"_index":954,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:21",{"_index":1006,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:27",{"_index":999,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:63",{"_index":991,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:72",{"_index":1004,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:84",{"_index":992,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:96",{"_index":993,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/filter.ts",{"_index":3747,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts",{"_index":3355,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:12",{"_index":3378,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:19",{"_index":3377,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:31",{"_index":3376,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:40",{"_index":3358,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:49",{"_index":3365,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:5",{"_index":3375,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:65",{"_index":3359,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:8",{"_index":3379,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:91",{"_index":3361,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:95",{"_index":3364,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts",{"_index":3387,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:11",{"_index":3437,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:15",{"_index":3436,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:154",{"_index":3399,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:158",{"_index":3400,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:162",{"_index":3404,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:166",{"_index":3397,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:170",{"_index":3402,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:180",{"_index":3409,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:22",{"_index":3435,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:34",{"_index":3434,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:43",{"_index":3394,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:44",{"_index":3392,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:59",{"_index":3407,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:75",{"_index":3395,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:8",{"_index":3433,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts",{"_index":3449,"title":{},"body":{"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:18",{"_index":3454,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:54",{"_index":3451,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:59",{"_index":3453,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:9",{"_index":3450,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts",{"_index":310,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:105",{"_index":1185,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:109",{"_index":1184,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:118",{"_index":1183,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:139",{"_index":1182,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:15",{"_index":3386,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:150",{"_index":3462,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:154",{"_index":3463,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:158",{"_index":3464,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:16",{"_index":3385,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:162",{"_index":3465,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:166",{"_index":3466,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:17",{"_index":3383,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:170",{"_index":3467,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:174",{"_index":3468,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:184",{"_index":556,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:187",{"_index":555,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:193",{"_index":3472,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:196",{"_index":3473,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:199",{"_index":3474,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:20",{"_index":1176,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:202",{"_index":3475,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:208",{"_index":931,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:21",{"_index":1177,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:211",{"_index":932,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:214",{"_index":933,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:217",{"_index":934,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:220",{"_index":935,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:223",{"_index":936,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:226",{"_index":937,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:229",{"_index":938,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:23",{"_index":1178,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:232",{"_index":939,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:235",{"_index":940,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:238",{"_index":941,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:241",{"_index":942,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:244",{"_index":943,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:247",{"_index":944,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:253",{"_index":316,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:256",{"_index":319,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:259",{"_index":321,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:265",{"_index":3478,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:269",{"_index":3479,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:27",{"_index":1179,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:275",{"_index":1189,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:278",{"_index":1190,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:281",{"_index":1191,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:287",{"_index":600,"title":{},"body":{"classes/ConditionalFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:292",{"_index":3350,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:299",{"_index":3354,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:303",{"_index":3353,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:312",{"_index":3352,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:347",{"_index":3351,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:357",{"_index":1212,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:360",{"_index":1219,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:363",{"_index":1214,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:366",{"_index":1213,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:369",{"_index":1218,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:372",{"_index":1217,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:383",{"_index":1220,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:386",{"_index":1215,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:389",{"_index":1216,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:395",{"_index":543,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:398",{"_index":549,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:401",{"_index":547,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:404",{"_index":545,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:407",{"_index":546,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:410",{"_index":548,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:415",{"_index":1193,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:418",{"_index":1197,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:422",{"_index":1196,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:429",{"_index":1195,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:441",{"_index":1194,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:446",{"_index":1199,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:453",{"_index":1203,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:457",{"_index":1202,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:466",{"_index":1201,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:47",{"_index":1180,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:490",{"_index":1200,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:500",{"_index":1205,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:504",{"_index":1204,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:6",{"_index":3384,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:97",{"_index":1181,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/handlers.ts",{"_index":2678,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:106",{"_index":2695,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:110",{"_index":2715,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:114",{"_index":2699,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:118",{"_index":2700,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:124",{"_index":2689,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:145",{"_index":2713,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:156",{"_index":2703,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:165",{"_index":2719,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:184",{"_index":2705,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:194",{"_index":2691,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:203",{"_index":2696,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:31",{"_index":2686,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:37",{"_index":2723,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:45",{"_index":2716,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:53",{"_index":2697,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:63",{"_index":2721,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:70",{"_index":2687,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:80",{"_index":2709,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:88",{"_index":2711,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/options.ts",{"_index":2848,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/options.ts:100",{"_index":2867,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:108",{"_index":2868,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:125",{"_index":2854,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:130",{"_index":2857,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:136",{"_index":2863,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:142",{"_index":2859,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:146",{"_index":2866,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:154",{"_index":2861,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:163",{"_index":2853,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:40",{"_index":2852,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:50",{"_index":2864,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:89",{"_index":2869,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/request.ts",{"_index":2910,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:18",{"_index":2936,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:19",{"_index":2941,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:20",{"_index":2939,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:21",{"_index":2942,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:22",{"_index":2944,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:226",{"_index":2945,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:23",{"_index":2937,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:24",{"_index":2940,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:276",{"_index":2951,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:285",{"_index":2953,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:289",{"_index":2955,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:293",{"_index":2957,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:30",{"_index":2943,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:302",{"_index":2959,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:31",{"_index":2935,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:311",{"_index":2961,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:317",{"_index":2963,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:323",{"_index":2965,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:327",{"_index":2967,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:331",{"_index":2969,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:337",{"_index":2949,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:345",{"_index":2946,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:349",{"_index":2947,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:353",{"_index":2948,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:40",{"_index":2930,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:41",{"_index":2928,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:42",{"_index":2929,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:43",{"_index":2932,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:44",{"_index":2926,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/resource.ts",{"_index":3746,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/responses/annotations.ts",{"_index":1268,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:103",{"_index":2035,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:107",{"_index":2037,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:111",{"_index":2039,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:115",{"_index":2041,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:119",{"_index":2017,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:12",{"_index":1279,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:120",{"_index":2043,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:127",{"_index":2021,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:128",{"_index":2022,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:129",{"_index":2023,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:139",{"_index":2016,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:140",{"_index":2044,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:147",{"_index":2020,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:173",{"_index":2001,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:177",{"_index":2003,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:181",{"_index":2005,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:185",{"_index":2007,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:189",{"_index":2009,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:19",{"_index":1287,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:194",{"_index":2011,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:199",{"_index":2013,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:206",{"_index":1992,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:207",{"_index":2015,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:214",{"_index":1996,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:26",{"_index":1289,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:30",{"_index":1291,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:35",{"_index":1285,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:36",{"_index":1281,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:37",{"_index":1283,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:5",{"_index":1276,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:7",{"_index":1277,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:83",{"_index":2026,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:87",{"_index":2028,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:91",{"_index":2030,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:95",{"_index":2032,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:99",{"_index":2033,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/csdl/csdl",{"_index":661,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["odata/src/lib/resources/responses/metadata.ts",{"_index":1019,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:46",{"_index":1021,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:47",{"_index":1022,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/options.ts",{"_index":3191,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:19",{"_index":3203,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:20",{"_index":3202,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:22",{"_index":3201,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:23",{"_index":3199,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:25",{"_index":3200,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:27",{"_index":3198,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:28",{"_index":3197,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:34",{"_index":3216,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:38",{"_index":3204,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:42",{"_index":3208,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:59",{"_index":3215,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:65",{"_index":3210,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:70",{"_index":3212,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:76",{"_index":3206,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/response.ts",{"_index":3086,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:134",{"_index":3098,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:135",{"_index":3112,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:145",{"_index":3095,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:146",{"_index":3114,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:155",{"_index":3094,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:156",{"_index":3116,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:178",{"_index":3101,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:202",{"_index":3100,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:220",{"_index":3106,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:247",{"_index":3108,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:30",{"_index":3099,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:31",{"_index":3093,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:47",{"_index":3103,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:59",{"_index":3105,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:80",{"_index":3107,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:93",{"_index":3097,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:94",{"_index":3110,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/types.ts",{"_index":3750,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/types/batch.ts",{"_index":1494,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:115",{"_index":1509,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:125",{"_index":1506,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:49",{"_index":1502,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:50",{"_index":1501,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:51",{"_index":1503,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:57",{"_index":1512,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:61",{"_index":1511,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:93",{"_index":1510,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/options.ts",{"_index":3748,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/annotation.ts",{"_index":1222,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:18",{"_index":1226,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:30",{"_index":1238,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:39",{"_index":1231,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:4",{"_index":1266,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:5",{"_index":1265,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:6",{"_index":1262,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:7",{"_index":1263,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:8",{"_index":1264,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:9",{"_index":1261,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/callable.ts",{"_index":1826,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:10",{"_index":1834,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:24",{"_index":1854,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:36",{"_index":1845,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:58",{"_index":1847,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:68",{"_index":1856,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:7",{"_index":1837,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:78",{"_index":1851,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:8",{"_index":1835,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:86",{"_index":1842,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:9",{"_index":1836,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/element.ts",{"_index":3308,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:19",{"_index":3316,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:29",{"_index":3314,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:38",{"_index":3315,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:47",{"_index":3313,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:58",{"_index":3311,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:68",{"_index":3312,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:7",{"_index":3310,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:8",{"_index":3309,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/entity",{"_index":2046,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{}}}],["odata/src/lib/schema/enum",{"_index":2365,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["odata/src/lib/schema/parsers/callable.ts",{"_index":1904,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:110",{"_index":1918,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:117",{"_index":1915,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:123",{"_index":1920,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:13",{"_index":2542,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:138",{"_index":1917,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:14",{"_index":2545,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:15",{"_index":2544,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:152",{"_index":1914,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:16",{"_index":2541,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:169",{"_index":1913,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:17",{"_index":2543,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:18",{"_index":2540,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:28",{"_index":2553,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:36",{"_index":2547,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:43",{"_index":2546,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:56",{"_index":2550,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:60",{"_index":2551,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:64",{"_index":2548,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:69",{"_index":2552,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:73",{"_index":2554,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:79",{"_index":2549,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:91",{"_index":1907,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:92",{"_index":1908,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:93",{"_index":1906,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:94",{"_index":1912,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:95",{"_index":1911,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:96",{"_index":1910,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:97",{"_index":1905,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/enum",{"_index":2396,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odata/src/lib/schema/parsers/structured",{"_index":2157,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/schema.ts",{"_index":3242,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:12",{"_index":3250,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:13",{"_index":3255,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:14",{"_index":3249,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:15",{"_index":3254,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:16",{"_index":3253,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:17",{"_index":3251,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:18",{"_index":3248,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:39",{"_index":3267,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:46",{"_index":3269,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:54",{"_index":3263,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:60",{"_index":3265,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:66",{"_index":3259,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:87",{"_index":3261,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:92",{"_index":3256,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/services/base.ts",{"_index":1446,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:100",{"_index":1478,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:105",{"_index":1480,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:110",{"_index":1481,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:15",{"_index":1454,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:22",{"_index":1483,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:26",{"_index":1470,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:32",{"_index":1471,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:38",{"_index":1472,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:44",{"_index":1473,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:50",{"_index":1474,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:63",{"_index":1461,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:69",{"_index":1463,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:75",{"_index":1464,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:81",{"_index":1465,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:87",{"_index":1466,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/entity",{"_index":2076,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odata/src/lib/services/entity.ts",{"_index":2052,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:12",{"_index":2065,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:6",{"_index":2060,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:7",{"_index":2057,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/factory.ts",{"_index":3325,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:15",{"_index":3328,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:30",{"_index":3331,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:7",{"_index":3326,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/singleton.ts",{"_index":3335,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:34",{"_index":3346,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:44",{"_index":3344,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:58",{"_index":3342,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/types.ts",{"_index":7,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/types.ts:168",{"_index":3380,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:173",{"_index":3382,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:178",{"_index":3381,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:196",{"_index":552,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:197",{"_index":551,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/utils/durations.ts",{"_index":3745,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/wiki",{"_index":3628,"title":{},"body":{"index.html":{}}}],["odata_config",{"_index":2516,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata_entityid_headers",{"_index":3122,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata_etag",{"_index":3552,"title":{},"body":{"index.html":{}}}],["odata_version",{"_index":1533,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata_version_headers",{"_index":3118,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataactionoptions",{"_index":1460,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataactionresource",{"_index":1458,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataannotatable",{"_index":1221,"title":{"classes/ODataAnnotatable.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:18",{"_index":1841,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:30",{"_index":1883,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:39",{"_index":1882,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation",{"_index":1228,"title":{"classes/ODataAnnotation.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation(annot",{"_index":1249,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odataannotations",{"_index":1267,"title":{"classes/ODataAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:12",{"_index":1998,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:153",{"_index":1997,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:161",{"_index":1994,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:169",{"_index":1995,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:19",{"_index":1999,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:41",{"_index":2676,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:49",{"_index":2674,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:57",{"_index":2675,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:63",{"_index":2024,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:7",{"_index":1993,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:71",{"_index":2018,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:79",{"_index":2019,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataapi",{"_index":1519,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["odataapioptions",{"_index":1351,"title":{"classes/ODataApiOptions.html":{}},"body":{"classes/ODataApiOptions.html":{}}}],["odatabaseservice",{"_index":1445,"title":{"classes/ODataBaseService.html":{}},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:100",{"_index":2063,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:26",{"_index":2062,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:63",{"_index":2061,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabatchrequest",{"_index":1493,"title":{"classes/ODataBatchRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchrequest(req",{"_index":1612,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource",{"_index":1582,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odatabatchresource(api",{"_index":1593,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildjsonbody(this._requests",{"_index":1633,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildlegacybody",{"_index":1651,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildlegacybody(bound",{"_index":1645,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parsejsonresponse(this._requests",{"_index":1638,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parselegacyresponse(this._requests",{"_index":1647,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatacache",{"_index":1704,"title":{"classes/ODataCache.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacache:103",{"_index":2463,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:124",{"_index":2458,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:136",{"_index":2457,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:14",{"_index":2453,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:157",{"_index":2456,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:166",{"_index":2462,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:176",{"_index":2461,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:187",{"_index":2459,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:22",{"_index":2451,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:222",{"_index":2460,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:23",{"_index":2450,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:29",{"_index":2452,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:38",{"_index":2464,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:54",{"_index":2476,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:55",{"_index":2465,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:64",{"_index":2479,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:74",{"_index":2454,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:79",{"_index":2478,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:91",{"_index":2455,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacacheentry",{"_index":1725,"title":{"interfaces/ODataCacheEntry.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacallable",{"_index":1825,"title":{"classes/ODataCallable.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataSchema.html":{}}}],["odatacallable(config",{"_index":3281,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatacallableparser",{"_index":1838,"title":{"classes/ODataCallableParser.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataclient",{"_index":1452,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odatacollection",{"_index":2117,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataconfigasyncloader",{"_index":1967,"title":{"classes/ODataConfigAsyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odataconfigloader",{"_index":1969,"title":{"classes/ODataConfigLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader",{"_index":1975,"title":{"classes/ODataConfigSyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader(passedconfig.config",{"_index":2524,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odatacontext",{"_index":1275,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentities",{"_index":1484,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitiesannotations",{"_index":1329,"title":{"classes/ODataEntitiesAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitiesannotations(this.helper",{"_index":1332,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitiesoptions",{"_index":3731,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentity",{"_index":1485,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityannotations",{"_index":1307,"title":{"classes/ODataEntityAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentityannotations(this.helper",{"_index":1333,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitycontainer",{"_index":2045,"title":{"classes/ODataEntityContainer.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["odataentitycontainer(config",{"_index":3284,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataentityoptions",{"_index":3732,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentityresource",{"_index":2099,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityservice",{"_index":2051,"title":{"classes/ODataEntityService.html":{}},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:19",{"_index":3339,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:27",{"_index":2098,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:35",{"_index":2086,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityset",{"_index":2047,"title":{"classes/ODataEntitySet.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataSchema.html":{}}}],["odataentityset(config",{"_index":2050,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["odataentitysetresource",{"_index":2097,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["odataentitysetservice",{"_index":2075,"title":{"classes/ODataEntitySetService.html":{}},"body":{"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{}}}],["odataentitytypekey",{"_index":2156,"title":{"classes/ODataEntityTypeKey.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataentitytypekey(key",{"_index":2264,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataenumtype",{"_index":2364,"title":{"classes/ODataEnumType.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odataenumtype(config",{"_index":3275,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataenumtypefieldparser",{"_index":2378,"title":{"classes/ODataEnumTypeFieldParser.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypefieldparser(name",{"_index":2405,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypeparser",{"_index":1922,"title":{"classes/ODataEnumTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatafunctionoptions",{"_index":1469,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odatafunctionresource",{"_index":1468,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatafunctions",{"_index":531,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatahelper",{"_index":1392,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["odatahelper[options?.version",{"_index":2203,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[parseroptions?.version",{"_index":2316,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[this.version",{"_index":1444,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatainmemorycache",{"_index":2447,"title":{"classes/ODataInMemoryCache.html":{}},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatainstoragecache",{"_index":2471,"title":{"classes/ODataInStorageCache.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatametadata",{"_index":1029,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_data_services",{"_index":1140,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_reference",{"_index":1131,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_schema",{"_index":1144,"title":{},"body":{"classes/Field.html":{}}}],["odatametadatatype",{"_index":32,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odatamodel",{"_index":2066,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatamodelentry",{"_index":3733,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodeleventtype",{"_index":3501,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodelfieldoptions",{"_index":3734,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelstate",{"_index":3503,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodule",{"_index":2495,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{},"modules.html":{}}}],["odatamodule.forroot",{"_index":3542,"title":{},"body":{"index.html":{}}}],["odatanavigationpropertyresource",{"_index":1476,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataoperators",{"_index":528,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataoptions",{"_index":1543,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataparameterparser",{"_index":1909,"title":{"classes/ODataParameterParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparameterparser(name",{"_index":1953,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odatapathsegments",{"_index":1539,"title":{"classes/ODataPathSegments.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odatapathsegments(segments",{"_index":2627,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odatapathsegmentshandler",{"_index":2642,"title":{"classes/ODataPathSegmentsHandler.html":{}},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odataproperty",{"_index":1486,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odatapropertyannotations",{"_index":1298,"title":{"classes/ODataPropertyAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odatapropertyoptions",{"_index":3735,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataqueryarguments",{"_index":2725,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryargumentsoptions",{"_index":1477,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryoptionhandler",{"_index":2677,"title":{"classes/ODataQueryOptionHandler.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionhandler(this.values",{"_index":2899,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions",{"_index":2726,"title":{"classes/ODataQueryOptions.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(objects.clone(this.values",{"_index":2897,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionshandler",{"_index":2762,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odatareferential",{"_index":2171,"title":{"classes/ODataReferential.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatareferential(referential",{"_index":2179,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatarequest",{"_index":1500,"title":{"classes/ODataRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresource",{"_index":1540,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["odataresponse",{"_index":1541,"title":{"classes/ODataResponse.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponse.fromjson(req",{"_index":2493,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponseoptions",{"_index":3096,"title":{"classes/ODataResponseOptions.html":{}},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this",{"_index":3220,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this.api.options.parseroptions",{"_index":3141,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataschema",{"_index":1833,"title":{"classes/ODataSchema.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement",{"_index":1827,"title":{"classes/ODataSchemaElement.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement:29",{"_index":1868,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:38",{"_index":1879,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:47",{"_index":1866,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:58",{"_index":1860,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:68",{"_index":1863,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:7",{"_index":1839,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:8",{"_index":1840,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odatasegment",{"_index":2559,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["odataservicefactory",{"_index":2499,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odatasingletonresource",{"_index":3340,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odatasingletonservice",{"_index":3333,"title":{"classes/ODataSingletonService.html":{}},"body":{"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["odatastructuredtype",{"_index":3252,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtype(config",{"_index":3278,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtypefieldparser",{"_index":2166,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypefieldparser(name",{"_index":2270,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser",{"_index":1923,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser).field",{"_index":1944,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatasyntax",{"_index":534,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataversion",{"_index":33,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataversionhelper",{"_index":1273,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odatawithout",{"_index":3539,"title":{},"body":{"index.html":{}}}],["of([this.passedconfigs",{"_index":1980,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["of(cached",{"_index":1813,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["of(this.passedconfigs",{"_index":1979,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["offset",{"_index":112,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ok",{"_index":1703,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["omit",{"_index":1412,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["omitnullvalues",{"_index":1416,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["ondelete",{"_index":806,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["one",{"_index":2532,"title":{},"body":{"modules/ODataModule.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/PassedInitialConfig.html":{}}}],["onerror",{"_index":1496,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onerror(response",{"_index":1504,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload",{"_index":1497,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload(response",{"_index":1507,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["op",{"_index":467,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["open",{"_index":292,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["open.org/odata/odata",{"_index":1395,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["open.org/odata/odata/v4.0/errata02/os/complete/part1",{"_index":1398,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["open.org/odata/odata/v4.01/odata",{"_index":2765,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["opentype",{"_index":713,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["operator",{"_index":466,"title":{"classes/Operator.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('add",{"_index":502,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('and",{"_index":491,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('div",{"_index":508,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('eq",{"_index":479,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ge",{"_index":485,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('gt",{"_index":483,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('has",{"_index":497,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('in",{"_index":499,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('le",{"_index":489,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('lt",{"_index":487,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mod",{"_index":510,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mul",{"_index":506,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ne",{"_index":481,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('not",{"_index":495,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('or",{"_index":493,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('sub",{"_index":504,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operators",{"_index":530,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["option",{"_index":638,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["option(key",{"_index":2862,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["option(name",{"_index":640,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["options",{"_index":229,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["options.body",{"_index":3062,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.bodyqueryoptions",{"_index":3067,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.context",{"_index":3061,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.custom",{"_index":2354,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.custom[f.name",{"_index":2355,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.etag",{"_index":3058,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.expand",{"_index":2348,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.fetchpolicy",{"_index":3066,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.headers",{"_index":1631,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.helper",{"_index":3179,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.annotations(this.payload",{"_index":3172,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes",{"_index":3186,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(data",{"_index":3182,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(payload",{"_index":3189,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.observe",{"_index":3063,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.params",{"_index":1634,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.reportprogress",{"_index":3064,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.required",{"_index":2357,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.required[f.name",{"_index":2358,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.responsetype",{"_index":3065,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.select",{"_index":2349,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.select).indexof(f.name",{"_index":2350,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.withcount",{"_index":3055,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.withcredentials",{"_index":1635,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["opts",{"_index":246,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts(node",{"_index":988,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["or(exp",{"_index":3403,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["or(left",{"_index":492,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["order",{"_index":3368,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderby",{"_index":70,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["orderby(opts",{"_index":996,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{}}}],["orderbyexpression",{"_index":956,"title":{"classes/OrderByExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyexpression.orderby",{"_index":2802,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["orderbyexpression.orderby(opts",{"_index":977,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["orderbyexpressionbuilder",{"_index":957,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["orderbyexpressionbuilder,current",{"_index":997,"title":{},"body":{"classes/ExpandField.html":{},"classes/OrderByExpression.html":{}}}],["orderbyfield",{"_index":3367,"title":{"classes/OrderByField.html":{}},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(field",{"_index":3374,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(this.field.clone",{"_index":3372,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyobject",{"_index":3738,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["orderbytype",{"_index":3739,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1619,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["os",{"_index":1402,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["other.annotations",{"_index":1301,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["other.context",{"_index":1304,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["otherwise",{"_index":3690,"title":{},"body":{"license.html":{}}}],["out",{"_index":3692,"title":{},"body":{"license.html":{}}}],["output",{"_index":1876,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["override",{"_index":1548,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["overview",{"_index":3696,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":296,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["p.configure",{"_index":1965,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.encode(params[p.name",{"_index":1962,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.name",{"_index":1958,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.serialize(params[p.name",{"_index":1961,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.startswith(application_json",{"_index":3147,"title":{},"body":{"classes/ODataResponse.html":{}}}],["pack",{"_index":2367,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["pack(value",{"_index":2384,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["package",{"_index":3480,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pagination",{"_index":2820,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["paging",{"_index":2813,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["param",{"_index":202,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["param0",{"_index":2812,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["parameter",{"_index":234,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["parameter.collection",{"_index":1929,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.nullable",{"_index":1927,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.type",{"_index":1925,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameters",{"_index":301,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["parameters(value",{"_index":2662,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["parameters.reduce",{"_index":1960,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["params",{"_index":19,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["params[p.name",{"_index":1959,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parent",{"_index":2254,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parent.children.push(this",{"_index":2296,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parentelement",{"_index":1170,"title":{},"body":{"classes/Field.html":{}}}],["parentelement.children",{"_index":1173,"title":{},"body":{"classes/Field.html":{}}}],["parenthesis",{"_index":1373,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["parse",{"_index":1159,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parsejsonresponse",{"_index":1698,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parselegacyresponse",{"_index":1673,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parser",{"_index":224,"title":{"interfaces/Parser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parser.deserialize(value",{"_index":2207,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser.parsefromstring(xml",{"_index":1120,"title":{},"body":{"classes/Field.html":{}}}],["parser.serialize(value",{"_index":2210,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype",{"_index":1897,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["parserfortype(this.base",{"_index":2295,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype(this.return.type",{"_index":1963,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parserfortype(this.type",{"_index":1935,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["parseroptions",{"_index":216,"title":{"interfaces/ParserOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parseroptions?.stringasenum",{"_index":2417,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["parsers",{"_index":259,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["part1",{"_index":1403,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["part2",{"_index":2767,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["partial",{"_index":1280,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["particular",{"_index":3677,"title":{},"body":{"license.html":{}}}],["partner",{"_index":807,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["passed",{"_index":2534,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig",{"_index":2504,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig?.loader",{"_index":2536,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfigs",{"_index":1977,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["passedinitialconfig",{"_index":2502,"title":{"interfaces/PassedInitialConfig.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["patch",{"_index":1557,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["patch'].indexof(this._method",{"_index":3022,"title":{},"body":{"classes/ODataRequest.html":{}}}],["patch(attrs",{"_index":3341,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["path",{"_index":29,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["path(value",{"_index":2655,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["path.slice(1",{"_index":2593,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.startswith(path_separator",{"_index":2592,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path_separator",{"_index":2582,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparams",{"_index":2557,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["pathandparams(escape",{"_index":2574,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["paths",{"_index":2604,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment",{"_index":52,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["pathsegment.entityset",{"_index":1777,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["pathsegment.function",{"_index":2588,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment.navigationproperty",{"_index":2631,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment.property",{"_index":2632,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder",{"_index":2586,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder(segment",{"_index":2600,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathwithparams",{"_index":2922,"title":{},"body":{"classes/ODataRequest.html":{}}}],["pattern",{"_index":410,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["payload",{"_index":245,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["people",{"_index":3593,"title":{},"body":{"index.html":{}}}],["people.fetch",{"_index":3606,"title":{},"body":{"index.html":{}}}],["peopleservice",{"_index":3592,"title":{},"body":{"index.html":{}}}],["peopleservice.entities",{"_index":3595,"title":{},"body":{"index.html":{}}}],["permission",{"_index":3636,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":266,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["permit",{"_index":3657,"title":{},"body":{"license.html":{}}}],["person",{"_index":3641,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3658,"title":{},"body":{"license.html":{}}}],["pick",{"_index":2313,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picked",{"_index":2312,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picks",{"_index":2310,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["pipe",{"_index":1636,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"index.html":{}}}],["please",{"_index":3525,"title":{},"body":{"index.html":{}}}],["point",{"_index":140,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["points",{"_index":174,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["policy",{"_index":1365,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["polygon",{"_index":170,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["polygons",{"_index":180,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["portions",{"_index":3667,"title":{},"body":{"license.html":{}}}],["post",{"_index":1556,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["post'].indexof(this._method",{"_index":3035,"title":{},"body":{"classes/ODataRequest.html":{}}}],["precision",{"_index":132,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["predicate",{"_index":1239,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["predicate(this",{"_index":2279,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["prefer",{"_index":20,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["prefer.length",{"_index":3037,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push",{"_index":3027,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.continue",{"_index":3036,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxpagesize",{"_index":3025,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`omit",{"_index":3031,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`return=${this.api.options.prefer?.return",{"_index":3023,"title":{},"body":{"classes/ODataRequest.html":{}}}],["preference",{"_index":3213,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference.split(',').foreach((prefer",{"_index":3233,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference_applied",{"_index":3123,"title":{},"body":{"classes/ODataResponse.html":{}}}],["preferenceapplied",{"_index":3154,"title":{},"body":{"classes/ODataResponse.html":{}}}],["prefix",{"_index":331,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["prefix}/${name",{"_index":346,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["pretty",{"_index":1875,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["primitive",{"_index":2730,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["private",{"_index":49,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":3526,"title":{},"body":{"index.html":{}}}],["projects/.../builder.ts",{"_index":3505,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../compute.ts",{"_index":3713,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../count.ts",{"_index":3714,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../durations.ts",{"_index":3715,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../expand.ts",{"_index":3717,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../filter.ts",{"_index":3722,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../helper.ts",{"_index":3730,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../metadata.ts",{"_index":3500,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../options.ts",{"_index":3502,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../orderby.ts",{"_index":3737,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../resource.ts",{"_index":3716,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../search.ts",{"_index":3741,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../segments.ts",{"_index":3736,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../select.ts",{"_index":3742,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../structured",{"_index":3725,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":3499,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"properties.html":{}}}],["property",{"_index":57,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["property(name",{"_index":1328,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["property.enum",{"_index":2426,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["property.ts",{"_index":803,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["property.ts:1",{"_index":891,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:14",{"_index":837,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:15",{"_index":838,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:16",{"_index":839,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:17",{"_index":841,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:18",{"_index":840,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:19",{"_index":836,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:25",{"_index":811,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:3",{"_index":892,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:30",{"_index":814,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:31",{"_index":812,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:32",{"_index":815,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:33",{"_index":813,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:39",{"_index":850,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:4",{"_index":894,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:40",{"_index":851,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:43",{"_index":825,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:44",{"_index":826,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:5",{"_index":893,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:9",{"_index":835,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["propertyref",{"_index":1054,"title":{},"body":{"classes/Field.html":{}}}],["propertyrefs",{"_index":729,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["props",{"_index":1330,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["protected",{"_index":370,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["protocol",{"_index":1404,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["protocol/odata",{"_index":1399,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["provide",{"_index":2530,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["provided",{"_index":3668,"title":{},"body":{"license.html":{}}}],["provider",{"_index":2511,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["providers",{"_index":2498,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["proxy",{"_index":340,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["proxyhandler",{"_index":336,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["public",{"_index":48,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":3651,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":3678,"title":{},"body":{"license.html":{}}}],["push",{"_index":2683,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["push(value",{"_index":2708,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["put",{"_index":550,"title":{},"body":{"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{}}}],["put(key",{"_index":244,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["put(name",{"_index":1751,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse",{"_index":1717,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse(req",{"_index":1753,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["q.apply(options",{"_index":1490,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["q.expand",{"_index":3596,"title":{},"body":{"index.html":{}}}],["q.filter",{"_index":3579,"title":{},"body":{"index.html":{}}}],["q.filter().clear",{"_index":3591,"title":{},"body":{"index.html":{}}}],["q.filter().push",{"_index":3586,"title":{},"body":{"index.html":{}}}],["qualifier",{"_index":693,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["queries",{"_index":3562,"title":{},"body":{"index.html":{}}}],["query",{"_index":235,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["query((q",{"_index":3578,"title":{},"body":{"index.html":{}}}],["query.compute",{"_index":2834,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.expand",{"_index":2831,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.filter",{"_index":2841,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.orderby",{"_index":2844,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.search",{"_index":2839,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.select",{"_index":2828,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.transform",{"_index":2836,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["querycustomtype",{"_index":324,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["querycustomtypes",{"_index":3504,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["querying",{"_index":3522,"title":{},"body":{"index.html":{}}}],["queryoption",{"_index":28,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["queryoption.compute",{"_index":2786,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.count",{"_index":2875,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.expand",{"_index":963,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.filter",{"_index":617,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.format",{"_index":2874,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.levels",{"_index":967,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.orderby",{"_index":964,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.search",{"_index":618,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.select",{"_index":962,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.skip",{"_index":965,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.skiptoken",{"_index":2873,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.top",{"_index":966,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.transform",{"_index":2872,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptions",{"_index":3740,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["r",{"_index":1462,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSingletonService.html":{}}}],["r.ismutate",{"_index":1823,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["r.request",{"_index":1587,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["r2",{"_index":1568,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["range",{"_index":2241,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw",{"_index":2162,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"miscellaneous/enumerations.html":{}}}],["raw(`'${serialized",{"_index":2423,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(json.stringify(this.serialize(value",{"_index":2294,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw(key",{"_index":2597,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["raw(serialized",{"_index":2424,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(value",{"_index":2763,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["read",{"_index":1769,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["readlink",{"_index":1315,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["readonly",{"_index":643,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["readonlyarray",{"_index":2973,"title":{},"body":{"classes/ODataRequest.html":{}}}],["reduce",{"_index":1775,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["reduce((acc",{"_index":621,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["reference",{"_index":59,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["reference.ts",{"_index":784,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["reference.ts:14",{"_index":786,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:15",{"_index":787,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:18",{"_index":796,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:20",{"_index":799,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:21",{"_index":797,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:22",{"_index":798,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:3",{"_index":845,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:5",{"_index":848,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:6",{"_index":847,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:7",{"_index":846,"title":{},"body":{"classes/CsdlReference.html":{}}}],["referenced",{"_index":291,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referencedproperty",{"_index":289,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["references",{"_index":1115,"title":{},"body":{"classes/Field.html":{}}}],["referential",{"_index":290,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referentialconstraint",{"_index":1057,"title":{},"body":{"classes/Field.html":{}}}],["referentialconstraints",{"_index":808,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["referentials",{"_index":288,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["reg",{"_index":1251,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["reg.test(a.term",{"_index":1255,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["regexp",{"_index":1230,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["regexp(`^${term",{"_index":1253,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["region",{"_index":250,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["related",{"_index":1945,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"index.html":{}}}],["relative",{"_index":1551,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["remove",{"_index":1729,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/enumerations.html":{}}}],["remove(...keys",{"_index":2902,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(keys",{"_index":2865,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(value",{"_index":2710,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["removed",{"_index":3512,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["render",{"_index":328,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render'].includes(key",{"_index":352,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(field",{"_index":376,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(left",{"_index":471,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(right",{"_index":475,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.field",{"_index":626,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["render(this.group",{"_index":516,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.value",{"_index":3412,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["render(undefined",{"_index":578,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["render(v",{"_index":378,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value(syntax",{"_index":364,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value.render",{"_index":367,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["renderable",{"_index":327,"title":{"interfaces/Renderable.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["replace",{"_index":3152,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reportprogress",{"_index":2917,"title":{},"body":{"classes/ODataRequest.html":{}}}],["repository",{"_index":3707,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":210,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["req",{"_index":1601,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["req.api",{"_index":1602,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["req.fetchpolicy",{"_index":1810,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isbatch",{"_index":1820,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isfetch",{"_index":1806,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.ismutate",{"_index":1808,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.observe",{"_index":1606,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.resource",{"_index":1821,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponse.html":{}}}],["req.resource.clonesegments",{"_index":1773,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["request",{"_index":227,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["request('post",{"_index":1632,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.request.method",{"_index":1659,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.tojson",{"_index":1672,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.urlwithparams",{"_index":1696,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request>('post",{"_index":1644,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requester",{"_index":1600,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests",{"_index":1585,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["requests.map((request",{"_index":1671,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests[index].request",{"_index":1687,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["require",{"_index":2147,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["required",{"_index":584,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["res",{"_index":1553,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{}}}],["res$.pipe",{"_index":1815,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res$.pipe(startwith(cached",{"_index":1819,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.body",{"_index":3125,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.context",{"_index":1779,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.destroy(options",{"_index":2138,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.haskey",{"_index":2132,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.headers",{"_index":3126,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.join(newline",{"_index":1563,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.length",{"_index":1668,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.modify(attrs",{"_index":2136,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.options.cacheability",{"_index":1817,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.options.maxage",{"_index":2469,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.push",{"_index":1660,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${batchboundary",{"_index":1662,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${changesetboundary",{"_index":1664,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_id",{"_index":1666,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_transfer_encoding",{"_index":1665,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_type",{"_index":1558,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${newline}${json.stringify(this.request.body",{"_index":1562,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${request.tolegacy",{"_index":1667,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(newline",{"_index":1561,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.status",{"_index":3127,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.statustext",{"_index":3128,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.tojson",{"_index":2492,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.update(attrs",{"_index":2134,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.url",{"_index":3129,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res['body",{"_index":1570,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res['headers",{"_index":1569,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["reset",{"_index":3509,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resolve",{"_index":2320,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["resolvekey",{"_index":2319,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["resource",{"_index":1457,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["resource.call(params",{"_index":1491,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.fetch",{"_index":1492,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.query((q",{"_index":1489,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resourceparams",{"_index":2996,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$expand",{"_index":3047,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$select",{"_index":3045,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourcepath",{"_index":2995,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resources",{"_index":1487,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["resources/query",{"_index":2163,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["response",{"_index":1380,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["response.body",{"_index":1681,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.headers.get(content_type",{"_index":1676,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.ok",{"_index":1572,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['body",{"_index":1702,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['status",{"_index":1700,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsejson",{"_index":2482,"title":{"interfaces/ResponseJson.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["responseoptions",{"_index":217,"title":{"interfaces/ResponseOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["responses",{"_index":1542,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responses.map((response",{"_index":1699,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsetype",{"_index":1459,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["restore",{"_index":1623,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["restorerequester",{"_index":1614,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["restriction",{"_index":3648,"title":{},"body":{"license.html":{}}}],["result",{"_index":1616,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["result.params",{"_index":2606,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["result.paths.join(path_separator",{"_index":2605,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["results",{"_index":305,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrun",{"_index":2823,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["return",{"_index":209,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["returns",{"_index":317,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["returntype",{"_index":664,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["right",{"_index":470,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rights",{"_index":3650,"title":{},"body":{"license.html":{}}}],["root",{"_index":3555,"title":{},"body":{"index.html":{}}}],["round",{"_index":161,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["round(value",{"_index":320,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rxjs",{"_index":36,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1764,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitySetService.html":{}}}],["s",{"_index":1479,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataSingletonService.html":{}}}],["s.key",{"_index":2616,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.name",{"_index":1776,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.parameters",{"_index":2624,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.path",{"_index":1778,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.type",{"_index":2609,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s1",{"_index":405,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["s2",{"_index":403,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["same",{"_index":1605,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["save",{"_index":2083,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["save(attrs",{"_index":2110,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["sbyte",{"_index":102,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["scale",{"_index":133,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["schema",{"_index":1024,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["schema.alias",{"_index":1893,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.contentencoding",{"_index":2233,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.default",{"_index":2245,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.format",{"_index":2226,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.iscompoundkey",{"_index":2145,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.maxlength",{"_index":2235,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.namespace",{"_index":1892,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.org",{"_index":2215,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.org/draft",{"_index":2343,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.pattern",{"_index":2227,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.properties",{"_index":2351,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.required",{"_index":2356,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.resolvekey(attrs",{"_index":2150,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.ts",{"_index":861,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:13",{"_index":871,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:15",{"_index":880,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:16",{"_index":873,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:17",{"_index":878,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:18",{"_index":875,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:19",{"_index":877,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:20",{"_index":879,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:21",{"_index":872,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:22",{"_index":876,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:23",{"_index":882,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:24",{"_index":881,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:25",{"_index":874,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.type",{"_index":2225,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schemaconfig",{"_index":261,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":260,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["scope",{"_index":1718,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["scope(req",{"_index":1755,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["scope.length",{"_index":1796,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["scope.push(name",{"_index":1795,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["search",{"_index":68,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["search(opts",{"_index":1000,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SearchExpression.html":{}}}],["searchconnector",{"_index":3393,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpression",{"_index":958,"title":{"classes/SearchExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchexpression.search",{"_index":2795,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["searchexpression.search(opts",{"_index":975,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["searchexpressionbuilder",{"_index":959,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpressionbuilder,current",{"_index":3406,"title":{},"body":{"classes/SearchExpression.html":{}}}],["searchterm",{"_index":3411,"title":{"classes/SearchTerm.html":{}},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(this.value",{"_index":3413,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(value",{"_index":3431,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["second",{"_index":927,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["second(value",{"_index":437,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["seconds",{"_index":120,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["segment",{"_index":2565,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segment.clearkey",{"_index":2613,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key",{"_index":2594,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key(key",{"_index":2614,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.name",{"_index":2587,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.parameters",{"_index":2589,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.path",{"_index":2591,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler",{"_index":2584,"title":{"classes/SegmentHandler.html":{}},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segmenthandler(s",{"_index":2634,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler(segment",{"_index":2639,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments",{"_index":1591,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segments(undefined",{"_index":2576,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.add(pathsegment.batch",{"_index":1592,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["segments.filter",{"_index":2630,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.foreach((segment",{"_index":2611,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.length",{"_index":2635,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.map((s",{"_index":2615,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.segments",{"_index":1774,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["segments[0",{"_index":2636,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments[segments.length",{"_index":2637,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["select",{"_index":64,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["select(opts",{"_index":1002,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SelectExpression.html":{}}}],["selectexpression",{"_index":960,"title":{"classes/SelectExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/SelectExpression.html":{}}}],["selectexpression.select",{"_index":2779,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["selectexpression.select(opts",{"_index":970,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["selectexpressionbuilder",{"_index":961,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["selectexpressionbuilder,current",{"_index":1003,"title":{},"body":{"classes/ExpandField.html":{},"classes/SelectExpression.html":{}}}],["selector",{"_index":3553,"title":{},"body":{"index.html":{}}}],["selecttype",{"_index":3743,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sell",{"_index":3655,"title":{},"body":{"license.html":{}}}],["send",{"_index":1359,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["send(options",{"_index":1625,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendjson(options",{"_index":1629,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendlegacy",{"_index":1643,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sent",{"_index":1368,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["sequence",{"_index":90,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialization",{"_index":1857,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["serialize",{"_index":231,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialize(params",{"_index":1919,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["serialize(value",{"_index":1855,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["serialized",{"_index":1858,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["server",{"_index":1697,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["service",{"_index":303,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["servicerooturl",{"_index":253,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["services/index",{"_index":2514,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["sessionstorage",{"_index":2483,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["set",{"_index":747,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{}}}],["set(path",{"_index":2712,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["set.ts",{"_index":748,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{}}}],["set.ts:101",{"_index":2113,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:119",{"_index":2109,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:136",{"_index":2095,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:154",{"_index":2107,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:176",{"_index":2111,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:19",{"_index":2096,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:3",{"_index":751,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:36",{"_index":2089,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:37",{"_index":2090,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:48",{"_index":2115,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:5",{"_index":754,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:56",{"_index":2101,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:6",{"_index":752,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:65",{"_index":2103,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:7",{"_index":755,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:78",{"_index":2105,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:8",{"_index":753,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:87",{"_index":2092,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["setcache",{"_index":3192,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setcache(cachecontrol",{"_index":3205,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures",{"_index":3193,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures(features",{"_index":3207,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation",{"_index":3194,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation(location",{"_index":3209,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied",{"_index":3195,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied(preference",{"_index":3211,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setup",{"_index":3541,"title":{},"body":{"index.html":{}}}],["setversion",{"_index":3196,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setversion(version",{"_index":3214,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["shall",{"_index":3664,"title":{},"body":{"license.html":{}}}],["shortcut",{"_index":2811,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["shortcuts",{"_index":2139,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["side",{"_index":3700,"title":{},"body":{"properties.html":{}}}],["signed",{"_index":86,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["single",{"_index":150,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleconfigorarray",{"_index":1983,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleconfigorarray.pipe",{"_index":1985,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleton",{"_index":56,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleton(singletonname",{"_index":3330,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singleton.ts",{"_index":885,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:3",{"_index":887,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:5",{"_index":888,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:6",{"_index":890,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:7",{"_index":889,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singletonname",{"_index":3332,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singletons",{"_index":737,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["singletonschema",{"_index":3338,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["skip",{"_index":72,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skip(n",{"_index":979,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["skip(opts",{"_index":2807,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["skiptoken",{"_index":73,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skiptoken(opts",{"_index":2809,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["software",{"_index":3644,"title":{},"body":{"license.html":{}}}],["some(predicate",{"_index":2714,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["specific",{"_index":2148,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["specified",{"_index":1164,"title":{},"body":{"classes/Field.html":{}}}],["split",{"_index":3145,"title":{},"body":{"classes/ODataResponse.html":{}}}],["split(newline_regexp",{"_index":1682,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["srid",{"_index":680,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["standardaggregatemethods",{"_index":3506,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":397,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["started",{"_index":3519,"title":{"index.html":{},"license.html":{}},"body":{}}],["started/advanced",{"_index":1580,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataSingletonService.html":{}}}],["startindex",{"_index":1686,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["startswith",{"_index":3460,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["startswith(field",{"_index":394,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["startwith",{"_index":1762,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["states",{"_index":3583,"title":{},"body":{"index.html":{}}}],["static",{"_index":338,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["status",{"_index":1694,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["statustext",{"_index":1695,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["storage",{"_index":2473,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["store",{"_index":50,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store'].indexof(directive",{"_index":3239,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["storerequester",{"_index":1597,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["stream",{"_index":154,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["streaming",{"_index":205,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["string",{"_index":94,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["string(name",{"_index":2309,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["stringandcollectionfunctions",{"_index":383,"title":{"classes/StringAndCollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["stringasenum",{"_index":21,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["stringfunctions",{"_index":408,"title":{"classes/StringFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["strings",{"_index":177,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["strings.titlecase(this.name",{"_index":2273,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.uniqueid",{"_index":1545,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strip",{"_index":1379,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["stripmetadata",{"_index":22,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structural",{"_index":724,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["structured",{"_index":708,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["structuredtype",{"_index":1946,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["structuredtypeconfig",{"_index":273,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldconfig",{"_index":223,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldoptions",{"_index":221,"title":{"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structuredtypeschema",{"_index":2054,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["strucuturedtype",{"_index":1943,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["styleurls",{"_index":3558,"title":{},"body":{"index.html":{}}}],["sub",{"_index":542,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["sub(left",{"_index":503,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sub)seconds",{"_index":127,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["subject",{"_index":1495,"title":{},"body":{"classes/ODataBatchRequest.html":{},"license.html":{}}}],["sublicense",{"_index":3653,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":3570,"title":{},"body":{"index.html":{}}}],["subscribe((airports",{"_index":3571,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":3666,"title":{},"body":{"license.html":{}}}],["substring",{"_index":3461,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["substring(field",{"_index":396,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["subtype",{"_index":1861,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["sum",{"_index":3515,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["super",{"_index":585,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["super(annotationlist",{"_index":694,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["super(config",{"_index":1884,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["super(field",{"_index":2174,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["super(init",{"_index":3124,"title":{},"body":{"classes/ODataResponse.html":{}}}],["super(name",{"_index":725,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{}}}],["super.clone",{"_index":1594,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["super.flush",{"_index":2491,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["supertype",{"_index":1864,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["support",{"_index":3612,"title":{},"body":{"index.html":{}}}],["supported",{"_index":1168,"title":{},"body":{"classes/Field.html":{}}}],["switch",{"_index":1599,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["switchmap",{"_index":1518,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["symbol",{"_index":343,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["symbol.tostringtag",{"_index":348,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sync",{"_index":2535,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"miscellaneous/enumerations.html":{}}}],["syntax",{"_index":536,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["system",{"_index":164,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["t",{"_index":230,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["table",{"_index":3532,"title":{},"body":{"index.html":{}}}],["tag",{"_index":1028,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["tag_action",{"_index":1062,"title":{},"body":{"classes/Field.html":{}}}],["tag_action_import",{"_index":1068,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotation",{"_index":1043,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotations",{"_index":1042,"title":{},"body":{"classes/Field.html":{}}}],["tag_complex_type",{"_index":1048,"title":{},"body":{"classes/Field.html":{}}}],["tag_data_services",{"_index":1033,"title":{},"body":{"classes/Field.html":{}}}],["tag_edmx",{"_index":1031,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_container",{"_index":1063,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_set",{"_index":1064,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_type",{"_index":1050,"title":{},"body":{"classes/Field.html":{}}}],["tag_enum_type",{"_index":1045,"title":{},"body":{"classes/Field.html":{}}}],["tag_function",{"_index":1059,"title":{},"body":{"classes/Field.html":{}}}],["tag_function_import",{"_index":1066,"title":{},"body":{"classes/Field.html":{}}}],["tag_include",{"_index":1037,"title":{},"body":{"classes/Field.html":{}}}],["tag_include_annotations",{"_index":1039,"title":{},"body":{"classes/Field.html":{}}}],["tag_key",{"_index":1052,"title":{},"body":{"classes/Field.html":{}}}],["tag_member",{"_index":1047,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property",{"_index":1055,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property_binding",{"_index":1070,"title":{},"body":{"classes/Field.html":{}}}],["tag_on_delete",{"_index":1058,"title":{},"body":{"classes/Field.html":{}}}],["tag_parameter",{"_index":1061,"title":{},"body":{"classes/Field.html":{}}}],["tag_property",{"_index":1051,"title":{},"body":{"classes/Field.html":{}}}],["tag_property_ref",{"_index":1053,"title":{},"body":{"classes/Field.html":{}}}],["tag_reference",{"_index":1035,"title":{},"body":{"classes/Field.html":{}}}],["tag_referential_constraint",{"_index":1056,"title":{},"body":{"classes/Field.html":{}}}],["tag_return_type",{"_index":1060,"title":{},"body":{"classes/Field.html":{}}}],["tag_schema",{"_index":1044,"title":{},"body":{"classes/Field.html":{}}}],["tag_singleton",{"_index":1065,"title":{},"body":{"classes/Field.html":{}}}],["tag_term",{"_index":1041,"title":{},"body":{"classes/Field.html":{}}}],["tag_type_definition",{"_index":1071,"title":{},"body":{"classes/Field.html":{}}}],["tags",{"_index":1030,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["tags(res",{"_index":1759,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["tags.length",{"_index":1801,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push",{"_index":1781,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push(context.type",{"_index":1785,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.some((t",{"_index":1802,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap",{"_index":1763,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap((res",{"_index":1816,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["target",{"_index":344,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlTerm.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["targetnamespace",{"_index":794,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["te",{"_index":2776,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["templateurl",{"_index":3556,"title":{},"body":{"index.html":{}}}],["term",{"_index":263,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["term(value",{"_index":3408,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["termnamespace",{"_index":793,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["terms",{"_index":868,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["test",{"_index":2706,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["text",{"_index":1646,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["text/plain",{"_index":3020,"title":{},"body":{"classes/ODataRequest.html":{}}}],["text/xml",{"_index":1121,"title":{},"body":{"classes/Field.html":{}}}],["text_plain",{"_index":2972,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._add(countfield",{"_index":648,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["this._add(exp",{"_index":3426,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(field",{"_index":3455,"title":{},"body":{"classes/SelectExpression.html":{}}}],["this._add(name",{"_index":598,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._add(new",{"_index":3373,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(node",{"_index":989,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this._add(notexp",{"_index":3430,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._annotations",{"_index":3170,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_etag",{"_index":3175,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_id",{"_index":3177,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._body",{"_index":2986,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._children",{"_index":645,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.length",{"_index":1017,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.map((c",{"_index":592,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.map((n",{"_index":588,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._children.push",{"_index":3425,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.push(node",{"_index":595,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["this._connector",{"_index":3414,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._context",{"_index":3166,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._fields",{"_index":2403,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this._fields.filter",{"_index":2301,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["this._fields.foreach((f",{"_index":2297,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._fields.map((f",{"_index":2427,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this._fields.push(field",{"_index":2271,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._functions",{"_index":1335,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._headers",{"_index":3039,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._keys",{"_index":2262,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._method",{"_index":2974,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._negated",{"_index":3415,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._options",{"_index":3140,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setcache(cachecontrol",{"_index":3162,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setfeatures(features",{"_index":3148,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setlocation(location",{"_index":3159,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setpreferenceapplied(preferenceapplied",{"_index":3156,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setversion(version",{"_index":3153,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._params",{"_index":3052,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.has(`$${name",{"_index":3084,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.keys().length",{"_index":3080,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path",{"_index":2998,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}/${$query",{"_index":3070,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}?${this._params",{"_index":3081,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._payload",{"_index":3163,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._properties",{"_index":1326,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._requests",{"_index":1596,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.map((r",{"_index":1586,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.push(new",{"_index":1611,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests[this._requests.length",{"_index":1613,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses",{"_index":1589,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses).foreach((tuple",{"_index":1640,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responsetype",{"_index":2984,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._segments",{"_index":2598,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.map((s",{"_index":2621,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.push(segment",{"_index":2638,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.reduce",{"_index":2599,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments].reverse().find(predicate",{"_index":2629,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.accept",{"_index":1432,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.add(ctx",{"_index":1649,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.addfield(name",{"_index":2268,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.alias",{"_index":519,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.annotatedvalue(computed",{"_index":2197,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(long_description",{"_index":2346,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(term",{"_index":2272,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["this.annotations",{"_index":1246,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.annotations.find(predicate",{"_index":1250,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.api",{"_index":1603,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["this.api.findentitysetbyname(this.name",{"_index":2125,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.api.findentitysetfortype(this.parser.return.type)?.name",{"_index":1896,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.api.findstructuredtypefortype(bindingtype",{"_index":3293,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(callablebindingtype",{"_index":3299,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(this.apinameorentitytype",{"_index":2070,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["this.api.options.accept?.exponentialdecimals",{"_index":3015,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.ieee754compatible",{"_index":3010,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.metadata",{"_index":3007,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.streaming",{"_index":3013,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.bodyqueryoptions",{"_index":2993,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifmatch",{"_index":3001,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifnonematch",{"_index":3004,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.fetchpolicy",{"_index":2992,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.headers",{"_index":3041,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.jsonbatchformat",{"_index":1626,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.options.params",{"_index":3050,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.continueonerror",{"_index":3034,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.includeannotations",{"_index":3026,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.maxpagesize",{"_index":3024,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.omitnullvalues",{"_index":3030,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.return",{"_index":3021,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.stripmetadata",{"_index":3183,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.api.options.withcredentials",{"_index":2990,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.requester",{"_index":1598,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.servicerooturl}${this.path",{"_index":3078,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.servicerooturl}${this.pathwithparams",{"_index":3079,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.apinameorentitytype",{"_index":2069,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.assertarray",{"_index":2748,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().every(predicate",{"_index":2743,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().filter((v",{"_index":2736,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().find(predicate",{"_index":2744,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().push(value",{"_index":2734,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().some(predicate",{"_index":2742,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray()[index",{"_index":2741,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(false",{"_index":2754,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(true",{"_index":2752,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.base",{"_index":2257,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.body",{"_index":3135,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.body)['d",{"_index":3165,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.bodyqueryoptions",{"_index":1430,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.length",{"_index":3082,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.map((name",{"_index":3072,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.some((name",{"_index":3083,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bound",{"_index":1887,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.buildentry(payload",{"_index":1788,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey([...(scope",{"_index":1789,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey(scope",{"_index":1797,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.cacheability",{"_index":3240,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.callables",{"_index":3279,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.find((c",{"_index":3294,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.foreach((callable",{"_index":3306,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.checkversion(document",{"_index":1122,"title":{},"body":{"classes/Field.html":{}}}],["this.children",{"_index":2281,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.client",{"_index":3334,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["this.client.apifor(this.apinameorentitytype",{"_index":1488,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["this.client.entityset(this.name",{"_index":2119,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.client.singleton(this.name",{"_index":3347,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.collection",{"_index":1928,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.complete",{"_index":1574,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.composable",{"_index":1889,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.configs",{"_index":1984,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["this.containers",{"_index":3282,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.containers.reduce",{"_index":3287,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.context",{"_index":1303,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.context?.entityset",{"_index":1294,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.context?.type",{"_index":1296,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.create(attrs",{"_index":2143,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.default",{"_index":2180,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.deleterefby",{"_index":1438,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.deserialize(this.default",{"_index":2213,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.entities",{"_index":3276,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities().create(attrs",{"_index":2130,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().entity(key",{"_index":2120,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchall(options",{"_index":2126,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchmany(top",{"_index":2128,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchone(options",{"_index":2129,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities.find((e",{"_index":3291,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.foreach((config",{"_index":3304,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entity",{"_index":3349,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.entity(key",{"_index":2131,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entitysetpath",{"_index":1885,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.entitysets",{"_index":2048,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["this.entitysets.find((e",{"_index":3301,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entitytype",{"_index":2071,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.entries",{"_index":1772,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.entries.delete(k",{"_index":1804,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.foreach((entry",{"_index":1798,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.get(key",{"_index":1792,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.set(key",{"_index":1790,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.enum().validate(value",{"_index":2196,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.enums",{"_index":3273,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.find((e",{"_index":3289,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.foreach((enu",{"_index":3302,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.error(response",{"_index":1578,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.escape",{"_index":382,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.factory.entityset",{"_index":3564,"title":{},"body":{"index.html":{}}}],["this.fetchpolicy",{"_index":1428,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.field.tojson",{"_index":616,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.fields",{"_index":2286,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields().find",{"_index":2408,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.fields().map(mapper",{"_index":2411,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.find((s",{"_index":2640,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.findannotation((a",{"_index":1254,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.findchildparser(predicate",{"_index":2285,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.flags",{"_index":2401,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.forget",{"_index":1791,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.functions[name",{"_index":1338,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.get(req.cachekey",{"_index":2470,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.getfieldvaluebyattribute",{"_index":1124,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects",{"_index":1129,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects(dataservices",{"_index":1143,"title":{},"body":{"classes/Field.html":{}}}],["this.getresponse(req",{"_index":1812,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.group",{"_index":1546,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.group.tojson",{"_index":515,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.handlefetch(req",{"_index":1807,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.handlemutate(req",{"_index":1809,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.headers",{"_index":1422,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponse.html":{}}}],["this.headers.get(cache_control",{"_index":3161,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(content_type",{"_index":3142,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(headerkey",{"_index":3151,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(key",{"_index":3174,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(location_header",{"_index":3158,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(preference_applied",{"_index":3155,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.getall(name",{"_index":3136,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.helper",{"_index":1299,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.annotations(data",{"_index":1293,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.attributes(data",{"_index":1292,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.count(this.annotations",{"_index":1340,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.deltalink(this.annotations",{"_index":1344,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.editlink(this.annotations",{"_index":1318,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entities(data",{"_index":1339,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entity(data",{"_index":1308,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.etag(this.annotations",{"_index":1310,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.functions(this.annotations",{"_index":1336,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.id(this.annotations",{"_index":1309,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediacontenttype(this.annotations",{"_index":1324,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaeditlink(this.annotations",{"_index":1322,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaetag(this.annotations",{"_index":1312,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediareadlink(this.annotations",{"_index":1320,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.metadataetag(this.annotations",{"_index":1314,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.nextlink(this.annotations",{"_index":1342,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.properties(this.annotations",{"_index":1327,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.property(data",{"_index":1306,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.readlink(this.annotations",{"_index":1316,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.type(this.annotations",{"_index":1295,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.id",{"_index":1544,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.ieee754compatible",{"_index":3228,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.isenumtype",{"_index":1939,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.isexpired(entry",{"_index":1793,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.isquerybody",{"_index":3069,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.isstructuredtype",{"_index":1942,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.istypeof(schema.type",{"_index":3322,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.istypeof(type",{"_index":2275,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.jsonbatchformat",{"_index":1442,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.keys",{"_index":2322,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.location",{"_index":3232,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxage",{"_index":3238,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxlength",{"_index":2182,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.members",{"_index":2389,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.metadata",{"_index":3225,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.modify(key",{"_index":2154,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.n",{"_index":2727,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.name",{"_index":373,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.names",{"_index":586,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.names.push(name",{"_index":594,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.namespace",{"_index":1948,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["this.namespace}.${this.name",{"_index":1954,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.namespace}.${this.name}'${name",{"_index":2421,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.namespace}.${this.name}'${names.join",{"_index":2418,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.name}(${params.join",{"_index":379,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.navigation",{"_index":2186,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.next(response",{"_index":1573,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.nextlink",{"_index":1345,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.nonparenthesisforemptyparameterfunction",{"_index":1440,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.normalize",{"_index":375,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.nullable",{"_index":1926,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.o.delete(this.n",{"_index":2761,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n",{"_index":2728,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n).filter((v",{"_index":2757,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n).length",{"_index":2738,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n)[0",{"_index":2740,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.has(this.n",{"_index":2733,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.set",{"_index":2735,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.set(this.n",{"_index":2731,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.observe",{"_index":2981,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.odata",{"_index":3603,"title":{},"body":{"index.html":{}}}],["this.odata.fromjson(json",{"_index":3590,"title":{},"body":{"index.html":{}}}],["this.op",{"_index":468,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.open",{"_index":2259,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.option",{"_index":631,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.levels",{"_index":986,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.skip",{"_index":980,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.top",{"_index":983,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.options",{"_index":3171,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.clear",{"_index":2822,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression",{"_index":2778,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.compute",{"_index":2788,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.expand",{"_index":2783,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.filter",{"_index":2799,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.orderby",{"_index":2803,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.search",{"_index":2796,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.select",{"_index":2780,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.helper.context",{"_index":3167,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.option",{"_index":2801,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.compute",{"_index":2789,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.expand",{"_index":2832,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.filter",{"_index":2842,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.format",{"_index":2792,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.orderby",{"_index":2845,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.search",{"_index":2797,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.select",{"_index":2829,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.skip",{"_index":2808,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.skiptoken",{"_index":2810,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.top",{"_index":2806,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.transform",{"_index":2837,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.expand",{"_index":2784,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.filter",{"_index":2800,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.orderby",{"_index":2804,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.select",{"_index":2781,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.transform",{"_index":2794,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.compute",{"_index":2835,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.expand",{"_index":2833,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.filter",{"_index":2843,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.orderby",{"_index":2846,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.search",{"_index":2840,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.select",{"_index":2830,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.skip",{"_index":2817,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.skiptoken",{"_index":2815,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.top",{"_index":2819,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.transform",{"_index":2838,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.toqueryarguments",{"_index":2824,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.version",{"_index":3164,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.op}(${left",{"_index":476,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.order",{"_index":3371,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.paging(query",{"_index":2847,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.parameters",{"_index":1951,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.find((p",{"_index":1966,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.foreach((p",{"_index":1964,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.params",{"_index":1420,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.params.keys().length",{"_index":3075,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.parent",{"_index":2276,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.fields",{"_index":2300,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.issubtypeof(type",{"_index":2277,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.keys",{"_index":2303,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parse(parser",{"_index":2208,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser",{"_index":1891,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.binding",{"_index":1903,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.configure",{"_index":1899,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.deserialize(value",{"_index":1900,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.encode(v",{"_index":1934,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.encode(value",{"_index":1902,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.field(enu",{"_index":2392,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.fields(value",{"_index":2391,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.mapfields(mapper",{"_index":2393,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.pack(value",{"_index":2395,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.return",{"_index":1895,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.serialize(v",{"_index":1933,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.serialize(value",{"_index":1901,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.tojsonschema(options",{"_index":2217,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser.unpack(value",{"_index":2394,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parseroptions",{"_index":1930,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.path",{"_index":3077,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.path.endswith($batch",{"_index":3085,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.pathandparams",{"_index":2617,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["this.path}?${this.params",{"_index":3076,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.payload",{"_index":3169,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.precision",{"_index":2188,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.prefer",{"_index":1436,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.properties.get(name",{"_index":1331,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.property",{"_index":2172,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.put(req.cachekey",{"_index":2468,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.putresponse(req",{"_index":1818,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.queries",{"_index":3561,"title":{},"body":{"index.html":{}}}],["this.referencedproperty",{"_index":2173,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.references",{"_index":1128,"title":{},"body":{"classes/Field.html":{}}}],["this.referentials",{"_index":2177,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.referentials.length",{"_index":2253,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.reportprogress",{"_index":2979,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.request.body",{"_index":1571,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.headers",{"_index":1559,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.method",{"_index":1554,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.pathwithparams",{"_index":1555,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.resource",{"_index":2976,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entities",{"_index":3185,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entity",{"_index":3184,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(property",{"_index":3187,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(value",{"_index":3190,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.pathandparams",{"_index":2997,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.resource.serialize(this._body",{"_index":2988,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.restore",{"_index":2485,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.restorerequester(handler",{"_index":1624,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.return",{"_index":1949,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.scale",{"_index":2190,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.schema",{"_index":3317,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.alias",{"_index":3320,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.api",{"_index":3318,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.namespace}.${this.name",{"_index":1894,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataSchemaElement.html":{}}}],["this.schemas",{"_index":1142,"title":{},"body":{"classes/Field.html":{}}}],["this.scope(r",{"_index":1824,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.scope(req",{"_index":2466,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.segment.key",{"_index":2658,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.name",{"_index":2652,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.parameters",{"_index":2663,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.path",{"_index":2656,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.type",{"_index":2654,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments",{"_index":2607,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.segments.get(pathsegment.action",{"_index":2669,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.entityset",{"_index":2667,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.function",{"_index":2670,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.navigationproperty",{"_index":2673,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.property",{"_index":2672,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.singleton",{"_index":2668,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.keys(values",{"_index":2671,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.send(options).pipe(map((response",{"_index":1650,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendjson(options",{"_index":1627,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendlegacy(options",{"_index":1628,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.serialize(value",{"_index":2422,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.service",{"_index":2073,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.skip(skip",{"_index":2816,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken(skiptoken",{"_index":2814,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.status",{"_index":3137,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.statustext",{"_index":3138,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.storage",{"_index":2484,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storage.setitem",{"_index":2488,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.store",{"_index":2487,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storerequester",{"_index":1621,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.streaming",{"_index":3227,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.stringasenum",{"_index":1418,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.stripmetadata",{"_index":1426,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.structured().validate(value",{"_index":2195,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtype",{"_index":2175,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtypeschema",{"_index":2144,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.tags(res",{"_index":2467,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.term",{"_index":1243,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.timeout",{"_index":1771,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.titleize(description",{"_index":2345,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tojson(parser",{"_index":2212,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tolegacy",{"_index":1549,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.top(top",{"_index":2818,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.type",{"_index":1924,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.type.startswith('edm",{"_index":1937,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.update(key",{"_index":2155,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.url",{"_index":3139,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.validate(v",{"_index":2194,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.value",{"_index":2399,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this.values",{"_index":374,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values.clear",{"_index":2909,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.delete(key",{"_index":2907,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(key",{"_index":2878,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.compute",{"_index":2888,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.count",{"_index":2896,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.expand",{"_index":2886,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.filter",{"_index":2890,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.levels",{"_index":2895,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.orderby",{"_index":2891,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.search",{"_index":2889,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.select",{"_index":2885,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.skip",{"_index":2893,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.skiptoken",{"_index":2894,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.top",{"_index":2892,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.transform",{"_index":2887,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.has(key",{"_index":2901,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.keys",{"_index":2903,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.keys()].reduce((acc",{"_index":2883,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.map((v",{"_index":380,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values.set(key",{"_index":2898,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values[key",{"_index":622,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[name",{"_index":641,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.expand",{"_index":974,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.filter",{"_index":633,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.orderby",{"_index":978,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.search",{"_index":976,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.select",{"_index":971,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.version",{"_index":1123,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.withcredentials",{"_index":1424,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["through",{"_index":2528,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["throw",{"_index":1157,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["throwerror",{"_index":1761,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["time",{"_index":110,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/DateAndTimeFunctions.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["time(value",{"_index":439,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["timeofday",{"_index":117,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["timeout",{"_index":1707,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["title",{"_index":1872,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["titleize",{"_index":1832,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleize(term",{"_index":1867,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleized",{"_index":1877,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["todo",{"_index":1550,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["tojson",{"_index":333,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tojsonschema",{"_index":2425,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["tojsonschema(options",{"_index":2216,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["tolegacy",{"_index":1498,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tolower",{"_index":3470,"title":{},"body":{"classes/StringFunctions.html":{}}}],["tolower(value",{"_index":412,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tools",{"_index":2900,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["top",{"_index":71,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["top(n",{"_index":982,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["top(opts",{"_index":2805,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["toqueryarguments",{"_index":2850,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tort",{"_index":3689,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":332,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totaloffsetminutes",{"_index":928,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totaloffsetminutes(value",{"_index":441,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totalseconds",{"_index":929,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totalseconds(value",{"_index":443,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["toupper",{"_index":3471,"title":{},"body":{"classes/StringFunctions.html":{}}}],["toupper(value",{"_index":414,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["transform",{"_index":69,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["transform(opts",{"_index":2793,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["trim",{"_index":3230,"title":{},"body":{"classes/ODataResponseOptions.html":{},"classes/StringFunctions.html":{}}}],["trim(value",{"_index":416,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["trippin",{"_index":3549,"title":{},"body":{"index.html":{}}}],["trippinconfig",{"_index":3547,"title":{},"body":{"index.html":{}}}],["trippinmodule",{"_index":3548,"title":{},"body":{"index.html":{}}}],["trips",{"_index":3599,"title":{},"body":{"index.html":{}}}],["true",{"_index":371,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["try",{"_index":1117,"title":{},"body":{"classes/Field.html":{}}}],["tslib",{"_index":3493,"title":{},"body":{"dependencies.html":{}}}],["tuple[0].isstopped",{"_index":1641,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tuple[0].onload(tuple[1",{"_index":1642,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#batch",{"_index":1581,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#singleton",{"_index":3337,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["type",{"_index":26,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined",{"_index":1878,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["type(value",{"_index":2653,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["type.startswith(this.alias",{"_index":3286,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.startswith(this.namespace",{"_index":3285,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.ts",{"_index":709,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts:1",{"_index":766,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:10",{"_index":761,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:11",{"_index":762,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:111",{"_index":2442,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:12",{"_index":897,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:13",{"_index":895,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:131",{"_index":2437,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:14",{"_index":2397,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:141",{"_index":2443,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:150",{"_index":2446,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:17",{"_index":716,"title":{},"body":{"classes/CsdlComplexType.html":{}}}],["type.ts:170",{"_index":2444,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:174",{"_index":2441,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:19",{"_index":2370,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:22",{"_index":2398,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:3",{"_index":769,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:30",{"_index":757,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:31",{"_index":2433,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:32",{"_index":2434,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:33",{"_index":759,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:34",{"_index":2432,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:35",{"_index":2377,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:36",{"_index":2431,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:37",{"_index":2430,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:39",{"_index":758,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:4",{"_index":768,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:41",{"_index":2159,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:42",{"_index":2158,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:44",{"_index":2374,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:45",{"_index":801,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:46",{"_index":802,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:49",{"_index":842,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:5",{"_index":770,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:50",{"_index":843,"title":{},"body":{"classes/CsdlPropertyRef.html":{},"classes/ODataReferential.html":{}}}],["type.ts:51",{"_index":2435,"title":{},"body":{"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["type.ts:53",{"_index":2380,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:6",{"_index":767,"title":{},"body":{"classes/CsdlEnumType.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:63",{"_index":2371,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:69",{"_index":2439,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:7",{"_index":2369,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:73",{"_index":2386,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:77",{"_index":2438,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:8",{"_index":896,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:83",{"_index":2372,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:87",{"_index":2388,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:9",{"_index":898,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:91",{"_index":2385,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:92",{"_index":2440,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:97",{"_index":2436,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["typealiases",{"_index":3711,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedefinition",{"_index":1072,"title":{},"body":{"classes/Field.html":{}}}],["typedefinitions",{"_index":869,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["typefunctions",{"_index":450,"title":{"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["typeof",{"_index":363,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types",{"_index":159,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["types(undefined",{"_index":2580,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["types.isarray(this.o.get(this.n",{"_index":2732,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isarray(this.o.get(this.n)[0",{"_index":2739,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isarray(value",{"_index":2879,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(errors",{"_index":2201,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(params",{"_index":627,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(this.o.get(this.n",{"_index":2729,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(this.segment.key",{"_index":2660,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.segment.parameters",{"_index":2665,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.values.get(key",{"_index":2877,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(this.values[key",{"_index":620,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(v",{"_index":2758,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(value",{"_index":2341,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["types.isfunction(opts",{"_index":2777,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(data",{"_index":3181,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(options.body",{"_index":3059,"title":{},"body":{"classes/ODataRequest.html":{}}}],["types.isplainobject(payload",{"_index":3188,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(this.o.get(this.n",{"_index":2746,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(this.payload",{"_index":3168,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(v",{"_index":2326,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["types.isplainobject(value",{"_index":2202,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.rawtype(this",{"_index":349,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types.rawtype(v).endswith('expression",{"_index":2881,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.rawtype(value).endswith('expression",{"_index":623,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["typescript",{"_index":2521,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"properties.html":{}}}],["unchanged",{"_index":3513,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":249,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["underlayingtype",{"_index":911,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["underlyingtype",{"_index":764,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["unicode",{"_index":819,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["union",{"_index":1270,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["union(other",{"_index":1284,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["unique",{"_index":82,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["united",{"_index":3582,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1987,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["unpack",{"_index":2368,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpack(value",{"_index":2387,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpacked",{"_index":3744,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unset",{"_index":2684,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unset(path",{"_index":2718,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unsigned",{"_index":100,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["unsuccessful",{"_index":1575,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["update",{"_index":1271,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/enumerations.html":{}}}],["update(attrs",{"_index":3343,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["update(data",{"_index":1286,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["update(key",{"_index":2112,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["update/patch",{"_index":2153,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["updating",{"_index":3523,"title":{},"body":{"index.html":{}}}],["uri",{"_index":790,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["url",{"_index":233,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["urlwithparams",{"_index":2923,"title":{},"body":{"classes/ODataRequest.html":{}}}],["usage",{"_index":3535,"title":{},"body":{"index.html":{}}}],["use",{"_index":1370,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSchemaElement.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":2537,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["usevalue",{"_index":2531,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["using",{"_index":1745,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["utf",{"_index":91,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["utils",{"_index":323,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["utils/arrays",{"_index":1536,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/http",{"_index":1537,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["utils/odata",{"_index":3270,"title":{},"body":{"classes/ODataSchema.html":{}}}],["utils/strings",{"_index":1538,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/types",{"_index":3117,"title":{},"body":{"classes/ODataResponse.html":{}}}],["v",{"_index":2209,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["v.render",{"_index":2882,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["v2",{"_index":3703,"title":{},"body":{"properties.html":{}}}],["v3",{"_index":3702,"title":{},"body":{"properties.html":{}}}],["v4",{"_index":3619,"title":{},"body":{"index.html":{},"properties.html":{}}}],["v4.0",{"_index":1400,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v4.01",{"_index":2766,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["v4.01.html#sec_requestingthejsonformat",{"_index":1397,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v[field.name",{"_index":2327,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["valid",{"_index":2772,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["validate",{"_index":2192,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["validate(member",{"_index":2445,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["value",{"_index":60,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["value(v",{"_index":2720,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["value).reduce",{"_index":2413,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["value.length",{"_index":2199,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["value.map((v",{"_index":1932,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["value.render",{"_index":366,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["value.some((v",{"_index":2880,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value.tojson",{"_index":2884,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value/s",{"_index":226,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["value[f.name",{"_index":2289,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["valued",{"_index":97,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["values",{"_index":130,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["values.map((v",{"_index":377,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.push(length",{"_index":399,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values=nulls",{"_index":3032,"title":{},"body":{"classes/ODataRequest.html":{}}}],["values[index",{"_index":2612,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["van",{"_index":3634,"title":{},"body":{"license.html":{},"properties.html":{}}}],["var",{"_index":1620,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["variable",{"_index":241,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["variables",{"_index":1583,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["version",{"_index":23,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"properties.html":{}}}],["version.replace(/\\;/g",{"_index":3229,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_2_0",{"_index":3218,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_3_0",{"_index":3219,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_4_0",{"_index":1025,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["version_4_0].indexof(value",{"_index":3231,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["versions",{"_index":3613,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":3622,"title":{},"body":{"index.html":{}}}],["void",{"_index":247,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["warranties",{"_index":3674,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3669,"title":{},"body":{"license.html":{}}}],["whether",{"_index":3687,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":3626,"title":{},"body":{"index.html":{}}}],["window.addeventlistener('beforeunload",{"_index":2486,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["withcount",{"_index":2127,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"index.html":{}}}],["withcredentials",{"_index":24,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["without",{"_index":109,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"license.html":{}}}],["works",{"_index":3607,"title":{},"body":{"index.html":{}}}],["www.odata.org/getting",{"_index":3336,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["xssi_prefix",{"_index":1534,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["year",{"_index":930,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["year(value",{"_index":445,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["yes",{"_index":544,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GeoFunctions.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/TypeFunctions.html":{}}}],["zone",{"_index":111,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["zone.js",{"_index":3495,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiOptions.html":{"url":"interfaces/ApiOptions.html","title":"interface - ApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accept\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodyQueryOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            etag\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetchPolicy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jsonBatchFormat\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stripMetadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accept:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodyQueryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodyQueryOptions:         QueryOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueryOption[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etag\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etag:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetchPolicy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetchPolicy:         FetchPolicy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FetchPolicy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jsonBatchFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jsonBatchFormat:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefer:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stripMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stripMetadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticFunctions.html":{"url":"classes/ArithmeticFunctions.html","title":"class - ArithmeticFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ceiling\n                            \n                            \n                                floor\n                            \n                            \n                                round\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ceiling\n                        \n                    \n                \n            \n            \n                \nceiling(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:253\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n            \n                \nfloor(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        round\n                        \n                    \n                \n            \n            \n                \nround(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:259\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticOperators.html":{"url":"classes/ArithmeticOperators.html","title":"class - ArithmeticOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                div\n                            \n                            \n                                mod\n                            \n                            \n                                mul\n                            \n                            \n                                neg\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:395\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n            \n                \ndiv(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:404\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mod\n                        \n                    \n                \n            \n            \n                \nmod(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:407\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mul\n                        \n                    \n                \n            \n            \n                \nmul(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:401\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neg\n                        \n                    \n                \n            \n            \n                \nneg(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:410\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n            \n                \nsub(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:398\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cache.html":{"url":"interfaces/Cache.html","title":"interface - Cache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:197\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, payload: T, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:196\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionFunctions.html":{"url":"classes/CollectionFunctions.html","title":"class - CollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasSubsequence\n                            \n                            \n                                hasSubset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubsequence\n                        \n                    \n                \n            \n            \n                \nhasSubsequence(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubset\n                        \n                    \n                \n            \n            \n                \nhasSubset(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:184\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeExpression.html":{"url":"classes/ComputeExpression.html","title":"class - ComputeExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                names\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                compute\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(name: string, node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ComputeExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        compute\n                        \n                    \n                \n            \n            \n                \n                    \n                    compute(opts: (builder: ComputeExpressionBuilder,current: ComputeExpression) => void, current?: ComputeExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            ComputeExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string, opts: (e: literal type) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:75\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport {\n  Field,\n  functions,\n  ODataFunctions,\n  ODataOperators,\n  operators,\n  Renderable,\n} from './syntax';\n\nexport type ComputeExpressionBuilder = {\n  t: Required>;\n  e: () => ComputeExpression;\n};\nexport class ComputeExpression extends Expression {\n  names: string[];\n  constructor({\n    children,\n    names,\n  }: {\n    children?: Renderable[];\n    names?: string[];\n  } = {}) {\n    super({ children });\n    this.names = names || [];\n  }\n\n  static compute(\n    opts: (\n      builder: ComputeExpressionBuilder,\n      current?: ComputeExpression\n    ) => ComputeExpression,\n    current?: ComputeExpression\n  ): ComputeExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new ComputeExpression(),\n      },\n      current\n    ) as ComputeExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let children = this._children.map((n) =>\n      n.render({ aliases, escape, prefix })\n    );\n    return this.names\n      .map((name, index) => `${children[index]} as ${name}`)\n      .join(',');\n  }\n\n  clone() {\n    return new ComputeExpression({\n      children: this._children.map((c) => c.clone()),\n      names: [...this.names],\n    });\n  }\n\n  private _add(name: string, node: Renderable): ComputeExpression {\n    this.names.push(name);\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    name: string,\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ComputeExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(name, node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConditionalFunctions.html":{"url":"classes/ConditionalFunctions.html","title":"class - ConditionalFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConditionalFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                case\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        case\n                        \n                    \n                \n            \n            \n                \ncase(condition: T | string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:287\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountExpression.html":{"url":"classes/CountExpression.html","title":"class - CountExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                count\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:86\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     CountExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         CountExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count(opts: (builder: CountExpressionBuilder,current: CountExpression) => void, current?: CountExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:95\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            CountExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     CountExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F[], opts?: (e?: literal type) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:137\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            F[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     CountExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:116\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { render, Field, Renderable } from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOption.filter,\n      QueryOption.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, { aliases, escape, prefix })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Readonly>;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static count(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression\n    ) => CountExpression,\n    current?: CountExpression\n  ): CountExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new CountExpression(),\n      },\n      current\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: Field.factory>>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountField.html":{"url":"classes/CountField.html","title":"class - CountField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                filter\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     CountField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                    \n                    option(name: QueryOption, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:76\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { render, Field, Renderable } from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOption.filter,\n      QueryOption.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, { aliases, escape, prefix })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Readonly>;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static count(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression\n    ) => CountExpression,\n    current?: CountExpression\n  ): CountExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new CountExpression(),\n      },\n      current\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: Field.factory>>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAction.html":{"url":"classes/CsdlAction.html","title":"class - CsdlAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                    Optional\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType?: CsdlReturnType, isBound?: boolean, entitySetPath?: string, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlActionImport.html":{"url":"classes/CsdlActionImport.html","title":"class - CsdlActionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlActionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, action: string, entitySet?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotable.html":{"url":"classes/CsdlAnnotable.html","title":"class - CsdlAnnotable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotation.html":{"url":"classes/CsdlAnnotation.html","title":"class - CsdlAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(term: string, qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotations.html":{"url":"classes/CsdlAnnotations.html","title":"class - CsdlAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: string, annotationList: CsdlAnnotation[], qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlComplexType.html":{"url":"classes/CsdlComplexType.html","title":"class - CsdlComplexType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlComplexType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityContainer.html":{"url":"classes/CsdlEntityContainer.html","title":"class - CsdlEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actionImports\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySets\n                            \n                            \n                                    Public\n                                    Optional\n                                extend\n                            \n                            \n                                    Public\n                                    Optional\n                                functionImports\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                singletons\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, extend?: string, entitySets?: CsdlEntitySet[], singletons?: CsdlSingleton[], functionImports?: CsdlFunctionImport[], actionImports?: CsdlActionImport[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        extend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySets\n                                                  \n                                                        \n                                                                        CsdlEntitySet[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        singletons\n                                                  \n                                                        \n                                                                        CsdlSingleton[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionImports\n                                                  \n                                                        \n                                                                    CsdlFunctionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionImports\n                                                  \n                                                        \n                                                                    CsdlActionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlActionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        extend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunctionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        singletons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlSingleton[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n  constructor(\n    public name: string,\n    public extend?: string,\n    public entitySets?: CsdlEntitySet[],\n    public singletons?: CsdlSingleton[],\n    public functionImports?: CsdlFunctionImport[],\n    public actionImports?: CsdlActionImport[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntitySet.html":{"url":"classes/CsdlEntitySet.html","title":"class - CsdlEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                entityType\n                            \n                            \n                                    Public\n                                    Optional\n                                includeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBinding\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, entityType: string, navigationPropertyBinding?: CsdlNavigationPropertyBinding[], includeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBinding\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n  constructor(\n    public name: string,\n    public entityType: string,\n    public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n    public includeInServiceDocument?: boolean\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityType.html":{"url":"classes/CsdlEntityType.html","title":"class - CsdlEntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                hasStream\n                            \n                            \n                                    Public\n                                    Optional\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, key?: CsdlKey, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean, hasStream?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        CsdlKey\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        hasStream\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        hasStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlKey\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumMember.html":{"url":"classes/CsdlEnumMember.html","title":"class - CsdlEnumMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value?: number)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumType.html":{"url":"classes/CsdlEnumType.html","title":"class - CsdlEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                isFlags\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                underlyingType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, members: CsdlEnumMember[], underlyingType?: string, isFlags?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        members\n                                                  \n                                                        \n                                                                        CsdlEnumMember[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlyingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isFlags\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isFlags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumMember[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        underlyingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunction.html":{"url":"classes/CsdlFunction.html","title":"class - CsdlFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                    Optional\n                                isComposable\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType: CsdlReturnType, isBound?: boolean, entitySetPath?: string, isComposable?: boolean, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isComposable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isComposable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunctionImport.html":{"url":"classes/CsdlFunctionImport.html","title":"class - CsdlFunctionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunctionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                functionName\n                            \n                            \n                                    Public\n                                    Optional\n                                IncludeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, functionName: string, entitySet?: string, IncludeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        IncludeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        IncludeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlInclude.html":{"url":"classes/CsdlInclude.html","title":"class - CsdlInclude","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlInclude\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                namespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlIncludeAnnotations.html":{"url":"classes/CsdlIncludeAnnotations.html","title":"class - CsdlIncludeAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlIncludeAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                    Optional\n                                targetNamespace\n                            \n                            \n                                    Public\n                                termNamespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termNamespace: string, qualifier?: string, targetNamespace?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        targetNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        termNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlKey.html":{"url":"classes/CsdlKey.html","title":"class - CsdlKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                propertyRefs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyRefs: CsdlPropertyRef[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyRefs\n                                                  \n                                                        \n                                                                    CsdlPropertyRef[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        propertyRefs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlPropertyRef[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationProperty.html":{"url":"classes/CsdlNavigationProperty.html","title":"class - CsdlNavigationProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                containsTarget\n                            \n                            \n                                    Public\n                                    Optional\n                                onDelete\n                            \n                            \n                                    Public\n                                    Optional\n                                partner\n                            \n                            \n                                    Public\n                                    Optional\n                                referentialConstraints\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, partner?: string, containsTarget?: boolean, referentialConstraints?: CsdlReferentialConstraint[], onDelete?: CsdlOnDelete)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        partner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        containsTarget\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        referentialConstraints\n                                                  \n                                                        \n                                                                        CsdlReferentialConstraint[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        onDelete\n                                                  \n                                                        \n                                                                        CsdlOnDelete\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        containsTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlOnDelete\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        partner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        referentialConstraints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReferentialConstraint[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationPropertyBinding.html":{"url":"classes/CsdlNavigationPropertyBinding.html","title":"class - CsdlNavigationPropertyBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationPropertyBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                path\n                            \n                            \n                                    Public\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(path: string, target: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlNavigationPropertyBinding {\n  constructor(public path: string, public target: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlOnDelete.html":{"url":"classes/CsdlOnDelete.html","title":"class - CsdlOnDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlOnDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(action: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlParameter.html":{"url":"classes/CsdlParameter.html","title":"class - CsdlParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlProperty.html":{"url":"classes/CsdlProperty.html","title":"class - CsdlProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, defaultValue?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlPropertyRef.html":{"url":"classes/CsdlPropertyRef.html","title":"class - CsdlPropertyRef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlPropertyRef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReference.html":{"url":"classes/CsdlReference.html","title":"class - CsdlReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                includeAnnotations\n                            \n                            \n                                    Public\n                                    Optional\n                                includes\n                            \n                            \n                                    Public\n                                uri\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uri: string, includes?: CsdlInclude[], includeAnnotations?: CsdlIncludeAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        includes\n                                                  \n                                                        \n                                                                        CsdlInclude[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeAnnotations\n                                                  \n                                                        \n                                                                    CsdlIncludeAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeAnnotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlIncludeAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlInclude[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReferentialConstraint.html":{"url":"classes/CsdlReferentialConstraint.html","title":"class - CsdlReferentialConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReferentialConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                property\n                            \n                            \n                                    Public\n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(property: string, referencedProperty: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        referencedProperty\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReturnType.html":{"url":"classes/CsdlReturnType.html","title":"class - CsdlReturnType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReturnType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSchema.html":{"url":"classes/CsdlSchema.html","title":"class - CsdlSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actions\n                            \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationsList\n                            \n                            \n                                    Public\n                                    Optional\n                                complexTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                entityContainer\n                            \n                            \n                                    Public\n                                    Optional\n                                entityTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                enumTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                functions\n                            \n                            \n                                    Public\n                                namespace\n                            \n                            \n                                    Public\n                                    Optional\n                                terms\n                            \n                            \n                                    Public\n                                    Optional\n                                typeDefinitions\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string, enumTypes?: CsdlEnumType[], complexTypes?: CsdlComplexType[], entityTypes?: CsdlEntityType[], functions?: CsdlFunction[], actions?: CsdlAction[], entityContainer?: CsdlEntityContainer, typeDefinitions?: CsdlTypeDefinition[], terms?: CsdlTerm[], annotationsList?: CsdlAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        enumTypes\n                                                  \n                                                        \n                                                                        CsdlEnumType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        complexTypes\n                                                  \n                                                        \n                                                                        CsdlComplexType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityTypes\n                                                  \n                                                        \n                                                                        CsdlEntityType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functions\n                                                  \n                                                        \n                                                                    CsdlFunction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        CsdlAction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityContainer\n                                                  \n                                                        \n                                                                        CsdlEntityContainer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        typeDefinitions\n                                                  \n                                                        \n                                                                        CsdlTypeDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        terms\n                                                  \n                                                        \n                                                                        CsdlTerm[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationsList\n                                                  \n                                                        \n                                                                    CsdlAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        complexTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlComplexType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityContainer\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        enumTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTerm[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        typeDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTypeDefinition[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAnnotation,\n  CsdlAnnotable,\n  CsdlTerm,\n  CsdlAnnotations,\n} from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n    public enumTypes?: CsdlEnumType[],\n    public complexTypes?: CsdlComplexType[],\n    public entityTypes?: CsdlEntityType[],\n    public functions?: CsdlFunction[],\n    public actions?: CsdlAction[],\n    public entityContainer?: CsdlEntityContainer,\n    public typeDefinitions?: CsdlTypeDefinition[],\n    public terms?: CsdlTerm[],\n    public annotationsList?: CsdlAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSingleton.html":{"url":"classes/CsdlSingleton.html","title":"class - CsdlSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBindings\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, navigationPropertyBindings?: CsdlNavigationPropertyBinding[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBindings\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n  constructor(\n    public name: string,\n    public type: string,\n    public navigationPropertyBindings?: CsdlNavigationPropertyBinding[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuralProperty.html":{"url":"classes/CsdlStructuralProperty.html","title":"class - CsdlStructuralProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuralProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuredType.html":{"url":"classes/CsdlStructuredType.html","title":"class - CsdlStructuredType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuredType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTerm.html":{"url":"classes/CsdlTerm.html","title":"class - CsdlTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appliesTo\n                            \n                            \n                                    Public\n                                    Optional\n                                baseTerm\n                            \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, baseTerm?: string, defaultValue?: string, appliesTo?: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseTerm\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        appliesTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appliesTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTypeDefinition.html":{"url":"classes/CsdlTypeDefinition.html","title":"class - CsdlTypeDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTypeDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                underlayingType\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, underlayingType: string, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlayingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        underlayingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n  constructor(\n    public name: string,\n    public underlayingType: string,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateAndTimeFunctions.html":{"url":"classes/DateAndTimeFunctions.html","title":"class - DateAndTimeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateAndTimeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                day\n                            \n                            \n                                fractionalseconds\n                            \n                            \n                                hour\n                            \n                            \n                                maxdatetime\n                            \n                            \n                                mindatetime\n                            \n                            \n                                minute\n                            \n                            \n                                month\n                            \n                            \n                                now\n                            \n                            \n                                second\n                            \n                            \n                                time\n                            \n                            \n                                totaloffsetminutes\n                            \n                            \n                                totalseconds\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n            \n                \ndate(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        day\n                        \n                    \n                \n            \n            \n                \nday(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fractionalseconds\n                        \n                    \n                \n            \n            \n                \nfractionalseconds(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hour\n                        \n                    \n                \n            \n            \n                \nhour(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxdatetime\n                        \n                    \n                \n            \n            \n                \nmaxdatetime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:220\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mindatetime\n                        \n                    \n                \n            \n            \n                \nmindatetime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:223\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        minute\n                        \n                    \n                \n            \n            \n                \nminute(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        month\n                        \n                    \n                \n            \n            \n                \nmonth(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n            \n                \nnow()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        second\n                        \n                    \n                \n            \n            \n                \nsecond(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n            \n                \ntime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totaloffsetminutes\n                        \n                    \n                \n            \n            \n                \ntotaloffsetminutes(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:241\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalseconds\n                        \n                    \n                \n            \n            \n                \ntotalseconds(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n            \n                \nyear(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:247\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandExpression.html":{"url":"classes/ExpandExpression.html","title":"class - ExpandExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                expand\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:152\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:191\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExpandExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        expand\n                        \n                    \n                \n            \n            \n                \n                    \n                    expand(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void, current?: ExpandExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:161\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                ExpandExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F, opts?: (e?: ExpandField) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:202\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            F\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:177\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport { Field, render, Renderable } from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOption.select,\n      QueryOption.expand,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.orderBy,\n      QueryOption.skip,\n      QueryOption.top,\n      QueryOption.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, { aliases, escape, prefix })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(this.field.clone(), values);\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOption.select,\n      SelectExpression.select(opts, this.values[QueryOption.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOption.expand,\n      ExpandExpression.expand(opts, this.values[QueryOption.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  search(\n    opts: (builder: SearchExpressionBuilder) => SearchExpression\n  ) {\n    return this.option(\n      QueryOption.search,\n      SearchExpression.search(opts, this.values[QueryOption.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOption.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOption.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOption.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOption.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOption.levels, n);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Readonly>;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new ExpandExpression(),\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: F, opts?: (e: ExpandField) => void): ExpandExpression {\n    let node = new ExpandField(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandField.html":{"url":"classes/ExpandField.html","title":"class - ExpandField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                expand\n                            \n                            \n                                filter\n                            \n                            \n                                levels\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                search\n                            \n                            \n                                select\n                            \n                            \n                                skip\n                            \n                            \n                                toJSON\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExpandField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expand\n                        \n                    \n                \n            \n            \n                \nexpand(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:84\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:96\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        levels\n                        \n                    \n                \n            \n            \n                \nlevels(n: number | \"max\")\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                            number | \"max\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                    \n                    option(name: QueryOption, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:142\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderBy\n                        \n                    \n                \n            \n            \n                \norderBy(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:117\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(opts: (builder: SearchExpressionBuilder) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:108\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:72\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n            \n                \nskip(n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        top\n                        \n                    \n                \n            \n            \n                \ntop(n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:17\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport { Field, render, Renderable } from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOption.select,\n      QueryOption.expand,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.orderBy,\n      QueryOption.skip,\n      QueryOption.top,\n      QueryOption.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, { aliases, escape, prefix })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(this.field.clone(), values);\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOption.select,\n      SelectExpression.select(opts, this.values[QueryOption.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOption.expand,\n      ExpandExpression.expand(opts, this.values[QueryOption.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  search(\n    opts: (builder: SearchExpressionBuilder) => SearchExpression\n  ) {\n    return this.option(\n      QueryOption.search,\n      SearchExpression.search(opts, this.values[QueryOption.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOption.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOption.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOption.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOption.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOption.levels, n);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Readonly>;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new ExpandExpression(),\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: F, opts?: (e: ExpandField) => void): ExpandExpression {\n    let node = new ExpandField(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Expression.html":{"url":"classes/Expression.html","title":"class - Expression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Expression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/base.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                length\n                            \n                            \n                                    Abstract\n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Expression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Renderable } from './syntax';\n\nexport abstract class Expression implements Renderable {\n  protected _children: Renderable[];\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    this._children = children || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Expression';\n  }\n\n  abstract render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  }): string;\n\n  abstract clone(): Expression;\n\n  children() {\n    return this._children;\n  }\n\n  length() {\n    return this._children.length;\n  }\n\n  toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/metadata.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fieldType\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, fieldType: FieldType)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fieldType\n                                                  \n                                                        \n                                                                        FieldType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fieldType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FieldType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAction,\n  CsdlActionImport,\n  CsdlFunction,\n  CsdlFunctionImport,\n  CsdlParameter,\n  CsdlReturnType,\n} from './csdl/csdl-function-action';\nimport {\n  CsdlAnnotation,\n  CsdlAnnotations,\n  CsdlTerm,\n} from './csdl/csdl-annotation';\nimport {\n  CsdlComplexType,\n  CsdlEntityType,\n  CsdlKey,\n  CsdlPropertyRef,\n} from './csdl/csdl-structured-type';\nimport { CsdlEnumMember, CsdlEnumType } from './csdl/csdl-enum-type';\nimport {\n  CsdlInclude,\n  CsdlIncludeAnnotations,\n  CsdlReference,\n} from './csdl/csdl-reference';\nimport {\n  CsdlNavigationProperty,\n  CsdlOnDelete,\n  CsdlProperty,\n  CsdlReferentialConstraint,\n} from './csdl/csdl-structural-property';\n\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { VERSION_4_0 } from '../../constants';\n\nenum FieldType {\n  ATTRIBUTE,\n  TAG,\n}\n\nclass Field {\n  constructor(public name: string, public fieldType: FieldType) {}\n}\n\nexport class ODataMetadata {\n  // TAGS\n  private static readonly TAG_EDMX = 'edmx:Edmx';\n  private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n  private static readonly TAG_REFERENCE = 'edmx:Reference';\n  private static readonly TAG_INCLUDE = 'edmx:Include';\n  private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n  private static readonly TAG_TERM = 'Term';\n  private static readonly TAG_ANNOTATIONS = 'Annotations';\n  private static readonly TAG_ANNOTATION = 'Annotation';\n  private static readonly TAG_SCHEMA = 'Schema';\n  private static readonly TAG_ENUM_TYPE = 'EnumType';\n  private static readonly TAG_MEMBER = 'Member';\n  private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n  private static readonly TAG_ENTITY_TYPE = 'EntityType';\n  private static readonly TAG_PROPERTY = 'Property';\n  private static readonly TAG_KEY = 'Key';\n  private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n  private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n  private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n  private static readonly TAG_ON_DELETE = 'OnDelete';\n  private static readonly TAG_FUNCTION = 'Function';\n  private static readonly TAG_RETURN_TYPE = 'ReturnType';\n  private static readonly TAG_PARAMETER = 'Parameter';\n  private static readonly TAG_ACTION = 'Action';\n  private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n  private static readonly TAG_ENTITY_SET = 'EntitySet';\n  private static readonly TAG_SINGLETON = 'Singleton';\n  private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n  private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n  private static readonly TAG_NAVIGATION_PROPERTY_BINDING =\n    'NavigationPropertyBinding';\n  private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n  // ATTRIBUTES\n  private static readonly ATTRIBUTE_VERSION = 'Version';\n  private static readonly ATTRIBUTE_URI = 'Uri';\n  private static readonly ATTRIBUTE_ALIAS = 'Alias';\n  private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n  private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n  private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n  private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n  private static readonly ATTRIBUTE_TERM = 'Term';\n  private static readonly ATTRIBUTE_NAME = 'Name';\n  private static readonly ATTRIBUTE_VALUE = 'Value';\n  private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n  private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n  private static readonly ATTRIBUTE_TYPE = 'Type';\n  private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n  private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n  private static readonly ATTRIBUTE_PRECISION = 'Precision';\n  private static readonly ATTRIBUTE_SCALE = 'Scale';\n  private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n  private static readonly ATTRIBUTE_SRID = 'SRID';\n  private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n  private static readonly ATTRIBUTE_PARTNER = 'Partner';\n  private static readonly ATTRIBUTE_PROPERTY = 'Property';\n  private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n  private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n  private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n  private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n  private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n  private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n  private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n  private static readonly ATTRIBUTE_PATH = 'Path';\n  private static readonly ATTRIBUTE_TARGET = 'Target';\n  private static readonly ATTRIBUTE_FUNCTION = 'Function';\n  private static readonly ATTRIBUTE_ACTION = 'Action';\n  private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n  private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT =\n    'IncludeInServiceDocument';\n  private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n  private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n  private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n  private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n  private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n  private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n  public readonly version: string;\n  public readonly references: CsdlReference[];\n  public readonly schemas: CsdlSchema[];\n\n  constructor(xml: string) {\n    try {\n      const parser: DOMParser = new DOMParser();\n      const document: Document = parser.parseFromString(xml, 'text/xml');\n\n      this.checkVersion(document);\n\n      this.version = this.getFieldValueByAttribute(\n        new Field(ODataMetadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n        document.documentElement.attributes\n      );\n\n      this.references = this.getObjects(\n        document.documentElement,\n        ODataMetadata.TAG_REFERENCE,\n        [\n          new Field(ODataMetadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n          new Field(ODataMetadata.TAG_INCLUDE, FieldType.TAG),\n          new Field(ODataMetadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n          new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n        ]\n      );\n\n      const dataServices: Element =\n        document.documentElement.getElementsByTagName(\n          ODataMetadata.TAG_DATA_SERVICES\n        )[0];\n      this.schemas = this.getObjects(dataServices, ODataMetadata.TAG_SCHEMA, [\n        new Field(ODataMetadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.TAG_ENUM_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_FUNCTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ACTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TERM, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATIONS, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n      ]);\n    } catch (error) {\n      throw new Error('Unable to parse metadata, ' + error);\n    }\n  }\n\n  protected checkVersion(document: Document) {\n    // check version\n    const attributes: NamedNodeMap = document.documentElement.attributes;\n    if (!attributes) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const attr: Attr | null = attributes.getNamedItem('Version');\n    if (attr === null) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const odataVersion = attr?.nodeValue;\n    if (odataVersion !== VERSION_4_0) {\n      throw new Error('OData version \"' + odataVersion + '\" is not supported');\n    }\n  }\n\n  protected getObjects(\n    parentElement: Element,\n    tag: string,\n    fieldNames: Field[]\n  ): any[] {\n    let objects: any[] = [];\n\n    const children: HTMLCollection = parentElement.children;\n    for (let index = 0; index \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field-1.html":{"url":"classes/Field-1.html","title":"class - Field-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ProxyHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                factory\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                    \n                    factory(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:23\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(target: T, key: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(target: T, key: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FieldParser.html":{"url":"interfaces/FieldParser.html","title":"interface - FieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Parser\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxLength\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nullable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            precision\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scale\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxLength\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxLength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nullable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nullable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precision\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        precision:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scale:     number | \"variable\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \"variable\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Function.html":{"url":"classes/Function.html","title":"class - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, values: any[], normalize: boolean, escape: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        escape\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; name: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:105\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeoFunctions.html":{"url":"classes/GeoFunctions.html","title":"class - GeoFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeoFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                geoDistance\n                            \n                            \n                                geoIntersects\n                            \n                            \n                                geoLength\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        geoDistance\n                        \n                    \n                \n            \n            \n                \ngeoDistance(value: T, point: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:275\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    point\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoIntersects\n                        \n                    \n                \n            \n            \n                \ngeoIntersects(value: T, polygon: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:278\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    polygon\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoLength\n                        \n                    \n                \n            \n            \n                \ngeoLength(line: T, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:281\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    line\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grouping.html":{"url":"classes/Grouping.html","title":"class - Grouping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grouping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(group: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:415\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:441\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Grouping\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:429\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:422\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; group: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:418\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Lambda.html":{"url":"classes/Lambda.html","title":"class - Lambda","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Lambda\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:446\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:490\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Lambda\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:466\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:457\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { $type: any; op: string; values: {}; alias: string; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:453\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaOperators.html":{"url":"classes/LambdaOperators.html","title":"class - LambdaOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                all\n                            \n                            \n                                any\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n            \n                \nall(field: T, value: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:504\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        any\n                        \n                    \n                \n            \n            \n                \nany(field: T, value: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:500\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogicalOperators.html":{"url":"classes/LogicalOperators.html","title":"class - LogicalOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogicalOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                eq\n                            \n                            \n                                ge\n                            \n                            \n                                gt\n                            \n                            \n                                has\n                            \n                            \n                                in\n                            \n                            \n                                le\n                            \n                            \n                                lt\n                            \n                            \n                                ne\n                            \n                            \n                                not\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        eq\n                        \n                    \n                \n            \n            \n                \neq(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:357\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ge\n                        \n                    \n                \n            \n            \n                \nge(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:366\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gt\n                        \n                    \n                \n            \n            \n                \ngt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:386\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        in\n                        \n                    \n                \n            \n            \n                \nin(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:389\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        le\n                        \n                    \n                \n            \n            \n                \nle(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:372\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lt\n                        \n                    \n                \n            \n            \n                \nlt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:369\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ne\n                        \n                    \n                \n            \n            \n                \nne(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:360\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:383\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotatable.html":{"url":"classes/ODataAnnotatable.html","title":"class - ODataAnnotatable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotatable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:30\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotation.html":{"url":"classes/ODataAnnotation.html","title":"class - ODataAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bool\n                            \n                            \n                                    Optional\n                                int\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                properties\n                            \n                            \n                                    Optional\n                                string\n                            \n                            \n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annot: AnnotationConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annot\n                                                  \n                                                        \n                                                                        AnnotationConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        int\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        string\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotations.html":{"url":"classes/ODataAnnotations.html","title":"class - ODataAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                    Abstract\n                                data\n                            \n                            \n                                    Abstract\n                                union\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySet\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(helper: ODataVersionHelper, annotations: Map, context?: ODataContext)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        ODataVersionHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotations\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        ODataContext\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        data\n                        \n                    \n                \n            \n            \n                \n                    \n                    data(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        union\n                        \n                    \n                \n            \n            \n                \n                    \n                    union(other: ODataAnnotations)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySet\n                    \n                \n\n                \n                    \n                        getentitySet()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:26\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext\n  ) {}\n\n  attributes(\n    data: { [key: string]: any },\n    metadata: ODataMetadataType\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [key: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [key: string]: any }): { [key: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection'\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataApiOptions.html":{"url":"classes/ODataApiOptions.html","title":"class - ODataApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ApiOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accept\n                            \n                            \n                                bodyQueryOptions\n                            \n                            \n                                deleteRefBy\n                            \n                            \n                                etag\n                            \n                            \n                                fetchPolicy\n                            \n                            \n                                headers\n                            \n                            \n                                jsonBatchFormat\n                            \n                            \n                                nonParenthesisForEmptyParameterFunction\n                            \n                            \n                                params\n                            \n                            \n                                    Optional\n                                prefer\n                            \n                            \n                                stringAsEnum\n                            \n                            \n                                stripMetadata\n                            \n                            \n                                version\n                            \n                            \n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    parserOptions\n                                \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:103\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accept\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:66\n                        \n                    \n\n            \n                \n                    Customize accept header with OData options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOption[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:61\n                        \n                    \n\n            \n                \n                    Send query options in the request body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRefBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"path\" | \"id\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:29\n                        \n                    \n\n            \n                \n                    Delete reference by path or by id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        etag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { ifMatch: true, ifNoneMatch: false }\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FetchPolicy\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:45\n                        \n                    \n\n            \n                \n                    Cache fetch policy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:53\n                        \n                    \n\n            \n                \n                    Extra headers to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jsonBatchFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:41\n                        \n                    \n\n            \n                \n                    Use JSON Batch Format\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nonParenthesisForEmptyParameterFunction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:33\n                        \n                    \n\n            \n                \n                    No use parenthesis for empty parameters functions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:49\n                        \n                    \n\n            \n                \n                    Extra params to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        prefer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:25\n                        \n                    \n\n            \n                \n                    Send enum as string in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:37\n                        \n                    \n\n            \n                \n                    Strip metadata from the response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:21\n                        \n                    \n\n            \n                \n                    Default OData version\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:57\n                        \n                    \n\n            \n                \n                    Http request with credentials\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        parserOptions\n                    \n                \n\n                \n                    \n                        getparserOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:123\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:134\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  QueryOption,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum: boolean;\n  /**\n   * Delete reference by path or by id\n   */\n  deleteRefBy: 'path' | 'id';\n  /**\n   * No use parenthesis for empty parameters functions\n   */\n  nonParenthesisForEmptyParameterFunction: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Use JSON Batch Format\n   */\n  jsonBatchFormat: boolean;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOption[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n    /**\n     * @link https://devblogs.microsoft.com/odata/extension-omit-null-value-properties-in-asp-net-core-odata/\n     */\n    omitNullValues?: boolean;\n  };\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum || false;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n    this.deleteRefBy = config.deleteRefBy ?? 'path';\n    this.nonParenthesisForEmptyParameterFunction =\n      config.nonParenthesisForEmptyParameterFunction ?? false;\n    this.jsonBatchFormat = config.jsonBatchFormat ?? false;\n  }\n\n  get parserOptions(): ParserOptions {\n    return {\n      version: this.version,\n      stringAsEnum: this.stringAsEnum,\n      deleteRefBy: this.deleteRefBy,\n      nonParenthesisForEmptyParameterFunction:\n        this.nonParenthesisForEmptyParameterFunction,\n      ...this.accept,\n    };\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBaseService.html":{"url":"classes/ODataBaseService.html","title":"class - ODataBaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient, name: string, apiNameOrEntityType?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/base.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apiNameOrEntityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:63\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:69\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:75\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:81\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:87\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:32\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:38\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:44\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:100\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:105\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType: \"entity\" | \"entities\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:110\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"entity\" | \"entities\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/base.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport { ODataClient } from '../client';\nimport {\n  ODataActionOptions,\n  ODataActionResource,\n  ODataEntities,\n  ODataEntity,\n  ODataFunctionOptions,\n  ODataFunctionResource,\n  ODataNavigationPropertyResource,\n  ODataProperty,\n  ODataQueryArgumentsOptions,\n} from '../resources';\n\nexport abstract class ODataBaseService {\n  constructor(\n    protected client: ODataClient,\n    protected name: string,\n    protected apiNameOrEntityType?: string\n  ) {}\n\n  get api() {\n    return this.client.apiFor(this.apiNameOrEntityType);\n  }\n\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entity',\n    options?: ODataFunctionOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entities',\n    options?: ODataFunctionOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property',\n    options?: ODataFunctionOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'none',\n    options?: ODataFunctionOptions\n  ): Observable;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataFunctionOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entity',\n    options?: ODataActionOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entities',\n    options?: ODataActionOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property',\n    options?: ODataActionOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'none',\n    options?: ODataActionOptions\n  ): Observable;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataActionOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity' | 'entities',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.fetch({ responseType: responseType as any, ...options });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBatchRequest.html":{"url":"classes/ODataBatchRequest.html","title":"class - ODataBatchRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBatchRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/types/batch.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Subject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                            \n                                id\n                            \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onError\n                            \n                            \n                                onLoad\n                            \n                            \n                                toJson\n                            \n                            \n                                toLegacy\n                            \n                            \n                                    \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: ODataRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        ODataRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataRequest\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:51\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onError\n                        \n                    \n                \n            \n            \n                \nonError(response: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLoad\n                        \n                    \n                \n            \n            \n                \nonLoad(response: HttpResponseBase)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                HttpResponseBase\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { [name: string]: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLegacy\n                        \n                    \n                \n            \n            \n                \ntoLegacy()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  HttpErrorResponse,\n  HttpHeaders,\n  HttpResponse,\n  HttpResponseBase,\n} from '@angular/common/http';\nimport {\n  concatMap,\n  firstValueFrom,\n  map,\n  Observable,\n  of,\n  Subject,\n  switchMap,\n} from 'rxjs';\nimport { ODataApi } from '../../api';\nimport {\n  $BATCH,\n  ACCEPT,\n  APPLICATION_HTTP,\n  APPLICATION_JSON,\n  BATCH_PREFIX,\n  BINARY,\n  BOUNDARY_PREFIX_SUFFIX,\n  CHANGESET_PREFIX,\n  CONTENT_ID,\n  CONTENT_TRANSFER_ENCODING,\n  CONTENT_TYPE,\n  HTTP11,\n  MULTIPART_MIXED,\n  MULTIPART_MIXED_BOUNDARY,\n  NEWLINE,\n  NEWLINE_REGEXP,\n  ODATA_VERSION,\n  VERSION_4_0,\n  XSSI_PREFIX,\n} from '../../constants';\nimport { PathSegment } from '../../types';\nimport { Arrays } from '../../utils/arrays';\nimport { Http } from '../../utils/http';\nimport { Strings } from '../../utils/strings';\nimport { ODataPathSegments } from '../path';\nimport { ODataRequest } from '../request';\nimport { ODataResource } from '../resource';\nimport { ODataResponse } from '../responses';\nimport { ODataOptions } from './options';\n\nexport class ODataBatchRequest extends Subject {\n  id: string;\n  group: string;\n  constructor(public request: ODataRequest) {\n    super();\n    this.id = Strings.uniqueId({ prefix: 'r' });\n    this.group = Strings.uniqueId({ prefix: 'g' });\n  }\n\n  override toString() {\n    return this.toLegacy();\n  }\n\n  toLegacy() {\n    //TODO: Relative or Absolute url ?\n    let res = [\n      `${this.request.method} ${this.request.pathWithParams} ${HTTP11}`,\n    ];\n    if (\n      this.request.method === 'POST' ||\n      this.request.method === 'PATCH' ||\n      this.request.method === 'PUT'\n    ) {\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_JSON}`);\n    }\n\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res = [\n        ...res,\n        ...headers\n          .keys()\n          .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`),\n      ];\n    }\n\n    if (this.request.method === 'GET' || this.request.method === 'DELETE') {\n      res.push(NEWLINE);\n    } else {\n      res.push(`${NEWLINE}${JSON.stringify(this.request.body)}`);\n    }\n\n    return res.join(NEWLINE);\n  }\n\n  toJson() {\n    //TODO: Relative or Absolute url ?\n    let res: { [name: string]: any } = {\n      id: this.id,\n      method: this.request.method,\n      url: this.request.pathWithParams,\n      //'atomicityGroup': this.group\n      //\"dependsOn\": [\"g1\", \"g2\", \"r2\"]\n    };\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res['headers'] = headers\n        .keys()\n        .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`);\n    }\n    if (!(this.request.method === 'GET' || this.request.method === 'DELETE')) {\n      res['body'] = this.request.body;\n    }\n\n    return res;\n  }\n\n  onLoad(response: HttpResponseBase) {\n    if (response.ok) {\n      this.next(response);\n      this.complete();\n    } else {\n      // An unsuccessful request is delivered on the error channel.\n      this.error(response as HttpErrorResponse);\n    }\n  }\n\n  onError(response: HttpErrorResponse) {\n    this.error(response);\n  }\n}\n\n/**\n * OData Batch Resource\n * https://www.odata.org/getting-started/advanced-tutorial/#batch\n */\nexport class ODataBatchResource extends ODataResource {\n  // VARIABLES\n  private _requests: ODataBatchRequest[] = [];\n  requests() {\n    return this._requests.map((r) => r.request);\n  }\n\n  private _responses: HttpResponseBase[] | null = null;\n  responses() {\n    return this._responses;\n  }\n\n  //#region Factory\n  static factory(api: ODataApi) {\n    let segments = new ODataPathSegments();\n    segments.add(PathSegment.batch, $BATCH);\n    return new ODataBatchResource(api, { segments });\n  }\n\n  override clone(): ODataBatchResource {\n    const batch = super.clone() as ODataBatchResource;\n    batch._requests = [...this._requests];\n    return batch;\n  }\n  //#endregion\n\n  private storeRequester() {\n    const current = this.api.requester;\n    // Switch to the batch requester\n    this.api.requester = (req: ODataRequest): Observable => {\n      if (req.api !== this.api)\n        throw new Error('Batch Request are for the same api.');\n      if (req.observe === 'events')\n        throw new Error(\"Batch Request does not allows observe == 'events'.\");\n      this._requests.push(new ODataBatchRequest(req));\n      return this._requests[this._requests.length - 1];\n    };\n    return current;\n  }\n\n  private restoreRequester(\n    handler: ((req: ODataRequest) => Observable) | undefined\n  ) {\n    this.api.requester = handler;\n  }\n\n  /**\n   * Add to batch request\n   * @param ctx The context for the request\n   * @returns The result of execute the context\n   */\n  add(ctx: (batch: this) => R): R {\n    // Store original requester\n    var handler = this.storeRequester();\n    // Execute the context\n    const result = ctx(this);\n    // Restore original requester\n    this.restoreRequester(handler);\n\n    return result;\n  }\n\n  send(options?: ODataOptions): Observable> {\n    if (this.api.options.jsonBatchFormat) {\n      return this.sendJson(options);\n    } else {\n      return this.sendLegacy(options);\n    }\n  }\n\n  private sendJson(options?: ODataOptions): Observable> {\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n    });\n    return this.api\n      .request('POST', this, {\n        body: ODataBatchResource.buildJsonBody(this._requests),\n        responseType: 'json',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseJsonResponse(this._requests, response),\n          ];\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        })\n      );\n  }\n\n  private sendLegacy(\n    options?: ODataOptions\n  ): Observable> {\n    const bound = Strings.uniqueId({ prefix: BATCH_PREFIX });\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n      [CONTENT_TYPE]: MULTIPART_MIXED_BOUNDARY + bound,\n      [ACCEPT]: MULTIPART_MIXED,\n    });\n    return this.api\n      .request>('POST', this, {\n        body: ODataBatchResource.buildLegacyBody(bound, this._requests),\n        responseType: 'text',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseLegacyResponse(this._requests, response),\n          ];\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        })\n      );\n  }\n\n  /**\n   * Execute the batch request\n   * @param ctx The context for the request\n   * @param options The options of the batch request\n   * @returns The result of execute the context\n   */\n  exec(\n    ctx: (batch: this) => R,\n    options?: ODataOptions\n  ): Observable]> {\n    let result = this.add(ctx);\n    return this.send(options).pipe(map((response) => [result, response]));\n  }\n\n  body() {\n    return ODataBatchResource.buildLegacyBody(\n      Strings.uniqueId({ prefix: BATCH_PREFIX }),\n      this._requests\n    );\n  }\n\n  json() {\n    return ODataBatchResource.buildJsonBody(this._requests);\n  }\n\n  static buildLegacyBody(\n    batchBoundary: string,\n    requests: ODataBatchRequest[]\n  ): string {\n    let res = [];\n    let changesetBoundary: string | null = null;\n    let changesetId = 1;\n\n    for (const request of requests) {\n      // if method is GET and there is a changeset boundary open then close it\n      if (request.request.method === 'GET' && changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (changesetBoundary === null) {\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}`);\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (request.request.method !== 'GET') {\n        if (changesetBoundary === null) {\n          changesetBoundary = Strings.uniqueId({ prefix: CHANGESET_PREFIX });\n          res.push(\n            `${CONTENT_TYPE}: ${MULTIPART_MIXED_BOUNDARY}${changesetBoundary}`\n          );\n          res.push(NEWLINE);\n        }\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}`);\n      }\n\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_HTTP}`);\n      res.push(`${CONTENT_TRANSFER_ENCODING}: ${BINARY}`);\n\n      if (request.request.method !== 'GET') {\n        res.push(`${CONTENT_ID}: ${changesetId++}`);\n      }\n\n      res.push(NEWLINE);\n      res.push(`${request.toLegacy()}`);\n    }\n\n    if (res.length) {\n      if (changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n      res.push(\n        `${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n      );\n    }\n    return res.join(NEWLINE);\n  }\n\n  static buildJsonBody(requests: ODataBatchRequest[]): Object {\n    return {\n      requests: requests.map((request) => request.toJson()),\n    };\n  }\n\n  static parseLegacyResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ): HttpResponseBase[] {\n    let chunks: string[][] = [];\n    const contentType: string = response.headers.get(CONTENT_TYPE) || '';\n    const batchBoundary: string = Http.boundaryDelimiter(contentType);\n    const endLine: string = Http.boundaryEnd(batchBoundary);\n\n    const lines: string[] = (response.body || '').split(NEWLINE_REGEXP);\n\n    let changesetResponses: string[][] | null = null;\n    let contentId: number | null = null;\n    let changesetBoundary: string | null = null;\n    let changesetEndLine: string | null = null;\n    let startIndex: number | null = null;\n    for (let index = 0; index  {\n      let request = requests[index].request;\n      let { code, message } = Http.parseResponseStatus(chunk[0]);\n      chunk = chunk.slice(1);\n\n      let headers: HttpHeaders = new HttpHeaders();\n      var index = 1;\n      for (; index = 200 && code ({\n            body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          });\n    });\n  }\n\n  static parseJsonResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ): HttpResponseBase[] {\n    const responses: Object[] =\n      (response.body ? response.body : {})['responses'] ?? [];\n\n    return responses.map((response: any, index: number) => {\n      let request = requests[index].request;\n      let code = response['status'];\n\n      let headers: HttpHeaders = new HttpHeaders(response['headers']);\n      let body: string | { error: any; text: string } = response['body'];\n      if (code === 0) {\n        code = !!body ? 200 : 0;\n      }\n\n      let ok = code >= 200 && code ({\n            body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCache.html":{"url":"classes/ODataCache.html","title":"class - ODataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Cache\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Abstract\n                                getResponse\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                    Abstract\n                                putResponse\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:74\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Build an entry from a payload and some options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        The entry to store in the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:91\n                \n            \n\n\n            \n                \n                    Build a key from store an entry in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The names of the entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The key for the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:157\n                \n            \n\n\n            \n                \n                    Remove all cache entries\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:136\n                \n            \n\n\n            \n                \n                    Remove all cache entries that are matching with the given options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:124\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the payload from the cache if it exists and is not expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the entry\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The payload of the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:222\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:176\n                \n            \n\n\n            \n                \n                    Using the request, handle the fetching of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request to fetch\n\n                                    \n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable of the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:166\n                \n            \n\n\n            \n                \n                    Check if the entry is expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The cache entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Boolean indicating if the entry is expired\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:103\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Put some payload in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name for the entry\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        putResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    putResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:38\n                \n            \n\n\n            \n                \n                    Using the resource on the request build an array of string to identify the scope of the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to build the scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the scope of the request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:55\n                \n            \n\n\n            \n                \n                    Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to build the tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the tags of the response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegment } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegment.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ODataCacheEntry.html":{"url":"interfaces/ODataCacheEntry.html","title":"interface - ODataCacheEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ODataCacheEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n            \n                Description\n            \n            \n                A cache entry that holds a payload, a last read time, and a timeout for the entry.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastRead\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegment } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegment.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallable.html":{"url":"classes/ODataCallable.html","title":"class - ODataCallable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/callable.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bound\n                            \n                            \n                                    Optional\n                                composable\n                            \n                            \n                                    Optional\n                                entitySetPath\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                path\n                            \n                            \n                                serialize\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        composable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallableParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:86\n                \n            \n\n\n            \n                \n                    Returns the binding parameter of the callable.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The binding parameter of the callable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:58\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:78\n                \n            \n\n\n            \n                \n                    Encode the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:68\n                \n            \n\n\n            \n                \n                    Serialize the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallableConfig, ParserOptions, Parser } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataCallableParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataCallable extends ODataSchemaElement {\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parser: ODataCallableParser;\n\n  constructor(config: CallableConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySetPath = config.entitySetPath;\n    this.bound = config.bound;\n    this.composable = config.composable;\n    this.parser = new ODataCallableParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  path() {\n    let path: string;\n    if (this.entitySetPath) path = this.entitySetPath;\n    else if (this.bound) path = `${this.schema.namespace}.${this.name}`;\n    else\n      path = this.parser.return\n        ? this.api.findEntitySetForType(this.parser.return.type)?.name ||\n          this.name\n        : this.name;\n    return path;\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({\n      options,\n      parserForType,\n      findOptionsForType,\n    });\n  }\n\n  /**\n   * Deseialize the given value from the callable.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): any {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the callable.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: any, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the callable.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: any, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  /**\n   * Returns the binding parameter of the callable.\n   * @returns The binding parameter of the callable.\n   */\n  binding() {\n    return this.parser.binding();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallableParser.html":{"url":"classes/ODataCallableParser.html","title":"class - ODataCallableParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallableParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                parameters\n                            \n                            \n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                    Optional\n                                return\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataParameterParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        return\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:94\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(params: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(params: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigAsyncLoader.html":{"url":"classes/ODataConfigAsyncLoader.html","title":"class - ODataConfigAsyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigAsyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configs$: Observable | Observable[] | Observable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configs$\n                                                  \n                                                        \n                                                                        Observable | Observable[] | Observable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/loaders.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigLoader.html":{"url":"classes/ODataConfigLoader.html","title":"class - ODataConfigLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/loaders.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigSyncLoader.html":{"url":"classes/ODataConfigSyncLoader.html","title":"class - ODataConfigSyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigSyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(passedConfigs: ApiConfig | ApiConfig[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passedConfigs\n                                                  \n                                                        \n                                                                        ApiConfig | ApiConfig[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/loaders.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitiesAnnotations.html":{"url":"classes/ODataEntitiesAnnotations.html","title":"class - ODataEntitiesAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitiesAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readLink\n                                \n                                \n                                    count\n                                \n                                \n                                    nextLink\n                                \n                                \n                                    deltaLink\n                                \n                                \n                                    top\n                                \n                                \n                                    skip\n                                \n                                \n                                    skiptoken\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:206\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:161\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:169\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntitiesAnnotations)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:153\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataEntitiesAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:173\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:177\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nextLink\n                    \n                \n\n                \n                    \n                        getnextLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:181\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        deltaLink\n                    \n                \n\n                \n                    \n                        getdeltaLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:185\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n\n                \n                    \n                        gettop()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:189\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:194\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skiptoken\n                    \n                \n\n                \n                    \n                        getskiptoken()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:199\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:207\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext\n  ) {}\n\n  attributes(\n    data: { [key: string]: any },\n    metadata: ODataMetadataType\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [key: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [key: string]: any }): { [key: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection'\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityAnnotations.html":{"url":"classes/ODataEntityAnnotations.html","title":"class - ODataEntityAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Private\n                                    Optional\n                                _properties\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                                \n                                    etag\n                                \n                                \n                                    mediaEtag\n                                \n                                \n                                    metadataEtag\n                                \n                                \n                                    readLink\n                                \n                                \n                                    editLink\n                                \n                                \n                                    mediaReadLink\n                                \n                                \n                                    mediaEditLink\n                                \n                                \n                                    mediaContentType\n                                \n                                \n                                    properties\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:71\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:79\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:127\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:128\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type: \"single\" | \"collection\")\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:129\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                            \"single\" | \"collection\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityAnnotations | ODataEntitiesAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntityAnnotations)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:63\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataEntityAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:83\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        etag\n                    \n                \n\n                \n                    \n                        getetag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:87\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEtag\n                    \n                \n\n                \n                    \n                        getmediaEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:91\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadataEtag\n                    \n                \n\n                \n                    \n                        getmetadataEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:95\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:99\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        editLink\n                    \n                \n\n                \n                    \n                        geteditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:103\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaReadLink\n                    \n                \n\n                \n                    \n                        getmediaReadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:107\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEditLink\n                    \n                \n\n                \n                    \n                        getmediaEditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:111\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaContentType\n                    \n                \n\n                \n                    \n                        getmediaContentType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:115\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        properties\n                    \n                \n\n                \n                    \n                        getproperties()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:120\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:140\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext\n  ) {}\n\n  attributes(\n    data: { [key: string]: any },\n    metadata: ODataMetadataType\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [key: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [key: string]: any }): { [key: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection'\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityContainer.html":{"url":"classes/ODataEntityContainer.html","title":"class - ODataEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-container.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entitySets\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntityContainerConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntityContainerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityContainerConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntityContainer extends ODataSchemaElement {\n  entitySets: ODataEntitySet[];\n\n  constructor(config: EntityContainerConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySets = (config.entitySets || []).map(\n      (config) => new ODataEntitySet(config, schema)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityService.html":{"url":"classes/ODataEntityService.html","title":"class - ODataEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataBaseService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                attach\n                            \n                            \n                                    Public\n                                    Abstract\n                                entity\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    structuredTypeSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(value: M)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:7\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:26\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:100\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        structuredTypeSchema\n                    \n                \n\n                \n                    \n                        getstructuredTypeSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity.ts:12\n                                \n                            \n                    \n                        \n                                The schema for the structured type.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ODataModel } from '../models/model';\nimport { EntityKey, ODataResource } from '../resources';\nimport { ODataBaseService } from './base';\n\nexport abstract class ODataEntityService extends ODataBaseService {\n  public abstract entity(key?: EntityKey): ODataResource;\n  public abstract attach>(value: M): void;\n\n  /**\n   * The schema for the structured type.\n   */\n  get structuredTypeSchema() {\n    return this.apiNameOrEntityType !== undefined\n      ? this.api.findStructuredTypeForType(this.apiNameOrEntityType)\n      : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySet.html":{"url":"classes/ODataEntitySet.html","title":"class - ODataEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entityType\n                            \n                            \n                                service\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntitySetConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntitySetConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntitySetConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntitySet extends ODataSchemaElement {\n  entityType: string;\n  service: { new (...params: any[]): any };\n  constructor(config: EntitySetConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entityType = config.entityType;\n    this.service = config.service;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySetService.html":{"url":"classes/ODataEntitySetService.html","title":"class - ODataEntitySetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                create\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                entities\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                fetchAll\n                            \n                            \n                                    Public\n                                fetchMany\n                            \n                            \n                                    Public\n                                fetchOne\n                            \n                            \n                                    Public\n                                fetchOrCreate\n                            \n                            \n                                    Public\n                                modify\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySetSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:35\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:36\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(attrs: Partial, options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:87\n                \n            \n\n\n            \n                \n                    Create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        destroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:136\n                \n            \n\n\n            \n                \n                    Delete an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entities\n                        \n                    \n                \n            \n            \n                \n                    \n                    entities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:19\n                \n            \n\n\n            \n                \n                    Get the entity set resource for this service.\n\n\n                    \n                        Returns :         ODataEntitySetResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:27\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAll(options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:56\n                \n            \n\n\n            \n                \n                    Get all entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMany(top: number, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:65\n                \n            \n\n\n            \n                \n                    Get entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOne(options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:78\n                \n            \n\n\n            \n                \n                    Get an entity from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOrCreate(key: EntityKey, attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:154\n                \n            \n\n\n            \n                \n                    Get or create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        modify\n                        \n                    \n                \n            \n            \n                \n                    \n                    modify(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:119\n                \n            \n\n\n            \n                \n                    Patch an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:176\n                \n            \n\n\n            \n                \n                    Save an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:101\n                \n            \n\n\n            \n                \n                    Update an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:26\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:100\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySetSchema\n                    \n                \n\n                \n                    \n                        getentitySetSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:48\n                                \n                            \n                    \n                        \n                                The schema for the entity set.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ODataCollection } from '../models/collection';\nimport { ODataModel } from '../models/model';\nimport {\n  EntityKey,\n  ODataEntity,\n  ODataEntityResource,\n  ODataEntitySetResource,\n  ODataOptions,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\nexport class ODataEntitySetService extends ODataEntityService {\n  /**\n   * Get the entity set resource for this service.\n   */\n  public entities(): ODataEntitySetResource {\n    return this.client.entitySet(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(key?: EntityKey): ODataEntityResource {\n    return this.entities().entity(key);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M): void;\n  public attach>>(model: C): void;\n  public attach(model: any): void {\n    if (model instanceof ODataModel) {\n      model.attach(this.entities().entity());\n    } else if (model instanceof ODataCollection) {\n      model.attach(this.entities());\n    }\n  }\n\n  /**\n   * The schema for the entity set.\n   */\n  get entitySetSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Get all entities from the entity set.\n   * @param options The options for the request.\n   */\n  public fetchAll(options?: ODataOptions) {\n    return this.entities().fetchAll(options);\n  }\n\n  /**\n   * Get entities from the entity set.\n   * @param withCount Get the count of the entities.\n   * @param options The options for the request.\n   */\n  public fetchMany(\n    top: number,\n    options?: ODataOptions & { withCount?: boolean }\n  ) {\n    return this.entities().fetchMany(top, options);\n  }\n\n  /**\n   * Get an entity from the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOne(options?: ODataOptions & { etag?: string }) {\n    return this.entities().fetchOne(options);\n  }\n\n  /**\n   * Create an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param options The options for the request.\n   */\n  public create(\n    attrs: Partial,\n    options?: ODataOptions\n  ): Observable> {\n    return this.entities().create(attrs, options);\n  }\n\n  /**\n   * Update an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('update: Resource without key'));\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public modify(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('modify: Resource without key'));\n    return res.modify(attrs, options);\n  }\n\n  /**\n   * Delete an entity in the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public destroy(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ) {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('destroy: Resource without key'));\n    return res.destroy(options);\n  }\n\n  //#region Shortcuts\n  /**\n   * Get or create an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOrCreate(\n    key: EntityKey,\n    attrs: Partial,\n    { etag, ...options }: { etag?: string } & ODataOptions = {}\n  ): Observable> {\n    return this.entity(key)\n      .fetch({ etag, ...options })\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          if (error.status === 404) return this.create(attrs, options);\n          else return throwError(() => error);\n        })\n      );\n  }\n\n  /**\n   * Save an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param method The method to use.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public save(\n    attrs: Partial,\n    {\n      etag,\n      method,\n      ...options\n    }: {\n      etag?: string;\n      method?: 'create' | 'update' | 'modify';\n    } & ODataOptions = {}\n  ) {\n    let schema = this.structuredTypeSchema;\n    if (method === undefined && schema !== undefined && schema.isCompoundKey())\n      return throwError(\n        () =>\n          new Error(\n            'save: Composite key require a specific method, use create/update/patch'\n          )\n      );\n    let key = schema && schema.resolveKey(attrs);\n    if (method === undefined) method = key !== undefined ? 'update' : 'create';\n    if ((method === 'update' || method === 'modify') && key === undefined)\n      return throwError(\n        () => new Error(\"save: Can't update/patch entity without key\")\n      );\n    return method === 'create'\n      ? this.create(attrs, options)\n      : method === 'modify'\n      ? this.modify(key, attrs, { etag, ...options })\n      : this.update(key, attrs, { etag, ...options });\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityTypeKey.html":{"url":"classes/ODataEntityTypeKey.html","title":"class - ODataEntityTypeKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityTypeKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n  FieldParser,\n  EdmType,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string | EdmType;\n  private parser: Parser;\n  collection: boolean;\n  navigation: boolean;\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable ?? true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        EdmType.String,\n        EdmType.Date,\n        EdmType.TimeOfDay,\n        EdmType.DateTimeOffset,\n        EdmType.Guid,\n        EdmType.Binary,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === EdmType.Date) schema.format = 'date';\n      else if (this.type === EdmType.TimeOfDay) schema.format = 'time';\n      else if (this.type === EdmType.DateTimeOffset)\n        schema.format = 'date-time';\n      else if (this.type === EdmType.Guid)\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === EdmType.Binary) schema.contentEncoding = 'base64';\n      else if (this.type === EdmType.String && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      [\n        EdmType.Int64,\n        EdmType.Int32,\n        EdmType.Int16,\n        EdmType.Byte,\n        EdmType.SByte,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (\n      [EdmType.Decimal, EdmType.Double].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'number';\n    } else if ([EdmType.Boolean].indexOf(this.type as EdmType) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[] = [];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).forEach(([name, config]) => this.addField(name, config));\n  }\n\n  addField(\n    name: string,\n    config: StructuredTypeFieldConfig\n  ): ODataStructuredTypeFieldParser {\n    const field = new ODataStructuredTypeFieldParser(name, this, config);\n    this._fields.push(field);\n    return field;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {}\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag)\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {}\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumType.html":{"url":"classes/ODataEnumType.html","title":"class - ODataEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                unpack\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:63\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:83\n                \n            \n\n\n            \n                \n                    Encode the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(enu: string | E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:44\n                \n            \n\n\n            \n                \n                    Find a field by name or value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enu\n                                    \n                                            string | E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name or value of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given name or value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:35\n                \n            \n\n\n            \n                \n                    Returns the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        The fields of the enum type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:73\n                \n            \n\n\n            \n                \n                    Serialize the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EnumTypeConfig, Parser, ParserOptions } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEnumTypeFieldParser, ODataEnumTypeParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataEnumType extends ODataSchemaElement {\n  parser: ODataEnumTypeParser;\n  members: { [name: string]: E } | { [value: number]: string };\n  constructor(config: EnumTypeConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.members = config.members;\n    this.parser = new ODataEnumTypeParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({ options, parserForType, findOptionsForType });\n  }\n\n  /**\n   * Returns the fields of the enum type.\n   * @returns The fields of the enum type.\n   */\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return this.parser.fields(value);\n  }\n\n  /**\n   * Find a field by name or value.\n   * @param enu The name or value of the field\n   * @returns The field with the given name or value\n   */\n  field(enu: string | E) {\n    return this.parser.field(enu);\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => T) {\n    return this.parser.mapFields(mapper);\n  }\n\n  /**\n   * Deseialize the given value from the enum type.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): E {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the enum type.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: E, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the enum type.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: E, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  unpack(value: E) {\n    return this.parser.unpack(value);\n  }\n\n  pack(value: number[]) {\n    return this.parser.pack(value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeFieldParser.html":{"url":"classes/ODataEnumTypeFieldParser.html","title":"class - ODataEnumTypeFieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeFieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                value\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                titleize\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, field: EnumTypeFieldConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        EnumTypeFieldConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     E\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n  FieldParser,\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value))\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toNames(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this._fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeParser.html":{"url":"classes/ODataEnumTypeParser.html","title":"class - ODataEnumTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n            \n                Implements\n            \n            \n                            FieldParser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _fields\n                            \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                flags\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                unpack\n                            \n                            \n                                validate\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: string, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(nameValue: string | E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameValue\n                                    \n                                            string | E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:92\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(member: string | number, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    member\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [] | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n  FieldParser,\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value))\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toNames(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this._fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInMemoryCache.html":{"url":"classes/ODataInMemoryCache.html","title":"class - ODataInMemoryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInMemoryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/memory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/memory.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:29\n\n                \n            \n\n\n            \n                \n                    Restore the response from the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to get the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        The response from the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:14\n\n                \n            \n\n\n            \n                \n                    Store the response in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to store the response\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to store in the cache\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:74\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Build an entry from a payload and some options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        The entry to store in the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:91\n\n                \n            \n\n\n            \n                \n                    Build a key from store an entry in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The names of the entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The key for the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:157\n\n                \n            \n\n\n            \n                \n                    Remove all cache entries\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:136\n\n                \n            \n\n\n            \n                \n                    Remove all cache entries that are matching with the given options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:124\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the payload from the cache if it exists and is not expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the entry\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The payload of the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:187\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:222\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:176\n\n                \n            \n\n\n            \n                \n                    Using the request, handle the fetching of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request to fetch\n\n                                    \n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable of the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:166\n\n                \n            \n\n\n            \n                \n                    Check if the entry is expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The cache entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Boolean indicating if the entry is expired\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:103\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Put some payload in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name for the entry\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n                    Using the resource on the request build an array of string to identify the scope of the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to build the scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the scope of the request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:55\n\n                \n            \n\n\n            \n                \n                    Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to build the tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the tags of the response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache } from './cache';\n\nexport class ODataInMemoryCache extends ODataCache {\n  constructor({ timeout }: { timeout?: number } = {}) {\n    super({ timeout });\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    let scope = this.scope(req);\n    let tags = this.tags(res);\n    this.put(req.cacheKey, res, {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    let scope = this.scope(req);\n    return this.get(req.cacheKey, { scope });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInStorageCache.html":{"url":"classes/ODataInStorageCache.html","title":"class - ODataInStorageCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInStorageCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                storage\n                            \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                flush\n                            \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                restore\n                            \n                            \n                                store\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        flush\n                        \n                    \n                \n            \n            \n                \n                    \n                    flush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:54\n\n                \n            \n\n\n            \n                \n                    Flush the cache and clean the storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:79\n\n                \n            \n\n\n            \n                \n                    Restore the response from the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to get the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        The response from the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:64\n\n                \n            \n\n\n            \n                \n                    Store the response in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to store the response\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to store in the cache\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:45\n                \n            \n\n\n            \n                \n                    Restore the cache from the storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:35\n                \n            \n\n\n            \n                \n                    Store the cache in the storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:74\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Build an entry from a payload and some options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        The entry to store in the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:91\n\n                \n            \n\n\n            \n                \n                    Build a key from store an entry in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The names of the entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The key for the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:136\n\n                \n            \n\n\n            \n                \n                    Remove all cache entries that are matching with the given options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:124\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the payload from the cache if it exists and is not expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the entry\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The payload of the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:187\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:222\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:176\n\n                \n            \n\n\n            \n                \n                    Using the request, handle the fetching of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request to fetch\n\n                                    \n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable of the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:166\n\n                \n            \n\n\n            \n                \n                    Check if the entry is expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The cache entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Boolean indicating if the entry is expired\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:103\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Put some payload in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name for the entry\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n                    Using the resource on the request build an array of string to identify the scope of the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to build the scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the scope of the request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:55\n\n                \n            \n\n\n            \n                \n                    Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to build the tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the tags of the response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ODataModule.html":{"url":"modules/ODataModule.html","title":"module - ODataModule","body":"\n                   \n\n\n\n\n    Modules\n    ODataModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ODataClient\n                        \n                        \n                            ODataServiceFactory\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(passedConfig: PassedInitialConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    passedConfig\n                                    \n                                                PassedInitialConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParameterParser.html":{"url":"classes/ODataParameterParser.html","title":"class - ODataParameterParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParameterParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                collection\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                nullable\n                            \n                            \n                                    Private\n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                encode\n                            \n                            \n                                enum\n                            \n                            \n                                field\n                            \n                            \n                                isEdmType\n                            \n                            \n                                isEnumType\n                            \n                            \n                                isStructuredType\n                            \n                            \n                                serialize\n                            \n                            \n                                structured\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, parameter: Parameter)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameter\n                                                  \n                                                        \n                                                                        Parameter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enum\n                        \n                    \n                \n            \n            \n                \nenum()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEnumTypeParser\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEdmType\n                        \n                    \n                \n            \n            \n                \nisEdmType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnumType\n                        \n                    \n                \n            \n            \n                \nisEnumType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStructuredType\n                        \n                    \n                \n            \n            \n                \nisStructuredType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structured\n                        \n                    \n                \n            \n            \n                \nstructured()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataStructuredTypeParser\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegments.html":{"url":"classes/ODataPathSegments.html","title":"class - ODataPathSegments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/segments.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _segments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                find\n                            \n                            \n                                first\n                            \n                            \n                                get\n                            \n                            \n                                keys\n                            \n                            \n                                last\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                segments\n                            \n                            \n                                toJSON\n                            \n                            \n                                toString\n                            \n                            \n                                types\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments?: ODataSegment[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataSegment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _segments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSegment[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(name: string, path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPathSegments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (segment: ODataSegment) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first\n                        \n                    \n                \n            \n            \n                \nfirst(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last\n                        \n                    \n                \n            \n            \n                \nlast(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(escape: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    escape\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        types\n                        \n                    \n                \n            \n            \n                \ntypes(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PATH_SEPARATOR } from '../../constants';\nimport { PathSegment } from '../../types';\nimport { Objects } from '../../utils';\nimport { buildPathAndQuery, raw } from '../query';\nimport { EntityKey } from '../resource';\nimport { SegmentHandler } from './handlers';\n\nexport type ODataSegment = {\n  name: PathSegment;\n  path: string;\n  type?: string;\n  key?: any;\n  parameters?: any;\n};\n\nfunction pathSegmentsBuilder(\n  segment: ODataSegment,\n  escape: boolean = false\n): [string, { [name: string]: any }] {\n  if (segment.name === PathSegment.function) {\n    let [path, params] = segment.parameters\n      ? buildPathAndQuery({\n          func: { [segment.path]: segment.parameters },\n          escape,\n        })\n      : buildPathAndQuery({ func: segment.path, escape });\n    if (path.startsWith(PATH_SEPARATOR)) {\n      path = path.slice(1);\n    }\n    return [path, params];\n  } else {\n    let key = segment.key;\n    // HACK: Check guid string\n    if (\n      typeof key === 'string' &&\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n        key\n      )\n    ) {\n      key = raw(key);\n    }\n    let [path, params] = key ? buildPathAndQuery({ key, escape }) : ['', {}];\n    return [segment.path + path, params];\n  }\n}\n\nexport class ODataPathSegments {\n  private _segments: ODataSegment[];\n\n  constructor(segments?: ODataSegment[]) {\n    this._segments = segments || [];\n  }\n\n  pathAndParams(escape: boolean = false): [string, { [name: string]: any }] {\n    const result = this._segments.reduce(\n      (acc, segment) => {\n        const [path, params] = pathSegmentsBuilder(segment, escape);\n        acc.paths.push(path);\n        acc.params = Object.assign(acc.params, params);\n        return acc;\n      },\n      { paths: [] as string[], params: {} as { [name: string]: any } }\n    );\n    return [result.paths.join(PATH_SEPARATOR), result.params];\n  }\n\n  types({ key = false }: { key?: boolean } = {}): string[] {\n    return this.segments({ key })\n      .map((s) => s.type())\n      .filter((t) => t !== undefined) as string[];\n  }\n\n  keys(values?: (EntityKey | undefined)[]) {\n    const segments = this.segments({ key: true });\n    if (values !== undefined) {\n      segments.forEach((segment, index) => {\n        const key = values[index];\n        if (key === undefined) {\n          segment.clearKey();\n        } else {\n          segment.key(key);\n        }\n      });\n    }\n    return segments.map((s) => s.key() as EntityKey | undefined);\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => value)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return this._segments.map((s) => {\n      let json = {\n        name: s.name as string,\n        path: s.path,\n      } as any;\n      if (s.type !== undefined) json.type = s.type;\n      if (s.key !== undefined) json.key = s.key;\n      if (s.parameters !== undefined) json.parameters = s.parameters;\n      return json;\n    });\n  }\n\n  clone() {\n    const segments = Objects.clone(this._segments);\n    return new ODataPathSegments(segments);\n  }\n\n  find(predicate: (segment: ODataSegment) => boolean) {\n    //Backward Find\n    return [...this._segments].reverse().find(predicate);\n  }\n\n  segments({ key = false }: { key?: boolean } = {}) {\n    let segments = [...this._segments];\n    if (key)\n      segments = segments.filter(\n        (s) =>\n          [\n            PathSegment.entitySet,\n            PathSegment.navigationProperty,\n            PathSegment.property,\n          ].indexOf(s.name) !== -1\n      );\n    return segments.map((s) => new SegmentHandler(s));\n  }\n\n  first({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[0] : undefined;\n  }\n\n  last({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[segments.length - 1] : undefined;\n  }\n\n  add(name: string, path: string) {\n    const segment = { name, path } as ODataSegment;\n    this._segments.push(segment);\n    return new SegmentHandler(segment);\n  }\n\n  get(name: string) {\n    let segment = this.find((s) => s.name === name);\n    if (segment === undefined)\n      throw Error(`No Segment for name ${name} was found`);\n    return new SegmentHandler(segment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegmentsHandler.html":{"url":"classes/ODataPathSegmentsHandler.html","title":"class - ODataPathSegmentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegmentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                entitySet\n                            \n                            \n                                function\n                            \n                            \n                                keys\n                            \n                            \n                                navigationProperty\n                            \n                            \n                                property\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments: ODataPathSegments)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataPathSegments\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n            \n                \naction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigationProperty\n                        \n                    \n                \n            \n            \n                \nnavigationProperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PathSegment } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegment.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegment.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegment.action);\n  }\n  function() {\n    return this.segments.get(PathSegment.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegment.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegment.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPropertyAnnotations.html":{"url":"classes/ODataPropertyAnnotations.html","title":"class - ODataPropertyAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPropertyAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataPropertyAnnotations)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataPropertyAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext\n  ) {}\n\n  attributes(\n    data: { [key: string]: any },\n    metadata: ODataMetadataType\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [key: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [key: string]: any }): { [key: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection'\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptionHandler.html":{"url":"classes/ODataQueryOptionHandler.html","title":"class - ODataQueryOptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assertArray\n                            \n                            \n                                    Private\n                                assertObject\n                            \n                            \n                                assign\n                            \n                            \n                                at\n                            \n                            \n                                clear\n                            \n                            \n                                empty\n                            \n                            \n                                every\n                            \n                            \n                                find\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                            \n                                push\n                            \n                            \n                                remove\n                            \n                            \n                                set\n                            \n                            \n                                some\n                            \n                            \n                                toJSON\n                            \n                            \n                                unset\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(o: Map, n: QueryOption)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                  \n                                                        \n                                                                        Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        n\n                                                  \n                                                        \n                                                                        QueryOption\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertArray()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     any[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertObject(create: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    create\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        assign\n                        \n                    \n                \n            \n            \n                \nassign(values: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:194\n                \n            \n\n\n            \n                \n                    Merge values from object into the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to merge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        at\n                        \n                    \n                \n            \n            \n                \nat(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:106\n                \n            \n\n\n            \n                \n                    Return value at index of the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:203\n                \n            \n\n\n            \n                \n                    Clear the managed odata query option.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        empty\n                        \n                    \n                \n            \n            \n                \nempty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:53\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the managed odata query option is empty.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        True if the managed odata query option is empty.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        every\n                        \n                    \n                \n            \n            \n                \nevery(predicate: (value: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (value: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(path: string, def?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:156\n                \n            \n\n\n            \n                \n                    Get the value for path from the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The path from get the value\n\n                                    \n                                \n                                \n                                    def\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default if not found\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:184\n                \n            \n\n\n            \n                \n                    Test if the managed odata query option has the value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The path fot test if the value is set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Boolean indicating if the value is set\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:80\n                \n            \n\n\n            \n                \n                    Push value to the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to push\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:88\n                \n            \n\n\n            \n                \n                    Remove value from the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(path: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:145\n                \n            \n\n\n            \n                \n                    Set the value for path in the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path for set the value\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        some\n                        \n                    \n                \n            \n            \n                \nsome(predicate: (value: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:45\n                \n            \n\n\n            \n                \n                    Converts the managed odata query option to a json object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unset\n                        \n                    \n                \n            \n            \n                \nunset(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:165\n                \n            \n\n\n            \n                \n                    Unset the value for path in the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue(v?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:63\n                \n            \n\n\n            \n                \n                    Get or Set the value of the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The value to set.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:37\n                                \n                            \n                    \n                        \n                                The name of the managed odata query option.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { QueryOption } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  alias,\n  Expand,\n  Filter,\n  OrderBy,\n  Select,\n  Transform,\n  normalizeValue,\n  raw,\n  duration,\n  binary,\n} from './builder';\nimport {\n  ComputeExpression,\n  ComputeExpressionBuilder,\n  FilterExpression,\n  FilterExpressionBuilder,\n  OrderByExpression,\n  OrderByExpressionBuilder,\n  SearchExpression,\n  SearchExpressionBuilder,\n  ExpandExpression,\n  ExpandExpressionBuilder,\n  SelectExpression,\n  SelectExpressionBuilder,\n} from './expressions';\nimport type { ODataQueryArguments, ODataQueryOptions } from './options';\n\nexport class ODataQueryOptionHandler {\n  constructor(private o: Map, private n: QueryOption) {}\n\n  /**\n   * The name of the managed odata query option.\n   */\n  get name() {\n    return this.n;\n  }\n\n  /**\n   * Converts the managed odata query option to a json object.\n   * @returns {any}\n   */\n  toJSON() {\n    return this.o.get(this.n);\n  }\n\n  /**\n   * Returns a boolean indicating if the managed odata query option is empty.\n   * @returns True if the managed odata query option is empty.\n   */\n  empty() {\n    return Types.isEmpty(this.o.get(this.n));\n  }\n\n  //#region Primitive Value\n  /**\n   * Get or Set the value of the managed odata query option.\n   * @param v The value to set.\n   * @returns\n   */\n  value(v?: any) {\n    if (v !== undefined) this.o.set(this.n, v);\n    return this.o.get(this.n);\n  }\n  //#endregion\n\n  //#region Array Value\n  private assertArray(): any[] {\n    if (!Types.isArray(this.o.get(this.n)))\n      this.o.set(this.n, this.o.has(this.n) ? [this.o.get(this.n)] : []);\n    return this.o.get(this.n);\n  }\n\n  /**\n   * Push value to the managed odata query option.\n   * @param value Value to push\n   */\n  push(value: any) {\n    this.assertArray().push(value);\n  }\n\n  /**\n   * Remove value from the managed odata query option.\n   * @param value Value to remove\n   */\n  remove(value: any) {\n    this.o.set(\n      this.n,\n      this.assertArray().filter((v) => v !== value)\n    );\n    // If only one and not is array... down to value\n    if (\n      this.o.get(this.n).length === 1 &&\n      !Types.isArray(this.o.get(this.n)[0])\n    )\n      this.o.set(this.n, this.o.get(this.n)[0]);\n  }\n\n  /**\n   * Return value at index of the managed odata query option.\n   * @param index Index of the value\n   * @returns The value\n   */\n  at(index: number) {\n    return this.assertArray()[index];\n  }\n\n  some(predicate: (value: any) => boolean) {\n    return this.assertArray().some(predicate);\n  }\n\n  every(predicate: (value: any) => boolean) {\n    return this.assertArray().every(predicate);\n  }\n\n  find(predicate: (value: any) => boolean) {\n    return this.assertArray().find(predicate);\n  }\n  //#endregion\n\n  //#region HashMap Value\n  private assertObject(create: boolean): { [name: string]: any } {\n    if (\n      !Types.isArray(this.o.get(this.n)) &&\n      Types.isPlainObject(this.o.get(this.n))\n    ) {\n      return this.o.get(this.n);\n    }\n    let arr = this.assertArray();\n    let obj = arr.find((v) => Types.isPlainObject(v));\n    if (!obj && create) {\n      obj = {};\n      arr.push(obj);\n    }\n    return obj;\n  }\n\n  /**\n   * Set the value for path in the managed odata query option.\n   * @param path Path for set the value\n   * @param value Value to set\n   */\n  set(path: string, value: any) {\n    let obj = this.assertObject(true);\n    Objects.set(obj, path, value);\n  }\n\n  /**\n   * Get the value for path from the managed odata query option.\n   * @param path The path from get the value\n   * @param def Default if not found\n   * @returns\n   */\n  get(path: string, def?: any): any {\n    let obj = this.assertObject(false) || {};\n    return Objects.get(obj, path, def);\n  }\n\n  /**\n   * Unset the value for path in the managed odata query option.\n   * @param path\n   */\n  unset(path: string) {\n    let obj = this.assertObject(true);\n    Objects.unset(obj, path);\n\n    if (Types.isArray(this.o.get(this.n))) {\n      this.o.set(\n        this.n,\n        this.o.get(this.n).filter((v: any) => !Types.isEmpty(v))\n      );\n      if (this.o.get(this.n).length === 1)\n        this.o.set(this.n, this.o.get(this.n)[0]);\n    }\n  }\n\n  /**\n   * Test if the managed odata query option has the value.\n   * @param path The path fot test if the value is set\n   * @returns Boolean indicating if the value is set\n   */\n  has(path: string) {\n    let obj = this.assertObject(false) || {};\n    return Objects.has(obj, path);\n  }\n\n  /**\n   * Merge values from object into the managed odata query option.\n   * @param values Object to merge\n   * @returns\n   */\n  assign(values: { [attr: string]: any }) {\n    let obj = this.assertObject(true);\n    return Objects.merge(obj, values);\n  }\n  //#endregion\n\n  /**\n   * Clear the managed odata query option.\n   */\n  clear() {\n    this.o.delete(this.n);\n  }\n}\n\nexport class ODataQueryOptionsHandler {\n  constructor(protected options: ODataQueryOptions) {}\n\n  /**\n   * Create a raw odata value\n   * @param value The value to raw\n   * @returns The raw value\n   */\n  raw(value: any) {\n    return raw(value);\n  }\n\n  /**\n   * Create a new odata alias parameter\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_ParameterAliases\n   * @param value The value of the alias\n   * @param name The name of the alias\n   * @returns The alias\n   */\n  alias(value: any, name?: string) {\n    return alias(value, name);\n  }\n\n  /**\n   * Create a duration odata value\n   * @param value The value to duration\n   * @returns The duration value\n   */\n  duration(value: any) {\n    return duration(value);\n  }\n\n  /**\n   * Create a binary odata value\n   * @param value The value to binary\n   * @returns The binary value\n   */\n  binary(value: any) {\n    return binary(value);\n  }\n\n  /**\n   * Normalize the given value to a valid odata value\n   * @param value The value to normalize\n   * @returns The normalized value\n   */\n  normalize(value: any) {\n    return normalizeValue(value);\n  }\n\n  /**\n   * Build and return a handler for modifying the $select option.\n   * If opts is given then set te value as new value for $select.\n   * @param opts Select value or builder function for SelectExpression\n   */\n  select(opts: SelectExpressionBuilder): SelectExpression;\n  select(opts: Select): ODataQueryOptionHandler;\n  select(): ODataQueryOptionHandler;\n  select(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.select,\n        SelectExpression.select(\n          opts,\n          this.options.expression(QueryOption.select)\n        )\n      );\n    }\n    return this.options.option>(QueryOption.select, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $expand option.\n   * If opts is given then set te value as new value for $expand.\n   * @param opts Expand value or builder function for ExpandExpression\n   */\n  expand(opts: ExpandExpressionBuilder): ExpandExpression;\n  expand(opts: Expand): ODataQueryOptionHandler;\n  expand(): ODataQueryOptionHandler;\n  expand(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.expand,\n        ExpandExpression.expand(\n          opts,\n          this.options.expression(QueryOption.expand)\n        )\n      );\n    }\n    return this.options.option>(QueryOption.expand, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $compute option.\n   * If opts is given then set te value as new value for $compute.\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptioncompute\n   * @param opts string value or builder function for ComputeExpression\n   */\n  compute(\n    opts: (\n      builder: ComputeExpressionBuilder,\n      current?: ComputeExpression\n    ) => ComputeExpression\n  ): ComputeExpression;\n  compute(opts: string): ODataQueryOptionHandler;\n  compute(): ODataQueryOptionHandler;\n  compute(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.compute,\n        ComputeExpression.compute(\n          opts,\n          this.options.expression(QueryOption.compute)\n        )\n      );\n    }\n    return this.options.option(QueryOption.compute, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $format option.\n   * If opts is given then set te value as new value for $format.\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptionformat\n   * @param opts string value for format\n   */\n  format(opts: string): ODataQueryOptionHandler;\n  format(): ODataQueryOptionHandler;\n  format(opts?: string): any {\n    return this.options.option(QueryOption.format, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $transform option.\n   * If opts is given then set te value as new value for $transform.\n   * @param opts string value for transform\n   */\n  transform(opts: Transform): ODataQueryOptionHandler;\n  transform(): ODataQueryOptionHandler;\n  transform(opts?: Transform): any {\n    return this.options.option>(QueryOption.transform, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $search option.\n   * If opts is given then set te value as new value for $search.\n   * @param opts string value or builder function for SearchExpression\n   */\n  search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression\n  ): SearchExpression;\n  search(opts: string): ODataQueryOptionHandler;\n  search(): ODataQueryOptionHandler;\n  search(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.search,\n        SearchExpression.search(\n          opts,\n          this.options.expression(QueryOption.search)\n        )\n      );\n    }\n    return this.options.option(QueryOption.search, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $filter option.\n   * If opts is given then set te value as new value for $filter.\n   * @param opts Filter value or builder function for FilterExpression\n   */\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ): FilterExpression;\n  filter(opts: Filter): ODataQueryOptionHandler;\n  filter(): ODataQueryOptionHandler;\n  filter(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.filter,\n        FilterExpression.filter(\n          opts,\n          this.options.expression(QueryOption.filter)\n        )\n      );\n    }\n    return this.options.option>(QueryOption.filter, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $orderby option.\n   * If opts is given then set te value as new value for $orderby.\n   * @param opts OrderBy value or builder function for OrderByExpression\n   */\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ): OrderByExpression;\n  orderBy(opts: OrderBy): ODataQueryOptionHandler;\n  orderBy(): ODataQueryOptionHandler;\n  orderBy(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.option(\n        QueryOption.orderBy,\n        OrderByExpression.orderBy(\n          opts,\n          this.options.expression(QueryOption.orderBy)\n        )\n      );\n    }\n    return this.options.option>(QueryOption.orderBy, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $top option.\n   * If opts is given then set te value as new value for $top.\n   * @param opts number value\n   */\n  top(opts: number): ODataQueryOptionHandler;\n  top(): ODataQueryOptionHandler;\n  top(opts?: number): any {\n    return this.options.option(QueryOption.top, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $skip option.\n   * If opts is given then set te value as new value for $skip.\n   * @param opts number value\n   */\n  skip(opts: number): ODataQueryOptionHandler;\n  skip(): ODataQueryOptionHandler;\n  skip(opts?: number): any {\n    return this.options.option(QueryOption.skip, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $skiptoken option.\n   * If opts is given then set te value as new value for $skiptoken.\n   * @param opts string value\n   */\n  skiptoken(opts: string): ODataQueryOptionHandler;\n  skiptoken(): ODataQueryOptionHandler;\n  skiptoken(opts?: string): any {\n    return this.options.option(QueryOption.skiptoken, opts);\n  }\n\n  /**\n   * Shortcut for set $top, $skip, $skiptoken.\n   * @param param0 skip or top or skiptoken\n   */\n  paging({\n    skip,\n    skiptoken,\n    top,\n  }: {\n    skip?: number | null;\n    skiptoken?: string | null;\n    top?: number | null;\n  } = {}) {\n    if (skiptoken !== undefined) {\n      if (skiptoken !== null) {\n        this.skiptoken(skiptoken);\n      } else {\n        this.options.remove(QueryOption.skiptoken);\n      }\n    }\n    if (skip !== undefined) {\n      if (skip !== null) {\n        this.skip(skip);\n      } else {\n        this.options.remove(QueryOption.skip);\n      }\n    }\n    if (top !== undefined) {\n      if (top !== null) {\n        this.top(top);\n      } else {\n        this.options.remove(QueryOption.top);\n      }\n    }\n  }\n\n  /**\n   * Shortcut for clear pagination by unset $top, $skip, $skiptoken.\n   */\n  clearPaging() {\n    this.options.remove(QueryOption.skip);\n    this.options.remove(QueryOption.top);\n    this.options.remove(QueryOption.skiptoken);\n  }\n\n  /**\n   * Shortcut for clear query.\n   */\n  clear() {\n    this.options.clear();\n  }\n\n  /**\n   * Retrun the query.\n   */\n  query() {\n    return this.options.toQueryArguments();\n  }\n\n  /**\n   * Apply the given query options to the current query.\n   * @param query The query to be applied.\n   */\n  apply(query: ODataQueryArguments) {\n    if (query.select !== undefined) {\n      if (query.select instanceof SelectExpression) {\n        this.options.expression(\n          QueryOption.select,\n          query.select as SelectExpression\n        );\n      } else if (query.select !== null) {\n        this.options.option(QueryOption.select, query.select);\n      } else {\n        this.options.remove(QueryOption.select);\n      }\n    }\n    if (query.expand !== undefined) {\n      if (query.expand instanceof ExpandExpression) {\n        this.options.expression(\n          QueryOption.expand,\n          query.expand as ExpandExpression\n        );\n      } else if (query.expand !== null) {\n        this.options.option(QueryOption.expand, query.expand);\n      } else {\n        this.options.remove(QueryOption.expand);\n      }\n    }\n    if (query.compute !== undefined) {\n      if (query.compute instanceof ComputeExpression) {\n        this.options.expression(\n          QueryOption.compute,\n          query.compute as ComputeExpression\n        );\n      } else if (query.compute !== null) {\n        this.options.option(QueryOption.compute, query.compute);\n      } else {\n        this.options.remove(QueryOption.compute);\n      }\n    }\n    if (query.transform !== undefined) {\n      if (query.transform !== null) {\n        this.options.option(QueryOption.transform, query.transform);\n      } else {\n        this.options.remove(QueryOption.transform);\n      }\n    }\n    if (query.search !== undefined) {\n      if (query.search instanceof SearchExpression) {\n        this.options.expression(\n          QueryOption.search,\n          query.search as SearchExpression\n        );\n      } else if (query.search !== null) {\n        this.options.option(QueryOption.search, query.search);\n      } else {\n        this.options.remove(QueryOption.search);\n      }\n    }\n    if (query.filter !== undefined) {\n      if (query.filter instanceof FilterExpression) {\n        this.options.expression(\n          QueryOption.filter,\n          query.filter as FilterExpression\n        );\n      } else if (query.filter !== null) {\n        this.options.option(QueryOption.filter, query.filter);\n      } else {\n        this.options.remove(QueryOption.filter);\n      }\n    }\n    if (query.orderBy !== undefined) {\n      if (query.orderBy instanceof OrderByExpression) {\n        this.options.expression(\n          QueryOption.orderBy,\n          query.orderBy as OrderByExpression\n        );\n      } else if (query.orderBy !== null) {\n        this.options.option(QueryOption.orderBy, query.orderBy);\n      } else {\n        this.options.remove(QueryOption.orderBy);\n      }\n    }\n    this.paging(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptions.html":{"url":"classes/ODataQueryOptions.html","title":"class - ODataQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                clone\n                            \n                            \n                                expression\n                            \n                            \n                                has\n                            \n                            \n                                keep\n                            \n                            \n                                option\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                remove\n                            \n                            \n                                toJSON\n                            \n                            \n                                toQueryArguments\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values?: Map | literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                        Map | literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:40\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:125\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         ODataQueryOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expression\n                        \n                    \n                \n            \n            \n                \nexpression(key: QueryOption, exp?: Expression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exp\n                                    \n                                                Expression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(key: QueryOption)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keep\n                        \n                    \n                \n            \n            \n                \nkeep(keys: QueryOption[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    keys\n                                    \n                                                QueryOption[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n            \n                \noption(key: QueryOption, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:136\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(escape: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    escape\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(keys: QueryOption[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    keys\n                                    \n                                                QueryOption[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toQueryArguments\n                        \n                    \n                \n            \n            \n                \ntoQueryArguments()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataQueryArguments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryOption } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  buildPathAndQuery,\n  Expand,\n  Filter,\n  OrderBy,\n  QueryCustomType,\n  Select,\n  Transform,\n} from './builder';\nimport {\n  ComputeExpression,\n  Expression,\n  FilterExpression,\n  OrderByExpression,\n  SearchExpression,\n} from './expressions';\nimport { ExpandExpression } from './expressions/expand';\nimport { SelectExpression } from './expressions/select';\nimport { ODataQueryOptionHandler } from './handlers';\n\nexport type ODataQueryArguments = {\n  [QueryOption.select]?: Select | SelectExpression | null;\n  [QueryOption.expand]?: Expand | ExpandExpression | null;\n  [QueryOption.compute]?: string | ComputeExpression | null;\n  [QueryOption.filter]?: Filter | FilterExpression | null;\n  [QueryOption.search]?: string | SearchExpression | null;\n  [QueryOption.transform]?: Transform | null;\n  [QueryOption.orderBy]?: OrderBy | OrderByExpression | null;\n  [QueryOption.top]?: number | null;\n  [QueryOption.skip]?: number | null;\n  [QueryOption.skiptoken]?: string | null;\n  [QueryOption.format]?: string | null;\n  [QueryOption.levels]?: number | 'max' | null;\n  [QueryOption.count]?: boolean | null;\n};\n\nexport class ODataQueryOptions {\n  values: Map;\n\n  constructor(values?: Map | { [name: string]: any }) {\n    this.values =\n      values instanceof Map\n        ? values\n        : new Map(Object.entries(values || {}) as Array);\n  }\n\n  // Params\n  pathAndParams(escape: boolean = false): [string, { [name: string]: any }] {\n    let aliases: QueryCustomType[] = [];\n    let options = [\n      QueryOption.select,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.compute,\n      QueryOption.transform,\n      QueryOption.orderBy,\n      QueryOption.top,\n      QueryOption.skip,\n      QueryOption.skiptoken,\n      QueryOption.expand,\n      QueryOption.format,\n      QueryOption.levels,\n      QueryOption.count,\n    ]\n      .filter((key) => !Types.isEmpty(this.values.get(key)))\n      .reduce((acc, key) => {\n        let value = this.values.get(key);\n        if (\n          Types.rawType(value).endsWith('Expression') ||\n          (Types.isArray(value) &&\n            value.some((v: any) => Types.rawType(v).endsWith('Expression')))\n        ) {\n          value = Types.isArray(value)\n            ? value.map((v: Expression) =>\n                Types.rawType(v).endsWith('Expression')\n                  ? v.render({ aliases })\n                  : v\n              )\n            : (value as Expression).render({ aliases });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n\n    return buildPathAndQuery({ ...options, aliases, escape });\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => !Types.isEmpty(value))\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return [...this.values.keys()].reduce((acc, key) => {\n      let value = this.values.get(key);\n      value = 'toJSON' in value ? value.toJSON() : value;\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  }\n\n  toQueryArguments(): ODataQueryArguments {\n    return {\n      select: this.values.get(QueryOption.select) || null,\n      expand: this.values.get(QueryOption.expand) || null,\n      transform: this.values.get(QueryOption.transform) || null,\n      compute: this.values.get(QueryOption.compute) || null,\n      search: this.values.get(QueryOption.search) || null,\n      filter: this.values.get(QueryOption.filter) || null,\n      orderBy: this.values.get(QueryOption.orderBy) || null,\n      top: this.values.get(QueryOption.top) || null,\n      skip: this.values.get(QueryOption.skip) || null,\n      skiptoken: this.values.get(QueryOption.skiptoken) || null,\n      levels: this.values.get(QueryOption.levels) || null,\n      count: this.values.get(QueryOption.count) || null,\n    } as ODataQueryArguments;\n  }\n\n  clone() {\n    return new ODataQueryOptions(Objects.clone(this.values));\n  }\n\n  // Set Renderable\n  expression(key: QueryOption, exp?: Expression) {\n    if (exp !== undefined) this.values.set(key, exp);\n    return this.values.get(key);\n  }\n\n  // Option Handler\n  option(key: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values.set(key, opts);\n    return new ODataQueryOptionHandler(this.values, key);\n  }\n\n  // Query Options tools\n  has(key: QueryOption) {\n    return this.values.has(key);\n  }\n\n  remove(...keys: QueryOption[]) {\n    [...this.values.keys()]\n      .filter((k) => keys.indexOf(k) !== -1)\n      .forEach((key) => {\n        this.values.delete(key);\n      });\n  }\n\n  keep(...keys: QueryOption[]) {\n    [...this.values.keys()]\n      .filter((k) => keys.indexOf(k) === -1)\n      .forEach((key) => {\n        this.values.delete(key);\n      });\n  }\n\n  // Clear\n  clear() {\n    this.values.clear();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataReferential.html":{"url":"classes/ODataReferential.html","title":"class - ODataReferential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataReferential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                property\n                            \n                            \n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n  FieldParser,\n  EdmType,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string | EdmType;\n  private parser: Parser;\n  collection: boolean;\n  navigation: boolean;\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable ?? true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        EdmType.String,\n        EdmType.Date,\n        EdmType.TimeOfDay,\n        EdmType.DateTimeOffset,\n        EdmType.Guid,\n        EdmType.Binary,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === EdmType.Date) schema.format = 'date';\n      else if (this.type === EdmType.TimeOfDay) schema.format = 'time';\n      else if (this.type === EdmType.DateTimeOffset)\n        schema.format = 'date-time';\n      else if (this.type === EdmType.Guid)\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === EdmType.Binary) schema.contentEncoding = 'base64';\n      else if (this.type === EdmType.String && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      [\n        EdmType.Int64,\n        EdmType.Int32,\n        EdmType.Int16,\n        EdmType.Byte,\n        EdmType.SByte,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (\n      [EdmType.Decimal, EdmType.Double].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'number';\n    } else if ([EdmType.Boolean].indexOf(this.type as EdmType) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[] = [];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).forEach(([name, config]) => this.addField(name, config));\n  }\n\n  addField(\n    name: string,\n    config: StructuredTypeFieldConfig\n  ): ODataStructuredTypeFieldParser {\n    const field = new ODataStructuredTypeFieldParser(name, this, config);\n    this._fields.push(field);\n    return field;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {}\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag)\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {}\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataRequest.html":{"url":"classes/ODataRequest.html","title":"class - ODataRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/request.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _body\n                            \n                            \n                                    Private\n                                    Readonly\n                                _headers\n                            \n                            \n                                    Private\n                                    Readonly\n                                _method\n                            \n                            \n                                    Private\n                                    Readonly\n                                _params\n                            \n                            \n                                    Private\n                                    Readonly\n                                _path\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                _responseType\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                bodyQueryOptions\n                            \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                fetchPolicy\n                            \n                            \n                                    Readonly\n                                observe\n                            \n                            \n                                    Readonly\n                                    Optional\n                                reportProgress\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                            \n                                    Readonly\n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                factory\n                            \n                            \n                                isBatch\n                            \n                            \n                                isFetch\n                            \n                            \n                                isMutate\n                            \n                            \n                                isQueryBody\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    responseType\n                                \n                                \n                                    path\n                                \n                                \n                                    method\n                                \n                                \n                                    body\n                                \n                                \n                                    params\n                                \n                                \n                                    headers\n                                \n                                \n                                    pathWithParams\n                                \n                                \n                                    url\n                                \n                                \n                                    urlWithParams\n                                \n                                \n                                    cacheKey\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | null\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpHeaders\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpParams\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        _responseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"arraybuffer\" | \"blob\" | \"json\" | \"text\" | \"value\" | \"property\" | \"entity\" | \"entities\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOption[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpContext\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        observe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"events\" | \"response\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reportProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                    \n                    factory(api: ODataApi, method: string, resource: ODataResource, options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    api\n                                    \n                                                ODataApi\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBatch\n                        \n                    \n                \n            \n            \n                \nisBatch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:345\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFetch\n                        \n                    \n                \n            \n            \n                \nisFetch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:349\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMutate\n                        \n                    \n                \n            \n            \n                \nisMutate()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:353\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isQueryBody\n                        \n                    \n                \n            \n            \n                \nisQueryBody()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:337\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        responseType\n                    \n                \n\n                \n                    \n                        getresponseType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:276\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n                \n                    \n                        getpath()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:285\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        method\n                    \n                \n\n                \n                    \n                        getmethod()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:289\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:293\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:302\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n                \n                    \n                        getheaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:311\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathWithParams\n                    \n                \n\n                \n                    \n                        getpathWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:317\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:323\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        urlWithParams\n                    \n                \n\n                \n                    \n                        geturlWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:327\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        cacheKey\n                    \n                \n\n                \n                    \n                        getcacheKey()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:331\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { ODataApi } from '../api';\nimport {\n  $BATCH,\n  $QUERY,\n  ACCEPT,\n  IF_MATCH_HEADER,\n  IF_NONE_MATCH_HEADER,\n  PREFER,\n  TEXT_PLAIN,\n} from '../constants';\nimport { QueryOption } from '../types';\nimport { Http, Types } from '../utils';\nimport { ODataResource } from './resource';\nimport { ODataOptions } from './types';\n\nexport class ODataRequest {\n  readonly api: ODataApi;\n  readonly observe: 'events' | 'response';\n  readonly context?: HttpContext;\n  readonly reportProgress?: boolean;\n  readonly withCredentials?: boolean;\n  readonly bodyQueryOptions: QueryOption[];\n  readonly fetchPolicy:\n    | 'cache-first'\n    | 'cache-and-network'\n    | 'network-only'\n    | 'no-cache'\n    | 'cache-only';\n  readonly resource: ODataResource;\n  private readonly _responseType?:\n    | 'arraybuffer'\n    | 'blob'\n    | 'json'\n    | 'text'\n    | 'value'\n    | 'property'\n    | 'entity'\n    | 'entities';\n  private readonly _method: string;\n  private readonly _body: any | null;\n  private readonly _headers: HttpHeaders;\n  private readonly _params: HttpParams;\n  private readonly _path: string;\n\n  constructor(init: {\n    method: string;\n    api: ODataApi;\n    resource: ODataResource;\n    body: any;\n    observe: 'events' | 'response';\n    context?: HttpContext;\n    etag?: string;\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n    params?:\n      | HttpParams\n      | {\n          [param: string]:\n            | string\n            | number\n            | boolean\n            | ReadonlyArray;\n        };\n    responseType?:\n      | 'arraybuffer'\n      | 'blob'\n      | 'json'\n      | 'text'\n      | 'value'\n      | 'property'\n      | 'entity'\n      | 'entities';\n    fetchPolicy?:\n      | 'cache-first'\n      | 'cache-and-network'\n      | 'network-only'\n      | 'no-cache'\n      | 'cache-only';\n    withCredentials?: boolean;\n    bodyQueryOptions?: QueryOption[];\n  }) {\n    this._method = init.method;\n    this.resource = init.resource;\n\n    this.api = init.api;\n    this.reportProgress = init.reportProgress;\n    this.observe = init.observe;\n    this.context = init.context;\n\n    // Response Type\n    this._responseType = init.responseType;\n\n    // The Body\n    this._body = init.body !== undefined ? init.body : null;\n    if (this._body !== null) this._body = this.resource.serialize(this._body);\n\n    this.withCredentials =\n      init.withCredentials === undefined\n        ? this.api.options.withCredentials\n        : init.withCredentials;\n    this.fetchPolicy = init.fetchPolicy || this.api.options.fetchPolicy;\n    this.bodyQueryOptions = [\n      ...(this.api.options.bodyQueryOptions || []),\n      ...(init.bodyQueryOptions || []),\n    ];\n\n    // The Path and Params from resource\n    const [resourcePath, resourceParams] = this.resource.pathAndParams();\n    this._path = resourcePath;\n\n    //#region Headers\n    const customHeaders: { [name: string]: string | string[] } = {};\n    if (typeof init.etag === 'string') {\n      if (\n        this.api.options.etag.ifMatch &&\n        ['PUT', 'PATCH', 'DELETE'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_MATCH_HEADER] = init.etag;\n      else if (\n        this.api.options.etag.ifNoneMatch &&\n        ['GET'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_NONE_MATCH_HEADER] = init.etag;\n    }\n\n    const accept = [];\n    // Metadata\n    if (this.api.options.accept?.metadata !== undefined)\n      accept.push(`odata.metadata=${this.api.options.accept?.metadata}`);\n    // IEEE754\n    if (this.api.options.accept?.ieee754Compatible !== undefined)\n      accept.push(\n        `IEEE754Compatible=${this.api.options.accept?.ieee754Compatible}`\n      );\n    // streaming\n    if (this.api.options.accept?.streaming !== undefined)\n      accept.push(`streaming=${this.api.options.accept?.streaming}`);\n    // ExponentialDecimals\n    if (this.api.options.accept?.exponentialDecimals !== undefined)\n      accept.push(\n        `ExponentialDecimals=${this.api.options.accept?.exponentialDecimals}`\n      );\n    if (accept.length > 0)\n      customHeaders[ACCEPT] = [\n        `application/json;${accept.join(';')}`,\n        'text/plain',\n        '*/*',\n      ];\n\n    const prefer = [];\n    // Return\n    if (\n      this.api.options.prefer?.return !== undefined &&\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1\n    )\n      prefer.push(`return=${this.api.options.prefer?.return}`);\n    // MaxPageSize\n    if (\n      this.api.options.prefer?.maxPageSize !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxPageSize}`);\n    // Annotations\n    if (\n      this.api.options.prefer?.includeAnnotations !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(\n        `odata.include-annotations=${this.api.options.prefer?.includeAnnotations}`\n      );\n    // Omit Null Values\n    if (\n      this.api.options.prefer?.omitNullValues === true &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`omit-values=nulls`);\n    // Continue on Error\n    if (\n      this.api.options.prefer?.continueOnError === true &&\n      ['POST'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.continue-on-error`);\n    if (prefer.length > 0) customHeaders[PREFER] = prefer;\n    this._headers = Http.mergeHttpHeaders(\n      this.api.options.headers,\n      customHeaders,\n      init.headers || {}\n    );\n    //#endregion\n\n    //#region Params\n    const customParams: { [name: string]: string | string[] } = {};\n    if (\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1 &&\n      '$select' in resourceParams\n    ) {\n      customParams['$select'] = resourceParams['$select'];\n    }\n    if (['POST'].indexOf(this._method) !== -1 && '$expand' in resourceParams) {\n      customParams['$expand'] = resourceParams['$expand'];\n    }\n    if (['GET'].indexOf(this._method) !== -1) {\n      Object.assign(customParams, resourceParams);\n    }\n\n    const params = Http.mergeHttpParams(\n      this.api.options.params,\n      customParams,\n      init.params || {}\n    );\n\n    this._params =\n      this._responseType === 'entity'\n        ? Http.withoutHttpParams(params, [\n            '$filter',\n            '$orderby',\n            '$count',\n            '$skip',\n            '$top',\n          ])\n        : params;\n    //#endregion\n  }\n\n  static factory(\n    api: ODataApi,\n    method: string,\n    resource: ODataResource,\n    options: ODataOptions & {\n      body?: any;\n      etag?: string;\n      responseType?:\n        | 'arraybuffer'\n        | 'blob'\n        | 'json'\n        | 'text'\n        | 'value'\n        | 'property'\n        | 'entity'\n        | 'entities';\n      observe: 'events' | 'response';\n      withCount?: boolean;\n      bodyQueryOptions?: QueryOption[];\n    }\n  ) {\n    const apiOptions = api.options;\n    let params = options.params || {};\n    if (options.withCount) {\n      params = Http.mergeHttpParams(params, apiOptions.helper.countParam());\n    }\n\n    let etag = options.etag;\n    if (etag === undefined && Types.isPlainObject(options.body)) {\n      etag = apiOptions.helper.etag(options.body);\n    }\n\n    return new ODataRequest({\n      method,\n      etag,\n      api,\n      resource,\n      params,\n      context: options.context,\n      body: options.body,\n      observe: options.observe,\n      headers: options.headers,\n      reportProgress: options.reportProgress,\n      responseType: options.responseType,\n      fetchPolicy: options.fetchPolicy,\n      withCredentials: options.withCredentials,\n      bodyQueryOptions: options.bodyQueryOptions,\n    });\n  }\n\n  get responseType(): 'arraybuffer' | 'blob' | 'json' | 'text' {\n    return this._responseType &&\n      ['property', 'entity', 'entities'].indexOf(this._responseType) !== -1\n      ? 'json'\n      : this._responseType === 'value'\n      ? 'text'\n      : this._responseType;\n  }\n\n  get path() {\n    return this.isQueryBody() ? `${this._path}/${$QUERY}` : this._path;\n  }\n\n  get method() {\n    return this.isQueryBody() ? 'POST' : this._method;\n  }\n\n  get body() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`)\n        )[1].toString()\n      : this._body;\n  }\n\n  get params() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`)\n        )[0]\n      : this._params;\n  }\n\n  get headers() {\n    return this.isQueryBody()\n      ? Http.mergeHttpHeaders(this._headers, { CONTENT_TYPE: TEXT_PLAIN })\n      : this._headers;\n  }\n\n  get pathWithParams() {\n    return this.params.keys().length > 0\n      ? `${this.path}?${this.params}`\n      : this.path;\n  }\n\n  get url() {\n    return `${this.api.serviceRootUrl}${this.path}`;\n  }\n\n  get urlWithParams() {\n    return `${this.api.serviceRootUrl}${this.pathWithParams}`;\n  }\n\n  get cacheKey() {\n    return this._params.keys().length > 0\n      ? `${this._path}?${this._params}`\n      : this._path;\n  }\n\n  isQueryBody() {\n    return (\n      this._method === 'GET' &&\n      this.bodyQueryOptions.length > 0 &&\n      this.bodyQueryOptions.some((name) => this._params.has(`$${name}`))\n    );\n  }\n\n  isBatch() {\n    return this.path.endsWith($BATCH);\n  }\n\n  isFetch() {\n    return ['GET'].indexOf(this._method) !== -1;\n  }\n\n  isMutate() {\n    return ['PUT', 'PATCH', 'POST', 'DELETE'].indexOf(this._method) !== -1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponse.html":{"url":"classes/ODataResponse.html","title":"class - ODataResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/response.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Response\n\n            \n\n            \n                Extends\n            \n            \n                        HttpResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _annotations\n                            \n                            \n                                    Private\n                                    Optional\n                                _context\n                            \n                            \n                                    Private\n                                    Optional\n                                _options\n                            \n                            \n                                    Private\n                                    Optional\n                                _payload\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entities\n                            \n                            \n                                entity\n                            \n                            \n                                    Static\n                                fromHttpResponse\n                            \n                            \n                                    Static\n                                fromJSON\n                            \n                            \n                                property\n                            \n                            \n                                toJSON\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    payload\n                                \n                                \n                                    context\n                                \n                                \n                                    annotations\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResponseOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n            \n                \nentities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:202\n                \n            \n\n\n            \n                \n                    Handle the response body as entities\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntities\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:178\n                \n            \n\n\n            \n                \n                    Handle the response body as an entity\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromHttpResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromHttpResponse(req: ODataRequest, res: HttpResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:47\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                HttpResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromJSON(req: ODataRequest, json: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:59\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    json\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:220\n                \n            \n\n\n            \n                \n                    Handle the response body as a property\n\n\n                    \n                    \n                    \n                        Returns :         ODataProperty\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { body: any; headers: any; status: any; statusText: any; url: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:247\n                \n            \n\n\n            \n                \n                    Handle the response body as a value\n\n\n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:94\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        payload\n                    \n                \n\n                \n                    \n                        getpayload()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:135\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:146\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        annotations\n                    \n                \n\n                \n                    \n                        getannotations()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:156\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  ODataEntityAnnotations,\n  ODataEntitiesAnnotations,\n  ODataPropertyAnnotations,\n} from './annotations';\nimport { Types } from '../../utils/types';\nimport { ODataResource } from '../resource';\nimport { ODataEntities, ODataEntity, ODataProperty } from './types';\nimport {\n  APPLICATION_JSON,\n  ODATA_VERSION_HEADERS,\n  CONTENT_TYPE,\n  CACHE_CONTROL,\n  LOCATION_HEADER,\n  ETAG_HEADERS,\n  ODATA_ENTITYID_HEADERS,\n  PREFERENCE_APPLIED,\n} from '../../constants';\nimport { ODataApi } from '../../api';\nimport { ODataRequest } from '../request';\nimport { ODataResponseOptions } from './options';\nimport { Http } from '../../utils/http';\nimport { ODataContext } from '../../helper';\n\n/**\n * OData Response\n */\nexport class ODataResponse extends HttpResponse {\n  readonly api: ODataApi;\n  readonly resource: ODataResource;\n\n  constructor(init: {\n    api: ODataApi;\n    resource: ODataResource;\n    body: T | null;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n    url?: string;\n  }) {\n    super(init);\n    this.api = init.api;\n    this.resource = init.resource;\n  }\n\n  static fromHttpResponse(req: ODataRequest, res: HttpResponse) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: res.body,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n      url: res.url || undefined,\n    });\n  }\n\n  static fromJSON(\n    req: ODataRequest,\n    json: {\n      body: T | null;\n      headers: { [name: string]: string | string[] };\n      status: number;\n      statusText: string;\n      url: string | null;\n    }\n  ) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: json.body,\n      headers: new HttpHeaders(json.headers),\n      status: json.status,\n      statusText: json.statusText,\n      url: json.url || undefined,\n    });\n  }\n\n  toJSON() {\n    return {\n      body: this.body,\n      headers: this.headers\n        .keys()\n        .map((name) => ({ [name]: this.headers.getAll(name) || [] }))\n        .reduce((acc, header) => Object.assign(acc, header), {}),\n      status: this.status,\n      statusText: this.statusText,\n      url: this.url,\n    };\n  }\n\n  private _options?: ODataResponseOptions;\n  get options(): ODataResponseOptions {\n    if (this._options === undefined) {\n      this._options = new ODataResponseOptions(this.api.options.parserOptions);\n      const contentType = this.headers.get(CONTENT_TYPE);\n      if (contentType && contentType.indexOf(APPLICATION_JSON) !== -1) {\n        const features = contentType\n          .split(',')\n          .find((p) => p.startsWith(APPLICATION_JSON)) as string;\n        this._options.setFeatures(features);\n      }\n      const headerKey = Http.resolveHeaderKey(\n        this.headers,\n        ODATA_VERSION_HEADERS\n      );\n      if (headerKey) {\n        const version = (this.headers.get(headerKey) || '').replace(\n          /\\;/g,\n          ''\n        ) as '2.0' | '3.0' | '4.0';\n        this._options.setVersion(version);\n      }\n\n      const preferenceApplied = this.headers.get(PREFERENCE_APPLIED);\n      if (preferenceApplied) {\n        this._options.setPreferenceApplied(preferenceApplied);\n      }\n\n      const location = this.headers.get(LOCATION_HEADER);\n      if (location) {\n        this._options.setLocation(location);\n      }\n\n      const cacheControl = this.headers.get(CACHE_CONTROL);\n      if (cacheControl) {\n        this._options.setCache(cacheControl);\n      }\n    }\n    return this._options;\n  }\n\n  private _payload?: any;\n  get payload() {\n    if (this._payload === undefined) {\n      this._payload =\n        this.body && this.options.version === '2.0'\n          ? (this.body)['d']\n          : this.body;\n    }\n    return this._payload;\n  }\n\n  private _context?: any;\n  get context(): ODataContext {\n    if (this._context === undefined) {\n      this._context = this.options.helper.context(\n        Types.isPlainObject(this.payload) ? this.payload : {}\n      );\n    }\n    return this._context;\n  }\n\n  private _annotations?: Map;\n  get annotations(): Map {\n    if (this._annotations === undefined) {\n      const options = this.options;\n      this._annotations = options.helper.annotations(this.payload || {});\n      let key = Http.resolveHeaderKey(this.headers, ETAG_HEADERS);\n      if (key) {\n        const etag = this.headers.get(key);\n        if (etag) this._annotations.set(options.helper.ODATA_ETAG, etag);\n      }\n      key = Http.resolveHeaderKey(this.headers, ODATA_ENTITYID_HEADERS);\n      if (key) {\n        const entityId = this.headers.get(key);\n        if (entityId) this._annotations.set(options.helper.ODATA_ID, entityId);\n      }\n    }\n    return this._annotations;\n  }\n\n  /**\n   * Handle the response body as an entity\n   * @returns\n   */\n  entity(): ODataEntity {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntityAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? annots.data(payload) : null;\n    let entity = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (entity !== null)\n      entity = this.resource.deserialize(entity, options) as T;\n    return { entity, annots };\n  }\n\n  /**\n   * Handle the response body as entities\n   * @returns\n   */\n  entities(): ODataEntities {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntitiesAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    let entities = payload ? annots.data(payload) : null;\n    if (entities !== null)\n      entities = this.resource.deserialize(entities, options) as T[];\n    return { entities, annots };\n  }\n\n  /**\n   * Handle the response body as a property\n   * @returns\n   */\n  property(): ODataProperty {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataPropertyAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? (annots.data(payload) as T) : null;\n    let property = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(\n            data as { [key: string]: any },\n            this.api.options.stripMetadata\n          )\n        : data\n    ) as T | null;\n\n    if (property !== null)\n      property = this.resource.deserialize(property, options) as T;\n    return { property, annots };\n  }\n\n  /**\n   * Handle the response body as a value\n   * @returns\n   */\n  value(): T | null {\n    const options = this.options;\n    const payload = this.payload;\n    let value = (\n      payload !== null && Types.isPlainObject(payload)\n        ? options.helper.attributes(payload, this.api.options.stripMetadata)\n        : payload\n    ) as T | null;\n\n    if (value !== null) value = this.resource.deserialize(value, options) as T;\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponseOptions.html":{"url":"classes/ODataResponseOptions.html","title":"class - ODataResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ResponseOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cacheability\n                            \n                            \n                                    Optional\n                                ieee754Compatible\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                maxAge\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                streaming\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                setCache\n                            \n                            \n                                setFeatures\n                            \n                            \n                                setLocation\n                            \n                            \n                                setPreferenceApplied\n                            \n                            \n                                setVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ParserOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ParserOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cacheability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ieee754Compatible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        streaming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataResponseOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCache\n                        \n                    \n                \n            \n            \n                \nsetCache(cacheControl: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cacheControl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFeatures\n                        \n                    \n                \n            \n            \n                \nsetFeatures(features: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    features\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLocation\n                        \n                    \n                \n            \n            \n                \nsetLocation(location: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPreferenceApplied\n                        \n                    \n                \n            \n            \n                \nsetPreferenceApplied(preference: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    preference\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVersion\n                        \n                    \n                \n            \n            \n                \nsetVersion(version: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  CacheCacheability,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  ResponseOptions,\n} from '../../types';\nimport {\n  DEFAULT_VERSION,\n  MAX_AGE,\n  VERSION_2_0,\n  VERSION_3_0,\n  VERSION_4_0,\n} from '../../constants';\n\nimport { ODataHelper } from '../../helper';\n\nexport class ODataResponseOptions implements ResponseOptions {\n  version: ODataVersion;\n  streaming?: boolean;\n  // OData\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  // Location\n  location?: string;\n  // Cache\n  cacheability?: 'public' | 'private' | 'no-cache' | 'no-store';\n  maxAge?: number;\n\n  constructor(config: ParserOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n\n  clone() {\n    return new ODataResponseOptions(this);\n  }\n\n  setFeatures(features: string) {\n    features.split(';').forEach((o) => {\n      let [k, v] = o.split('=');\n      switch (k.trim()) {\n        case 'odata.metadata':\n          this.metadata = v as ODataMetadataType;\n          break;\n        case 'odata.streaming':\n          this.streaming = v == 'true';\n          break;\n        case 'IEEE754Compatible':\n          this.ieee754Compatible = v == 'true';\n          break;\n      }\n    });\n  }\n\n  setVersion(version: string) {\n    const value = version.replace(/\\;/g, '').trim();\n    if ([VERSION_2_0, VERSION_3_0, VERSION_4_0].indexOf(value) !== -1)\n      this.version = value as ODataVersion;\n  }\n\n  setLocation(location: string) {\n    // TODO: resolve location?\n    this.location = location;\n  }\n\n  setPreferenceApplied(preference: string) {\n    preference.split(',').forEach((prefer) => {\n      // TODO: resolve preference\n    });\n  }\n\n  setCache(cacheControl: string) {\n    cacheControl.split(',').forEach((directive) => {\n      if (directive.startsWith(MAX_AGE)) {\n        let maxAge = Number(directive.split('=')[1]);\n        if (!Number.isNaN(maxAge)) this.maxAge = maxAge;\n      }\n      if (\n        ['public', 'private', 'no-cache', 'no-store'].indexOf(directive) !== -1\n      ) {\n        this.cacheability = directive as CacheCacheability;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchema.html":{"url":"classes/ODataSchema.html","title":"class - ODataSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                api\n                            \n                            \n                                callables\n                            \n                            \n                                containers\n                            \n                            \n                                entities\n                            \n                            \n                                enums\n                            \n                            \n                                namespace\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                    Public\n                                findCallableForType\n                            \n                            \n                                    Public\n                                findEntitySetForType\n                            \n                            \n                                    Public\n                                findEnumTypeForType\n                            \n                            \n                                    Public\n                                findStructuredTypeForType\n                            \n                            \n                                isNamespaceOf\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySets\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: SchemaConfig, api: ODataApi)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        ODataApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callables\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityContainer[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findCallableForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCallableForType(type: string, bindingType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:66\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bindingType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEntitySetForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEntitySetForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEnumTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEnumTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:54\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findStructuredTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findStructuredTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:60\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNamespaceOf\n                        \n                    \n                \n            \n            \n                \nisNamespaceOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySets\n                    \n                \n\n                \n                    \n                        getentitySets()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/schema.ts:46\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataApi } from '../api';\nimport { Parser, ParserOptions, SchemaConfig } from '../types';\nimport { OData } from '../utils/odata';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataCallable } from './callable';\nimport { ODataEntityContainer } from './entity-container';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataEnumType } from './enum-type';\nimport { ODataStructuredType } from './structured-type';\n\nexport class ODataSchema extends ODataAnnotatable {\n  api: ODataApi;\n  namespace: string;\n  alias?: string;\n  enums: ODataEnumType[];\n  entities: ODataStructuredType[];\n  callables: ODataCallable[];\n  containers: ODataEntityContainer[];\n\n  constructor(config: SchemaConfig, api: ODataApi) {\n    super(config);\n    this.api = api;\n    this.namespace = config.namespace;\n    this.alias = config.alias;\n    this.enums = (config.enums || []).map(\n      (config) => new ODataEnumType(config, this)\n    );\n    this.entities = (config.entities || []).map(\n      (config) => new ODataStructuredType(config, this)\n    );\n    this.callables = OData.mergeCallableParameters(config.callables || []).map(\n      (config) => new ODataCallable(config, this)\n    );\n    this.containers = (config.containers || []).map(\n      (config) => new ODataEntityContainer(config, this)\n    );\n  }\n\n  isNamespaceOf(type: string) {\n    return (\n      type.startsWith(this.namespace) ||\n      (this.alias && type.startsWith(this.alias))\n    );\n  }\n\n  get entitySets() {\n    return this.containers.reduce(\n      (acc, container) => [...acc, ...container.entitySets],\n      [] as ODataEntitySet[]\n    );\n  }\n\n  //#region Find for Type\n  public findEnumTypeForType(type: string) {\n    return this.enums.find((e) => e.isTypeOf(type)) as\n      | ODataEnumType\n      | undefined;\n  }\n\n  public findStructuredTypeForType(type: string) {\n    return this.entities.find((e) => e.isTypeOf(type)) as\n      | ODataStructuredType\n      | undefined;\n  }\n\n  public findCallableForType(type: string, bindingType?: string) {\n    const bindingStructuredType =\n      bindingType !== undefined\n        ? this.api.findStructuredTypeForType(bindingType)\n        : undefined;\n    return this.callables.find((c) => {\n      const isCallableType = c.isTypeOf(type);\n      const callableBindingType = c.binding()?.type;\n      const callableBindingStructuredType =\n        callableBindingType !== undefined\n          ? this.api.findStructuredTypeForType(callableBindingType)\n          : undefined;\n      return (\n        isCallableType &&\n        (!bindingStructuredType ||\n          (callableBindingStructuredType &&\n            bindingStructuredType.isSubtypeOf(callableBindingStructuredType)))\n      );\n    }) as ODataCallable | undefined;\n  }\n\n  public findEntitySetForType(type: string) {\n    return this.entitySets.find((e) => e.isTypeOf(type));\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    // Configure Enums\n    this.enums.forEach((enu) =>\n      enu.configure({ options, parserForType, findOptionsForType })\n    );\n    // Configure Entities\n    this.entities.forEach((config) =>\n      config.configure({ options, parserForType, findOptionsForType })\n    );\n    // Configure callables\n    this.callables.forEach((callable) =>\n      callable.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchemaElement.html":{"url":"classes/ODataSchemaElement.html","title":"class - ODataSchemaElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchemaElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/element.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:58\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:68\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:47\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:29\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:38\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/element.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\nimport { Strings } from '../utils';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataSchemaElement extends ODataAnnotatable {\n  name: string;\n  schema: ODataSchema;\n\n  constructor(\n    config: { annotations?: AnnotationConfig[]; name: string },\n    schema: ODataSchema\n  ) {\n    super(config);\n    this.schema = schema;\n    this.name = config.name;\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  /**\n   * Returns a full type of the structured type including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string): boolean {\n    var names = [`${this.schema.namespace}.${this.name}`];\n    if (this.schema.alias) names.push(`${this.schema.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a subtype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSubtypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a supertype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSupertypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ODataServiceFactory.html":{"url":"injectables/ODataServiceFactory.html","title":"injectable - ODataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ODataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entitySet\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet(entitySetName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:15\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create an entity set service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entitySetName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the entity set.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitySetService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton(singletonName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create a singleton service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    singletonName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the singleton.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataSingletonService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ODataClient } from '../client';\nimport { ODataEntitySetService } from './entity-set';\nimport { ODataSingletonService } from './singleton';\n\n@Injectable()\nexport class ODataServiceFactory {\n  constructor(protected client: ODataClient) {}\n\n  /**\n   * Factory method to create an entity set service.\n   * @param entitySetName Name of the entity set.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  entitySet(\n    entitySetName: string,\n    apiNameOrEntityType?: string\n  ): ODataEntitySetService {\n    return new (class extends ODataEntitySetService {})(\n      this.client,\n      entitySetName,\n      apiNameOrEntityType\n    );\n  }\n\n  /** Factory method to create a singleton service.\n   * @param singletonName Name of the singleton.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  singleton(\n    singletonName: string,\n    apiNameOrEntityType?: string\n  ): ODataSingletonService {\n    return new (class extends ODataSingletonService {})(\n      this.client,\n      singletonName,\n      apiNameOrEntityType\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSingletonService.html":{"url":"classes/ODataSingletonService.html","title":"class - ODataSingletonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSingletonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Singleton Service\nwww.odata.org/getting-started/advanced-tutorial/#singleton\n\n            \n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    singletonSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:27\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:19\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Returns :         ODataSingletonResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:58\n                \n            \n\n\n            \n                \n                    Patch the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:44\n                \n            \n\n\n            \n                \n                    Update the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:26\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:100\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        singletonSchema\n                    \n                \n\n                \n                    \n                        getsingletonSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/singleton.ts:34\n                                \n                            \n                    \n                        \n                                The schema for the singleton.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport type { ODataModel } from '../models/model';\nimport type {\n  ODataEntity,\n  ODataOptions,\n  ODataSingletonResource,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\n/**\n * OData Singleton Service\n * www.odata.org/getting-started/advanced-tutorial/#singleton\n */\nexport class ODataSingletonService extends ODataEntityService {\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(): ODataSingletonResource {\n    return this.client.singleton(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M) {\n    model.attach(this.entity());\n  }\n\n  /**\n   * The schema for the singleton.\n   */\n  get singletonSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Update the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public patch(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.modify(attrs, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:292\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Operator\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:312\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:303\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; op: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:299\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByExpression.html":{"url":"classes/OrderByExpression.html","title":"class - OrderByExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                ascending\n                            \n                            \n                                clone\n                            \n                            \n                                descending\n                            \n                            \n                                    Static\n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ascending\n                        \n                    \n                \n            \n            \n                \nascending(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         OrderByExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descending\n                        \n                    \n                \n            \n            \n                \ndescending(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        orderBy\n                        \n                    \n                \n            \n            \n                \n                    \n                    orderBy(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void, current?: OrderByExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:49\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                OrderByExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Field, Renderable } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.field, { aliases, escape, prefix })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Readonly>;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new OrderByExpression(),\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByField.html":{"url":"classes/OrderByField.html","title":"class - OrderByField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: Renderable, order: \"asc\" | \"desc\")\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        order\n                                                  \n                                                        \n                                                                    \"asc\" | \"desc\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         OrderByField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; order: \"asc\" | \"desc\"; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Field, Renderable } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.field, { aliases, escape, prefix })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Readonly>;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new OrderByExpression(),\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Parser.html":{"url":"interfaces/Parser.html","title":"interface - Parser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Parser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deserialize\n                                    \n                                \n                                \n                                    \n                                        encode\n                                    \n                                \n                                \n                                    \n                                        serialize\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ParserOptions | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ParserOptions | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ParserOptions | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParserOptions.html":{"url":"interfaces/ParserOptions.html","title":"interface - ParserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exponentialDecimals\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ieee754Compatible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            streaming\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exponentialDecimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exponentialDecimals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ieee754Compatible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ieee754Compatible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        streaming\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        streaming:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PassedInitialConfig.html":{"url":"interfaces/PassedInitialConfig.html","title":"interface - PassedInitialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PassedInitialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            config\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:         ApiConfig | ApiConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiConfig | ApiConfig[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loader:         Provider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Provider\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Renderable.html":{"url":"interfaces/Renderable.html","title":"interface - Renderable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Renderable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        clone\n                                    \n                                \n                                \n                                    \n                                        render\n                                    \n                                \n                                \n                                    \n                                        toJSON\n                                    \n                                \n                                \n                                    \n                                        toString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseJson.html":{"url":"interfaces/ResponseJson.html","title":"interface - ResponseJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            statusText\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseOptions.html":{"url":"interfaces/ResponseOptions.html","title":"interface - ResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cacheability\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAge\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheability\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheability:         CacheCacheability\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CacheCacheability\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAge\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAge:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchExpression.html":{"url":"classes/SearchExpression.html","title":"class - SearchExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _connector\n                            \n                            \n                                    Private\n                                _negated\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                and\n                            \n                            \n                                clone\n                            \n                            \n                                connector\n                            \n                            \n                                negated\n                            \n                            \n                                not\n                            \n                            \n                                or\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                search\n                            \n                            \n                                term\n                            \n                            \n                                    \n                                toJSON\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _connector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SearchConnector\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _negated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable, connector?: SearchConnector)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    connector\n                                    \n                                                SearchConnector\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        and\n                        \n                    \n                \n            \n            \n                \nand(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:138\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connector\n                        \n                    \n                \n            \n            \n                \nconnector()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchConnector\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        negated\n                        \n                    \n                \n            \n            \n                \nnegated()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        or\n                        \n                    \n                \n            \n            \n                \nor(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:123\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(opts: (builder: SearchExpressionBuilder,current: SearchExpression) => void, current?: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:59\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n            \n                \nterm(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:146\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { children: any; connector: SearchConnector; negated: boolean; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.value, { aliases, escape, prefix })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  static search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n      connector: this._connector,\n      negated: this._negated,\n    };\n  }\n\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchTerm.html":{"url":"classes/SearchTerm.html","title":"class - SearchTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchTerm\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; value: string; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:11\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.value, { aliases, escape, prefix })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  static search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n      connector: this._connector,\n      negated: this._negated,\n    };\n  }\n\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SegmentHandler.html":{"url":"classes/SegmentHandler.html","title":"class - SegmentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SegmentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearKey\n                            \n                            \n                                clearParameters\n                            \n                            \n                                hasKey\n                            \n                            \n                                hasParameters\n                            \n                            \n                                key\n                            \n                            \n                                parameters\n                            \n                            \n                                path\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segment: ODataSegment)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segment\n                                                  \n                                                        \n                                                                        ODataSegment\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearKey\n                        \n                    \n                \n            \n            \n                \nclearKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearParameters\n                        \n                    \n                \n            \n            \n                \nclearParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasKey\n                        \n                    \n                \n            \n            \n                \nhasKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasParameters\n                        \n                    \n                \n            \n            \n                \nhasParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n            \n                \nkey(value?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:19\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EntityKey\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n            \n                \nparameters(value?: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PathSegment } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegment.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegment.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegment.action);\n  }\n  function() {\n    return this.segments.get(PathSegment.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegment.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegment.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectExpression.html":{"url":"classes/SelectExpression.html","title":"class - SelectExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/select.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                select\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        select\n                        \n                    \n                \n            \n            \n                \n                    \n                    select(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void, current?: SelectExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                SelectExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { Field, Renderable } from './syntax';\n\nexport type SelectExpressionBuilder = {\n  t: Readonly>;\n  e: () => SelectExpression;\n};\nexport class SelectExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression,\n    current?: SelectExpression\n  ): SelectExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new SelectExpression(),\n      },\n      current\n    ) as SelectExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(',');\n  }\n\n  clone() {\n    return new SelectExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): SelectExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: any): SelectExpression {\n    return this._add(field);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringAndCollectionFunctions.html":{"url":"classes/StringAndCollectionFunctions.html","title":"class - StringAndCollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringAndCollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                concat\n                            \n                            \n                                contains\n                            \n                            \n                                endsWith\n                            \n                            \n                                indexOf\n                            \n                            \n                                length\n                            \n                            \n                                startsWith\n                            \n                            \n                                subString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        concat\n                        \n                    \n                \n            \n            \n                \nconcat(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endsWith\n                        \n                    \n                \n            \n            \n                \nendsWith(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indexOf\n                        \n                    \n                \n            \n            \n                \nindexOf(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startsWith\n                        \n                    \n                \n            \n            \n                \nstartsWith(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subString\n                        \n                    \n                \n            \n            \n                \nsubString(field: any, start: number, length?: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringFunctions.html":{"url":"classes/StringFunctions.html","title":"class - StringFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesPattern\n                            \n                            \n                                toLower\n                            \n                            \n                                toUpper\n                            \n                            \n                                trim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesPattern\n                        \n                    \n                \n            \n            \n                \nmatchesPattern(value: T | string, pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLower\n                        \n                    \n                \n            \n            \n                \ntoLower(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUpper\n                        \n                    \n                \n            \n            \n                \ntoUpper(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trim\n                        \n                    \n                \n            \n            \n                \ntrim(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuredTypeFieldOptions.html":{"url":"interfaces/StructuredTypeFieldOptions.html","title":"interface - StructuredTypeFieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuredTypeFieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         StructuredTypeFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuredTypeFieldConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeFunctions.html":{"url":"classes/TypeFunctions.html","title":"class - TypeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cast\n                            \n                            \n                                isof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cast\n                        \n                    \n                \n            \n            \n                \ncast(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isof\n                        \n                    \n                \n            \n            \n                \nisof(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:269\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^15.2.6\n        \n            @angular/common : ^15.2.6\n        \n            @angular/compiler : ^15.2.6\n        \n            @angular/core : ^15.2.6\n        \n            @angular/forms : ^15.2.6\n        \n            @angular/platform-browser : ^15.2.6\n        \n            @angular/platform-browser-dynamic : ^15.2.6\n        \n            @angular/router : ^15.2.6\n        \n            @compodoc/compodoc : ^1.1.19\n        \n            rxjs : ~7.5.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.12.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EdmType   (projects/.../types.ts)\n                        \n                        \n                            FieldType   (projects/.../metadata.ts)\n                        \n                        \n                            ODataModelEventType   (projects/.../options.ts)\n                        \n                        \n                            ODataModelState   (projects/.../options.ts)\n                        \n                        \n                            PathSegment   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomTypes   (projects/.../builder.ts)\n                        \n                        \n                            QueryOption   (projects/.../types.ts)\n                        \n                        \n                            StandardAggregateMethods   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        EdmType\n                    \n                \n                        \n                            \n                                 Guid\n                            \n                        \n                        \n                            \n                                Value : Edm.Guid\n                            \n                        \n                        \n                            \n                                 Int16\n                            \n                        \n                        \n                            \n                                Value : Edm.Int16\n                            \n                        \n                        \n                            \n                                 String\n                            \n                        \n                        \n                            \n                                Value : Edm.String\n                            \n                        \n                        \n                            \n                                 Boolean\n                            \n                        \n                        \n                            \n                                Value : Edm.Boolean\n                            \n                        \n                        \n                            \n                                 Byte\n                            \n                        \n                        \n                            \n                                Value : Edm.Byte\n                            \n                        \n                        \n                            \n                                 SByte\n                            \n                        \n                        \n                            \n                                Value : Edm.SByte\n                            \n                        \n                        \n                            \n                                 Int32\n                            \n                        \n                        \n                            \n                                Value : Edm.Int32\n                            \n                        \n                        \n                            \n                                 Int64\n                            \n                        \n                        \n                            \n                                Value : Edm.Int64\n                            \n                        \n                        \n                            \n                                 Date\n                            \n                        \n                        \n                            \n                                Value : Edm.Date\n                            \n                        \n                        \n                            \n                                 TimeOfDay\n                            \n                        \n                        \n                            \n                                Value : Edm.TimeOfDay\n                            \n                        \n                        \n                            \n                                 DateTimeOffset\n                            \n                        \n                        \n                            \n                                Value : Edm.DateTimeOffset\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                Value : Edm.Duration\n                            \n                        \n                        \n                            \n                                 Decimal\n                            \n                        \n                        \n                            \n                                Value : Edm.Decimal\n                            \n                        \n                        \n                            \n                                 Double\n                            \n                        \n                        \n                            \n                                Value : Edm.Double\n                            \n                        \n                        \n                            \n                                 Single\n                            \n                        \n                        \n                            \n                                Value : Edm.Single\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n                        \n                            \n                                Value : Edm.Binary\n                            \n                        \n                        \n                            \n                                 Stream\n                            \n                        \n                        \n                            \n                                Value : Edm.Stream\n                            \n                        \n                        \n                            \n                                 Geography\n                            \n                        \n                        \n                            \n                                Value : Edm.Geography\n                            \n                        \n                        \n                            \n                                 GeographyPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyPoint\n                            \n                        \n                        \n                            \n                                 GeographyLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyLineString\n                            \n                        \n                        \n                            \n                                 GeographyPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyPolygon\n                            \n                        \n                        \n                            \n                                 GeographyMultiPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiPoint\n                            \n                        \n                        \n                            \n                                 GeographyMultiLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiLineString\n                            \n                        \n                        \n                            \n                                 GeographyMultiPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiPolygon\n                            \n                        \n                        \n                            \n                                 GeographyCollection\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyCollection\n                            \n                        \n                        \n                            \n                                 Geometry\n                            \n                        \n                        \n                            \n                                Value : Edm.Geometry\n                            \n                        \n                        \n                            \n                                 GeometryPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryPoint\n                            \n                        \n                        \n                            \n                                 GeometryLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryLineString\n                            \n                        \n                        \n                            \n                                 GeometryPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryPolygon\n                            \n                        \n                        \n                            \n                                 GeometryMultiPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiPoint\n                            \n                        \n                        \n                            \n                                 GeometryMultiLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiLineString\n                            \n                        \n                        \n                            \n                                 GeometryMultiPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiPolygon\n                            \n                        \n                        \n                            \n                                 GeometryCollection\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryCollection\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PathSegment\n                    \n                \n                        \n                            \n                                 batch\n                            \n                        \n                        \n                            \n                                Value : batch\n                            \n                        \n                        \n                            \n                                 metadata\n                            \n                        \n                        \n                            \n                                Value : metadata\n                            \n                        \n                        \n                            \n                                 entitySet\n                            \n                        \n                        \n                            \n                                Value : entitySet\n                            \n                        \n                        \n                            \n                                 singleton\n                            \n                        \n                        \n                            \n                                Value : singleton\n                            \n                        \n                        \n                            \n                                 type\n                            \n                        \n                        \n                            \n                                Value : type\n                            \n                        \n                        \n                            \n                                 property\n                            \n                        \n                        \n                            \n                                Value : property\n                            \n                        \n                        \n                            \n                                 navigationProperty\n                            \n                        \n                        \n                            \n                                Value : navigationProperty\n                            \n                        \n                        \n                            \n                                 reference\n                            \n                        \n                        \n                            \n                                Value : reference\n                            \n                        \n                        \n                            \n                                 value\n                            \n                        \n                        \n                            \n                                Value : value\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 function\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 action\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryOption\n                    \n                \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 expand\n                            \n                        \n                        \n                            \n                                Value : expand\n                            \n                        \n                        \n                            \n                                 compute\n                            \n                        \n                        \n                            \n                                Value : compute\n                            \n                        \n                        \n                            \n                                 filter\n                            \n                        \n                        \n                            \n                                Value : filter\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : search\n                            \n                        \n                        \n                            \n                                 transform\n                            \n                        \n                        \n                            \n                                Value : transform\n                            \n                        \n                        \n                            \n                                 orderBy\n                            \n                        \n                        \n                            \n                                Value : orderBy\n                            \n                        \n                        \n                            \n                                 top\n                            \n                        \n                        \n                            \n                                Value : top\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : skip\n                            \n                        \n                        \n                            \n                                 skiptoken\n                            \n                        \n                        \n                            \n                                Value : skiptoken\n                            \n                        \n                        \n                            \n                                 format\n                            \n                        \n                        \n                            \n                                Value : format\n                            \n                        \n                        \n                            \n                                 levels\n                            \n                        \n                        \n                            \n                                Value : levels\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/responses/metadata.ts\n    \n        \n            \n                \n                    \n                        \n                        FieldType\n                    \n                \n                        \n                            \n                                 ATTRIBUTE\n                            \n                        \n                        \n                            \n                                 TAG\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n            \n                \n                    \n                        \n                        ODataModelEventType\n                    \n                \n                        \n                            \n                                 Change\n                            \n                        \n                        \n                            \n                                Value : change\n                            \n                        \n                        \n                            \n                                 Reset\n                            \n                        \n                        \n                            \n                                Value : reset\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Destroy\n                            \n                        \n                        \n                            \n                                Value : destroy\n                            \n                        \n                        \n                            \n                                 Add\n                            \n                        \n                        \n                            \n                                Value : add\n                            \n                        \n                        \n                            \n                                 Remove\n                            \n                        \n                        \n                            \n                                Value : remove\n                            \n                        \n                        \n                            \n                                 Invalid\n                            \n                        \n                        \n                            \n                                Value : invalid\n                            \n                        \n                        \n                            \n                                 Request\n                            \n                        \n                        \n                            \n                                Value : request\n                            \n                        \n                        \n                            \n                                 Sync\n                            \n                        \n                        \n                            \n                                Value : sync\n                            \n                        \n                        \n                            \n                                 Attach\n                            \n                        \n                        \n                            \n                                Value : attach\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ODataModelState\n                    \n                \n                        \n                            \n                                 Added\n                            \n                        \n                        \n                            \n                                 Removed\n                            \n                        \n                        \n                            \n                                 Unchanged\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n            \n                \n                    \n                        \n                        QueryCustomTypes\n                    \n                \n                        \n                            \n                                 Raw\n                            \n                        \n                        \n                            \n                                 Alias\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardAggregateMethods\n                    \n                \n                        \n                            \n                                 sum\n                            \n                        \n                        \n                            \n                                Value : sum\n                            \n                        \n                        \n                            \n                                 min\n                            \n                        \n                        \n                            \n                                Value : min\n                            \n                        \n                        \n                            \n                                 max\n                            \n                        \n                        \n                            \n                                Value : max\n                            \n                        \n                        \n                            \n                                 average\n                            \n                        \n                        \n                            \n                                Value : average\n                            \n                        \n                        \n                            \n                                 countdistinct\n                            \n                        \n                        \n                            \n                                Value : countdistinct\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngular OData\n\n\nA fluent API for querying, creating, updating and deleting OData resources in Angular.\nOData service for Angular.\nPlease check also my other related project, OData Angular Generator\nDemo:\nFull examples of the library:\n\nAngularODataEntity\n\nTable of contents\n\nInstallation\nWithout Schema\nWith Schema\nUsage\nOData Version\nQuery Builder\nDocumentation\n\nInstallation\nInstall from npm:\nnpm i angular-odataWithout Schema\nImport ODataModule into your application module definition and setup the module for the serviceRootUrl.\nimport { NgModule } from '@angular/core';\nimport { ODataModule } from 'angular-odata';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({\n      config: {\n        serviceRootUrl: 'https://services.odata.org/V4/(S(4m0tuxtnhcfctl4gzem3gr10))/TripPinServiceRW/'\n      }\n    })\n    ...\n  ]\n})\nexport class AppModule {}With Schema\nUse OData Angular Generator for generate the Config and the Module definition.\nImport ODataModule, Config and Module into your application module.\nSetup ODataModule with Config and import it along with Module.\nimport { NgModule } from '@angular/core';\n\nimport { ODataModule } from 'angular-odata';\nimport { TripPinConfig, TripPinModule } from './trippin';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({ config: TripPinConfig }),\n    TripPinModule\n  ]\n  ...\n})\nexport class AppModule {}Usage\nInject and use the ODataServiceFactory\nimport { Component } from \"@angular/core\";\nimport { ODataClient, ODATA_ETAG } from \"angular-odata\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"TripPin\";\n  constructor(private factory: ODataServiceFactory) {\n    this.queries();\n  }\n\n  queries() {\n    // Use OData Service Factory\n    let airportsService = this.factory.entitySet(\n      \"Airports\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Airport\"\n    );\n    let airports = airportsService.entities();\n\n    // Fetch airports\n    airports.fetch().subscribe(({ entities }) => {\n      console.log(\"Airports: \", entities);\n    });\n\n    // Fetch airports with count\n    airports\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    // Fetch all airports\n    airports\n      .fetchAll()\n      .subscribe((airports) => console.log(\"All Airports: \", airports));\n\n    // Fetch airport with key and fetch again from cache\n    airports\n      .entity(\"CYYZ\")\n      .fetch()\n      .pipe(\n        switchMap(() =>\n          // From Cache!\n          airports.entity(\"CYYZ\").fetch({ fetchPolicy: \"cache-first\" })\n        )\n      )\n      .subscribe(({ entity, annots }) =>\n        console.log(\"Airport: \", entity, \"Annotations: \", annots)\n      );\n\n    // Clone airports resource and filter new resource\n    airports\n      .clone()\n      .query((q) =>\n        q.filter({ Location: { City: { CountryRegion: \"United States\" } } })\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports of United States: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) =>\n      q.filter().push({ Location: { City: { Region: \"California\" } } })\n    );\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports in California: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Store airports resource\n    var json = airports.toJSON();\n    // Load airports resource\n    airports = this.odata.fromJSON(json) as ODataEntitySetResource;\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) => q.filter().clear());\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    let peopleService = this.factory.entitySet(\n      \"People\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Person\"\n    );\n    let people = peopleService.entities();\n\n    // Clone people resource and expand and fetch\n    people\n      .clone()\n      .query((q) =>\n        q.expand({\n          Friends: {\n            expand: { Friends: { select: [\"AddressInfo\"] } },\n          },\n          Trips: { select: [\"Name\", \"Tags\"] },\n        })\n      )\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Clone people resource and filter with expressions\n    people\n      .clone()\n      .query((q) =>\n        q.filter(({ e }) =>\n          e().eq(\"Emails\", \"john@example.com\").or(e().eq(\"UserName\", \"john\"))\n        )\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    this.odata\n      .batch(\"TripPin\")\n      .exec(() =>\n        forkJoin({\n          airports: airports.fetch(),\n          people: people.fetch({ withCount: true }),\n        })\n      )\n      .subscribe();\n  }\n}OData Version\nThe library works mainly with OData Version 4, however, it incorporates basic support for versions 3 and 2.\nQuery Builder\nFor a deep query customizations the library use odata-query and odata-filter-builder as a builders.\n\nOData v4 query builder\nOData Filter Builder\n\nDocumentation\nThe api documentation is generated using compodoc and can be viewed here: https://diegomvh.github.io/angular-odata/docs/\nLibrary documentation can be viewed on the wiki here: https://github.com/diegomvh/angular-odata/wiki\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Diego van Haaster\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ODataModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    125 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.122.0\n        \n            Description : Client side OData typescript library for Angular\n        \n            Keywords : client, odata, odata v4, odata v3, odata v2, typescript, api, @angular, angular\n        \n            Homepage : https://github.com/diegomvh/angular-odata\n        \n            Bugs : https://github.com/diegomvh/angular-odata/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/diegomvh/angular-odata.git\n        \n            Author : Diego van Haaster\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (projects/.../builder.ts)\n                        \n                        \n                            AnnotationConfig   (projects/.../types.ts)\n                        \n                        \n                            ApiConfig   (projects/.../types.ts)\n                        \n                        \n                            CacheCacheability   (projects/.../types.ts)\n                        \n                        \n                            CallableConfig   (projects/.../types.ts)\n                        \n                        \n                            ComputeExpressionBuilder   (projects/.../compute.ts)\n                        \n                        \n                            CountExpressionBuilder   (projects/.../count.ts)\n                        \n                        \n                            Duration   (projects/.../durations.ts)\n                        \n                        \n                            EntityContainerConfig   (projects/.../types.ts)\n                        \n                        \n                            EntityKey   (projects/.../resource.ts)\n                        \n                        \n                            EntitySetConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Expand   (projects/.../builder.ts)\n                        \n                        \n                            ExpandExpressionBuilder   (projects/.../expand.ts)\n                        \n                        \n                            ExpandObject   (projects/.../builder.ts)\n                        \n                        \n                            ExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ExpandType   (projects/.../builder.ts)\n                        \n                        \n                            FetchPolicy   (projects/.../types.ts)\n                        \n                        \n                            Filter   (projects/.../builder.ts)\n                        \n                        \n                            FilterConnector   (projects/.../filter.ts)\n                        \n                        \n                            FilterExpressionBuilder   (projects/.../filter.ts)\n                        \n                        \n                            FilterType   (projects/.../builder.ts)\n                        \n                        \n                            GroupBy   (projects/.../builder.ts)\n                        \n                        \n                            JsonSchemaCustom   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaExpand   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaOptions   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaRequired   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaSelect   (projects/.../structured-type.ts)\n                        \n                        \n                            ModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ModelOptions   (projects/.../options.ts)\n                        \n                        \n                            NestedExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            NestedOrderBy   (projects/.../builder.ts)\n                        \n                        \n                            ODataActionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataContext   (projects/.../helper.ts)\n                        \n                        \n                            ODataEntities   (projects/.../types.ts)\n                        \n                        \n                            ODataEntitiesOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataEntity   (projects/.../types.ts)\n                        \n                        \n                            ODataEntityOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataFunctionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataMetadataType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEntry   (projects/.../options.ts)\n                        \n                        \n                            ODataModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataProperty   (projects/.../types.ts)\n                        \n                        \n                            ODataPropertyOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArguments   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArgumentsOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataSegment   (projects/.../segments.ts)\n                        \n                        \n                            ODataVersion   (projects/.../types.ts)\n                        \n                        \n                            OrderBy   (projects/.../builder.ts)\n                        \n                        \n                            OrderByExpressionBuilder   (projects/.../orderby.ts)\n                        \n                        \n                            OrderByObject   (projects/.../builder.ts)\n                        \n                        \n                            OrderByType   (projects/.../builder.ts)\n                        \n                        \n                            Parameter   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomType   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptions   (projects/.../builder.ts)\n                        \n                        \n                            SchemaConfig   (projects/.../types.ts)\n                        \n                        \n                            SearchConnector   (projects/.../search.ts)\n                        \n                        \n                            SearchExpressionBuilder   (projects/.../search.ts)\n                        \n                        \n                            Select   (projects/.../builder.ts)\n                        \n                        \n                            SelectExpressionBuilder   (projects/.../select.ts)\n                        \n                        \n                            SelectType   (projects/.../builder.ts)\n                        \n                        \n                            StructuredTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            StructuredTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Transform   (projects/.../builder.ts)\n                        \n                        \n                            Unpacked   (projects/.../builder.ts)\n                        \n                        \n                            Value   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Expand\n                \n            \n            \n                \n                        ExpandType | ExpandType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandObject\n                \n            \n            \n                \n                         | NestedExpandOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandType\n                \n            \n            \n                \n                        string | ExpandObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        FilterType | FilterType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GroupBy\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedExpandOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedOrderBy\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderBy\n                \n            \n            \n                \n                        OrderByType | OrderByType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByObject\n                \n            \n            \n                \n                         |  | NestedOrderBy\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByType\n                \n            \n            \n                \n                        string | OrderByObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryCustomType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Select\n                \n            \n            \n                \n                        SelectType | SelectType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectType\n                \n            \n            \n                \n                        string | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Transform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Unpacked\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Value\n                \n            \n            \n                \n                            string | Date | number | boolean | QueryCustomType\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnnotationConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheCacheability\n                \n            \n            \n                \n                        \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallableConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityContainerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySetConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FetchPolicy\n                \n            \n            \n                \n                        \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataMetadataType\n                \n            \n            \n                \n                        \"minimal\" | \"full\" | \"none\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataVersion\n                \n            \n            \n                \n                        \"2.0\" | \"3.0\" | \"4.0\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n    \n    \n        \n            \n                \n                    \n                    ComputeExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/count.ts\n    \n    \n        \n            \n                \n                    \n                    CountExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/durations.ts\n    \n    \n        \n            \n                \n                    \n                    Duration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/resource.ts\n    \n    \n        \n            \n                \n                    \n                    EntityKey\n                \n            \n            \n                \n                             | QueryCustomType | string | number\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n    \n    \n        \n            \n                \n                    \n                    ExpandExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/filter.ts\n    \n    \n        \n            \n                \n                    \n                    FilterConnector\n                \n            \n            \n                \n                        \"and\" | \"or\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n    \n    \n        \n            \n                \n                    \n                    JsonSchemaCustom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaExpand\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaSelect\n                \n            \n            \n                \n                        Array\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n    \n        \n            \n                \n                    \n                    ModelFieldOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEntry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelFieldOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/types/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataActionOptions\n                \n            \n            \n                \n                            ODataQueryArgumentsOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntitiesOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntityOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataFunctionOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataPropertyOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataQueryArgumentsOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/helper.ts\n    \n    \n        \n            \n                \n                    \n                    ODataContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/responses/types.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntities\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataProperty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataQueryArguments\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n    \n        \n            \n                \n                    \n                    ODataSegment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n    \n    \n        \n            \n                \n                    \n                    OrderByExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/search.ts\n    \n    \n        \n            \n                \n                    \n                    SearchConnector\n                \n            \n            \n                \n                        \"AND\" | \"OR\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SearchExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/select.ts\n    \n    \n        \n            \n                \n                    \n                    SelectExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
